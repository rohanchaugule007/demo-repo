-- contains all the procedures present in the reinsurance database for payments 
-- and others 


-- added a new branch and testing the branch
USE [IDS_Reinsurance]
GO
/****** Object:  StoredProcedure [dbo].[AMPL_MRA_INFORCE_T1]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[AMPL_MRA_INFORCE_T1](@Census_Date date)
AS
begin
SELECT 
      PARTY_KEY=[PARTY_KEY]
      ,CONTRACT_KEY = i.[CONTRACT_KEY]
      ,CONTRACT_RISK_KEY = i.[CONTRACT_RISK_KEY]
      ,CONTRACT_ID = i.[CONTRACT_ID]
      ,FIRST_NAME = replace(nullif([FIRST_NAME],''),',',' ')
      ,MIDDLE_NAME = replace(nullif([MIDDLE_NAME],''),',',' ')
      ,SURNAME = replace(nullif([SURNAME],''),',',' ')
      ,GENDER_CODE = isnull([GENDER_CODE],'NA')
      ,DOB = [DOB]
      ,CONTRACT_START_DATE = [CONTRACT_START_DATE]
      ,PRODUCT_CODE = i.[PRODUCT_CODE]
      ,PRODUCT_OPTION_CODE = Case i.[PRODUCT_OPTION_CODE]
		When 'IPAG' Then 'IPA'
		When 'IPBG' Then 'IPB'
		Else i.PRODUCT_OPTION_CODE
		End
      ,PRODUCT_OPT_GROUP_DESC = Case i.[PRODUCT_OPT_GROUP_DESC]
		When 'BE' Then 'BOI'
		When 'BS' Then 'Business Safeguard Benefit'
		When 'DTH' Then 'Death'
		When 'DTH/TRAUMA' Then 'Death/Trauma'
		When 'DTH/TPD' Then 'Death/TPD'
		When 'TRAUMA' Then 'Trauma'
		When 'WP' Then 'Waiver Benefit'
		When 'WB' Then 'Waiver Benefit'
		Else i.PRODUCT_OPT_GROUP_DESC
		End
      ,RISK_START_DATE = [RISK_START_DATE]
      ,[ILLNESS_PAY_PERIOD] = Case When i.PRODUCT_OPT_GROUP_DESC not in ('TSC','IP','BE') Then 0 
	    When SICKNESS_BENEFIT_PERIOD = 'AL' Then 99
		When SICKNESS_BENEFIT_PERIOD like 'A%' Then convert(int,substring(SICKNESS_BENEFIT_PERIOD,2,2))
		When SICKNESS_BENEFIT_PERIOD like 'M%' Then convert(int,substring(SICKNESS_BENEFIT_PERIOD,2,2)/12)
		Else 0 End
	  ,[INJURY_PAY_PERIOD] = Case When i.PRODUCT_OPT_GROUP_DESC not in ('TSC','IP','BE') Then 0 
	    When INJURY_BENEFIT_PERIOD = 'AL' Then 99
		When INJURY_BENEFIT_PERIOD like 'A%' Then convert(int,substring(INJURY_BENEFIT_PERIOD,2,2))
		When INJURY_BENEFIT_PERIOD like 'M%' Then convert(int,substring(INJURY_BENEFIT_PERIOD,2,2)/12)
		Else 0 End
      ,EXPIRY = [RISK_EXPR_DATE]
      ,SMOKER_STATUS_CODE = isnull([SMOKER_STATUS_CODE],'NA')
      ,SDUTY_STATE_CODE = SDUTY_STATE_CODE
      ,POST_CODE = POST_CODE
      ,OCUPTN_CLASS_CODE = OCUPTN_CLASS_CODE
      ,CLASS_OF_BUSN_CODE = [CLASS_OF_BUSN_CODE]
      ,STEP_LVL_PREM_CODE= CASE
		WHEN i.PRODUCT_CODE in ('YRTN','YRTS') Then STEP_LVL_PREM_CODE
		WHEN i.PRODUCT_OPT_GROUP_DESC = 'WP' Then Null
		Else STEP_LVL_PREM_CODE
		End
      ,PREM_FREQ = [PREM_FREQ]
      ,RISK_CMSN_TYPE_CODE = isnull(RISK_CMSN_TYPE_CODE,'NA')

	   ,[SUM_INSURED_AMT] = Convert(decimal (18,2),CASE
		When PRODUCT_OPT_GROUP_DESC = 'WB' Then Round(SUM(Case when PRODUCT_OPT_GROUP_DESC = 'TSC' Then 0 Else ANNUAL_PREM End) over (Partition by Contract_key),2)
		When PRODUCT_OPT_GROUP_DESC = 'WP' Then Round(SUM(ANNUAL_PREM) over (Partition by Contract_key),2)
		When PRODUCT_OPT_GROUP_DESC = 'TSC' Then Round(12 * SUM_INSURED_AMT,2)
		When PRODUCT_OPT_GROUP_DESC in ('IP','BE') Then Round(Case SUM_INSRD_FREQ_CODE When 'WKL' Then 52.18 When 'MNTH' Then 12 Else 1 End * SUM_INSURED_AMT,2)
		When i.PRODUCT_SYSTEM_CODE = 'OR' and i.PRODUCT_OPTION_CODE in ('IDB','DLS') Then Round(AT_RISK_AMT,2)
		Else Round(SUM_INSURED_AMT,2)
		End )

		--    ,[SUM_INSURED_AMT] = CASE
		--When PRODUCT_OPT_GROUP_DESC = 'WB' Then Round(SUM(Case when PRODUCT_OPT_GROUP_DESC = 'TSC' Then 0 Else ANNUAL_PREM End) over (Partition by Contract_key),2)
		--When PRODUCT_OPT_GROUP_DESC = 'WP' Then Round(SUM(ANNUAL_PREM) over (Partition by Contract_key),2)
		--When PRODUCT_OPT_GROUP_DESC = 'TSC' Then Round(12 * SUM_INSURED_AMT,2)
		--When PRODUCT_OPT_GROUP_DESC in ('IP','BE') Then Round(Case SUM_INSRD_FREQ_CODE When 'WKL' Then 52.18 When 'MNTH' Then 12 Else 1 End * SUM_INSURED_AMT,2)
		--When PRODUCT_SYSTEM_CODE = 'OR' and PRODUCT_OPTION_CODE in ('IDB','DLS') Then Round(AT_RISK_AMT,2)
		--Else Round(SUM_INSURED_AMT,2)
		--End
      ,POLICY_FEE = Convert(decimal (18,2),isnull((ANNUAL_POL_FEE/PREM_FREQ),0))
      ,EXPLICIT_STAMP_DUTY = Convert(decimal (18,2),isnull([EXPLICIT_SDUTY_AMT],0))
      ,ANNUAL_PREM = Convert(decimal (18,2),[ANNUAL_PREM])
      ,ASSESS_CODE = nullif([ASSESS_CODE],'')
      ,SR_CODES = SR_CODES
	  ,SR_RATE = coalesce(SR_RATE,0.)
      ,SR_DISC_PC =coalesce(SR_DISC_PC,0)
      --,SR_RATE =Convert(decimal (18,2), coalesce(SR_RATE,0.))
      --,SR_DISC_PC = Convert(decimal (18,2),coalesce(SR_DISC_PC,0))
      ,ON_HOLD_STATUS_CODE = Case 
		When PRODUCT_SYSTEM_CODE <> 'DS' Then 'NA' -- Select Distinct PRODUCT_CODE From INFORCE Where PRODUCT_SYSTEM_CODE = 'DS'
		When i.PRODUCT_CODE not in ('BEC','IPA','IPB','IPC','IPD') then 'NA'
		When CharIndex('H',coalesce(OPTION_FLAGS,''))>0 Then 'Y' 
		Else 'N'
		End
      ,RISK_WAIT_PERIOD = isnull(RISK_WAIT_PERIOD,'NA')
      ,CLAIM_INDEXATION = CASE PRODUCT_OPT_GROUP_DESC
		When 'TSC' Then Case when INCR_CLAIM_OPT_PCNT > 0 Then 'Y' Else 'N' End
		When 'BE'  Then Case when INCR_CLAIM_OPT_PCNT > 0 Then 'Y' Else 'N' End 
		When 'IP'  Then Case when INCR_CLAIM_OPT_PCNT > 0 Then 'Y' Else 'N' End 
		Else 'NA'
		End 
      ,BENEFIT_INDEXATION = BENEFIT_INDEXATION
      ,INDMNTY_OPTION_CODE = isnull(INDMNTY_OPTION_CODE,'NA')
      ,DAY_1_ACCIDENT_IND = Case
		When PRODUCT_OPT_GROUP_DESC in ('BE','IP') Then Case WHen CharIndex('A',coalesce(OPTION_FLAGS,''))>0 Then 'Y' Else 'N' End
		Else 'NA'
		End
      ,AIDS_COVER_IND = isnull(AIDS_CVRG_CODE,'NA')
      ,CHRONIC_OPTION_CODE = Case i.PRODUCT_CODE When 'IPA' Then Case WHen CharIndex('C',coalesce(OPTION_FLAGS,''))>0 Then 'Y' Else 'N' End ELSE 'NA' End
      ,SUPER_CONTRB_OPT_CODE = Case 
		When PRODUCT_OPT_GROUP_DESC = 'TSC' or i.PRODUCT_CODE like 'IP%' Then Case
			When CharIndex('S',OPTION_FLAGS)>0 Then 'Y' 
			When CharIndex('U',OPTION_FLAGS)>0 Then 'U' 
			Else 'N' 
			End
		Else 'NA'
		End
      ,LINKED_BENEFIT_CODE = LINKED_BENEFIT_CODE
      ,BUYBACK_IND = Case When CharIndex('B',OPTION_FLAGS)>0 Then 'Y'  Else 'NA' End
      ,PARTIALS_IND = Case 
		When CharIndex('P',OPTION_FLAGS)>0 Then 'P' 
		When CharIndex('Q',OPTION_FLAGS)>0 Then 'PP'
		Else 'NA'
		End
      ,REINSTATE_IND = Case
		When CharIndex('R',OPTION_FLAGS)>0 Then 'Y'
		Else 'NA'
		End
      ,SUM_REINSURED_EXT = Convert(decimal (18,2),(CASE
		When PRODUCT_OPT_GROUP_DESC = 'WB' Then SUM(Case when PRODUCT_OPT_GROUP_DESC = 'TSC' Then 0 Else ANNUAL_PREM End) over (Partition by Contract_key)
		When PRODUCT_OPT_GROUP_DESC = 'WP' Then SUM(ANNUAL_PREM) over (Partition by Contract_key)
		When PRODUCT_OPT_GROUP_DESC = 'TSC' Then 12 * SUM_INSURED_AMT
		When PRODUCT_OPT_GROUP_DESC in ('IP','BE') Then Case SUM_INSRD_FREQ_CODE When 'WKL' Then 52.18 When 'MNTH' Then 12 Else 1 End * SUM_INSURED_AMT
		When PRODUCT_SYSTEM_CODE = 'OR' and i.PRODUCT_OPTION_CODE in ('IDB','DLS') Then AT_RISK_AMT
		Else SUM_INSURED_AMT
		End * SS_PC / 100.))
	  ,QS_SUM_REINSURED = Convert(decimal (18,2),(CASE
		When PRODUCT_OPT_GROUP_DESC = 'WB' Then SUM(Case when PRODUCT_OPT_GROUP_DESC = 'TSC' Then 0 Else ANNUAL_PREM End) over (Partition by Contract_key)
		When PRODUCT_OPT_GROUP_DESC = 'WP' Then SUM(ANNUAL_PREM) over (Partition by Contract_key)
		When PRODUCT_OPT_GROUP_DESC = 'TSC' Then 12 * SUM_INSURED_AMT
		When PRODUCT_OPT_GROUP_DESC in ('IP','BE') Then Case SUM_INSRD_FREQ_CODE When 'WKL' Then 52.18 When 'MNTH' Then 12 Else 1 End * SUM_INSURED_AMT
		When PRODUCT_SYSTEM_CODE = 'OR' and i.PRODUCT_OPTION_CODE in ('IDB','DLS') Then AT_RISK_AMT
		Else SUM_INSURED_AMT
		End * (QS_PC_BASE + QS_PC_INCR + QS_PC_CONV) / 100.))
	  ,QS_GROSS_REINS_PREM = Convert(decimal (18,2),(ANNUAL_PREM * (QS_PC_BASE + QS_PC_INCR + QS_PC_CONV) / 100.))
      ,QS_NET_REINS_PREM = Convert(decimal (18,2),(ANNUAL_PREM * (QS_PC_BASE + QS_PC_INCR + QS_PC_CONV) / 100. * (10000. - QS_OC_PC_BASE * QS_PC_BASE - QS_OC_PC_INCR * QS_PC_INCR - QS_OC_PC_CONV * QS_PC_CONV)/10000. ))
      ,REINS_COMM_INFORCE_INITIAL = Convert(decimal (18,2),Case when i.PROJECTION_GROUP like '%_INF' Then ISNULL(iad.[QS_AMT_IC_BASE], i.[QS_AMT_IC_BASE]) Else 0 End)
      ,REINS_COMM_NB_INITIAL = Convert(decimal (18,2),Case when i.PROJECTION_GROUP like '%_NB' Then ISNULL(iad.[QS_AMT_IC_BASE], i.[QS_AMT_IC_BASE]) Else 0 End + ISNULL(iad.[QS_AMT_IC_INCR], i.[QS_AMT_IC_INCR]) + ISNULL(iad.[QS_AMT_OCX_CURR], i.[QS_AMT_OCX_CURR]) + ISNULL(iad.[QS_AMT_OCX_BCKD], i.[QS_AMT_OCX_BCKD]))
      ,REINS_COMM_INFORCE_ONGOING = Convert(decimal (18,2),Case when i.PROJECTION_GROUP like '%_INF' Then ISNULL(iad.[QS_AMT_OC_CURR], i.[QS_AMT_OC_CURR]) Else 0 End)
      ,REINS_COMM_NB_ONGOING = Convert(decimal (18,2),Case when i.PROJECTION_GROUP like '%_NB' Then ISNULL(iad.[QS_AMT_OC_CURR], i.[QS_AMT_OC_CURR]) Else 0 End)
 	  ,UNDERWRITING_CATEGORY = UNDERWRITING_CATEGORY
      ,[CENSUS_DATE] = i.CENSUS_DATE
	  ,[MP] = MP
	  ,[REINS_LIFE_IDENTIFIER]

  FROM [INFORCE] AS i WITH(nolock)
	LEFT JOIN dbo.Inforce_Adjusted AS ia
	ON ia.Census_Date = i.CENSUS_DATE
	LEFT JOIN dbo.Inforce_Adjusted_Detail AS iad
	ON iad.CONTRACT_ID = i.CONTRACT_ID
	AND iad.CONTRACT_RISK_KEY = i.CONTRACT_RISK_KEY
	LEFT JOIN dbo.Ref_Adjustment_Type AS rat
	ON rat.Ref_Adjustment_Type_Id = iad.ADJUSTMENT_TYPE_ID
  Where
	i.CENSUS_DATE = @Census_Date 
	AND i.PRODUCT_SYSTEM_CODE in ('DS','U2','CP','OR')
	
	AND (rat.Ref_Adjustment_Type_Id IS NULL OR rat.Code <> 'FILTER')

end
GO
/****** Object:  StoredProcedure [dbo].[Ini_AttributionAnalysis]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ====================================================================
-- Author:  TJNKIQ
-- Create date: May 2020
-- Description: Calculate the Surplus (SS) information for INFORCE_TEMP
-- ====================================================================


CREATE PROCEDURE [dbo].[Ini_AttributionAnalysis] @CENSUS_DATE datetime
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--DECLARE @CURR_DATE Date = '31-DEC-2018'

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	DECLARE @SQLDELETE nvarchar(MAx) = ''

	Begin Try
	Begin Tran Load_Analysis
	
	--Delete any exisiting records for the census date
	--Delete from Analysis where CENSUS_DATE = @CENSUS_DATE
	--

	Set @DeleteRowCount = @@ROWCOUNT

	Select 
		CENSUS_DATE = @CENSUS_DATE
		, FROM_CATEGORY = isnull(PREV.COMMENT, 'Not Present')
		, TO_CATEGORY   = isnull(CURR.COMMENT, 'Not Present')
		,CONTRACT_KEY = coalesce(CURR.CONTRACT_KEY, PREV.CONTRACT_KEY)
		,PARTY_KEY = coalesce(CURR.PARTY_KEY, PREV.PARTY_KEY)
		,CONTRACT_RISK_KEY = coalesce(CURR.Contract_Risk_key, PREV.Contract_Risk_key)
		,[MOVEMENT] = Case 
			When CURR.COMMENT is NULL Then 'OFF MOVEMENTS'
			WHEN PREV.COMMENT is NULL Then 'ON MOVEMENTS'
			Else 'INFORCE MOVEMENTS'
		End
		, CONTRACT_ID= coalesce(CURR.CONTRACT_ID, PREV.CONTRACT_ID)
		, PRODUCT_SYSTEM_CODE= coalesce(CURR.PRODUCT_SYSTEM_CODE, PREV.PRODUCT_SYSTEM_CODE)
		, PRODUCT_CODE= coalesce(CURR.PRODUCT_CODE, PREV.PRODUCT_CODE)
		, PRODUCT_OPTION_CODE= coalesce(CURR.PRODUCT_OPTION_CODE, PREV.PRODUCT_OPTION_CODE)
		, PRODUCT_OPT_GROUP_DESC= coalesce(CURR.PRODUCT_OPT_GROUP_DESC, PREV.PRODUCT_OPT_GROUP_DESC)
		, CLASS_OF_BUSN_CODE= coalesce(CURR.CLASS_OF_BUSN_CODE, PREV.CLASS_OF_BUSN_CODE)
		, RISK_START_DATE= curr.RISK_START_DATE
		, CURR_SS_PC = CURR.SS_PC
		, PREV_SS_PC = PREV.SS_PC
		, CURR_RETAINED_PC = 100 - CURR.QS_PC_BASE - CURR.QS_PC_CONV - CURR.QS_PC_INCR - CURR.SS_PC
		,PREV_RETAINED_PC = 100 - PREV.QS_PC_BASE - PREV.QS_PC_CONV - PREV.QS_PC_INCR - PREV.SS_PC
		,RETAINED_COVER = Case 				
			When CURR.PRODUCT_OPT_GROUP_DESC in ('IP','TSC','BE') Then CURR.ANN_PHI_BEN
			When CURR.PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') Then CURR.TPD_SUM_ASSD
			When CURR.PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then CURR.CC_SUM_ASSD
			When CURR.PRODUCT_OPT_GROUP_DESC = 'DTH'  Then CURR.DTH_SUM_ASSD
			End * (100 - CURR.QS_PC_BASE - CURR.QS_PC_CONV - CURR.QS_PC_INCR - CURR.SS_PC)/100.

		--,RECORDS = (1)
		,PREV_SUM_INSURED = (PREV.SUM_INSURED_AMT)
		,CURR_SUM_INSURED = (CURR.SUM_INSURED_AMT)
		,PREV_PREMIUM = (PREV.ANNUAL_PREM)
		,CURR_PREMIUM = (CURR.ANNUAL_PREM)
		,PREV_COMMENT = PREV.COMMENT 
		,CURR_COMMENT = CURR.COMMENT
		,CURR_CONTRACT_KEY = CURR.CONTRACT_KEY 
		,PREV_CONTRACT_KEY = PREV.CONTRACT_KEY
		,CURR_PARTY_KEY = CURR.PARTY_KEY
		,PREV_PARTY_KEY = PREV.PARTY_KEY
		,CURR_Reins_Life_Identifier = CURR.Reins_Life_Identifier
		,PREV_Reins_Life_Identifier = PREV.Reins_Life_Identifier
		,RISK_EXPR_DATE = Case 
			WHEN PREV.RISK_EXPR_DATE IS NULL OR PREV.RISK_EXPR_DATE IS NULL  THEN cast(coalesce(CURR.RISK_START_DATE,PREV.RISK_START_DATE) as varchar(20))
			When CURR.RISK_EXPR_DATE<>PREV.RISK_EXPR_DATE Then 'CURR: ' + CAST(CURR.RISK_EXPR_DATE AS VARCHAR(20)) +'PREV: ' + CAST(PREV.RISK_EXPR_DATE AS VARCHAR(20)) 
			Else CURR.RISK_EXPR_DATE
		End
		,CPI_INCR = Case 
			WHEN PREV.CPI_INCR IS NULL OR PREV.CPI_INCR IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.CPI_INCR,PREV.CPI_INCR))
			When CURR.CPI_INCR<>PREV.CPI_INCR Then 'CURR: ' + CAST(CURR.CPI_INCR AS VARCHAR(20)) +'PREV: ' + CAST(PREV.CPI_INCR AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.CPI_INCR)
		End
		,PROJECTION_GROUP = Case 
			WHEN PREV.PROJECTION_GROUP IS NULL OR CURR.PROJECTION_GROUP IS NULL  THEN coalesce(CURR.PROJECTION_GROUP,PREV.PROJECTION_GROUP)
			When CURR.PROJECTION_GROUP<>PREV.PROJECTION_GROUP Then 'CURR: ' + CURR.PROJECTION_GROUP  +'/PREV: ' + PREV.PROJECTION_GROUP 
			Else CURR.PROJECTION_GROUP
		End
		,QS_START_DATE = Case 
			WHEN PREV.QS_START_DATE IS NULL OR CURR.QS_START_DATE IS NULL  THEN CAST(coalesce(CURR.QS_START_DATE,PREV.QS_START_DATE) AS VARCHAR)
			When CURR.QS_START_DATE<>PREV.QS_START_DATE Then 'CURR: ' + CAST(CURR.QS_START_DATE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_START_DATE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_START_DATE)
		End
		,QS_INCR_DATE = Case 
			WHEN PREV.QS_INCR_DATE IS NULL OR CURR.QS_INCR_DATE IS NULL  THEN CAST(coalesce(CURR.QS_INCR_DATE,PREV.QS_INCR_DATE) AS VARCHAR)
			When CURR.QS_INCR_DATE<>PREV.QS_INCR_DATE Then 'CURR: ' + CAST(CURR.QS_INCR_DATE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_INCR_DATE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_INCR_DATE)
		End
		,QS_CONV_DATE = Case 
			WHEN PREV.QS_CONV_DATE IS NULL OR CURR.QS_CONV_DATE IS NULL  THEN CAST(coalesce(CURR.QS_CONV_DATE,PREV.QS_CONV_DATE) AS VARCHAR)
			When CURR.QS_CONV_DATE<>PREV.QS_CONV_DATE Then 'CURR: ' + CAST(CURR.QS_CONV_DATE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_CONV_DATE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_CONV_DATE)
		End 
		,QS_PC_BASE = Case 
			WHEN PREV.QS_PC_BASE IS NULL OR CURR.QS_PC_BASE IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_PC_BASE,PREV.QS_PC_BASE))
			When CURR.QS_PC_BASE<>PREV.QS_PC_BASE Then 'CURR: ' + CAST(CURR.QS_PC_BASE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_PC_BASE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_PC_BASE)
		End
		,QS_PC_INCR = Case 
			WHEN PREV.QS_PC_INCR IS NULL OR CURR.QS_PC_INCR IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_PC_INCR,PREV.QS_PC_INCR))
			When CURR.QS_PC_INCR<>PREV.QS_PC_INCR Then 'CURR: ' + CAST(CURR.QS_PC_INCR AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_PC_INCR AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_PC_INCR)
		End
		,QS_PC_CONV = Case 
			WHEN PREV.QS_PC_CONV IS NULL OR CURR.QS_PC_CONV IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_PC_CONV,PREV.QS_PC_CONV))
			When CURR.QS_PC_CONV<>PREV.QS_PC_CONV Then 'CURR: ' + CAST(CURR.QS_PC_CONV AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_PC_CONV AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_PC_CONV)
		End
		,QS_IC_PC_BASE = Case 
			WHEN PREV.QS_IC_PC_BASE IS NULL OR PREV.QS_IC_PC_BASE IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_IC_PC_BASE,PREV.QS_IC_PC_BASE))
			When CURR.QS_IC_PC_BASE<>PREV.QS_IC_PC_BASE Then 'CURR: ' + CAST(CURR.QS_IC_PC_BASE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_IC_PC_BASE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_IC_PC_BASE)
		End
		,QS_IC_PC_INCR = Case 
			WHEN PREV.QS_IC_PC_INCR IS NULL OR CURR.QS_IC_PC_INCR IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_IC_PC_INCR,PREV.QS_IC_PC_INCR))
			When CURR.QS_IC_PC_INCR<>PREV.QS_IC_PC_INCR Then 'CURR: ' + CAST(CURR.QS_IC_PC_INCR AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_IC_PC_INCR AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_IC_PC_INCR)
		End
		,QS_IC_PC_CONV = Case 
			WHEN PREV.QS_IC_PC_CONV IS NULL OR CURR.QS_IC_PC_CONV IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_IC_PC_CONV,PREV.QS_IC_PC_CONV))
			When CURR.QS_IC_PC_CONV<>PREV.QS_IC_PC_CONV Then 'CURR: ' + CAST(CURR.QS_IC_PC_CONV AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_IC_PC_CONV AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_IC_PC_CONV)
		End
		,QS_OC_PC_BASE = Case 
			WHEN PREV.QS_OC_PC_BASE IS NULL OR CURR.QS_OC_PC_BASE IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OC_PC_BASE,PREV.QS_OC_PC_BASE))
			When CURR.QS_OC_PC_BASE<>PREV.QS_OC_PC_BASE Then 'CURR: ' + CAST(CURR.QS_OC_PC_BASE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OC_PC_BASE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OC_PC_BASE)
		End
		,QS_OC_PC_INCR = Case 
			WHEN PREV.QS_OC_PC_INCR IS NULL OR CURR.QS_OC_PC_INCR IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OC_PC_INCR,PREV.QS_OC_PC_INCR))
			When CURR.QS_OC_PC_INCR<>PREV.QS_OC_PC_INCR Then 'CURR: ' + CAST(CURR.QS_OC_PC_INCR AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OC_PC_INCR AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OC_PC_INCR)
		End
		,QS_OC_PC_CONV = Case 
			WHEN PREV.QS_OC_PC_CONV IS NULL OR CURR.QS_OC_PC_CONV IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OC_PC_CONV,PREV.QS_OC_PC_CONV))
			When CURR.QS_OC_PC_CONV<>PREV.QS_OC_PC_CONV Then 'CURR: ' + CAST(CURR.QS_OC_PC_CONV AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OC_PC_CONV AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OC_PC_CONV)
		End
		,QS_OCX_PC_BASE = Case 
			WHEN PREV.QS_OCX_PC_BASE IS NULL OR CURR.QS_OCX_PC_BASE IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OCX_PC_BASE,PREV.QS_OCX_PC_BASE))
			When CURR.QS_OCX_PC_BASE<>PREV.QS_OCX_PC_BASE Then 'CURR: ' + CAST(CURR.QS_OCX_PC_BASE AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OCX_PC_BASE AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OCX_PC_BASE)
		End
		,QS_OCX_PC_INCR = Case 
			WHEN PREV.QS_OCX_PC_INCR IS NULL OR CURR.QS_OCX_PC_INCR IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OCX_PC_INCR,PREV.QS_OCX_PC_INCR))
			When CURR.QS_OCX_PC_INCR<>PREV.QS_OCX_PC_INCR Then 'CURR: ' + CAST(CURR.QS_OCX_PC_INCR AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OCX_PC_INCR AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OCX_PC_INCR)
		End
		,QS_OCX_PC_CONV = Case 
			WHEN PREV.QS_OCX_PC_CONV IS NULL OR CURR.QS_OCX_PC_CONV IS NULL  THEN CONVERT(VARCHAR,coalesce(CURR.QS_OCX_PC_CONV,PREV.QS_OCX_PC_CONV))
			When CURR.QS_OCX_PC_CONV<>PREV.QS_OCX_PC_CONV Then 'CURR: ' + CAST(CURR.QS_OCX_PC_CONV AS VARCHAR(20)) +'/PREV: ' + CAST(PREV.QS_OCX_PC_CONV AS VARCHAR(20)) 
			Else CONVERT(VARCHAR,CURR.QS_OCX_PC_CONV)
		End
		, CURR_QS_ANN_PREM_IF = isnull(CONVERT(VARCHAR,CURR.QS_ANN_PREM_IF), 'Not Present')
		, PREV_QS_ANN_PREM_IF = isnull(CONVERT(VARCHAR,PREV.QS_ANN_PREM_IF), 'Not Present')
		, CURR_QS_GAP_MONTHS = isnull(CONVERT(VARCHAR,CURR.QS_GAP_MONTHS), 'Not Present')
		, PREV_QS_GAP_MONTHS = isnull(CONVERT(VARCHAR,PREV.QS_GAP_MONTHS), 'Not Present')
		, CURR_QS_AMT_REINP_CURR = isnull(CONVERT(VARCHAR,CURR.QS_AMT_REINP_CURR), 'Not Present')
		, PREV_QS_AMT_REINP_CURR = isnull(CONVERT(VARCHAR,PREV.QS_AMT_REINP_CURR), 'Not Present')
		, CURR_QS_AMT_REINP_BCKD = isnull(CONVERT(VARCHAR,CURR.QS_AMT_REINP_BCKD), 'Not Present')
		, PREV_QS_AMT_REINP_BCKD = isnull(CONVERT(VARCHAR,PREV.QS_AMT_REINP_BCKD), 'Not Present')
		, Updated_Rec_Indicator =0, Reinstatement_Change = 'NO CHANGE',Product_list_Change = 'NO CHANGE'
		, Load_Value_Change = 'NO CHANGE', Commission_Rate_Change = 'NO CHANGE',
		Reins_Life_Identifier_Change = Case when PREV.Reins_Life_Identifier=CURR.Reins_Life_Identifier then 'NO CHANGE'
											ELSE 'ReinsLifeIdentifierUpdated' End
		,SS_PC_Change = Case when CURR.SS_PC=PREV.SS_PC THEN 'NO CHANGE'
							 ELSE 'VERIFY' END
		, Other_Change = 'NO CHANGE',
		COMMENT_MISMATCH=NULL,PROJECTION_GROUP_MISMATCH = NULL
		,COVER =  Case 
						when ((isnull(CURR.SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(CURR.INJURY_BENEFIT_PERIOD,'') like 'A%')) 
							and CURR.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
						when CURR.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and CURR.SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
							and CURR.INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or CURR.PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
						when CURR.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
						when CURR.PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
						when CURR.PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
						when CURR.PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
						else 'Excluded'
					 End 
		,PREV_COVER =  Case 
								when ((isnull(PREV.SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(PREV.INJURY_BENEFIT_PERIOD,'') like 'A%')) 
									and PREV.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
								when PREV.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and PREV.SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
									and PREV.INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PREV.PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
								when PREV.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
								when PREV.PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
								when PREV.PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
								when PREV.PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
								else 'Excluded'
					End 
	into #temp_analysis
	FROM (Select * FROM [IDS_Reinsurance].dbo.INFORCE WHERE CENSUS_DATE = @CENSUS_DATE and qs_treaty_id not in (-1,-3)) as CURR 
		FULL OUTER JOIN 
		 (Select * FROM [dbo].[Inforce_hist_QSRerun] WHERE CENSUS_DATE=@CENSUS_DATE) As PREV 
		on CURR.CONTRACT_RISK_KEY = PREV.CONTRACT_RISK_KEY 
	
Print 'step 1 completed'
	Update #temp_analysis
	set Updated_Rec_Indicator = 1 
	where MOVEMENT <> 'INFORCE MOVEMENTS' or 
	(FROM_CATEGORY<> TO_CATEGORY OR CURR_SS_PC<>PREV_SS_PC OR CURR_RETAINED_PC<>PREV_RETAINED_PC OR PREV_SUM_INSURED<> CURR_SUM_INSURED OR 
	PREV_PREMIUM<> CURR_PREMIUM OR PREV_COMMENT<> CURR_COMMENT OR CURR_CONTRACT_KEY<> PREV_CONTRACT_KEY OR CURR_PARTY_KEY <> PREV_PARTY_KEY 
	OR CURR_Reins_Life_Identifier<> PREV_Reins_Life_Identifier OR RISK_EXPR_DATE LIKE '%/PREV:%' OR CPI_INCR LIKE '%/PREV:%' 
	OR PROJECTION_GROUP LIKE '%/PREV:%' OR QS_START_DATE LIKE '%/PREV:%' OR QS_INCR_DATE LIKE '%/PREV:%' OR QS_CONV_DATE LIKE '%/PREV:%' OR QS_PC_BASE LIKE '%/PREV:%' OR
	QS_PC_INCR LIKE '%/PREV:%' OR QS_PC_CONV LIKE '%/PREV:%' OR QS_IC_PC_BASE LIKE '%/PREV:%' OR QS_IC_PC_INCR LIKE '%/PREV:%' OR QS_IC_PC_CONV LIKE '%/PREV:%' OR 
	QS_OC_PC_BASE LIKE '%/PREV:%' OR QS_OC_PC_INCR LIKE '%/PREV:%' OR QS_OC_PC_CONV LIKE '%/PREV:%' OR QS_OCX_PC_BASE LIKE '%/PREV:%' OR QS_OCX_PC_INCR LIKE '%/PREV:%' OR 
	QS_OCX_PC_CONV LIKE '%/PREV:%' OR CURR_QS_ANN_PREM_IF<>PREV_QS_ANN_PREM_IF OR CURR_QS_GAP_MONTHS<>PREV_QS_GAP_MONTHS OR CURR_QS_AMT_REINP_CURR<> PREV_QS_AMT_REINP_CURR OR 
	CURR_QS_AMT_REINP_BCKD<>PREV_QS_AMT_REINP_BCKD )
--Print 'step 2 completed'
--Product List Validation
	Update T
	set Product_list_Change = Case when b.TREATY_ID=-1 THEN 'Excluded'
								   when b.TREATY_ID<>-1 THEN 'Validate'
							  End 
	from #temp_analysis T,Reins_Treaty_Product b where T.Updated_Rec_Indicator = 1 and T.TO_CATEGORY = 'Not Present' 
and T.PRODUCT_SYSTEM_CODE=b.Product_System_Code and T.PRODUCT_CODE=b.Product_Code and T.PRODUCT_OPTION_CODE=b.Product_Option_Code
Print 'step 3 completed'
	Update #temp_analysis
	set Product_list_Change = 'Validate'
	from #temp_analysis T where Updated_Rec_Indicator = 1 and T.FROM_CATEGORY = 'Not Present' 
Print 'Product List Validation completed'

 
DECLARE @SQL nvarchar(max) = N'Insert into [dbo].[Rerun_Analysis] (CENSUS_DATE,FROM_CATEGORY,TO_CATEGORY,CONTRACT_KEY,PARTY_KEY,CONTRACT_RISK_KEY,MOVEMENT,
CONTRACT_ID,PRODUCT_SYSTEM_CODE,PRODUCT_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC,CLASS_OF_BUSN_CODE,RISK_START_DATE,CURR_SS_PC,PREV_SS_PC,CURR_RETAINED_PC,PREV_RETAINED_PC,
RETAINED_COVER,PREV_SUM_INSURED,CURR_SUM_INSURED,PREV_PREMIUM,CURR_PREMIUM,PREV_COMMENT,CURR_COMMENT,CURR_CONTRACT_KEY,PREV_CONTRACT_KEY,
CURR_PARTY_KEY,PREV_PARTY_KEY,CURR_Reins_Life_Identifier,PREV_Reins_Life_Identifier,RISK_EXPR_DATE,CPI_INCR,PROJECTION_GROUP,QS_START_DATE,
QS_INCR_DATE,QS_CONV_DATE,QS_PC_BASE,QS_PC_INCR,QS_PC_CONV,QS_IC_PC_BASE,QS_IC_PC_INCR,QS_IC_PC_CONV,QS_OC_PC_BASE,QS_OC_PC_INCR,QS_OC_PC_CONV,
QS_OCX_PC_BASE,QS_OCX_PC_INCR,QS_OCX_PC_CONV,CURR_QS_ANN_PREM_IF,PREV_QS_ANN_PREM_IF,CURR_QS_GAP_MONTHS,PREV_QS_GAP_MONTHS,CURR_QS_AMT_REINP_CURR,
PREV_QS_AMT_REINP_CURR,CURR_QS_AMT_REINP_BCKD,PREV_QS_AMT_REINP_BCKD,Updated_Rec_Indicator,Reinstatement_Change,Product_list_Change,Load_Value_Change,
Commission_Rate_Change,Reins_Life_Identifier_Change,SS_PC_Change,Other_Change,COMMENT_MISMATCH,PROJECTION_GROUP_MISMATCH
,COVER,PREV_COVER)  
Select CENSUS_DATE,FROM_CATEGORY,TO_CATEGORY,CONTRACT_KEY,PARTY_KEY,CONTRACT_RISK_KEY,MOVEMENT,CONTRACT_ID,PRODUCT_SYSTEM_CODE,PRODUCT_CODE,
PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC,CLASS_OF_BUSN_CODE,RISK_START_DATE,CURR_SS_PC,PREV_SS_PC,CURR_RETAINED_PC,PREV_RETAINED_PC,RETAINED_COVER,PREV_SUM_INSURED,CURR_SUM_INSURED,
PREV_PREMIUM,CURR_PREMIUM,PREV_COMMENT,CURR_COMMENT,CURR_CONTRACT_KEY,PREV_CONTRACT_KEY,CURR_PARTY_KEY,PREV_PARTY_KEY,CURR_Reins_Life_Identifier,
PREV_Reins_Life_Identifier,RISK_EXPR_DATE,CPI_INCR,PROJECTION_GROUP,QS_START_DATE,QS_INCR_DATE,QS_CONV_DATE,QS_PC_BASE,QS_PC_INCR,QS_PC_CONV,
QS_IC_PC_BASE,QS_IC_PC_INCR,QS_IC_PC_CONV,QS_OC_PC_BASE,QS_OC_PC_INCR,QS_OC_PC_CONV,QS_OCX_PC_BASE,QS_OCX_PC_INCR,QS_OCX_PC_CONV,CURR_QS_ANN_PREM_IF,
PREV_QS_ANN_PREM_IF,CURR_QS_GAP_MONTHS,PREV_QS_GAP_MONTHS,CURR_QS_AMT_REINP_CURR,PREV_QS_AMT_REINP_CURR,CURR_QS_AMT_REINP_BCKD,PREV_QS_AMT_REINP_BCKD,
Updated_Rec_Indicator,Reinstatement_Change,Product_list_Change,Load_Value_Change,Commission_Rate_Change,Reins_Life_Identifier_Change,SS_PC_Change,
Other_Change,COMMENT_MISMATCH,PROJECTION_GROUP_MISMATCH,COVER,PREV_COVER 
FROM #temp_analysis where  Updated_Rec_Indicator=1'
     --  PRINT @SQL
--PRINT 'Insert Table-Rerun_Analysis Completed'
EXECUTE sp_executesql @SQL
SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
print @InsertRowCount
Print 'Records Inserted into Rerun_Analysis for the Census Date - ' + cast(@census_date as varchar)
Drop table #temp_analysis
Commit Tran Load_Analysis

Begin Tran InsertToAnalysis


Update [dbo].[Rerun_Analysis] 
set PROJECTION_GROUP_MISMATCH = CASE WHEN PROJECTION_GROUP NOT like '%CURR:%' THEN 'PROJECTION_GROUP MATCH'
									 WHEN PROJECTION_GROUP  like '%CURR:%' And PRODUCT_OPTION_CODE = 'CBO' THEN 'CBO UPDATE: LS to IP'
									 WHEN PROJECTION_GROUP  like '%CURR:%' And FROM_CATEGORY= TO_CATEGORY THEN 'ISSUE'
									 WHEN PROJECTION_GROUP  like '%CURR:%' AND FROM_CATEGORY= 'REINSTATED INTO TREATY AT START' AND TO_CATEGORY IN ('NEW BUSINESS IN CURRENT MONTH','CONVERSION WITH INCR','CONVERSION','ONGOING') THEN 'VALID:REINSTATEMENT FIX'
							    ELSE 'VERIFY' END 
WHERE CENSUS_DATE = @CENSUS_DATE

Print 'PROJECTION GROUP CHECK COMPLETED'

Update [dbo].[Rerun_Analysis] 
set COMMENT_MISMATCH = CASE WHEN FROM_CATEGORY=TO_CATEGORY THEN 'MOVEMENT MATCH'
							WHEN (FROM_CATEGORY= 'REINSTATED INTO TREATY AT START' AND TO_CATEGORY = 'NEW BUSINESS IN CURRENT MONTH') and RISK_START_DATE<'2017-11-01' and @CENSUS_DATE>'2018-10-31' THEN 'INF Benefit After 2Mnths'
							WHEN FROM_CATEGORY= 'REINSTATED INTO TREATY AT START' AND TO_CATEGORY = 'ONGOING' THEN 'EXISTING BENEFIT:NEW CRK'
							WHEN FROM_CATEGORY='Not Present'   THEN 'New Benefit'
							WHEN TO_CATEGORY ='Not Present'   THEN 'Benefit Removed'
							WHEN FROM_CATEGORY IN ('NEW BUSINESS IN CURRENT MONTH','REINSTATED INTO TREATY AT START') and TO_CATEGORY in ('CONVERSION','CONVERSION WITH INCR','RESTRUCTURE','RESTRUCTURE WITH INCR')   THEN 'NB-CONV:REINS Fix'
							WHEN FROM_CATEGORY='RESTRUCTURE WITH INCR' and to_category='NEW BUSINESS IN CURRENT MONTH' THEN 'VERIFY'
							WHEN FROM_CATEGORY='REDUCTION' and to_category='ONGOING' THEN 'VERIFY'
							WHEN FROM_CATEGORY='ONGOING' and to_category='REDUCTION' THEN 'VERIFY'
							WHEN FROM_CATEGORY='ONGOING' and to_category='AUTOMATIC INCREASE' THEN 'VERIFY'
							WHEN FROM_CATEGORY='AUTOMATIC INCREASE' and to_category='ONGOING' THEN 'VERIFY'
							WHEN FROM_CATEGORY='VOLUNTARY INCREASE' and to_category='AUTOMATIC INCREASE' THEN 'VI-CPI:VERIFY'
							WHEN FROM_CATEGORY='AUTOMATIC INCREASE' and to_category='VOLUNTARY INCREASE' THEN 'CPI-VI:VERIFY'
						ELSE 'VERIFY' END 
WHERE CENSUS_DATE = @CENSUS_DATE

Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 SET COMMENT_MISMATCH = 'IMPACTED BY PREV MONTH'
 where census_date =@CENSUS_DATE and COMMENT_MISMATCH LIKE '%VERIFY%' and 
 contract_risk_key in (select contract_risk_key from [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 where census_date <@CENSUS_DATE and 
 ss_pc_change in ('INF BenefitAfter2Mths','EXISTING BENEFIT:NEW CRK','New Benefit','Benefit Removed','NB-CONV:REINS Fix','VERIFY','VI-CPI:VERIFY','CPI-VI:VERIFY'))

PRINT 'MOVEMENT CHECK COMPLETED'


Update [IDS_Reinsurance].[dbo].[Rerun_Analysis]  
set Reinstatement_Change = CASE WHEN FROM_CATEGORY= TO_CATEGORY THEN 'NO CHANGE'
								WHEN FROM_CATEGORY='REINSTATED INTO TREATY AT START' and TO_CATEGORY ='NEW BUSINESS IN CURRENT MONTH' AND RISK_START_DATE<'2017-10-31' and @CENSUS_DATE>'2018-10-31' THEN 'Reinstatement 1'
								WHEN FROM_CATEGORY='REINSTATED INTO TREATY AT START' and TO_CATEGORY ='ONGOING' THEN 'VERIFY 1'
								WHEN FROM_CATEGORY='NEW BUSINESS IN CURRENT MONTH' and TO_CATEGORY ='ONGOING' THEN 'VERIFY 2'
								WHEN FROM_CATEGORY NOT IN ('CONVERSION') and TO_CATEGORY ='CONVERSION' AND PRODUCT_SYSTEM_CODE='CP' AND PRODUCT_OPT_GROUP_DESC='RDB' THEN 'CP CONVERSION'
								WHEN FROM_CATEGORY NOT IN ('CONVERSION') and TO_CATEGORY NOT IN ('CONVERSION') AND PRODUCT_SYSTEM_CODE='CP' AND PRODUCT_OPT_GROUP_DESC='RDB' THEN 'CP Error'
						   ELSE 'VERIFY' END
where CENSUS_DATE = @CENSUS_DATE --and Updated_Rec_Indicator=1 

Update [dbo].[Rerun_Analysis]
SET Reinstatement_Change = CONCAT(Reinstatement_Change,'-','Lapse')
WHERE census_date =@CENSUS_DATE and Reinstatement_Change NOT IN ('No Change','CP CONVERSION','CP Error')
AND CONTRACT_RISK_KEY NOT IN (SELECT CONTRACT_RISK_KEY FROM LAPSED WHERE REINSTATEMENT_DATE=@CENSUS_DATE)

Update [dbo].[Rerun_Analysis]
SET Reinstatement_Change = CONCAT(Reinstatement_Change,'-','Conv')
WHERE census_date =@CENSUS_DATE and Reinstatement_Change IN ('CP CONVERSION','CP Error')
AND CONTRACT_RISK_KEY NOT IN (SELECT NEW_CONTRACT_RISK_KEY FROM CONVERTED WHERE CENSUS_DATE=@CENSUS_DATE)

PRINT 'REINSTATEMENT CHECK COMPLETED'

Update [dbo].[Rerun_Analysis] 
SET SS_PC_Change = Case WHEN CURR_SS_PC=PREV_SS_PC THEN 'NO CHANGE'
						WHEN CURR_SS_PC IS NULL AND PREV_SS_PC IS NULL THEN 'NO CHANGE'
						WHEN (CURR_SS_PC IS NULL AND PREV_SS_PC =0) OR (CURR_SS_PC=0 AND PREV_SS_PC IS NULL) THEN 'NO CHANGE'
						when SS_PC_Change='VERIFY' AND PREV_Reins_Life_Identifier<>CURR_Reins_Life_Identifier THEN 'CHNG FRM:REINS_IDEN CHNG'
						WHEN  Load_Value_Change LIKE '%UPDATED%' then 'EDW LOAD VALUE CHNG' 
						WHEN  COVER<>PREV_COVER THEN 'COVER CHANGED'
					ELSE 'VERIFY' END
WHERE CENSUS_DATE = @CENSUS_DATE

Update T
SET SS_PC_Change = CASE WHEN S.[Agg_Sum_Insured_Amt]<> SQ.[Agg_Sum_Insured_Amt] THEN 'AGG SI CHANGE'
						WHEN S.[SS_Recalc_Flag] <> SQ.[SS_Recalc_Flag] THEN 'RECALC FLAG UPDATED' 
						ELSE 'VERIFY' END
FROM [dbo].[Rerun_Analysis] AS T, SS_Party_Smry_Mth AS S,SS_Party_Smry_Mth_hist_QSRerun SQ
WHERE T.CENSUS_DATE = @CENSUS_DATE AND T.CENSUS_DATE=S.Census_Date AND S.Census_Date = SQ.Census_Date
AND T.SS_PC_Change = 'VERIFY' AND T.CURR_Reins_Life_Identifier=S.Reins_Life_Identifier 
AND T.COVER=S.COVER AND S.Reins_Life_Identifier=SQ.Reins_Life_Identifier AND S.COVER=SQ.COVER 

Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 SET ss_pc_change = 'IMPACTED BY PREV MONTH'
 where census_date =@CENSUS_DATE and ss_pc_change = 'VERIFY' and 
 contract_risk_key in (select contract_risk_key from [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 where census_date <@CENSUS_DATE and 
 ss_pc_change in ('AGG SI CHANGE','CHNG FRM:REINS_IDEN CHNG','COVER CHANGED','RECALC FLAG UPDATED','VERIFY'))
Print 'SS_PC CHECK COMPLETED'

 --Commission_Rate_Change
 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change = Case when QS_PC_BASE LIKE '%/PREV:%' OR QS_PC_INCR LIKE '%/PREV:%' OR QS_PC_CONV LIKE '%/PREV:%' OR QS_IC_PC_BASE LIKE '%/PREV:%' OR QS_IC_PC_INCR LIKE '%/PREV:%' OR QS_IC_PC_CONV LIKE '%/PREV:%' OR QS_OC_PC_BASE LIKE '%/PREV:%' OR QS_OC_PC_INCR LIKE '%/PREV:%' OR QS_OC_PC_CONV LIKE '%/PREV:%' OR QS_OCX_PC_BASE LIKE '%/PREV:%' OR QS_OCX_PC_INCR LIKE '%/PREV:%' OR QS_OCX_PC_CONV LIKE '%/PREV:%' then 'Updated'
								   else 'NoChange' End 
where census_date =@CENSUS_DATE

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change = Case when QS_PC_BASE LIKE '%/PREV:%' then 'Base' 
		  						   End 
 where census_date =@CENSUS_DATE and Commission_Rate_Change = 'Updated'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change = Case when	QS_PC_INCR LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'INCR'  
								  ELSE CONCAT(Commission_Rate_Change,';','INCR') End 
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_PC_CONV LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'Conv'  
								  ELSE CONCAT(Commission_Rate_Change,';','Conv') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'
 
 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_IC_PC_BASE LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'BASE IC'  
								  ELSE CONCAT(Commission_Rate_Change,';','BASE IC') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_IC_PC_INCR LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'INCR IC'  
								   ELSE CONCAT(Commission_Rate_Change,';','INR IC') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'
 
 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_IC_PC_CONV LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'CONV IC'  
								  ELSE CONCAT(Commission_Rate_Change,';','CONV IC') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OC_PC_BASE LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'BASE OC'  
								  ELSE CONCAT(Commission_Rate_Change,';','BASE OC') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OC_PC_INCR LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'INCR OC'  
								  ELSE CONCAT(Commission_Rate_Change,';','INCR OC') End  
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OC_PC_CONV LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'CONV OC'  
								  ELSE CONCAT(Commission_Rate_Change,';','Conv OC') End   
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OCX_PC_BASE LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'BASE NB'  
								  ELSE CONCAT(Commission_Rate_Change,';','BASE NB') End   
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OCX_PC_INCR LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'INCR NB'  
								 ELSE CONCAT(Commission_Rate_Change,';','INCR NB') End   
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Update [IDS_Reinsurance].[dbo].[Rerun_Analysis] 
 Set Commission_Rate_Change =Case when	QS_OCX_PC_CONV LIKE '%/PREV:%' and Commission_Rate_Change='Updated' then 'CONV NB'
								 ELSE CONCAT(Commission_Rate_Change,';','Conv NB') End   
 where census_date =@CENSUS_DATE and Commission_Rate_Change <> 'NoChange'

 Print 'Commission Rate Changes Completed'

Update [dbo].[Rerun_Analysis] 
set [CURR_QS_AMT_REINP]=CASE WHEN IsNumeric([CURR_QS_AMT_REINP_CURR]) = 0 THEN 0 ELSE CAST([CURR_QS_AMT_REINP_CURR] AS money)end
where census_date =@CENSUS_DATE
Update [dbo].[Rerun_Analysis] 
set [PREV_QS_AMT_REINP]=CASE WHEN IsNumeric([PREV_QS_AMT_REINP_CURR]) = 0 THEN 0 ELSE CAST([PREV_QS_AMT_REINP_CURR] AS money)end
where census_date =@CENSUS_DATE
Update [dbo].[Rerun_Analysis] 
set [CURR_QS_AMT_REINP_BKD]=CASE WHEN IsNumeric([CURR_QS_AMT_REINP_BCKD]) = 0 THEN 0 ELSE CAST([CURR_QS_AMT_REINP_BCKD] AS money)end
where census_date =@CENSUS_DATE
Update [dbo].[Rerun_Analysis] 
set [PREV_QS_AMT_REINP_BKD]=CASE WHEN IsNumeric([PREV_QS_AMT_REINP_BCKD]) = 0 THEN 0 ELSE CAST([PREV_QS_AMT_REINP_BCKD] AS money)end
where census_date =@CENSUS_DATE

/*

Update Rerun_Analysis 
Set Other_Change = 'Conversion'
where census_date =@CENSUS_DATE and 
CONTRACT_RISK_KEY in (select CONTRACT_RISK_KEY from INFORCE where QS_Treaty_id =-3 and SS_Treaty_id<>-4)--6395

Update Rerun_Analysis 
Set Other_Change = 'Adjusted'
where census_date =@CENSUS_DATE and 
CONTRACT_RISK_KEY in (select CONTRACT_RISK_KEY from INFORCE where QS_Treaty_id =-3 and SS_Treaty_id=-4)--852


Update Rerun_Analysis 
Set Other_Change = case when Other_Change='Adjusted' then 'Adj-Removed'
						when Other_Change='Conversion' then 'Conv-Removed'
					Else 'No Change' End
where census_date =@CENSUS_DATE


--7547527

Update I
Set Other_Change = 'Adj-Update'
FROM [dbo].Rerun_Analysis  AS I  
	  inner JOIN dbo.Inforce_Adjusted AS ia
		ON ia.Census_Date = I.CENSUS_DATE
	  inner JOIN dbo.Inforce_Adjusted_Detail AS iad
		ON iad.CONTRACT_RISK_KEY = i.CONTRACT_RISK_KEY
		and iad.Inforce_Adjusted_Id = ia.Inforce_Adjusted_Id
	  inner JOIN dbo.Ref_Adjustment_Type AS rat
		ON rat.Ref_Adjustment_Type_Id = iad.ADJUSTMENT_TYPE_ID
  WHERE  I.census_date =@CENSUS_DATE and (rat.Ref_Adjustment_Type_Id IS NULL OR rat.Code <> 'FILTER')--51

	Update T
	Set Other_Change= 'Exp Benefit'
	FROM Rerun_Analysis T JOIN Inforce I
	ON T.CENSUS_DATE=I.CENSUS_DATE AND T.CONTRACT_RISK_KEY=I.CONTRACT_RISK_KEY
	WHERE I.COMMENT = 'The Benefit has expired'--1101 */
 
Commit TRAN InsertToAnalysis

Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
BEGIN CATCH

 Print @@error
    --ROLLBACK TRAN InsertToAnalysis
	IF @@TRANCOUNT > 0 

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spSplitPartitionRangeMonthly]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[spSplitPartitionRangeMonthly]
	-- Add the parameters for the stored procedure here
	


AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	declare @dbName NVARCHAR(Max) = DB_NAME();
	declare @fgName NVARCHAR(Max);
	declare @filePath NVARCHAR(max);

	declare @sqlCmd NVARCHAR(Max);

	declare @maxDate date, @nextDate date;

	select @maxDate = Cast(MAX(value) as date)
	  from sys.partition_range_values as r
		   Inner Join sys.partition_functions as f on r.function_id = f.function_id
	Where f.name = 'pfDateRangeMonthly';

	set @nextDate = DATEADD(MONTH, 1, @maxDate);
	set @fgName = @dbName + '_FG_' + FORMAT( @nextDate, 'yyyyMM', 'en-US' );
	set @filePath = 'E:\MSSQL\Data\IDS_Reinsurance\';

	print @maxDate;
	print @nextDate;
	
	if @nextDate < EOMONTH(GETDATE(),1)
	begin
	set @sqlCmd =  'alter database ['+@dbName+'] add filegroup ['+@fgName+']';
	execute sp_executesql @sqlCmd;

	set @sqlCmd =  'alter database ['+@dbName+'] add file ( NAME = N'''+@fgName+''', FILENAME = N'''+@filePath+@fgName+'.ndf'' , SIZE = 1MB , FILEGROWTH = 100MB ) TO Filegroup ['+@fgName+']'
	execute sp_executesql @sqlCmd;

	set @sqlCmd =  'ALTER PARTITION SCHEME psDateRangeMonthly NEXT USED ['+@fgName+']';  
	execute sp_executesql @sqlCmd;

	set @sqlCmd =  'ALTER PARTITION FUNCTION pfDateRangeMonthly () SPLIT RANGE ('''+ FORMAT( @nextDate, 'yyyy-MM-dd', 'en-US' ) +''')';  
	execute sp_executesql @sqlCmd;
	
	end;

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Access_CheckMovements]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==============================================
-- Author:	KHNNR2
-- Create date: Jun 2019
-- Description:	
-- ==================================================================
-- Author:		AWJ
-- Create date: Dec 2016
-- Description:	Produces a Summary of Record Movements over the month
-- Change Log:  Oct 2017 - AWJ - Updated to QUOTA_SHARE2
-- ==================================================================
--EXEC usp_CheckMovements '31-Jan-2017'


--select *into dbo.Check_Movements from vw_CheckMovements where 1=2
CREATE PROCEDURE [dbo].[usp_Access_CheckMovements]
	@CURR_DATE date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--DECLARE @CURR_DATE Date = '31-DEC-2018'

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	
	DECLARE @PREV_DATE DATE = dbo.DateSerial(Year(@CURR_DATE), Month(@CURR_DATE),0)
		
	Begin Try

	Begin Tran Load_Check_Movements
	
	--Delete any exisiting movements for the census date
	Delete from dbo.Check_Movements where CENSUS_DATE = @CURR_DATE

	Set @DeleteRowCount = @@ROWCOUNT

	Insert into dbo.Check_Movements
	SELECT [MOVEMENT]
      ,[CENSUS_DATE]
      ,[FROM_CATEGORY]
      ,[TO_CATEGORY]
   ,POLICIES = count(Distinct coalesce(CURR_CONTRACT_KEY, PREV_CONTRACT_KEY))
	,LIVES = count(Distinct coalesce(CURR_PARTY_KEY, PREV_PARTY_KEY))
	,RECORDS = count(*)
	,PREV_SUM_INSURED = sum(ISNULL(PREV_SUM_INSURED,0))
	,CURR_SUM_INSURED = sum(ISNULL(CURR_SUM_INSURED,0))
	,PREV_PREMIUM = sum(ISNULL(PREV_PREMIUM,0))
	,CURR_PREMIUM = sum(ISNULL(CURR_PREMIUM,0))
     
  FROM [dbo].[MOVEMENTS]
  where census_date = @CURR_DATE
  GROUP BY PREV_COMMENT, CURR_COMMENT, [MOVEMENT]
      ,[CENSUS_DATE],[FROM_CATEGORY]
      ,[TO_CATEGORY]
 

	Set @InsertRowCount = @@ROWCOUNT

Commit Tran Load_Check_Movements

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Load_Check_Movements;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH

END

--EXEC usp_CheckMovements '31-Jan-2017'
GO
/****** Object:  StoredProcedure [dbo].[usp_Assign_PCODE]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==========================================================================================================================
-- Author:		AWJ
-- Create date: October 2017
-- Description:	Assigns/Overwrites PCODES and ACODES in either the INFORCE or INFORCE_TEMP tables based on the PCODES mapping
--              Returns the number of records assigned 
-- ==========================================================================================================================
--EXEC usp_Assign_PCode 'INFORCE'
CREATE PROCEDURE [dbo].[usp_Assign_PCODE]
	-- Add the parameters for the stored procedure here
	 @Pas varchar(3),
	@INFORCE_OR_TEMP nvarchar(7) = 'TEMP'    --Choose between inforce table or temp table
	,@CENSUS_DATE varchar(5) = 'NULL'            --Null implies all records actual otherwise just the current date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @ROWS int
	DECLARE @SQL nvarchar(1500)
	--print @pas
	--print @CENSUS_DATE
	SET @SQL = 'Update I Set
			ACODE = P.ACODE
			,PCODE = P.PCODE
		From INFORCE_TEMP_' + @Pas + ' As I
			JOIN PCODES As P
			On I.PRODUCT_SYSTEM_CODE = P.PRODUCT_SYSTEM_CODE
				and I.CLASS_OF_BUSN_CODE = P.CLASS_OF_BUSN
				and I.PRODUCT_CODE = P.PRODUCT_CODE
				and I.PRODUCT_OPTION_CODE = P.PRODUCT_OPTION_CODE
		Where (I.CENSUS_DATE = coalesce(cast(' + @CENSUS_DATE + ' As Date), I.CENSUS_DATE))
			and ((I.ACODE is Null) or isnull(I.ACODE,'') <> P.ACODE or I.PCODE is NULL or isnull(I.PCODE,'')<>P.PCODE)'


			--print @SQL

	If @INFORCE_OR_TEMP = 'INFORCE'
		BEGIN
		Update I Set
			ACODE = P.ACODE
			,PCODE = P.PCODE
		From INFORCE As I
			JOIN PCODES As P
			On I.PRODUCT_SYSTEM_CODE = P.PRODUCT_SYSTEM_CODE
				and I.CLASS_OF_BUSN_CODE = P.CLASS_OF_BUSN
				and I.PRODUCT_CODE = P.PRODUCT_CODE
				and I.PRODUCT_OPTION_CODE = P.PRODUCT_OPTION_CODE
		Where (I.CENSUS_DATE = coalesce(cast(@CENSUS_DATE As Date), I.CENSUS_DATE))
			and ((I.ACODE is Null) or isnull(I.ACODE,'') <> P.ACODE or I.PCODE is NULL or isnull(I.PCODE,'')<>P.PCODE)
		SET @ROWS = @@ROWCOUNT

		--Delete any existing errors caused by the missing PCODES
		Delete from ERROR_LOG where CENSUS_DATE = coalesce(cast(@CENSUS_DATE as Date),CENSUS_DATE) and [ERROR_PROCEDURE] = 'usp_Check_PCodes'

		--Rerun the check to repopulate Errors if not fixed
		EXEC usp_CheckPCodes @CENSUS_DATE 

		RETURN @ROWS
		END
	ELSE --INFORCE_OR_TEMP='TEMP'
	
		BEGIN	
		--print @SQL	
		EXECUTE sp_executesql @SQL
		RETURN @@ROWCOUNT
		END	
END

GO
/****** Object:  StoredProcedure [dbo].[usp_Calc_QS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================================
-- Author:  RRNAA2
-- Create date: March 2021
-- Description: RGU-1221- Dress Rehearsal - VI and CPI appearing on the 12th month
-- =============================================================================
-- =============================================================================
-- Author:  MHTSIQ
-- Create date: October 2020
-- Description: Instead of using the #Last_seen table, this table was materialised and hence all the joins have been pointed to the Inforce_Last_Seen

-- =============================================================================
-- Author:  MHTSIQ
-- Create date: June 2020
-- Description: Identify the Reinsurance treaty of the policies

-- =============================================================================
-- Author:  MHTSIQ
-- Create date: August 2020
-- Description: Benefit Matching Changes
-- =============================================================================
-- Author:  MHTSIQ
-- Create date: August 2020
-- Description: Reinstatement Identification Changes
-- =============================================================================
-- Author:  KHNNR2
-- Create date: APR 2020
-- Description: Update QS procedure, enable blended Rate Calculation
-- =============================================================================
-- Author:  KHNNR2
-- Create date: APR 2020
-- Description: Update QS details enable Time Variant Rate Calculation
-- =============================================================================
-- Author:  KHNNR2
-- Create date: SEP 2019
-- Description:	Calculation for expired benefits are not required
-- =============================================================================
-- Author:  RRNAA2
-- Create date: May 2019
-- Description: Update QS details in INFORCE_TEMP of each Pas before insrerting into INFORCE
-- =============================================================================
--Select * from INFORCE_TEMP where CONTRACT_RISK_KEY = 11232514



CREATE
PROCEDURE [dbo].[usp_Calc_QS] @CENSUS_DATE datetime,@PAS nvarchar(3)
  -- Add the parameters for the stored procedure here

AS
BEGIN
  SET NOCOUNT ON;
  --Treaty Variables from INI File for the Census Date
  --DECLARE
  --  @CENSUS_DATE DATE =
  --  (SELECT Top 1 CENSUS_DATE
  --  FROM INFORCE_TEMP
  --  )
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran QS_Calc

     DECLARE
      @TREATY_START DATE = CONVERT(DATE,
      (SELECT VALUE FROM INI WHERE PARAMETER='TREATY START DATE'
      ))
      --DECLARE
      --  @PAS nvarchar(3) =
      --  (SELECT Top 1 PRODUCT_SYSTEM_CODE FROM INFORCE_TEMP
      --  )
        --Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
        IF OBJECT_ID('tempdb.dbo.#CALC_PARAMS', 'U') IS NOT NULL
          DROP TABLE #CALC_PARAMS SELECT TREATY_START = @TREATY_START ,
            CENSUS_DATE                               = @CENSUS_DATE ,
            ONE_YEAR_AGO                              = DATEADD(YEAR, -1, @CENSUS_DATE) ,
            TOMORROW                                  = DATEADD(DAY, 1, @CENSUS_DATE) -- 1st day of month following the census
            ,
            MONTHS_SINCE_TREATY = DATEDIFF(MONTH, @TREATY_START, @CENSUS_DATE) ,
            *
          INTO #CALC_PARAMS
          FROM PAS_INI
          WHERE PRODUCT_SYSTEM_CODE = @PAS

          --Select * from #CALC_PARAMS
          --Select * from PAS_INI

          --Clear all COMMENT fields so can rerun if needed
		  DECLARE @InforceTableName nvarchar(20) = ''
		  SET @InforceTableName  = 'INFORCE_TEMP_' + @PAS

		  DECLARE @CommentUpdateSQL nvarchar(500) = ''
		  SET @CommentUpdateSQL = 'UPDATE ' + @InforceTableName + ' SET COMMENT = NULL
									WHERE COMMENT IS NOT NULL'
          
		  EXECUTE sp_executesql @CommentUpdateSQL
		  SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	      Print 'Update Comments as NULL ' + convert(varchar(50), @UpdateRowCount)

         
          --Clear all QS_START_DATES and Surplus percentages
		  DECLARE @StartDtUpdateSQL nvarchar(500) = ''
		  SET @StartDtUpdateSQL = 'UPDATE ' + @InforceTableName + ' SET QS_START_DATE    = NULL,
									SS_PC              = NULL
								  WHERE QS_START_DATE IS NOT NULL
								  OR SS_PC            IS NOT NULL'

		  EXECUTE sp_executesql @StartDtUpdateSQL
		  SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	      Print 'Clear all QS_START_DATES and Surplus percentages ' + convert(varchar(50), @UpdateRowCount)
         
          --Delete any records with a forward dated risk start (We'll pick these up in future months)

		  DECLARE @DeleteForwardDtRiskSQL nvarchar(500) = ''
		  SET @DeleteForwardDtRiskSQL = 'DELETE FROM T FROM ' + @InforceTableName + ' AS T,
										#CALC_PARAMS    AS P
									  WHERE RISK_START_DATE > P.CENSUS_DATE'

		  EXECUTE sp_executesql @DeleteForwardDtRiskSQL
		  SET @DeleteRowCount  = @DeleteRowCount + @@ROWCOUNT

	      Print 'Delete any records with a forward dated risk start ' + convert(varchar(50), @DeleteRowCount)
       

          --Update QS_data based on each record's Last Seen data and restrict any CPI increase to the amount of increase
		  DECLARE @UpdToRestrictCPIIncreaseSQL nvarchar(2000) = ''
		  SET @UpdToRestrictCPIIncreaseSQL = 'UPDATE T
											  SET QS_START_DATE             = I.QS_START_DATE ,
												QS_INCR_DATE                = I.QS_INCR_DATE ,
												QS_CONV_DATE                = I.QS_CONV_DATE ,
												QS_PC_BASE                  = I.QS_PC_BASE ,
												QS_PC_INCR                  = I.QS_PC_INCR ,
												QS_PC_CONV                  = I.QS_PC_CONV ,
												QS_GAP_MONTHS               = DATEDIFF(MONTH, I.LAST_SEEN_DATE, T.CENSUS_DATE) ,
												CONVERTED_CONTRACT_RISK_KEY = I.CONVERTED_CONTRACT_RISK_KEY ,
												CONVERTED_CATEGORY          = I.CONVERTED_CATEGORY ,
												CONVERTED_CENSUS_DATE       = I.CONVERTED_CENSUS_DATE ,
												CPI_INCR                    =
												CASE
												  WHEN T.PRODUCT_SYSTEM_CODE     = ''U2''
												  AND NOT (MONTH(T.CENSUS_DATE) >= 7
												  AND MONTH(I.LAST_SEEN_DATE)      <= 6)
												  THEN 0 
												  WHEN T.CPI_INCR       > T.SUM_INSURED_AMT - I.SUM_INSURED_AMT
												  AND T.SUM_INSURED_AMT > I.SUM_INSURED_AMT
												  THEN T.SUM_INSURED_AMT - I.SUM_INSURED_AMT
												  WHEN T.SUM_INSURED_AMT <= I.SUM_INSURED_AMT
												  THEN 0
												  ELSE T.CPI_INCR
												END ,
												SS_PC = I.SS_PC
											  FROM ' + @InforceTableName  + ' AS T
											  
											  JOIN  [dbo].[Inforce_Last_Seen] AS I ON  T.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY 
											  Join #CALC_PARAMS as P on I.Census_Date = P.Census_Date
											  where I.LAST_SEEN_DATE   > = P. ONE_YEAR_AGO      '

		  EXECUTE sp_executesql @UpdToRestrictCPIIncreaseSQL 
	      SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	      Print 'QS_data based on each records Last Seen data and restrict any CPI increase to the amount of increase ' + convert(varchar(50), @UpdateRowCount)
		   	--Print '-@UpdToRestrictCPIIncreaseSQL'

		  --This code only applies for the first extract at the start of the treaty
            DECLARE @AT_START bit =
            (SELECT
              CASE
                WHEN CENSUS_DATE=TREATY_START
                THEN 1
                ELSE 0
              END
            FROM #CALC_PARAMS
            ) 
			
IF @AT_START = 1 BEGIN
          --Repopulate the Projection Group eg AMPN_LS_STP_INF
          
		  DECLARE @RepopulateProjectionGrpSQL nvarchar(max) = ''
		  SET @RepopulateProjectionGrpSQL = 'UPDATE T
											  SET PROJECTION_GROUP = REPLACE(PROJECTION_GROUP, ''???'',
												CASE
												  WHEN COALESCE(QS_START_DATE, RISK_START_DATE) <= P.TREATY_START
												  THEN ''INF''
												  ELSE ''NB''
												END) ,
												QS_START_DATE = COALESCE(QS_START_DATE,
												CASE
												  WHEN RISK_START_DATE <= P.TREATY_START
												  THEN P.TREATY_START
												  ELSE T.RISK_START_DATE
												END) ,
												CPI_INCR = 0
											  FROM ' + @InforceTableName  + ' AS T,
												#CALC_PARAMS    AS P'
		  
		  EXECUTE sp_executesql @RepopulateProjectionGrpSQL
	      SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	      Print 'Repopulate the Projection Group ' + convert(varchar(50), @UpdateRowCount)

	     --Update the Commission Rates, Proportions and Amounts

		  --#Changerequired  1
		  DECLARE @UpdCommPropAmtSQL nvarchar(max) = ''
		  SET @UpdCommPropAmtSQL = 'UPDATE T

								  SET QS_PC_BASE =
									CASE
									  WHEN MIN_VAL_APPLIES = ''U.gt.SA''
									  THEN 0
									  ELSE 60
									END ,
									QS_PC_INCR    = 0 ,
									QS_PC_CONV    = 0 ,
									QS_IC_PC_BASE = BASE.IC_PC 
									,
									QS_IC_PC_INCR = INCR.IC_PC 
									,
									QS_IC_PC_CONV = 0 ,
									QS_OC_PC_BASE = BASE.OC_PC 
									,
									QS_OC_PC_INCR = INCR.OC_PC 
									,
									QS_OC_PC_CONV  = 0 ,
									QS_OCX_PC_BASE = BASE.OCX_PC 
									,
									QS_OCX_PC_INCR = INCR.OCX_PC 
									,
									QS_OCX_PC_CONV = 0 ,
									QS_ANN_PREM_IF = ROUND(
									CASE
									  WHEN MIN_VAL_APPLIES = ''U.gt.SA''
									  THEN 0
									  ELSE 60
									END/100. * ANNUAL_PREM, 2) ,
									QS_GAP_MONTHS = 0 
									,
									QS_AMT_REINP_CURR = 0 
									,
									QS_AMT_REINP_BCKD = 0 
									,
									QS_AMT_IC_BASE = ROUND(ROUND(
									CASE
									  WHEN MIN_VAL_APPLIES = ''U.gt.SA''
									  THEN 0
									  ELSE 60
									END/100. * ANNUAL_PREM, 2) * BASE.IC_PC/100.,2) 
									,
									QS_AMT_IC_INCR = 0 
									,
									QS_AMT_OC_CURR = 0 
									,
									QS_AMT_OC_BCKD = 0 
									,
									QS_AMT_OCX_CURR = 0 
									,
									QS_AMT_OCX_BCKD = 0 
									,
									QS_AMT_LAPSE_RVS = 0 
									,
									COMMENT =
									CASE
									  WHEN MIN_VAL_APPLIES = ''U.gt.SA''
									  THEN ''EXCLUDED AS UNIT LINKED BAL>SA''
									  ELSE ''INFORCE ON START DATE''
									END
								  FROM ' + @InforceTableName + ' AS T
								 	 
								  JOIN COMMISSION  AS BASE
								  ON T.PROJECTION_GROUP = BASE.PROJECTION_GROUP
								  AND BASE.BASE_INCR    = ''BASE''
								  AND T.CENSUS_DATE BETWEEN BASE.[Effective_Start_Date] AND COALESCE(BASE.[Effective_End_Date],T.CENSUS_DATE)
								
								  JOIN COMMISSION AS INCR
								  ON T.PROJECTION_GROUP = INCR.PROJECTION_GROUP
								  AND INCR.BASE_INCR    = ''INCR''
								  AND T.CENSUS_DATE BETWEEN INCR.[Effective_Start_Date] AND COALESCE(INCR.[Effective_End_Date],T.CENSUS_DATE) 
								  '

								  --Time Variant Rate Calculation

								  -- Pervious Script

								  --JOIN COMMISSION   AS BASE
								  --ON T.PROJECTION_GROUP = BASE.PROJECTION_GROUP
								  --AND BASE.BASE_INCR    = ''BASE''
								  --AND T.CENSUS_DATE BETWEEN BASE.FROM_DATE AND COALESCE(BASE.TO_DATE,T.CENSUS_DATE)
								  --JOIN COMMISSION AS INCR
								  --ON T.PROJECTION_GROUP = INCR.PROJECTION_GROUP
								  --AND INCR.BASE_INCR    = ''INCR''
								  --AND T.CENSUS_DATE BETWEEN INCR.FROM_DATE AND COALESCE(INCR.TO_DATE,T.CENSUS_DATE) '

								
  Print  @UpdCommPropAmtSQL
    EXECUTE sp_executesql @UpdCommPropAmtSQL
		 --  RETURN @@ROWCOUNT

   	      SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	      Print 'Update the Commission Rates, Proportions and Amounts ' + convert(varchar(50), @UpdateRowCount)
 	--Print '-@UpdCommPropAmtSQL'
     END 
		DECLARE @TOTRECS INT = 0

        --Reset the SS_PC on IP Benefits where the BENEFIT PERIOD changes category

    IF @PAS IN ('FDA','DS','U2')
    
	DECLARE @UpdSSPCSQL nvarchar(1500) = ''
	SET @UpdSSPCSQL = ' UPDATE T
						SET SS_PC = NULL
						FROM ' + @InforceTableName + ' As T
						JOIN [dbo].[Inforce_Last_Seen] AS L
						ON T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
						AND T.SS_PC            > 0
						JOIN INFORCE AS I
						ON L.CONTRACT_RISK_KEY          = I.CONTRACT_RISK_KEY
						AND L.LAST_SEEN_DATE            = I.CENSUS_DATE
						WHERE I.PRODUCT_OPT_GROUP_DESC IN (''BE'',''IP'',''TSC'')
						AND
						CASE 
							WHEN T.PRODUCT_OPT_GROUP_DESC = ''BE''
							THEN ''1''
							WHEN T.SICKNESS_BENEFIT_PERIOD LIKE ''A%''
							THEN ''A''
							WHEN T.INJURY_BENEFIT_PERIOD LIKE ''A%''
							THEN ''A''
							WHEN T.SICKNESS_BENEFIT_PERIOD LIKE ''M[24|60]''
							THEN ''T''
							WHEN T.INJURY_BENEFIT_PERIOD LIKE ''M[24|60]''
							THEN ''T''
							ELSE ''1''
						END <>
						CASE 
							WHEN I.PRODUCT_OPT_GROUP_DESC = ''BE''
							THEN ''1''
							WHEN I.SICKNESS_BENEFIT_PERIOD LIKE ''A%''
							THEN ''A''
							WHEN I.INJURY_BENEFIT_PERIOD LIKE ''A%''
							THEN ''A''
							WHEN I.SICKNESS_BENEFIT_PERIOD LIKE ''M[24|60]''
							THEN ''T''
							WHEN I.INJURY_BENEFIT_PERIOD LIKE ''M[24|60]''
							THEN ''T''
							ELSE ''1''
						END'

		 EXECUTE sp_executesql @UpdSSPCSQL
		 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	     Print 'Reset the SS_PC on IP Benefits where the BENEFIT PERIOD changes category ' + convert(varchar(50), @UpdateRowCount)


	   	--Print '-@UpdSSPCSQL'

      --------------------------------------------------CATEGORIES OF BENEFITS----------------------------------------
      --No premium paid for an expired Benefit
	  --(census Date - RISK_EXPR_DATE) < 15

	  DECLARE @UpdCommentaSQL nvarchar(1000) = ''
	  SET @UpdCommentaSQL = 'UPDATE T
							SET COMMENT         = ''The Benefit has expired'' ,
							QS_GAP_MONTHS     = 0 ,
							QS_PC_BASE        = 0. ,
							QS_PC_INCR        = 0. ,
							QS_PC_CONV        = 0. ,
							QS_ANN_PREM_IF    = 0. ,
							QS_AMT_REINP_CURR = 0. ,
							QS_AMT_REINP_BCKD = 0. ,
							QS_AMT_IC_BASE    = 0. ,
							QS_AMT_IC_INCR    = 0. ,
							QS_AMT_OC_CURR    = 0. ,
							QS_AMT_OC_BCKD    = 0. ,
							QS_AMT_OCX_CURR   = 0. ,
							QS_AMT_OCX_BCKD   = 0. ,
							QS_START_DATE     = COALESCE(QS_START_DATE, P.TREATY_START) ,
							SS_PC             = 0.,
							QS_Treaty_id = -1 ,
							SS_Treaty_id = -1
							FROM ' + @InforceTableName + ' AS T,
							#CALC_PARAMS    AS P
							WHERE Datediff(day,RISK_EXPR_DATE,T.CENSUS_DATE) >15
							'
							
	  EXECUTE sp_executesql @UpdCommentaSQL
      	   	--Print '-@UpdComment1SQL'
      SET @TOTRECS          = @TOTRECS + @@ROWCOUNT
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'The Benefit has expired ' + convert(varchar(50), @UpdateRowCount)


	  --Broken out Unit Linked policies
	  DECLARE @UpdComment1SQL nvarchar(1000) = ''
	  SET @UpdComment1SQL = 'UPDATE T
							SET COMMENT         = ''EXCLUDED AS UNIT LINKED BAL>SA'' ,
							QS_GAP_MONTHS     = 0 ,
							QS_PC_BASE        = 0. ,
							QS_PC_INCR        = 0. ,
							QS_PC_CONV        = 0. ,
							QS_ANN_PREM_IF    = 0. ,
							QS_AMT_REINP_CURR = 0. ,
							QS_AMT_REINP_BCKD = 0. ,
							QS_AMT_IC_BASE    = 0. ,
							QS_AMT_IC_INCR    = 0. ,
							QS_AMT_OC_CURR    = 0. ,
							QS_AMT_OC_BCKD    = 0. ,
							QS_AMT_OCX_CURR   = 0. ,
							QS_AMT_OCX_BCKD   = 0. ,
							QS_START_DATE     = COALESCE(QS_START_DATE, P.TREATY_START) ,
							SS_PC             = 0.,
							QS_Treaty_id = -1 ,
							SS_Treaty_id = -1
							FROM ' + @InforceTableName + ' AS T,
							#CALC_PARAMS    AS P
							WHERE MIN_VAL_APPLIES = ''U.gt.SA''
							AND T.COMMENT   IS NULL'

	  EXECUTE sp_executesql @UpdComment1SQL
      	   	--Print '-@UpdComment1SQL'
      SET @TOTRECS          = @TOTRECS + @@ROWCOUNT
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'Broken out Unit Linked policies ' + convert(varchar(50), @UpdateRowCount)

      --Exclude any previously Broken out Unit Linked policies
	   DECLARE @UpdComment2SQL nvarchar(1000) = ''
	   SET @UpdComment2SQL = 'UPDATE T
								SET COMMENT         = ''EXCLUDED AS UNIT LINKED BAL>SA'' ,
								QS_GAP_MONTHS     = 0 ,
								QS_PC_BASE        = 0. ,
								QS_PC_INCR        = 0. ,
								QS_PC_CONV        = 0. ,
								QS_ANN_PREM_IF    = 0. ,
								QS_AMT_REINP_CURR = 0. ,
								QS_AMT_REINP_BCKD = 0. ,
								QS_AMT_IC_BASE    = 0. ,
								QS_AMT_IC_INCR    = 0. ,
								QS_AMT_OC_CURR    = 0. ,
								QS_AMT_OC_BCKD    = 0. ,
								QS_AMT_OCX_CURR   = 0. ,
								QS_AMT_OCX_BCKD   = 0. ,
								SS_PC             = 0,
								QS_Treaty_id = -1 ,
								SS_Treaty_id = -1
								FROM ' + @InforceTableName + ' AS T
								JOIN [dbo].[Inforce_Last_Seen] AS I
								ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
								JOIN #CALC_PARAMS AS P ON T.CENSUS_DATE = P.CENSUS_DATE
								WHERE I.MIN_VAL_APPLIES = ''U.gt.SA''
								AND T.MIN_VAL_APPLIES   = ''U.lt.SA''
								AND T.COMMENT          IS NULL
								AND I.LAST_SEEN_DATE   > P. ONE_YEAR_AGO  '

	EXECUTE sp_executesql @UpdComment2SQL

      SET @TOTRECS            = @TOTRECS + @@ROWCOUNT
  	--Print '-@UpdComment2SQL'
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'Exclude any previously Broken out Unit Linked policies ' + convert(varchar(50), @UpdateRowCount)
   

		------------------------------------Treaty Identification ---------------------------------------
	
		 CREATE table #temp_treaty_info 
	  (Treaty_id  int not null,
	  product_system_code varchar(50), 
	  product_code varchar(50),
	  Product_Option_Code varchar(50),
	  Treaty_Eftv_Date date,
	  Treaty_End_Date date, 
	  Treaty_Min_Policy_Commence_Date date,
	  Treaty_Max_Policy_Commence_Date date)
		INSERT into #temp_treaty_info
		select t.Treaty_Id,
		p.product_system_code,
		p.product_code, 
		p.Product_Option_Code,
		t.Treaty_Eftv_Date,
		t.Treaty_End_Date,
		t.Treaty_Min_Policy_Commence_Date,
		t.Treaty_Max_Policy_Commence_Date
		from [dbo].[Reins_Treaty_Product] p
		join [dbo].[Reins_Treaty] t on p.treaty_id= t.treaty_id

	DECLARE @UpdTreatyInfo nvarchar (1000) = ''

		if @PAS in ('CP' , 'DS' , 'OR' ,'U2' )
	
			SET @UpdTreatyInfo = 'UPDATE T
							SET QS_Treaty_id = TI.Treaty_id ,
							SS_Treaty_id = 5
							FROM ' + @InforceTableName + '  AS T,
							#temp_treaty_info AS TI
							WHERE  T.PRODUCT_SYSTEM_CODE = TI.Product_System_Code
							AND T.PRODUCT_CODE = TI.Product_Code 
							AND T.PRODUCT_OPTION_CODE = TI.Product_Option_Code
							and T.CENSUS_DATE  between TI.[Treaty_Eftv_Date] and TI.[Treaty_End_Date]
							and T.QS_Treaty_id is NULL
							and T.SS_Treaty_id is NULL'
		
		
		ELSE
		SET @UpdTreatyInfo = 'UPDATE T
							SET QS_Treaty_id = TI.Treaty_id ,
							SS_Treaty_id = 5
							FROM  ' + @InforceTableName + '  AS T,
							#temp_treaty_info AS TI
							WHERE  T.PRODUCT_SYSTEM_CODE = TI.Product_System_Code
							AND T.PRODUCT_CODE = TI.Product_Code 
							AND T.PRODUCT_OPTION_CODE = TI.Product_Option_Code
							and T.RISK_START_DATE between TI.Treaty_Min_Policy_Commence_Date and TI.Treaty_Max_Policy_Commence_Date
							and T.QS_Treaty_id is NULL
							and T.SS_Treaty_id is NULL'
	
	EXECUTE sp_executesql @UpdTreatyInfo
      
      SET @TOTRECS          = @TOTRECS + @@ROWCOUNT
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'TreatyInfoUpdated ' + convert(varchar(50), @UpdateRowCount) 
	
	
	--CONVERSIONS

	IF 1 =
	(SELECT ALLOW_CONVERSIONS FROM #CALC_PARAMS
	) BEGIN
      -- Converted Records as identified by CONVERTED_TEMP already set up
     DECLARE @UpdCommIdentifyConvSQL nvarchar(4000) = ''
	 SET @UpdCommIdentifyConvSQL = 'UPDATE T
									SET
									 COMMENT =
									CASE
										WHEN C.CONVERSION_TYPE NOT LIKE ''CONV%''
										THEN
										CASE
											WHEN C.OFF_SUM_INSURED_AMT < T.SUM_INSURED_AMT
											THEN ''RESTRUCTURE WITH INCR''
											ELSE ''RESTRUCTURE''
										END
										WHEN C.OFF_SUM_INSURED_AMT < T.SUM_INSURED_AMT
										THEN ''CONVERSION WITH INCR''
										ELSE ''CONVERSION''
									END ,
									QS_START_DATE =
									CASE
										WHEN C.CONVERSION_TYPE LIKE ''CONV%''
										THEN dbo.DateMax(T.RISK_START_DATE, P.TREATY_START)
										ELSE I.QS_START_DATE
									END ,
									CPI_INCR      = 0 ,
									QS_GAP_MONTHS =
									CASE
										WHEN C.CONVERSION_TYPE LIKE ''CONV%''
										THEN DATEDIFF(MONTH,dbo.DateMax(T.RISK_START_DATE, DATEADD(DAY,1,P.TREATY_START)), P.TOMORROW)
										ELSE DATEDIFF(MONTH, C.OFF_CENSUS_DATE, T.CENSUS_DATE)
									END ,
									QS_PC_BASE =
									CASE
										WHEN C.CONVERSION_TYPE LIKE ''CONV%''
										THEN 0. 
										WHEN C.OFF_SUM_INSURED_AMT >= T.SUM_INSURED_AMT
										THEN 60.                                                     
										ELSE 60. * C.OFF_SUM_INSURED_AMT/NULLIF(T.SUM_INSURED_AMT,0) 
									END ,
									QS_PC_CONV =
									CASE
										WHEN C.CONVERSION_TYPE LIKE ''CONV%''
										THEN 60. *
										CASE
											WHEN C.OFF_SUM_INSURED_AMT >= T.SUM_INSURED_AMT
											THEN 1.0
											ELSE CAST(C.OFF_SUM_INSURED_AMT AS REAL)/NULLIF(T.SUM_INSURED_AMT,0)
										END
										ELSE 0.
									END ,
									QS_PC_INCR = 60. *
									CASE
										WHEN C.OFF_SUM_INSURED_AMT >= T.SUM_INSURED_AMT
										THEN 0
										ELSE 1.0 - CAST(C.OFF_SUM_INSURED_AMT AS REAL)/T.SUM_INSURED_AMT
									END ,
									QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
									QS_INCR_DATE   =
									CASE
										WHEN C.OFF_SUM_INSURED_AMT < T.SUM_INSURED_AMT
										THEN T.CENSUS_DATE
									END ,
									QS_CONV_DATE =
									CASE
										WHEN C.CONVERSION_TYPE LIKE ''CONV%''
										THEN T.CENSUS_DATE
									END
									,
									QS_IC_PC_CONV  = COALESCE(COMM.IC_PC,0) ,
									QS_OC_PC_CONV  = COALESCE(COMM.OC_PC,0) ,
									QS_OCX_PC_CONV = COALESCE(COMM.OCX_PC,0)
									,
									CONVERTED_CONTRACT_RISK_KEY = C.OFF_CONTRACT_RISK_KEY ,
									CONVERTED_CATEGORY          =
									CASE
										WHEN T.PRODUCT_SYSTEM_CODE IN (''FDA'',''LS'')
										THEN C.CONVERSION_TYPE
										ELSE ''CONV''
									END ,
									CONVERTED_CENSUS_DATE = C.OFF_CENSUS_DATE
									,
									SS_PC =
									CASE 
										WHEN T.PRODUCT_OPT_GROUP_DESC  IN (''BE'',''IP'') AND (isnull(T.SICKNESS_BENEFIT_PERIOD,'''') <> isnull(I.SICKNESS_BENEFIT_PERIOD,'''')
										OR isnull(T.INJURY_BENEFIT_PERIOD,'''')     <> isnull(I.INJURY_BENEFIT_PERIOD,''''))
										THEN NULL
										WHEN T.SUM_INSURED_AMT > I.SUM_INSURED_AMT
										THEN NULL
										ELSE I.SS_PC
									END,

									PROJECTION_GROUP = I.PROJECTION_GROUP

									FROM ' +  @InforceTableName + ' AS T
									JOIN CONVERTED_TEMP AS C
									ON T.CONTRACT_RISK_KEY = C.NEW_CONTRACT_RISK_KEY
									JOIN INFORCE AS I
									ON C.OFF_CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY
									AND C.OFF_CENSUS_DATE      = I.CENSUS_DATE
									LEFT JOIN COMMISSION AS COMM
								    ON C.CONVERSION_TYPE = COMM.BASE_INCR
								    AND T.CENSUS_DATE BETWEEN COMM.[Effective_Start_Date] AND COALESCE(COMM.[Effective_End_Date],T.CENSUS_DATE) 
								  
									JOIN #CALC_PARAMS AS P
									ON T.CENSUS_DATE = P.CENSUS_DATE
									WHERE T.COMMENT IS NULL'   
									
									--Added Line 570-573 for Time Variant Rate Calculation

									--Pervious Script
									--LEFT JOIN COMMISSION AS COMM
									--ON C.CONVERSION_TYPE = COMM.BASE_INCR
									--AND T.CENSUS_DATE BETWEEN COMM.FROM_DATE AND COALESCE(COMM.TO_DATE, T.CENSUS_DATE)
									 
	--Print @UpdCommIdentifyConvSQL
	EXECUTE sp_executesql @UpdCommIdentifyConvSQL

	
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'Update Identified Conversions ' + convert(varchar(50), @UpdateRowCount)
    END
 

  --Benefits with increased sum insured since last seen split into Voluntary and AUTO only
  -- RGU-1221- Dress Rehearsal - VI and CPI appearing on the 12th month changed .LAST_SEEN_DATE   >= P. ONE_YEAR_AGO added =
  --A. Voluntary Increases
  IF 1 =
  (SELECT ALLOW_VOLUNTARY_INCR FROM #CALC_PARAMS
  ) BEGIN
--Select * from INFORCE_TEMP Where QS_PC_BASE + QS_PC_CONV = 0
	DECLARE @UpdCommVoluntryIncrSQL nvarchar(1800) = ''
	SET @UpdCommVoluntryIncrSQL = 'UPDATE T
								SET COMMENT    = ''VOLUNTARY INCREASE'' ,
									QS_INCR_DATE = DATEADD(DAY,1,I.LAST_SEEN_DATE) ,
									QS_GAP_MONTHS = DATEDIFF(MONTH, I.LAST_SEEN_DATE, T.CENSUS_DATE)
									,
									QS_PC_INCR = isnull(60. * (CAST(T.SUM_INSURED_AMT AS REAL)- T.CPI_INCR - I.SUM_INSURED_AMT) / NULLIF(T.SUM_INSURED_AMT,0) 
									,0) ,
									QS_PC_BASE = 60.                 - isnull((60. * (CAST(T.SUM_INSURED_AMT AS REAL)- T.CPI_INCR - I.SUM_INSURED_AMT) + I.QS_PC_CONV * (I.SUM_INSURED_AMT + T.CPI_INCR)) / NULLIF(T.SUM_INSURED_AMT,0) ,0) ,
									QS_PC_CONV = isnull(I.QS_PC_CONV * (I.SUM_INSURED_AMT + T.CPI_INCR) / NULLIF(T.SUM_INSURED_AMT,0),0) 
									,
									QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
									SS_PC          = NULL ,
									PROJECTION_GROUP = I.PROJECTION_GROUP
								FROM ' + @InforceTableName + ' AS T
								JOIN  [dbo].[Inforce_Last_Seen] AS I
								ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
								JOIN #CALC_PARAMS AS P
								ON I.CENSUS_DATE = P.CENSUS_DATE
								WHERE T.COMMENT       IS NULL
								AND T.MIN_VAL_APPLIES IS NULL                               
								AND T.SUM_INSURED_AMT  > I.SUM_INSURED_AMT + T.CPI_INCR + 1 
								AND T.ANNUAL_PREM      > I.ANNUAL_PREM     + 12.0           
								AND T.SUM_INSURED_AMT  > 0
								AND I.LAST_SEEN_DATE   >= P. ONE_YEAR_AGO'

	EXECUTE sp_executesql @UpdCommVoluntryIncrSQL
	SET @TOTRECS           = @TOTRECS + @@ROWCOUNT
	  	--Print '-@UpdCommVoluntryIncrSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

    Print 'Benefits with Vouluntry Increase ' + convert(varchar(50), @UpdateRowCount)
	END
--B. Sum Insured has increased only by AUTOMATIC increases so no Initial Commission
-- RGU-1221- Dress Rehearsal - VI and CPI appearing on the 12th month changed .LAST_SEEN_DATE   >= P. ONE_YEAR_AGO added =

DECLARE @UpdCommAutomaticIncrSQL nvarchar(1000)=''
SET @UpdCommAutomaticIncrSQL = 'UPDATE T
								SET COMMENT     = ''AUTOMATIC INCREASE'' ,
									QS_GAP_MONTHS = DATEDIFF(MONTH, I.LAST_SEEN_DATE, T.CENSUS_DATE) ,
									QS_PC_BASE    = I.QS_PC_BASE 
									,
									QS_PC_INCR     = I.QS_PC_INCR ,
									QS_INCR_DATE   = I.QS_INCR_DATE ,
									QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
									SS_PC          = I.SS_PC,
									PROJECTION_GROUP = I.PROJECTION_GROUP 
								FROM ' + @InforceTableName + ' AS T
								JOIN  [dbo].[Inforce_Last_Seen] AS I
								ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
									JOIN #CALC_PARAMS AS P
									ON I.CENSUS_DATE = P.CENSUS_DATE
								WHERE T.COMMENT       IS NULL                  
								AND T.MIN_VAL_APPLIES IS NULL                  
								AND T.SUM_INSURED_AMT  > I.SUM_INSURED_AMT + 1 
								AND I.LAST_SEEN_DATE   >= P. ONE_YEAR_AGO '

	EXECUTE sp_executesql @UpdCommAutomaticIncrSQL
	SET @TOTRECS           = @TOTRECS          + @@ROWCOUNT

   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

    Print 'Benefits with Auto Increase ' + convert(varchar(50), @UpdateRowCount)
		  	--Print '-@UpdCommAutomaticIncrSQL'

--Benefits with reduced sum insured since last seen
-- RGU-1221- Dress Rehearsal - VI and CPI appearing on the 12th month changed .LAST_SEEN_DATE   >= P. ONE_YEAR_AGO added =

DECLARE @UpdCommReductionSQL nvarchar(1000)=''
SET @UpdCommReductionSQL = 'UPDATE T
							SET COMMENT      = ''REDUCTION'' ,
								QS_GAP_MONTHS  = DATEDIFF(MONTH, I.LAST_SEEN_DATE, T.CENSUS_DATE) ,
								QS_PC_BASE     = I.QS_PC_BASE ,
								QS_PC_INCR     = I.QS_PC_INCR ,
								QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
								SS_PC          = I.SS_PC,
								PROJECTION_GROUP = I.PROJECTION_GROUP
							FROM ' + @InforceTableName + ' AS T
							JOIN  [dbo].[Inforce_Last_Seen] AS I
							ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
							JOIN #CALC_PARAMS AS P
							ON I.CENSUS_DATE = P.CENSUS_DATE
							WHERE T.COMMENT       IS NULL
							AND T.MIN_VAL_APPLIES IS NULL
							AND T.SUM_INSURED_AMT  < I.SUM_INSURED_AMT - 1
							AND I.LAST_SEEN_DATE   >= P. ONE_YEAR_AGO'

	EXECUTE sp_executesql @UpdCommReductionSQL
	SET @TOTRECS           = @TOTRECS          + @@ROWCOUNT
			  	--Print '-@UpdCommReductionSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
      Print 'Benefits with Reduced Sum Insured ' + convert(varchar(50), @UpdateRowCount)


   
DECLARE @UpdCommOngoingSQL nvarchar(1000)=''
SET @UpdCommOngoingSQL = 'UPDATE T
							SET COMMENT      = ''ONGOING'' ,
							  QS_GAP_MONTHS  = DATEDIFF(MONTH, I.LAST_SEEN_DATE, T.CENSUS_DATE) ,
							  QS_PC_BASE     = I.QS_PC_BASE ,
							  QS_PC_INCR     = I.QS_PC_INCR ,
							  QS_INCR_DATE   = I.QS_INCR_DATE ,
							  QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
							  SS_PC          = I.SS_PC,
								PROJECTION_GROUP = I.PROJECTION_GROUP
							FROM ' + @InforceTableName + ' AS T
							JOIN  [dbo].[Inforce_Last_Seen] AS I
							 ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
							 	JOIN #CALC_PARAMS AS P
							ON I.CENSUS_DATE = P.CENSUS_DATE
							WHERE T.COMMENT       IS NULL
							AND I.LAST_SEEN_DATE   >=  P. ONE_YEAR_AGO '

	EXECUTE sp_executesql @UpdCommOngoingSQL
	SET @TOTRECS           = @TOTRECS + @@ROWCOUNT
	  	--Print '-@@UpdCommOngoingSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
    Print 'Ongoing Benefits ' + convert(varchar(50), @UpdateRowCount)


	--This temp table is created to match all the Benefits, where the Contract_Risk_Key has changed, 
	-- but the benefit is an  "Ongoing Benefit" , if it matches the Primary and Secondary matching criteria
	
	--Change in contract Risk Key
  
	IF OBJECT_ID('tempdb.dbo.#New_Ongoing_Change', 'U') IS NOT NULL DROP TABLE #New_Ongoing_Change
   CREATE TABLE #New_Ongoing_Change
            (
              OLD_CONTRACT_RISK_KEY INT ,
			  NEW_CONTRACT_RISK_KEY INT,
			  Reins_Life_Identifier int,
			  Product_System_Code nvarchar(4),
              Product_code nvarchar(20),
			  Product_option_code nvarchar(20),
			  Contract_key int, 
			  Contract_ID nvarchar(11),
			  First_name nvarchar(50),
			  SURNAME nvarchar (50),
			  DOB date,
			  Gender_code nvarchar(1),
			  Sum_Insured_Amt int,
			  check_census date
			  )

	--Secondary Matching 

		 Declare @InsertNewReinsLifeIdentifier nvarchar(1500) = ''
		set  @InsertNewReinsLifeIdentifier  =  'INSERT INTO #New_Ongoing_Change
            (OLD_CONTRACT_RISK_KEY  ,
			  NEW_CONTRACT_RISK_KEY ,
			  Reins_Life_Identifier ,
			  Product_System_Code,
             Product_code ,
			 Product_option_code ,
			  Contract_key, 
			  Contract_Id,
			  First_name,
			  SURNAME ,
			  DOB ,
			  Gender_code,
			  Sum_Insured_Amt,
			   check_census 
            )
          select distinct L.Contract_risk_key,
		  I.CONTRACT_RISK_KEY,
		  I.reins_life_identifier,
		  I.Product_System_Code,
		  I.Product_code ,
			 I.Product_option_code ,
			  I.Contract_key, 
			  I.Contract_Id,
			  I.First_name,
			  I.SURNAME ,
			  I.DOB ,
			  I.Gender_code,
			  I.Sum_Insured_Amt,
			  L.LAST_SEEN_DATE from ' + @InforceTableName + ' As I
			inner join [dbo].[Inforce_Last_Seen]  as L  
			on  L.Product_Code = I.Product_code
			and L.Product_Option_Code = I.Product_Option_Code
			and L.First_name = I.FIRST_NAME
			and L.SURNAME = I.SURNAME
			and L.DOB = I.DOB
			and L.Gender_code = I.GENDER_CODE
			and L.Contract_Key  = I.CONTRACT_Key
			where (L.contract_risk_key <> I.contract_risk_key )
			and (L.Reins_Life_identifier  <> I.Reins_life_Identifier)
			and I.COMMENT is NULL'

	  EXECUTE sp_executesql @InsertNewReinsLifeIdentifier
		SET @InsertNewReinsLifeIdentifier  = @InsertRowCount + @@ROWCOUNT
	    Print 'Insert into #New_Ongoing_Change' + convert(varchar(50), @InsertRowCount)

	-- Insert the data in another table, which will be later used for Reporting Reinstatement Edge cases

	

		--Primary Matching Criteria

		Declare @InsertNewContractRiskKeySQL nvarchar(1500) = ''
		set  @InsertNewContractRiskKeySQL = 'INSERT INTO #New_Ongoing_Change
            
			(OLD_CONTRACT_RISK_KEY  ,
			  NEW_CONTRACT_RISK_KEY , 
			  Reins_Life_Identifier ,
			  Product_System_CODe,
             Product_code ,
			 Product_option_code ,
			  Contract_key, 
			  First_name,
			  SURNAME ,
			  DOB ,
			  Gender_code,
			  Sum_Insured_Amt,
			  check_census 
            )
          select L.Contract_risk_key,
		  T.CONTRACT_RISK_KEY,
		  T.reins_life_identifier,
		  T.Product_System_Code,
		  T.Product_code ,
			 T.Product_option_code ,
			  T.Contract_key, 
			  T.First_name,
			  T.SURNAME ,
			  T.DOB ,
			  T.Gender_code,
			  T.Sum_Insured_Amt,
			  L.LAST_SEEN_DATE from '  + @InforceTableName + ' As T
			inner join [dbo].[Inforce_Last_Seen]  as L  
			on  L.Product_Code = T.Product_code
			and L.Product_Option_Code = T.Product_Option_Code
			and L.Reins_Life_identifier  = T.Reins_life_Identifier
			and L.contract_Key = T.contract_key
			and (L.contract_risk_key <> T.contract_risk_key )
			and T.comment is Null'
  EXECUTE sp_executesql @InsertNewContractRiskKeySQL
		SET @InsertNewContractRiskKeySQL  = @InsertRowCount + @@ROWCOUNT
	    Print 'Insert into #New_Contract_Risk_Key' + convert(varchar(50), @InsertRowCount)



 
-- Identify the above specified benefits as "ONGOING". 

DECLARE @UpdChangedConractRiskKey nvarchar(1500) = ''
SET @UpdChangedConractRiskKey = 'UPDATE T
							   SET COMMENT      = ''ONGOING'' ,
							  QS_GAP_MONTHS  = DATEDIFF(MONTH, L.check_census, T.CENSUS_DATE) ,
							  QS_PC_BASE     = I.QS_PC_BASE ,
							  QS_PC_INCR     = I.QS_PC_INCR ,
							  QS_INCR_DATE   = I.QS_INCR_DATE ,
							  QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
							  QS_START_DATE  = I.QS_START_DATE,
							  PROJECTION_GROUP = I.PROJECTION_GROUP,
							  QS_PC_CONV     = 0. ,
							  	CPI_INCR                    =
												CASE
												  WHEN T.PRODUCT_SYSTEM_CODE     = ''U2''
												  AND NOT (MONTH(T.CENSUS_DATE) >= 7
												  AND MONTH(I.LAST_SEEN_DATE)      <= 6)
												  THEN 0 
												  WHEN T.CPI_INCR       > T.SUM_INSURED_AMT - I.SUM_INSURED_AMT
												  AND T.SUM_INSURED_AMT > I.SUM_INSURED_AMT
												  THEN T.SUM_INSURED_AMT - I.SUM_INSURED_AMT
												  WHEN T.SUM_INSURED_AMT <= I.SUM_INSURED_AMT
												  THEN 0
												  ELSE T.CPI_INCR
												END ,
							  SS_PC          = I.SS_PC
							FROM ' + @InforceTableName + ' AS T
							
							JOIN #New_Ongoing_Change  AS L
							ON T.CONTRACT_RISK_KEY = L.NEW_CONTRACT_RISK_KEY
							JOIN INFORCE_LAST_SEEN  AS I
							ON  L.OLD_CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY
							WHERE T.COMMENT       IS NULL 
							
							'
							
	EXECUTE sp_executesql @UpdChangedConractRiskKey 
	SET @TOTRECS           = @TOTRECS + @@ROWCOUNT
	  	--Print '-@@UpdCommOngoingSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
      Print 'Ongoing Benefits(New Contract Risk Key) ' + convert(varchar(50), @UpdateRowCount)
	
	
	--Update the Lapsed date for the records where contract risk key has changed
 
DECLARE @UpdReinstatementDate nvarchar(1500) = ''
SET @UpdReinstatementDate = ' Update [dbo].[LAPSED]
							Set [REINSTATEMENT_DATE] = T.CENSUS_DATE
							from [dbo].[LAPSED] as L
							join #New_Ongoing_Change as N on L.CONTRACT_RISK_KEY = N.OLD_CONTRACT_RISK_KEY
							join ' + @InforceTableName + ' AS T on T.CONTRACT_RISK_KEY  = N.NEW_CONTRACT_RISK_KEY 
							where T.comment = ''ONGOING''
							'
							
	EXECUTE sp_executesql @UpdReinstatementDate
	SET @TOTRECS           = @TOTRECS + @@ROWCOUNT
	  	--Print '-@@UpdCommOngoingSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
      Print 'Ongoing Benefits with updated reinstated date ' + convert(varchar(50), @UpdateRowCount)
	
	--Classified as Reinstated into Treaty At Start only for one year after the treaty start date
	DECLARE @UpdCommReinstatedSQL nvarchar(800) = ''
	SET @UpdCommReinstatedSQL = 'UPDATE T
								SET COMMENT      = ''REINSTATED INTO TREATY AT START'' ,
									QS_GAP_MONTHS  = P.MONTHS_SINCE_TREATY ,
									QS_PC_BASE     = 60. ,
									QS_PC_INCR     = 0. ,
									QS_PC_CONV     = 0. ,
									QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
									QS_START_DATE  = P.TREATY_START ,
									CPI_INCR       = 0
								FROM ' + @InforceTableName   + ' AS T
								Left JOIN  [dbo].[Inforce_Last_Seen] AS I
							     ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
								JOIN #CALC_PARAMS AS P
								ON T.CENSUS_DATE           = P.CENSUS_DATE
								WHERE T.CENSUS_DATE < = DATEADD(YEAR, 1, P.TREATY_START)
								AND  T.RISK_START_DATE      < = P.TREATY_START 
								AND T.COMMENT             IS NULL
								AND I.CONTRACT_RISK_KEY is NULL'

	Print @UpdCommReinstatedSQL
	EXECUTE sp_executesql @UpdCommReinstatedSQL
	SET @TOTRECS               = @TOTRECS + @@ROWCOUNT
    SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

    Print 'Find Reinstated records ' + convert(varchar(50), @UpdateRowCount)
  	--Print '-@UpdCommReinstatedSQL'






   --Benefits reinstated after 12 months
   

	DECLARE @UpdCommNewBusinessSQL nvarchar(1000) = ''
	SET @UpdCommNewBusinessSQL = 'UPDATE T
								SET COMMENT     = ''NEW BUSINESS IN CURRENT MONTH'' ,
								QS_GAP_MONTHS = DATEDIFF(MONTH, I.Last_Seen_date, T.census_date) 
								,
								QS_PC_BASE     = 60. ,
								QS_PC_INCR     = 0. ,
								QS_PC_CONV     = 0. ,
								QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
								QS_START_DATE  = I.QS_START_DATE  ,
								CPI_INCR       = 0
								FROM ' + @InforceTableName +    ' AS T
							
								JOIN  [dbo].[Inforce_Last_Seen] AS I
							 ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
							 	JOIN #CALC_PARAMS AS P
								ON I.CENSUS_DATE = P.CENSUS_DATE
							WHERE T.COMMENT       IS NULL
							AND I.LAST_SEEN_DATE   <  P. ONE_YEAR_AGO '
	EXECUTE sp_executesql @UpdCommNewBusinessSQL
		SET @TOTRECS               = @TOTRECS + @@ROWCOUNT

			  	--Print '-@UpdCommNewBusinessSQL'
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'Find New Records ' + convert(varchar(50), @UpdateRowCount)


	-- Legitimate "New Business" , which are in treaty for the first time


   IF 1 =
    (SELECT ALLOW_NEW_BUSINESS FROM #CALC_PARAMS
    ) BEGIN

	DECLARE @UpdNewBusinessSQL nvarchar(1000) = ''
	SET @UpdNewBusinessSQL = 'UPDATE T
								SET COMMENT     = ''NEW BUSINESS IN CURRENT MONTH'' ,
								QS_GAP_MONTHS = CASE 
								WHEN T.RISK_START_DATE      <  P.TREATY_START
								THEN   P.MONTHS_SINCE_TREATY 
								ELSE
								DATEDIFF(MONTH, T.Risk_Start_Date, P.TOMORROW) 
								END,
								QS_PC_BASE     = 60. ,
								QS_PC_INCR     = 0. ,
								QS_PC_CONV     = 0. ,
								QS_ANN_PREM_IF = ROUND(T.ANNUAL_PREM * 0.6,2) ,
								QS_START_DATE  =   CASE 
								WHEN T.RISK_START_DATE      <  P.TREATY_START
								THEN   P.TREATY_START
								ELSE T.Risk_Start_Date 
								END,
								CPI_INCR       = 0
								FROM ' + @InforceTableName +    ' AS T
							
								Left JOIN  [dbo].[Inforce_Last_Seen] AS I
							 ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
							 JOIN #CALC_PARAMS AS P
									ON T.CENSUS_DATE = P.CENSUS_DATE
							WHERE T.COMMENT       IS NULL
							AND I.Contract_risk_key is NUll '
	EXECUTE sp_executesql @UpdNewBusinessSQL
		SET @TOTRECS               = @TOTRECS + @@ROWCOUNT

			  	--Print '-@UpdCommNewBusinessSQL'
	 SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

     Print 'Find New Records ' + convert(varchar(50), @UpdateRowCount)
	END

	--Repopulate the Projection Group eg AMPN_LS_STP_INF
	-- RGU-1221- Dress Rehearsal - VI and CPI appearing on the 12th month changed .LAST_SEEN_DATE   >= P. ONE_YEAR_AGO added =
  DECLARE @UpdProjectionGrpSQL nvarchar(2000) = ''
		  SET  @UpdProjectionGrpSQL = 'UPDATE T
							SET PROJECTION_GROUP = REPLACE(T.PROJECTION_GROUP, ''???'',
							  CASE
							  WHEN  T.comment = ''REINSTATED INTO TREATY AT START''
								THEN ''INF''
								WHEN COALESCE(T.QS_START_DATE,T.RISK_START_DATE) > P.TREATY_START  
								THEN ''NB''
								WHEN I.LAST_SEEN_DATE >= P.ONE_YEAR_AGO AND COALESCE(T.QS_START_DATE, T.RISK_START_DATE) <= P.TREATY_START 
								THEN ''INF''
								ELSE ''NB''
							  END)
							FROM ' + @InforceTableName + ' AS T
								Left JOIN  [dbo].[Inforce_Last_Seen] AS I
							 ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY
							 and I.census_date = T.census_date
							 JOIN #CALC_PARAMS AS P
									ON T.CENSUS_DATE = P.CENSUS_DATE
											'
		  

		  EXECUTE sp_executesql  @UpdProjectionGrpSQL
	      SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
		
	
		  Print 'Repopulate the Projection Group ' + convert(varchar(50), @UpdateRowCount)



--Update the Commission Rates
DECLARE @UpdCommisionRatesSQL nvarchar(1500) = ''
SET @UpdCommisionRatesSQL = 'UPDATE T
								SET QS_IC_PC_BASE = BASE.IC_PC 
									,
									QS_IC_PC_INCR = INCR.IC_PC 
									,
									QS_IC_PC_CONV = COALESCE(CONV.IC_PC,0) 
									,
									QS_OC_PC_BASE = BASE.OC_PC 
									,
									QS_OC_PC_INCR = INCR.OC_PC 
									,
									QS_OC_PC_CONV = COALESCE(CONV.OC_PC,0) 
									,
									QS_OCX_PC_BASE = BASE.OCX_PC 
									,
									QS_OCX_PC_INCR = INCR.OCX_PC 
									,
									QS_OCX_PC_CONV = COALESCE(CONV.OCX_PC,0) 
								FROM ' + @InforceTableName + ' AS T
								
									JOIN COMMISSION  AS BASE
								ON T.PROJECTION_GROUP = BASE.PROJECTION_GROUP
								AND BASE.BASE_INCR    =''BASE''
								AND T.CENSUS_DATE BETWEEN BASE.[Effective_Start_Date] AND COALESCE(BASE.[Effective_End_Date],T.CENSUS_DATE) 
						
								JOIN COMMISSION AS INCR
								ON T.PROJECTION_GROUP = INCR.PROJECTION_GROUP
								AND INCR.BASE_INCR    =''INCR''
								AND T.CENSUS_DATE BETWEEN INCR.[Effective_Start_Date] AND COALESCE(INCR.[Effective_End_Date],T.CENSUS_DATE) 
								
								LEFT JOIN COMMISSION AS CONV
								ON T.PROJECTION_GROUP = CONV.PROJECTION_GROUP
								AND CONV.BASE_INCR    =T.CONVERTED_CATEGORY
								AND T.CENSUS_DATE BETWEEN CONV.[Effective_Start_Date] AND COALESCE(CONV.[Effective_End_Date],T.CENSUS_DATE) 
						'

								--Add new script to enable Time Variant Rate Calculation

								--Pervious Script

								--JOIN COMMISSION   AS BASE
								--ON T.PROJECTION_GROUP = BASE.PROJECTION_GROUP
								--AND BASE.BASE_INCR    =''BASE''
								--AND T.CENSUS_DATE BETWEEN BASE.FROM_DATE AND COALESCE(BASE.TO_DATE,T.CENSUS_DATE)
								--JOIN COMMISSION AS INCR
								--ON T.PROJECTION_GROUP = INCR.PROJECTION_GROUP
								--AND INCR.BASE_INCR    =''INCR''
								--AND T.CENSUS_DATE BETWEEN INCR.FROM_DATE AND COALESCE(INCR.TO_DATE,T.CENSUS_DATE)
								--LEFT JOIN COMMISSION AS CONV
								--ON T.PROJECTION_GROUP = CONV.PROJECTION_GROUP
								--AND CONV.BASE_INCR    =T.CONVERTED_CATEGORY
								--AND T.CENSUS_DATE BETWEEN CONV.FROM_DATE AND COALESCE(CONV.TO_DATE,T.CENSUS_DATE)'

 EXECUTE sp_executesql @UpdCommisionRatesSQL
   --	Print '-@UpdCommisionRatesSQL'

   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

   Print 'Update Commission Rates ' + convert(varchar(50), @UpdateRowCount)

-- Blended Commission Rate Temp Table (Srart)

--Declare @census_date datetime = '2020-01-31'

if (object_id('tempdb..#temp_blended_rate') is not null)
drop table #temp_blended_rate
	
;with cte_temp as (Select *,ROW_NUMBER() Over(partition by projection_group,base_incr, Effective_Start_Date order by effective_end_date desc) as ron from Commission),

cte as (SELECT distinct eomonth(Date_Value)  [Date],R.*
FROM [IDS_Control].[dbo].[Calendar] T
LEFT JOIN cte_temp As R ON eomonth(Date_Value) between R.Effective_Start_Date And R.Effective_End_Date
and ron = 1
where Date_Value between '20171031' and @CENSUS_DATE)
		
		select cte.* 
		,Case when datediff(month,Date,@CENSUS_DATE) >1 then 
		avg(OC_PC) over(partition by Projection_Group,BASE_INCR order by Date desc rows between unbounded preceding and current row) 
		else OC_PC end OC_PC_Blended

		,Case when datediff(month,Date,@CENSUS_DATE) >1 then 
		avg(OCX_PC) over(partition by Projection_Group,BASE_INCR order by Date desc rows between unbounded preceding and current row) 
		else OCX_PC end OCX_PC_Blended

		,datediff(month,Date,@CENSUS_DATE)  QS_GAP_MONTHS
		--,datediff(month,Date,@CENSUS_DATE)+1  QS_GAP_MONTHS
		into #temp_blended_rate
		from cte
		where  datediff(month,Date,@CENSUS_DATE) >0
		order by 2,1 

--Select * from #temp_blended_rate

-- Blended Commission Rate Temp Table (End)


-- Blended Commission Rate Calculation (Start)			

DECLARE @sql nvarchar(max) = 'update T
set QS_OC_PC_Base_Blended= IsNull(Temp.OC_PC_Blended,0.0),
QS_OC_PC_INCR_Blended= IsNull(Temp2.OC_PC_Blended,0.0),
QS_OC_PC_CONV_Blended= IsNull(Temp3.OC_PC_Blended,0.0),
QS_OCX_PC_Base_Blended= IsNull(Temp.OCX_PC_Blended,0.0),
QS_OCX_PC_INCR_Blended= IsNull(Temp2.OCX_PC_Blended,0.0),
QS_OCX_PC_CONV_Blended= IsNull(Temp3.OCX_PC_Blended,0.0)

from ' + @InforceTableName + ' T
Left join #temp_blended_rate Temp on Temp.QS_GAP_MONTHS = T.QS_GAP_MONTHS -1
and Temp.Projection_Group = T.Projection_Group and Temp.BASE_INCR = ''BASE''

Left join #temp_blended_rate Temp2 on Temp2.QS_GAP_MONTHS = T.QS_GAP_MONTHS -1
and Temp2.Projection_Group = T.Projection_Group and Temp2.BASE_INCR = ''INCR''

Left join #temp_blended_rate Temp3 on Temp3.QS_GAP_MONTHS = T.QS_GAP_MONTHS -1
and Temp3.Projection_Group = T.Projection_Group and Temp3.BASE_INCR LIKE ''CONV%''

where T.QS_GAP_MONTHS>1'

EXECUTE sp_executesql @sql

-- Blended Commission Rate Calculation (End)	

--Update the Reinsurance Amounts Fields
DECLARE @UpdReinsuranceAmtsSQL nvarchar(3500) = ''
SET @UpdReinsuranceAmtsSQL = 'UPDATE T
								SET QS_AMT_IC_BASE =
								  CASE
									WHEN COMMENT = ''INFORCE ON START DATE''
									THEN ROUND(ANNUAL_PREM * QS_PC_BASE/100. * QS_IC_PC_BASE/100.,2)
									WHEN COMMENT = ''REINSTATED INTO TREATY AT START''
									THEN ROUND(ANNUAL_PREM * QS_PC_BASE/100. * QS_IC_PC_BASE/100.,2)
									WHEN COMMENT = ''NEW BUSINESS IN CURRENT MONTH''
									THEN ROUND(ANNUAL_PREM * QS_PC_BASE/100. * QS_IC_PC_BASE/100.,2)
									WHEN COMMENT = ''CONVERSION''
									THEN ROUND(ANNUAL_PREM * QS_PC_CONV/100. * QS_IC_PC_CONV/100.,2)
									WHEN COMMENT = ''CONVERSION WITH INCR''
									THEN ROUND(ANNUAL_PREM * QS_PC_CONV/100. * QS_IC_PC_CONV/100.,2)
									ELSE 0
								  END ,
								  QS_AMT_IC_INCR =
								  CASE
									WHEN COMMENT = ''VOLUNTARY INCREASE''
									OR COMMENT LIKE ''%WITH INCR''
									THEN ROUND(ANNUAL_PREM * QS_PC_INCR/100 * QS_IC_PC_INCR/100.,2)
									ELSE 0
								  END ,
								  QS_AMT_REINP_CURR =
								  CASE
									WHEN QS_GAP_MONTHS > 0
									THEN ROUND(QS_ANN_PREM_IF / 12.,2)
									ELSE 0
								  END ,
								  QS_AMT_REINP_BCKD =
								  CASE
									WHEN QS_GAP_MONTHS > 0
									THEN ROUND(QS_ANN_PREM_IF / 12.,2) * (QS_GAP_MONTHS - 1)
									ELSE 0
								  END ,
								  QS_AMT_OC_CURR =
								  CASE
									WHEN QS_GAP_MONTHS > 0
									THEN ROUND(ANNUAL_PREM * (QS_PC_BASE*QS_OC_PC_BASE + QS_PC_INCR*QS_OC_PC_INCR + QS_PC_CONV*QS_OC_PC_CONV)/120000.,2)
									ELSE 0
								  END ,
								  QS_AMT_OC_BCKD =
								  CASE
									WHEN QS_GAP_MONTHS > 0
									THEN ROUND(ANNUAL_PREM * (QS_PC_BASE*QS_OC_PC_BASE_Blended + QS_PC_INCR*QS_OC_PC_INCR_Blended + QS_PC_CONV*QS_OC_PC_CONV_Blended)/120000.,2) * (QS_GAP_MONTHS - 1)
									ELSE 0
								  END ,
								  QS_AMT_OCX_CURR =
								  CASE
									WHEN QS_GAP_MONTHS >0
									THEN ROUND(ANNUAL_PREM * QS_PC_BASE*QS_OCX_PC_BASE / 120000. *
									  CASE
										WHEN DATEDIFF(MONTH, QS_START_DATE, P.TOMORROW) <=12
										THEN 1
										ELSE 0
									  END + ANNUAL_PREM * QS_PC_INCR*QS_OCX_PC_INCR / 120000. *
									  CASE
										WHEN DATEDIFF(MONTH, QS_INCR_DATE, P.TOMORROW) <=12
										THEN 1
										ELSE 0
									  END + ANNUAL_PREM * QS_PC_CONV*QS_OCX_PC_CONV / 120000. *
									  CASE
										WHEN DATEDIFF(MONTH, QS_START_DATE, P.TOMORROW) <=12
										THEN 1
										ELSE 0
									  END ,2)
									ELSE 0
								  END ,
								  QS_AMT_OCX_BCKD =
								  CASE
									WHEN QS_GAP_MONTHS > 0
									THEN ROUND(ANNUAL_PREM * QS_PC_BASE*QS_OCX_PC_BASE_Blended / 120000. * COALESCE(dbo.intmin(dbo.intminmax(DATEDIFF(MONTH, T.QS_START_DATE, P.TOMORROW),1,12),QS_GAP_MONTHS)-1,0) +ANNUAL_PREM * QS_PC_INCR*QS_OCX_PC_INCR_Blended / 120000. * COALESCE(dbo.intmin(dbo.intminmax(DATEDIFF(MONTH, T.QS_INCR_DATE, P.TOMORROW),1,12),QS_GAP_MONTHS)-1,0) +ANNUAL_PREM * QS_PC_CONV*QS_OCX_PC_CONV_Blended / 120000. * COALESCE(dbo.intmin(dbo.intminmax(DATEDIFF(MONTH, QS_START_DATE, P.TOMORROW),1,12),QS_GAP_MONTHS)-1,0) ,2)
									ELSE 0
								  END
								FROM ' + @InforceTableName + ' AS T,
								  #CALC_PARAMS    AS P'

	-- Print @UpdReinsuranceAmtsSQL


 EXECUTE sp_executesql @UpdReinsuranceAmtsSQL 
    	--Print '-@UpdReinsuranceAmtsSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

   Print 'Update Reinsurance Amounts ' + convert(varchar(50), @UpdateRowCount)

		Commit TRAN QS_Calc

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
RETURN @TOTRECS
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN QS_Calc;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END







GO
/****** Object:  StoredProcedure [dbo].[usp_Calc_SS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ====================================================================
-- Author:  RRNAA2
-- Create date: May 2019
-- Description:	Calculate the Surplus (SS) information for INFORCE_TEMP
-- ====================================================================
-- ====================================================================
-- Author:  KHNNR2
-- Create date: SEP 2019
-- Description:	Calculation for expired benefits are not required
-- ====================================================================
-- ====================================================================
-- Author:  KHNNR2
-- Create date: OCT 2019
-- Description:	Blended rates calculation 
-- ====================================================================

-- Version   Date          CreatedBy                     Description    
-- 0.4       2019-12-05    Nimesh S			         Updated Gender matching based on the criteria -- If it is F then F else M  
-- ====================================================================
-- Author:  KHNNR2
-- Create date: FEB 2020
-- Description:	Alted proc for SS_PREM_BCKD where QS_GAP_MONTH >1 (cals for NOV,2017) 
-- ====================================================================



CREATE PROCEDURE [dbo].[usp_Calc_SS] @CENSUS_DATE datetime,@PAS nvarchar(3)
-- Add the parameters for the stored procedure here
AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran SS_Calc

--IF OBJECT_ID('tempdb.dbo.#SS_PARAMS', 'U') IS NOT NULL DROP TABLE #SS_PARAMS
--DECLARE @CENSUS_DATE Date = (Select Top 1 CENSUS_DATE from INFORCE_TEMP)

	DECLARE @InforceTableName nvarchar(20) = ''
	SET @InforceTableName  = 'INFORCE_TEMP_' + @PAS
-- Nov 2019 - Surplus Per Life Change
-- Removed Retention Limit Values

--Select 
--	CENSUS_DATE = @CENSUS_DATE
--	,DTH_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'DTH' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--	,TPD_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'TPD' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--	,CC_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'CC'  and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--	,IP1_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IP1' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--	,IPN_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPN' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--	,IPA_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPA' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
--INTO #SS_PARAMS
--Select * FROM #SS_PARAMS
--Select * from RETENTION_LIMIT

--Clear all Base Rate calculation fields (Null signifies not yet been calculated) and calculate ALB_LPA
-- Nov 2019 - Surplus Per Life Change
-- Removed #SS_PARAMS table from Join ( #SS_PARAMS As P)
	
	DECLARE @UpdClearBaseRateSQL nvarchar(max) = ''
	SET @UpdClearBaseRateSQL = 'UPDATE T Set 
								AGE = year(T.RISK_START_DATE) - year(DOB) + Case when month(DOB)*100 + day(DOB) <= month(Risk_Start_date)*100 + day(RISK_START_DATE) Then 0 Else -1 End
								+ year(T.CENSUS_DATE) - year(RISK_START_DATE) + Case When month(RISK_START_DATE) <= month(T.CENSUS_DATE) Then 0 Else -1 End 
								,SS_DTH_BASE = Null
								,SS_TPD_BASE = Null
								,SS_CC_BASE = Null
								,SS_IP_BASE = Null 
								,SS_PREM_CURR = 0
								,SS_PREM_BCKD = 0									
							FROM ' + @InforceTableName + ' As T	'

	EXECUTE sp_executesql @UpdClearBaseRateSQL
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Clear all Base Rate calculation fields ' + convert(varchar(50), @UpdateRowCount)
	--Print '--@UpdClearBaseRateSQL'
	-- Calculation for expired benefits are not required.
	-- Nov 2019 - Surplus Per Life Change
-- Removed #SS_PARAMS table from Join ( #SS_PARAMS As P)

	DECLARE @UpdExpiredBenefitSQL nvarchar(max) = ''
	SET @UpdExpiredBenefitSQL = 'UPDATE T Set 
								AGE = year(T.RISK_START_DATE) - year(DOB) + Case when month(DOB)*100 + day(DOB) <= month(Risk_Start_date)*100 + day(RISK_START_DATE) Then 0 Else -1 End
								+ year(T.CENSUS_DATE) - year(RISK_START_DATE) + Case When month(RISK_START_DATE) <= month(T.CENSUS_DATE) Then 0 Else -1 End 
								,SS_DTH_BASE = 0
								,SS_TPD_BASE = 0
								,SS_CC_BASE = 0
								,SS_IP_BASE = 0 
								,SS_PREM_CURR = 0
								,SS_PREM_BCKD = 0									
							FROM ' + @InforceTableName + ' As T
							where  COMMENT in (''EXCLUDED AS UNIT LINKED BAL>SA'',''The Benefit has expired'')'
								
							--Datediff(day,RISK_EXPR_DATE,T.CENSUS_DATE) >15

	EXECUTE sp_executesql @UpdExpiredBenefitSQL
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculation for expired benefits not required & IL UL too' + convert(varchar(50), @UpdateRowCount)

--Calculate Surplus PC and Base Rates for to Age products
--Select Distinct SICKNESS_BENEFIT_PERIOD from INFORCE_TEMP
--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 

--NS 05/12 Updated the Gender condition to be used as M (Male) for any value other than F (Female) - THis has been done for the Cover types below

	DECLARE @UpdCalcSurplusPC nvarchar(max) = '' --change to (700) from 600
	SET @UpdCalcSurplusPC =  'UPDATE T Set 
									SS_PC = S.SS_PC 
									,SS_IP_BASE = coalesce(R.RATE,0)
								from ' + @InforceTableName + ' As T 
								LEFT JOIN SURPLUS_BASE_RATES As R 
								ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''IPA''
								and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                                
								,SS_Party_Smry_Mth S
								WHERE 
								T.Reins_Life_Identifier = S.Reins_Life_Identifier
								and T.CENSUS_DATE = S.Census_Date
								and S.Cover = ''IPA''
								and (isnull(SICKNESS_BENEFIT_PERIOD,'''') like ''A%'' or isnull(INJURY_BENEFIT_PERIOD,'''') like ''A%'')
								and T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'')
								and SS_IP_BASE is NULL'

		EXECUTE sp_executesql @UpdCalcSurplusPC
				--Print '--@UpdCalcSurplusPC'
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC and Base Rates for to Age products ' + convert(varchar(50), @UpdateRowCount)

--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 

	DECLARE @UpdOneyearBenefitSSPC nvarchar(max) = ''
	SET @UpdOneyearBenefitSSPC = 'UPDATE T Set 
										SS_PC = S.SS_PC
										,SS_IP_BASE = coalesce(R.RATE,0)
									from ' + @InforceTableName +  ' As T 
									LEFT JOIN SURPLUS_BASE_RATES As R 
									ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''IP1''
									and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                                
									,SS_Party_Smry_Mth S
									WHERE 
									T.Reins_Life_Identifier = S.Reins_Life_Identifier
									and T.CENSUS_DATE = S.Census_Date
									and S.Cover = ''IP1''
									and	(T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'')
											and SICKNESS_BENEFIT_PERIOD in (''M0'',''M6'',''M12'')
											and INJURY_BENEFIT_PERIOD in (''M0'',''M6'',''M12'')
										or T.PRODUCT_OPT_GROUP_DESC = ''BE'')
										and SS_IP_BASE is NULL'

		EXECUTE sp_executesql @UpdOneyearBenefitSSPC
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC One year benefit ' + convert(varchar(50), @UpdateRowCount)

--Print '--@UpdOneyearBenefitSSPC'

--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 

	DECLARE @UpdFixedTermBenefitSSPC nvarchar(max) = '' --chnage to (700) form 600
	SET @UpdFixedTermBenefitSSPC = 'UPDATE T Set 
										SS_PC = S.SS_PC
										,SS_IP_BASE = coalesce(R.RATE,0)
									from ' + @InforceTableName + ' As T 
									LEFT JOIN SURPLUS_BASE_RATES As R 
									ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''IPN''
									and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                   
									,SS_Party_Smry_Mth S
									WHERE 
									T.Reins_Life_Identifier = S.Reins_Life_Identifier
									and T.CENSUS_DATE = S.Census_Date
									and S.Cover = ''IPN'' 
									and T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'')
										and SS_IP_BASE is NULL'
	
	EXECUTE sp_executesql @UpdFixedTermBenefitSSPC
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC Remaining Fixed Term benefit periods ' + convert(varchar(50), @UpdateRowCount)

		--Print '--@UpdFixedTermBenefitSSPC'

	
--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 
	
	DECLARE @UpdDTHTPDSSPC nvarchar(max) = ''
	SET @UpdDTHTPDSSPC = 'UPDATE T Set 
								SS_PC = S.SS_PC
								,SS_TPD_BASE = coalesce(R.RATE,0)
							from ' + @InforceTableName + ' AS T 
							LEFT JOIN SURPLUS_BASE_RATES As R 
							ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''TPD''
							and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                               
							,SS_Party_Smry_Mth S
							WHERE 
							T.Reins_Life_Identifier = S.Reins_Life_Identifier
							and T.CENSUS_DATE = S.Census_Date
							and S.Cover = ''TPD''
							and T.PRODUCT_OPT_GROUP_DESC in (''TPD'',''DTH/TPD'')
								and SS_TPD_BASE is NULL'

	EXECUTE sp_executesql @UpdDTHTPDSSPC
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC for DTH TPD ' + convert(varchar(50), @UpdateRowCount)
				--Print '--@UpdDTHTPDSSPC'
	
	
--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 

		
	DECLARE @UpdTraumaDTHSSPC nvarchar(max) = ''
	SET @UpdTraumaDTHSSPC = 'UPDATE T Set 
								SS_PC = S.SS_PC
								,SS_CC_BASE = coalesce(R.RATE,0)
							from ' + @InforceTableName + ' AS T 
							LEFT JOIN SURPLUS_BASE_RATES As R 
							ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''CC''
							and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                                
							,SS_Party_Smry_Mth S
							WHERE 
							T.Reins_Life_Identifier = S.Reins_Life_Identifier
							and T.CENSUS_DATE = S.Census_Date
							and S.Cover = ''CC''
							and	T.PRODUCT_OPT_GROUP_DESC in (''TRAUMA'',''DTH/TRAUMA'')
								and SS_CC_BASE is NULL'

--print @UpdTraumaDTHSSPC

	EXECUTE sp_executesql @UpdTraumaDTHSSPC
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC for Trauma DTH ' + convert(varchar(50), @UpdateRowCount)
			--Print '--@UpdTraumaDTHSSPC'

				
--Added to use latest base rates/loadings from Surplus Master table
-- Nov 2019 - Surplus Per Life Change
-- Look Up SS_PC Value from SS_Party_Smry_Mth 

	DECLARE @UpdDTHSSPC nvarchar(max) = ''
	SET @UpdDTHSSPC = 'UPDATE T Set 
							SS_PC = S.SS_PC
							,SS_DTH_BASE = coalesce(R.RATE,0)
						from ' + @InforceTableName + ' AS T 
						LEFT JOIN SURPLUS_BASE_RATES As R 
						ON R.AGE = T.AGE and R.SEX = case when GENDER_CODE = ''F'' then ''F'' else ''M'' end and R.COVER = ''DTH''
						and	T.Census_Date between R.Row_Eftv_date And R.Row_end_date                                                              
						,SS_Party_Smry_Mth S
						WHERE 
						T.Reins_Life_Identifier = S.Reins_Life_Identifier
						and T.CENSUS_DATE = S.Census_Date
						and S.Cover = ''DTH''
						and	T.PRODUCT_OPT_GROUP_DESC in (''DTH'')
							and SS_DTH_BASE is NULL'
select distinct SS_DTH_BASE from INFORCE_TEMP_DS
	EXECUTE sp_executesql @UpdDTHSSPC
		--	Print '--@UpdDTHSSPC'
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus PC for DTH ' + convert(varchar(50), @UpdateRowCount)

-- Blended Rate Temp Table Start

--Using sequence of numbers from table [IDS_Control].[dbo].[Calendar] and SURPLUS_BASE_RATES to create a logical base rates table 
--that includes all possible census dates and effective rates at that time

if (object_id('tempdb..#temp_blended_rate') is not null)
drop table #temp_blended_rate
	
;with cte as (SELECT distinct eomonth(Date_Value)  [Date],R.*
FROM [IDS_Control].[dbo].[Calendar] T
LEFT JOIN SURPLUS_BASE_RATES As R ON eomonth(Date_Value) between R.Row_Eftv_date And R.Row_end_date
where Date_Value between '20171031' and @CENSUS_DATE)
		
		select cte.* 
		,Case when datediff(month,Date,@CENSUS_DATE) >1 then 
		avg(rate) over(partition by Cover,Sex,Age order by Date desc rows between unbounded preceding and current row) 
		else rate end AverageRate
		,datediff(month,Date,@CENSUS_DATE)  QS_GAP_MONTHS
		--,datediff(month,Date,@CENSUS_DATE)+1  QS_GAP_MONTHS
		into #temp_blended_rate
		from cte
		where  datediff(month,Date,@CENSUS_DATE) >0
		order by 2,1

--#temp table includes all the census dates with respective effective dates for all categories

--select * from #temp_blended_rate order by 1
--select * from #temp_blended_rate

-- Blended Rate Temp Table End

--EXECUTE sp_executesql @sql 
--DTH Multipliers
	
DECLARE @UpdDTHMultipliersSSPC nvarchar(max) = '' --chnage to (700) form 600
SET @UpdDTHMultipliersSSPC = 'UPDATE T SET
							SS_DTH_MULT = coalesce(SMOKE.FACTOR, DEF.FACTOR)
						FROM ' + @InforceTableName + ' As T
							LEFT JOIN SURPLUS_LOADINGS As SMOKE 
							on SMOKE.COVER = ''DTH'' and SMOKE.VARIABLE = ''SMOKER_STATUS_CODE'' 
							and T.SMOKER_STATUS_CODE = SMOKE.VALUE
							and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = SMOKE.SEX 
							and	T.Census_Date between SMOKE.Row_Eftv_date And SMOKE.Row_end_date  
							JOIN SURPLUS_LOADINGS As DEF
							on DEF.COVER = ''DTH'' and DEF.VARIABLE = ''SMOKER_STATUS_CODE'' 
							and DEF.VALUE is NULL
							and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = DEF.SEX 
							and T.Census_Date between DEF.Row_Eftv_date And DEF.Row_end_date
						WHERE T.SS_DTH_BASE > 0'
	
EXECUTE sp_executesql @UpdDTHMultipliersSSPC
			--Print '--@UpdDTHMultipliersSSPC'
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Calculate Surplus PC for DTH Multipliers ' + convert(varchar(50), @UpdateRowCount)

--CC Multipliers

DECLARE @UpdCCMultipliersSSPC nvarchar(max) = ''
SET @UpdCCMultipliersSSPC = 'UPDATE T SET
							SS_CC_MULT = coalesce(SMOKE.FACTOR, DEF.FACTOR)
						FROM ' + @InforceTableName + ' As T
						LEFT JOIN SURPLUS_LOADINGS As SMOKE 
						on SMOKE.COVER = ''CC'' and SMOKE.VARIABLE = ''SMOKER_STATUS_CODE'' 
						and T.SMOKER_STATUS_CODE = SMOKE.VALUE
						and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = SMOKE.SEX
						and T.Census_Date between SMOKE.Row_Eftv_date And SMOKE.Row_end_date  
						JOIN SURPLUS_LOADINGS As DEF
						on DEF.COVER = ''CC'' and DEF.VARIABLE = ''SMOKER_STATUS_CODE'' 
						and DEF.VALUE is NULL
						and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = DEF.SEX 
						and T.Census_Date between DEF.Row_Eftv_date And DEF.Row_end_date 
						WHERE T.SS_CC_BASE > 0'

EXECUTE sp_executesql @UpdCCMultipliersSSPC
	--	Print '--@UpdCCMultipliersSSPC'
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Calculate Surplus PC for CC Multipliers ' + convert(varchar(50), @UpdateRowCount)

--MAP TPD Occupations

DECLARE @UpdMapTPDOccupation nvarchar(max) = ''
SET @UpdMapTPDOccupation = 'Update T Set
							SS_OCCUPATION = coalesce(OCC.SS_OCC,DEF.SS_OCC)
						FROM ' + @InforceTableName + ' AS T
							LEFT JOIN OCC_MAP As OCC on OCC.PROD = ''TPD'' and T.OCUPTN_CLASS_CODE = OCC.OCC and T.PRODUCT_SYSTEM_CODE = OCC.PAS 
							JOIN OCC_MAP As DEF on DEF.PROD = ''TPD'' and DEF.OCC = ''*'' and T.PRODUCT_SYSTEM_CODE = DEF.PAS
						WHERE T.PRODUCT_OPT_GROUP_DESC in (''TPD'',''DTH/TPD'')'

EXECUTE sp_executesql @UpdMapTPDOccupation
		--Print '--@UpdMapTPDOccupation' + @UpdMapTPDOccupation
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Map TPD Occupation ' + convert(varchar(50), @UpdateRowCount)

--MAP IP Occupations
--Select * from OCC_MAP
--Select Distinct OCUPTN_CLASS_CODE from INFORCE_TEMP
--Select Distinct SS_OCCUPATION from INFORCE_TEMP
	
DECLARE @UpdMapOccupation nvarchar(max) = ''
SET @UpdMapOccupation = 'Update T Set
							SS_OCCUPATION = coalesce(OCC.SS_OCC,DEF.SS_OCC)
						FROM ' + @InforceTableName + ' AS T
							LEFT JOIN OCC_MAP As OCC on OCC.PROD = ''IP'' and T.OCUPTN_CLASS_CODE = OCC.OCC and T.PRODUCT_SYSTEM_CODE = OCC.PAS 
							JOIN OCC_MAP As DEF on DEF.PROD = ''IP'' and DEF.OCC = ''*'' and T.PRODUCT_SYSTEM_CODE = DEF.PAS 
						WHERE T.PRODUCT_OPT_GROUP_DESC in (''IP'',''BE'', ''TSC'')'
	
EXECUTE sp_executesql @UpdMapOccupation
		--Print '--@UpdMapOccupation' + @UpdMapOccupation
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Map IP Occupation ' + convert(varchar(50), @UpdateRowCount)

--Update TPD Multipliers
DECLARE @UpdSSTPDMult nvarchar(max) = ''
SET @UpdSSTPDMult = 'UPDATE T SET
					SS_TPD_MULT = coalesce(SMOKE.FACTOR, DEF_SMOKE.FACTOR) * coalesce(OCC.FACTOR, DEF_OCC.FACTOR)
				FROM ' + @InforceTableName + ' As T
				LEFT JOIN SURPLUS_LOADINGS As SMOKE 
					on SMOKE.COVER = ''TPD'' and SMOKE.VARIABLE = ''SMOKER_STATUS_CODE'' 
					and T.SMOKER_STATUS_CODE = SMOKE.VALUE
					and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = SMOKE.SEX 
					and T.Census_Date between SMOKE.Row_Eftv_date And SMOKE.Row_end_date   
				JOIN SURPLUS_LOADINGS As DEF_SMOKE
					on DEF_SMOKE.COVER = ''TPD'' and DEF_SMOKE.VARIABLE = ''SMOKER_STATUS_CODE'' 
					and DEF_SMOKE.VALUE is NULL
					and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = DEF_SMOKE.SEX 
					and T.Census_Date between DEF_SMOKE.Row_Eftv_date And DEF_SMOKE.Row_end_date  
				LEFT JOIN SURPLUS_LOADINGS As OCC
					on OCC.COVER = ''TPD'' and OCC.VARIABLE = ''MAPPED_OCC''
					and T.SS_OCCUPATION = OCC.VALUE 
					and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = OCC.SEX
					and T.Census_Date between OCC.Row_Eftv_date And OCC.Row_end_date  
				JOIN SURPLUS_LOADINGS As DEF_OCC
					on DEF_OCC.COVER = ''TPD'' and DEF_OCC.VARIABLE = ''MAPPED_OCC''
					and DEF_OCC.VALUE is NULL
					and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = DEF_OCC.SEX
					and T.Census_Date between DEF_OCC.Row_Eftv_date And DEF_OCC.Row_end_date  
			WHERE T.SS_TPD_BASE > 0'
	
EXECUTE sp_executesql @UpdSSTPDMult
		--	Print '--@UpdSSTPDMult'
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Update SS TPD Multipliers ' + convert(varchar(50), @UpdateRowCount)
	
--Update the IP Multipliers

DECLARE @UpdIPMult nvarchar(max) = ''
SET @UpdIPMult = 'Update T Set
				 SS_IP_MULT = coalesce(SMOKE.FACTOR, DEF_SMOKE.FACTOR) * OCC.FACTOR * coalesce(INCR.FACTOR, 1.0) * coalesce(INDM.FACTOR, 1.0) * WP.FACTOR * BP.FACTOR
				FROM ' + @InforceTableName + ' As T
				LEFT JOIN SURPLUS_LOADINGS AS SMOKE
				on SMOKE.COVER = ''IP'' and SMOKE.VARIABLE = ''SMOKER_STATUS_CODE''
				and T.SMOKER_STATUS_CODE = SMOKE.VALUE and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = SMOKE.SEX
				and T.Census_Date between SMOKE.Row_Eftv_date And SMOKE.Row_end_date
				JOIN  SURPLUS_LOADINGS AS DEF_SMOKE
				on DEF_SMOKE.COVER = ''IP'' and DEF_SMOKE.VARIABLE = ''SMOKER_STATUS_CODE''
				and DEF_SMOKE.VALUE is NULL and (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) = DEF_SMOKE.SEX
				and T.Census_Date between DEF_SMOKE.Row_Eftv_date And DEF_SMOKE.Row_end_date
				JOIN SURPLUS_LOADINGS As OCC 
				on OCC.COVER = ''IP'' and OCC.VARIABLE = ''OCUPTN_CLASS_CODE''
				and OCC.VALUE = T.SS_OCCUPATION and OCC.SEX = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) 
				and T.Census_Date between OCC.Row_Eftv_date And OCC.Row_end_date
				LEFT JOIN SURPLUS_LOADINGS As INCR
				on INCR.COVER = ''IP'' and INCR.VARIABLE = ''INCREASING_CLAIM_OPT''
				and INCR.VALUE = Case When T.INCR_CLAIM_OPT_PCNT>0 Then ''Y'' ELSE ''N'' End
				and INCR.SEX = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end)
				and T.Census_Date between INCR.Row_Eftv_date And INCR.Row_end_date
				LEFT JOIN SURPLUS_LOADINGS As INDM
				on INDM.COVER = ''IP'' and INDM.VARIABLE = ''INDMNTY_OPTION_CODE''
				and INDM.VALUE = T.INDMNTY_OPTION_CODE and INDM.SEX = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end) 
				and T.Census_Date between INDM.Row_Eftv_date And INDM.Row_end_date
				JOIN SURPLUS_LOADINGS As WP 
				on WP.COVER = ''IP'' and WP.VARIABLE = ''WAITING_PERIOD'' and WP.SEX = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end)
				and WP.VALUE = Case
					When T.RISK_WAIT_PERIOD in (''000D'',''000W'',''000M'') then ''D0''
					When T.RISK_WAIT_PERIOD in (''007D'',''001W'') then ''W1''
					When T.RISK_WAIT_PERIOD in (''014D'',''002W'') then ''W2''
					When T.RISK_WAIT_PERIOD in (''028D'',''030D'',''004W'',''001M'') then ''W4''
					When T.RISK_WAIT_PERIOD in (''060D'',''008W'',''002M'') then ''M2''
					When T.RISK_WAIT_PERIOD in (''090D'',''013W'',''003M'') then ''M3''
					When T.RISK_WAIT_PERIOD in (''180D'',''026W'',''006M'') then ''M6''
					When T.RISK_WAIT_PERIOD in (''360D'',''365D'',''052W'',''012M'',''001Y'') then ''Y1''
					When T.RISK_WAIT_PERIOD in (''720D'',''730D'',''104W'',''024M'',''002Y'') then ''Y2''
					Else ''D0''
					End
					and T.Census_Date between WP.Row_Eftv_date And WP.Row_end_date
				JOIN SURPLUS_LOADINGS As BP
				on BP.COVER = ''IP'' and BP.VARIABLE = ''BENEFIT_PERIOD'' and BP.SEX = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end)
				and BP.VALUE = Case
					When T.SICKNESS_BENEFIT_PERIOD = ''AL'' or T.INJURY_BENEFIT_PERIOD = ''AL'' Then 99
					When T.SICKNESS_BENEFIT_PERIOD = ''A70'' or T.INJURY_BENEFIT_PERIOD = ''A70'' Then 70
					When T.SICKNESS_BENEFIT_PERIOD = ''A65'' or T.INJURY_BENEFIT_PERIOD = ''A65'' Then 65
					When T.SICKNESS_BENEFIT_PERIOD = ''A60'' or T.INJURY_BENEFIT_PERIOD = ''A60'' Then 60
					When T.SICKNESS_BENEFIT_PERIOD = ''A55'' or T.INJURY_BENEFIT_PERIOD = ''A55'' Then 55
					When T.SICKNESS_BENEFIT_PERIOD = ''M60'' or T.INJURY_BENEFIT_PERIOD = ''M60'' Then 5
					When T.SICKNESS_BENEFIT_PERIOD = ''M24'' or T.INJURY_BENEFIT_PERIOD = ''M24'' Then 2
					When T.SICKNESS_BENEFIT_PERIOD = ''M18'' or T.INJURY_BENEFIT_PERIOD = ''M18'' Then 2
					When T.SICKNESS_BENEFIT_PERIOD = ''M12'' or T.INJURY_BENEFIT_PERIOD = ''M12'' or T.PRODUCT_OPT_GROUP_DESC = ''BE'' Then 1
					End
					and T.Census_Date between BP.Row_Eftv_date And BP.Row_end_date
			WHERE
				T.PRODUCT_OPT_GROUP_DESC in (''IP'',''BE'',''TSC'')'

	EXECUTE sp_executesql @UpdIPMult
		--		Print '@UpdIPMult' + @UpdIPMult
SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
Print 'Update SS IP Multipliers ' + convert(varchar(50), @UpdateRowCount)

--

--Update the Surplus Annual Premium

DECLARE @UpdSSPremAmt nvarchar(max) = '' --chnage to (700) form 600
	SET @UpdSSPremAmt = 'Update T Set 
						SS_ANN_PREM =  round(
						(coalesce(DTH_SUM_ASSD/1000 * SS_DTH_BASE  * SS_DTH_MULT * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
						+ coalesce(TPD_SUM_ASSD/1000 * SS_TPD_BASE * SS_TPD_MULT * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
						+ coalesce(CC_SUM_ASSD/1000  * SS_CC_BASE  * SS_CC_MULT  * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
					    + coalesce(ANN_PHI_BEN/12000 * SS_IP_BASE  * SS_IP_MULT,0) 
					    ) * SS_PC/100.0,2)
	FROM ' + @InforceTableName +' As T
	WHERE SS_PC > 0'

	EXECUTE sp_executesql @UpdSSPremAmt 
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Update Surplus Premium ' + convert(varchar(50), @UpdateRowCount)

	
	--Update the Surplus Premium Calculation and Return number of policies with surplus reinsurance 


	DECLARE @RECS int
	DECLARE @UpdSSPrem nvarchar(max) = ''
	SET @UpdSSPrem = 'UPDATE T Set 
		SS_PREM_CURR = round(SS_ANN_PREM / 12., 2)
		--,SS_PREM_BCKD = round(SS_ANN_PREM / 12., 2) * Case 
		--	When COMMENT = ''REINSTATED INTO TREATY AT START'' Then QS_GAP_MONTHS
		--	When QS_GAP_MONTHS > 1 Then QS_GAP_MONTHS - 1
		--	Else 0 
		--  End
	FROM ' + @InforceTableName + ' As T
	WHERE SS_PC > 0
		
	'

	EXECUTE sp_executesql @UpdSSPrem 
		 				--Print '--@UpdIPMult'
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	Print 'Calculate Surplus Premium ' + convert(varchar(50), @UpdateRowCount)
	SET @RECS = @@ROWCOUNT
	Commit TRAN SS_Calc

-- Blended Rate Update

    --cte statement is pointed to Inforce Temp table to get all Average rates as per the QS_GAP_Months column for each Contract Ids
	--select * from cte

	--Using all the average rates obtained using cte, updating the main temp table with respective rate as required as per respective cover

DECLARE @sql nvarchar(max) = 'update T 
		set SS_DTH_Blended= Case When T.PRODUCT_OPT_GROUP_DESC in (''DTH'') then cte.AverageRate end,
		SS_TPD_Blended = Case When T.PRODUCT_OPT_GROUP_DESC in (''TPD'',''DTH/TPD'') then cte.AverageRate end,
		SS_CC_Blended  = Case When T.PRODUCT_OPT_GROUP_DESC in (''TRAUMA'',''DTH/TRAUMA'') then cte.AverageRate end,
		SS_IP_Blended  = Case when T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'') then cte.AverageRate end
		from ' + @InforceTableName + ' T
		inner join #temp_blended_rate cte on cte.QS_GAP_MONTHS = T.QS_GAP_MONTHS -1
		and cte.Age = T.Age and cte.Sex = (case when T.GENDER_CODE = ''F'' then ''F'' else ''M'' end)
		and cte.COVER = Case When T.PRODUCT_OPT_GROUP_DESC in (''DTH'') then ''DTH''
			When T.PRODUCT_OPT_GROUP_DESC in (''TPD'',''DTH/TPD'') then ''TPD''
			When T.PRODUCT_OPT_GROUP_DESC in (''TRAUMA'',''DTH/TRAUMA'') then ''CC''
			When (isnull(SICKNESS_BENEFIT_PERIOD,'''') like ''A%'' or isnull(INJURY_BENEFIT_PERIOD,'''') like ''A%'')
			and T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'') then ''IPA''
			When (T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'') and SICKNESS_BENEFIT_PERIOD in (''M0'',''M6'',''M12'')
            and INJURY_BENEFIT_PERIOD in (''M0'',''M6'',''M12'') or T.PRODUCT_OPT_GROUP_DESC = ''BE'') then ''IP1''
			When T.PRODUCT_OPT_GROUP_DESC in (''IP'',''TSC'') then ''IPN''
		end where T.QS_GAP_MONTHS>1 and SS_PC > 0'	

EXECUTE sp_executesql @sql 
				
	SET @UpdSSPremAmt = 'Update T Set 
						SS_PREM_BCKD =  round(((round(
						(coalesce(DTH_SUM_ASSD/1000 * SS_DTH_Blended  * SS_DTH_MULT * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
						+ coalesce(TPD_SUM_ASSD/1000 * SS_TPD_Blended * SS_TPD_MULT * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
						+ coalesce(CC_SUM_ASSD/1000  * SS_CC_Blended  * SS_CC_MULT  * (1 + isnull(ASSESS_LOAD_PCNT,0)/100.),0)
						+ coalesce(ANN_PHI_BEN/12000 * SS_IP_Blended  * SS_IP_MULT,0) 
						) * SS_PC/100.0,2)) / 12.0
		                )*Case  When QS_GAP_MONTHS > 1 Then QS_GAP_MONTHS - 1 Else 0 End ,2) FROM ' + @InforceTableName +' As T 
						WHERE SS_PC > 0 and QS_GAP_MONTHS > 1'
	
	
	--					)*Case  When COMMENT = ''REINSTATED INTO TREATY AT START'' Then QS_GAP_MONTHS
	--	When QS_GAP_MONTHS > 1 Then QS_GAP_MONTHS - 1 Else 0 End ,2) FROM ' + @InforceTableName +' As T WHERE SS_PC > 0 and QS_GAP_MONTHS > 1'
	
	--WHERE SS_PC > 0 and QS_GAP_MONTHS > 1'
EXECUTE sp_executesql @UpdSSPremAmt 

Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
RETURN @RECS
END TRY

BEGIN CATCH
	
IF @@TRANCOUNT > 0
ROLLBACK TRAN SS_Calc;

select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

THROW;

END CATCH


END


GO
/****** Object:  StoredProcedure [dbo].[usp_CheckIndependent]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================
-- Author:	KHNNR2
-- Create date: Jun 2019
-- Description:	
-- ==================================================================
-- Author:		AWJ
-- Create date: Dec 2016
-- Description:	Produces a Summary of Record Movements over the month
-- Change Log:  Oct 2017 - AWJ - Updated to QUOTA_SHARE2
-- ==================================================================
--EXEC usp_CheckMovements '31-Jan-2017'

CREATE PROCEDURE [dbo].[usp_CheckIndependent]
	@CURR_DATE date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--DECLARE @CURR_DATE Date = '31-DEC-2018'

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	
	DECLARE @PREV_DATE DATE = dbo.DateSerial(Year(@CURR_DATE), Month(@CURR_DATE),0)
		
	Begin Try

	Begin Tran Load_Independent
	
	--Delete any exisiting movements for the census date
	Delete from dbo.Sumy_Independent_Checks where CENSUS_DATE = @CURR_DATE

	Set @DeleteRowCount = @@ROWCOUNT

	Insert into dbo.Sumy_Independent_Checks
	SELECT  [CENSUS_DATE]
      ,[PRODUCT_SYSTEM_CODE]
      --,[SORT_ORDER]
      ,[CATEGORY]
      ,SUM([SQL_PREMIUM]) AS SQL_PREMIUM
      ,SUM([PAS_PREMIUM]) AS PAS_PREMIUM
      ,SUM([SQL_SI]) AS SQL_SI
      ,SUM([PAS_SI]) AS PAS_SI
	  ,SUM([POLICIES]) AS POLICIES
   --  ,COUNT(DISTINCT [CONTRACT_ID]) AS POLICIES
  FROM [dbo].[INDEPENDENT_CHECKS]
  where CENSUS_DATE = @CURR_DATE
  GROUP BY   [CENSUS_DATE]
			,[PRODUCT_SYSTEM_CODE]
            ,[SORT_ORDER]
            ,[CATEGORY]


	Set @InsertRowCount = @@ROWCOUNT

Commit Tran Load_Independent

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Load_Independent;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH

END

--EXEC usp_CheckMovements '31-Jan-2017'
GO
/****** Object:  StoredProcedure [dbo].[usp_CheckMinRetained]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AWJ
-- Create date: Oct 2017
-- Description:	Create 
-- =============================================
-- EXEC usp_CheckMinRetained '31-Jan-2017'
-- EXEC usp_MinRet_Bordereau '31-Jan-2017', 'DS,FDA'
-- EXEC usp_MinRet_Bordereau '31-Jan-2017', 'DS,FDA'
CREATE PROCEDURE [dbo].[usp_CheckMinRetained]
	-- Add the parameters for the stored procedure here
	@CENSUS_DATE Date

AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Begin Try	
	
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	
	Begin Tran CheckMinRetained

	SET NOCOUNT ON;
	DELETE FROM MIN_RETAINED Where CENSUS_DATE = @CENSUS_DATE
	
	 SET @DeleteRowCount  = @DeleteRowCount + @@ROWCOUNT

	 Print 'Delete any records with a forward dated risk start ' + convert(varchar(50), @DeleteRowCount)

	Insert into MIN_RETAINED
	Select * FROM (
		Select
			I.CENSUS_DATE
			,CONTRACT_KEY, CONTRACT_RISK_KEY, CONTRACT_ID, PRODUCT_SYSTEM_CODE, PRODUCT_CODE, PRODUCT_OPTION_CODE, PRODUCT_OPT_GROUP_DESC
			,Case 
				When PRODUCT_OPT_GROUP_DESC in ('IP','TSC','BE') Then ANN_PHI_BEN
				When PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') Then TPD_SUM_ASSD
				When PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then CC_SUM_ASSD
				When PRODUCT_OPT_GROUP_DESC = 'DTH'  Then DTH_SUM_ASSD
				End As GROSS_COVER
			,100 - QS_PC_BASE - QS_PC_CONV - QS_PC_INCR - SS_PC As RETAINED_PC
			,Case 
				When PRODUCT_OPT_GROUP_DESC in ('IP','TSC','BE') Then ANN_PHI_BEN
				When PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') Then TPD_SUM_ASSD
				When PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then CC_SUM_ASSD
				When PRODUCT_OPT_GROUP_DESC = 'DTH'  Then DTH_SUM_ASSD
				End * (100 - QS_PC_BASE - QS_PC_CONV - QS_PC_INCR - SS_PC)/100. As RETAINED_COVER
			,Case When
				PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and (isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%') Then IPA_LIMIT 
				When (PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') and INJURY_BENEFIT_PERIOD in ('M0','M6','M12')	or PRODUCT_OPT_GROUP_DESC = 'BE') Then IP1_LIMIT
				When PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then IPN_LIMIT
				When PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') Then TPD_LIMIT
				When PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then CC_LIMIT
				When PRODUCT_OPT_GROUP_DESC = 'DTH' Then DTH_LIMIT
			End As RETENTION_LIMIT,
			getdate() as [Created_Date_Time],
			I.Process_Log_Id as [Process_Log_ID],
			Current_User as [Created_BY]

		FROM INFORCE As I,(
			Select 
				CENSUS_DATE = @CENSUS_DATE
				,DTH_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'DTH' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				,TPD_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'TPD' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				,CC_LIMIT =   (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'CC'  and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				,IP1_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IP1' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				,IPN_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPN' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				,IPA_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPA' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
				) As L

		WHERE I.CENSUS_DATE = @CENSUS_DATE and PRODUCT_OPT_GROUP_DESC in ('DTH','TPD','TRAUMA','DTH/TRAUMA','DTH/TPD','IP','TSC','BE')
		) As III

	WHERE RETAINED_COVER < 0.4 * GROSS_COVER - 1 and RETAINED_COVER < RETENTION_LIMIT - 1
	
	 SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	 Print 'Insert Records to MIN_RETAINED ' + convert(varchar(50), @InsertRowCount)

	 Commit TRAN CheckMinRetained

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN CheckMinRetained;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH
	

END
GO
/****** Object:  StoredProcedure [dbo].[usp_CheckMovements]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==============================================
-- Author:	KHNNR2
-- Create date: Jun 2019
-- Description:	
-- ==================================================================
-- Author:		AWJ
-- Create date: Dec 2016
-- Description:	Produces a Summary of Record Movements over the month
-- Change Log:  Oct 2017 - AWJ - Updated to QUOTA_SHARE2
-- ==================================================================
--EXEC usp_CheckMovements '31-Jan-2017'

CREATE PROCEDURE [dbo].[usp_CheckMovements]
	@CURR_DATE date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--DECLARE @CURR_DATE Date = '31-DEC-2018'

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	
	DECLARE @PREV_DATE DATE = dbo.DateSerial(Year(@CURR_DATE), Month(@CURR_DATE),0)
		
	Begin Try

	Begin Tran Load_Movement
	
	--Delete any exisiting movements for the census date
	Delete from MOVEMENTS where CENSUS_DATE = @CURR_DATE

	Set @DeleteRowCount = @@ROWCOUNT

	Insert into MOVEMENTS(MOVEMENT, CENSUS_DATE, FROM_CATEGORY, TO_CATEGORY, POLICIES, LIVES, RECORDS, PREV_SUM_INSURED, 
			CURR_SUM_INSURED, PREV_PREMIUM, CURR_PREMIUM, PREV_COMMENT, CURR_COMMENT, CURR_CONTRACT_KEY, PREV_CONTRACT_KEY, CURR_PARTY_KEY, PREV_PARTY_KEY)
	Select 
		[MOVEMENT] = Case 
			When CURR.COMMENT is NULL Then 'OFF MOVEMENTS'
			WHEN PREV.COMMENT is NULL Then 'ON MOVEMENTS'
			Else 'INFORCE MOVEMENTS'
		End
		,CENSUS_DATE = @CURR_DATE
		,FROM_CATEGORY = isnull(PREV.COMMENT, 'Not Present')
		,TO_CATEGORY   = isnull(CURR.COMMENT, 'Not Present')
		,POLICIES = coalesce(CURR.CONTRACT_KEY, PREV.CONTRACT_KEY)
		,LIVES = coalesce(CURR.PARTY_KEY, PREV.PARTY_KEY)
		,RECORDS = (1)
		,PREV_SUM_INSURED = (PREV.SUM_INSURED_AMT)
		,CURR_SUM_INSURED = (CURR.SUM_INSURED_AMT)
		,PREV_PREMIUM = (PREV.ANNUAL_PREM)
		,CURR_PREMIUM = (CURR.ANNUAL_PREM)
		,PREV_COMMENT = PREV.COMMENT 
		,CURR_COMMENT = CURR.COMMENT
		,CURR_CONTRACT_KEY = CURR.CONTRACT_KEY 
		,PREV_CONTRACT_KEY = PREV.CONTRACT_KEY
		,CURR_PARTY_KEY = CURR.PARTY_KEY
		,PREV_PARTY_KEY = PREV.PARTY_KEY
	FROM (Select * FROM INFORCE WHERE CENSUS_DATE = @CURR_DATE) as CURR 
		FULL OUTER JOIN 
		 (Select * FROM INFORCE WHERE CENSUS_DATE=@PREV_DATE) As PREV 
		on CURR.CONTRACT_RISK_KEY = PREV.CONTRACT_RISK_KEY 
	--GROUP BY PREV.COMMENT, CURR.COMMENT
	Order by 1,2,3,4

	Set @InsertRowCount = @@ROWCOUNT

Commit Tran Load_Movement

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Stage_OPUS;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH

END

--EXEC usp_CheckMovements '31-Jan-2017'
GO
/****** Object:  StoredProcedure [dbo].[usp_CheckPCodes]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		AWJ
-- Create date: Oct 2017
-- Description:	Looks for Missing ACODE/PCODE
-- =============================================
-- EXEC usp_Check_Pcodes '31-Jan-2017'
CREATE PROCEDURE [dbo].[usp_CheckPCodes]
	-- Add the parameters for the stored procedure here
	@CENSUS_DATE Date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @PMISS int, @BENS int, @ErrorMessage nvarchar(255)
	Select @PMISS = count(*), @BENS = sum(RECS) From (
		Select PRODUCT_SYSTEM_CODE, CLASS_OF_BUSN_CODE, PRODUCT_CODE, PRODUCT_OPTION_CODE, count(*) as RECS
		from INFORCE
		where ((ACODE is NULL) or (PCODE is NULL)) and CENSUS_DATE = @CENSUS_DATE
		group by PRODUCT_SYSTEM_CODE, CLASS_OF_BUSN_CODE, PRODUCT_CODE, PRODUCT_OPTION_CODE
		) as III
	--Print @PMISS
	--Print @BENS

	If @PMISS > 0
		BEGIN
		SET @ErrorMessage = 'INFORCE TABLE Contains ' + convert(nvarchar,@PMISS) + ' missing ACODES/PCODES on ' + convert(nvarchar, @BENS) + ' benefits'
		Insert into ERROR_LOG Select @CENSUS_DATE, 60, @ErrorMessage,'usp_Check_PCodes',0,0, SYSDATETIME()
		END
	ELSE
		EXEC usp_LOG @STORED_PROC='usp_CheckPCodes', @CENSUS_DATE=@CENSUS_DATE, @STEP='No Missing ACODE/PCODEs', @RECS=0
END

GO
/****** Object:  StoredProcedure [dbo].[usp_CheckStatistics]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ==============================================
-- Author:	KHNNR2
-- Create date: Jun 2019
-- Description:	
-- ==================================================================
-- Author:		AWJ
-- Create date: Dec 2016
-- Description:	Produces a Summary of Record Movements over the month
-- Change Log:  Oct 2017 - AWJ - Updated to QUOTA_SHARE2
-- ==================================================================
--EXEC usp_CheckMovements '31-Jan-2017'

CREATE PROCEDURE [dbo].[usp_CheckStatistics]
	@CURR_DATE date
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--DECLARE @CURR_DATE Date = '31-DEC-2018'

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0
	
	DECLARE @PREV_DATE DATE = dbo.DateSerial(Year(@CURR_DATE), Month(@CURR_DATE),0)
		
	Begin Try

	Begin Tran Load_Statistics
	
	--Delete any exisiting movements for the census date
	Delete from dbo.Statistics_Check where CENSUS_DATE = @CURR_DATE

	Set @DeleteRowCount = @@ROWCOUNT

	Insert into dbo.Statistics_Check
	Select
	PROJECTION_GROUP
	,PCODE
	,MP
	,CENSUS_DATE
	,POLICIES = count(Distinct CONTRACT_KEY)
	,LIVES = count(Distinct Party_Key)
	,RECORDS = count(*)
	,SUM_INSURED = sum(SUM_INSURED_AMT)
	,API = sum(ANNUAL_PREM)
	,BASE_REIN = sum(convert(real,ANNUAL_PREM)*QS_PC_BASE/100)/nullif(sum(ANNUAL_PREM),0)
	,BASE_INCR = sum(convert(real,ANNUAL_PREM)*QS_PC_INCR/100)/nullif(sum(ANNUAL_PREM),0)
	,BASE_CONV = sum(convert(real,ANNUAL_PREM)*QS_PC_CONV/100)/nullif(sum(ANNUAL_PREM),0)
FROM INFORCE
where census_date = @CURR_DATE
GROUP BY
	PROJECTION_GROUP
	,PCODE
	,MP
	,CENSUS_DATE 

	ORDER BY 
	PROJECTION_GROUP
	,CASE PCODE 
		When 'PONP1' Then 1
		When 'PSNP1' Then 2
		When 'PSNP2' Then 3
		When 'PONP3' Then 4
		When 'PDIS1' Then 5
		When 'PDISS' Then 6
		When 'QONP1' Then 7
		When 'QONPL' Then 8
		When 'QSNP1' Then 9
		When 'QSNPL' Then 10
		When 'QSNP2' Then 11
		When 'QONP3' Then 12
		When 'QDIS1' Then 13
		When 'QDISS' Then 14
		When 'QDISL' Then 15
		Else 16
	End
	,MP
	Set @InsertRowCount = @@ROWCOUNT

Commit Tran Load_Statistics

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Load_Statistics;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH

END

--EXEC usp_CheckMovements '31-Jan-2017'
GO
/****** Object:  StoredProcedure [dbo].[usp_Claims_ListingTableTreatyIDUpdate]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: 13/10/2020
-- Description:	Updating Treaty_ID for the Listing tables if claim found in ConversionIdentification table for the Processing Month.
-- =============================================
CREATE PROCEDURE [dbo].[usp_Claims_ListingTableTreatyIDUpdate]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here

BEGIN TRAN Tran1;

	-- Update Able_Claim_Listing with the Reins_Life_Identifier from Inforce

--print 'ABLE'

		 update [dbo].[Able_Claim_Listing]
		 set Layer_1_Treaty_Id = T.Treaty_Id,
			 Is_Layer_1_Covered = 'Y',
			 Layer_1_Treaty_Percent = T.[Treaty_Relevant_Percent],
			 Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
			 [Updated_Date_Time] = getdate(),
			 updated_by  = system_user
		 from ABLE_Claim_Listing L
		 join ConvIdentification C
		 on L.EDW_Contract_Id = C.On_Contract_id
		 and L.EDW_Product_Code = C.On_Product_Code
		 and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		 and L.Month_Eftv_Date = C.IDS_Census_Date
		 join Reins_Treaty T
		 on C.IDS_Census_Date < T.Treaty_End_Date
		 where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		 and T.Treaty_Name = 'Removed from GenRe QS'
		 and C.Valid_Conversion_Indicator = 'YES'

 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 --print 'FT'
 	-- Update Figtree_Claim_Listing with the Reins_Life_Identifier from Inforce
		 update [dbo].FigTree_Claim_Listing
		 set Layer_1_Treaty_Id = T.Treaty_Id,
			 Is_Layer_1_Covered = 'Y',
			 Layer_1_Treaty_Percent = T.[Treaty_Relevant_Percent],
			 Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
			 [Updated_Date_Time] = getdate(),
			 updated_by  = system_user
		 from FigTree_Claim_Listing L
		 join ConvIdentification C
		 on L.EDW_Contract_Id = C.On_Contract_id
		 and L.EDW_Product_Code = C.On_Product_Code
		 and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		 and L.Month_Eftv_Date = C.IDS_Census_Date
		 join Reins_Treaty T
		 on C.IDS_Census_Date < T.Treaty_End_Date
		 where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		 and T.Treaty_Name = 'Removed from GenRe QS'
		 and C.Valid_Conversion_Indicator = 'YES'

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

--print 'WMS'

	-- Update WMS_Claim_Listing with the Reins_Life_Identifier from Inforce

 		 update [dbo].WMS_Claim_Listing
		 set Layer_1_Treaty_Id = T.Treaty_Id,
			 Is_Layer_1_Covered = 'Y',
			 Layer_1_Treaty_Percent = T.[Treaty_Relevant_Percent],
			 Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
			 [Updated_Date_Time] = getdate(),
			 updated_by  = system_user
		 from WMS_Claim_Listing L
		 join ConvIdentification C
		 on L.EDW_Contract_Id = C.On_Contract_id
		 and L.EDW_Product_Code = C.On_Product_Code
		 and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		 and L.Month_Eftv_Date = C.IDS_Census_Date
		 join Reins_Treaty T
		 on C.IDS_Census_Date < T.Treaty_End_Date
		 where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		 and T.Treaty_Name = 'Removed from GenRe QS'
		 and C.Valid_Conversion_Indicator = 'YES'

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
 
 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		update [dbo].Reins_Claim_Listing
		 set Layer_1_Treaty_Id = T.Treaty_Id,
			 Is_Layer_1_Covered = 'Y',
			 Layer_1_Treaty_Percent = T.[Treaty_Relevant_Percent],
			 Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
			 [Updated_Date_Time] = getdate(),
			 updated_by  = system_user
		 from Reins_Claim_Listing L
		 join ConvIdentification C
		 on L.EDW_Contract_Id = C.On_Contract_id
		 and L.EDW_Product_Code = C.On_Product_Code
		 and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		 and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
		 join Reins_Treaty T
		 on C.IDS_Census_Date < T.Treaty_End_Date
		 where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		 and T.Treaty_Name = 'Removed from GenRe QS'
		 and C.Valid_Conversion_Indicator = 'YES'

		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran2;

 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Tran1;
	ROLLBACK TRAN Tran2;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Claims_Reins_Life_Identifiers]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 14/11/2019
-- Description:	Surplus Per Life Change requirement - New Logic to update Reins_Life_Identifier from Inforce
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Create date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================

CREATE PROCEDURE [dbo].[usp_Claims_Reins_Life_Identifiers]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int,@ClaimSrc varchar(5)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here

BEGIN TRAN Tran1;

	-- Update Able_Claim_Listing with the Reins_Life_Identifier from Inforce
If @ClaimSrc = 'ABLE' 
--print 'ABLE'
BEGIN
 update [dbo].[Able_Claim_Listing]
 set Reins_Life_Identifier = I.Reins_Life_Identifier
  FROM [dbo].[Able_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)

 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
END

 if @ClaimSrc = 'FT'
 --print 'FT'
 	-- Update Figtree_Claim_Listing with the Reins_Life_Identifier from Inforce
BEGIN
 update [dbo].[Figtree_Claim_Listing]
 set Reins_Life_Identifier = I.Reins_Life_Identifier
 FROM [dbo].[Figtree_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Date_of_Death)-1, -1) 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   and trg.Date_of_Death > convert(datetime,'01/jan/1753')

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
END

if @ClaimSrc = 'WMS'
--print 'WMS'
BEGIN
	-- Update WMS_Claim_Listing with the Reins_Life_Identifier from Inforce

 UPDATE [dbo].[WMS_Claim_Listing]
 Set Reins_Life_Identifier = I.Reins_Life_Identifier
 FROM [dbo].[WMS_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.DOD_Incident)-1, -1)
  and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
END

if @ClaimSrc = 'CMS'
--print 'CMS'
BEGIN
	-- Update CMS_Claim_Listing with the Reins_Life_Identifier from Inforce

 UPDATE [dbo].[CMS_Claim_Listing]
 Set Reins_Life_Identifier = I.Reins_Life_Identifier
 FROM [dbo].[CMS_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1)
  and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
END
 
 COMMIT TRAN Tran1;

 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Tran1;
	
	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_ConvIdentification_DataEnrich]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_ConvIdentification_DataEnrich]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	-- Enrich Off Contract ID Column Details from Inforce based on Last Seen Record of Contract 


	BEGIN TRAN T1;

	IF OBJECT_ID('tempdb.dbo.#LastSeenOffContract', 'U') IS NOT NULL
		 DROP TABLE #LastSeenOffContract
		 CREATE TABLE #LastSeenOffContract
		 (
		 Census_Date_LastSeen Date,
		 Off_Contract_Id_Inforce Varchar(11),
		 Off_Product_Code varchar(10),
		 Off_Contract_Product_Opt_Group_Desc Varchar(10),
		 Risk_Life_Insured_Dob_cv Date
		 --Off_date Date
		 )
		 Insert Into #LastSeenOffContract
		 (
		 Census_Date_LastSeen,
		  Off_Contract_Id_Inforce,
		 Off_Product_Code,
		 Off_Contract_Product_Opt_Group_Desc,
		 Risk_Life_Insured_Dob_cv
		-- Off_Date
		 ) 
		 select
		 MAX(I.CENSUS_DATE) Census_Date_LastSeen,
		  I.CONTRACT_ID as Off_Contract_Id_Inforce,
		   I.PRODUCT_CODE as Off_Product_Code ,
		I.PRODUCT_OPT_GROUP_DESC as Off_Contract_Product_Opt_Group_Desc  ,
		I.DOB as Risk_Life_Insured_Dob_cv
		--I.RISK_EXPR_DATE as Off_Date
		from Inforce I
		join ConvIdentification_Temp C
		on
		 C.Off_Contract_Id =	I.CONTRACT_ID
		and C.Off_Product_Code = I.PRODUCT_CODE
		and C.API_Risk_Type_Code_cv = I.PRODUCT_OPT_GROUP_DESC
		and C.Risk_Life_Insured_Dob_cv = I.DOB
		--and C.Off_Date = I.RISK_EXPR_DATE
		group by I.CONTRACT_ID,I.PRODUCT_CODE,I.PRODUCT_OPT_GROUP_DESC,I.DOB
		--,I.RISK_EXPR_DATE

		Update ConvIdentification_Temp
		set Off_Contract_Risk_Start_Date  = I.RISK_START_DATE,
		 Off_Contract_Contract_Key = I.CONTRACT_KEY,
		 Off_Contract_Contract_Risk_Key  = I.CONTRACT_RISK_KEY,
		 Off_Product_Option_Code =  I.PRODUCT_OPTION_CODE,
		 Off_Contract_Sum_Insured  = (I.SUM_INSURED_AMT * (-1)),
		 Off_Contract_Product_Opt_Group_Desc  = I.PRODUCT_OPT_GROUP_DESC,
		 Off_Contract_Projection_Group  =  I.PROJECTION_GROUP
		from inforce I
		  Join #LastSeenOffContract L
		 on
		 L.Off_Contract_Id_Inforce = I.CONTRACT_ID
		and L.Off_Product_Code = I.PRODUCT_CODE
		and L.Off_Contract_Product_Opt_Group_Desc = I.PRODUCT_OPT_GROUP_DESC
		and L.Risk_Life_Insured_Dob_cv = I.DOB
		--and L.Off_date = I.RISK_EXPR_DATE
		join ConvIdentification_Temp C
		on
		 C.Off_Contract_Id =	I.CONTRACT_ID
		and C.Off_Product_Code = I.PRODUCT_CODE
		and C.API_Risk_Type_Code_cv = I.PRODUCT_OPT_GROUP_DESC
		and C.Risk_Life_Insured_Dob_cv = I.DOB
		--and C.Off_Date = I.RISK_EXPR_DATE
		where I.CENSUS_DATE = L.Census_Date_LastSeen

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T1;

 -- Enrich Off Contract ID Column details from Commission table 
    BEGIN TRAN T2;

		Update ConvIdentification_Temp
		set 
		RECALC_QS_IC_PC_BASE = BASE.IC_PC,
		RECALC_QS_IC_PC_INCR = INCR.IC_PC,
		RECALC_QS_IC_PC_CONV = COALESCE(CONV.IC_PC,0),
 		RECALC_QS_OC_PC_BASE = BASE.OC_PC,
		RECALC_QS_OC_PC_INCR = INCR.OC_PC,
		RECALC_QS_OC_PC_CONV = COALESCE(CONV.OC_PC,0),
		RECALC_QS_OCX_PC_BASE = BASE.OCX_PC,
		RECALC_QS_OCX_PC_INCR = INCR.OCX_PC,
		RECALC_QS_OCX_PC_CONV = COALESCE(CONV.OCX_PC,0)
		from  ConvIdentification_Temp C	
		Join #LastSeenOffContract L
		 on
		 L.Off_Contract_Id_Inforce = C.Off_Contract_Id
		and L.Off_Product_Code = C.Off_Product_Code
		and L.Off_Contract_Product_Opt_Group_Desc = C.API_Risk_Type_Code_cv
		and L.Risk_Life_Insured_Dob_cv = C.Risk_Life_Insured_Dob_cv	
		  Join Inforce I
		 on  I.Contract_ID = L.Off_Contract_Id_Inforce
		and I.PRODUCT_CODE = L.Off_Product_Code
		and I.PRODUCT_OPT_GROUP_DESC = L.Off_Contract_Product_Opt_Group_Desc
		and I.DOB = L.Risk_Life_Insured_Dob_cv
		JOIN COMMISSION BASE
		 ON I.PROJECTION_GROUP  = BASE.PROJECTION_GROUP
								  AND BASE.BASE_INCR    = 'BASE'
								  AND I.CENSUS_DATE BETWEEN BASE.[Effective_Start_Date] AND COALESCE(BASE.[Effective_End_Date],I.CENSUS_DATE)
								  AND BASE.[Current_Record_Indicator]=1
		JOIN COMMISSION AS INCR
		ON I.PROJECTION_GROUP = INCR.PROJECTION_GROUP
								  AND INCR.BASE_INCR    = 'INCR'
								  AND I.CENSUS_DATE BETWEEN INCR.[Effective_Start_Date] AND COALESCE(INCR.[Effective_End_Date],I.CENSUS_DATE) 
								  AND BASE.[Current_Record_Indicator]=1
		left JOIN COMMISSION AS CONV
								  ON I.PROJECTION_GROUP = CONV.PROJECTION_GROUP
								  AND CONV.BASE_INCR  = I.CONVERTED_CATEGORY
								  AND I.CENSUS_DATE BETWEEN CONV.[Effective_Start_Date] AND COALESCE(CONV.[Effective_End_Date],I.CENSUS_DATE) 
								  AND CONV.[Current_Record_Indicator]=1
    where I.CENSUS_DATE = L.Census_Date_LastSeen


	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T2;
	Drop table #LastSeenOffContract

		-- Enrich On Contract ID column details from Inforce (Lastseen recs for On Contract)

	BEGIN TRAN T3;
		
		IF OBJECT_ID('tempdb.dbo.#LastSeenOnContract', 'U') IS NOT NULL
		 DROP TABLE #LastSeenOnContract
		 CREATE TABLE #LastSeenOnContract
		 (
		 Census_Date_LastSeen Date,
		 On_Contract_ID_Inforce Varchar(11),
		 On_Product_Code varchar(10),
		 On_Product_Option_Code Varchar(20)
		-- Risk_Life_Insured_Dob_cv Date
		 )
		 Insert Into #LastSeenOnContract
		 (
		 Census_Date_LastSeen,
		  On_Contract_ID_Inforce,
		 On_Product_Code,
		 On_Product_Option_Code
		 --Risk_Life_Insured_Dob_cv
		 ) 
		 select
		 MAX(I.CENSUS_DATE) Census_Date_LastSeen,
		  I.CONTRACT_ID as On_Contract_ID_Inforce,
		   I.PRODUCT_CODE as On_Product_Code ,
		I.PRODUCT_OPTION_CODE as On_Product_Option_Code 
		--I.DOB as Risk_Life_Insured_Dob_cv
		from Inforce I
		join ConvIdentification_Temp C
		on
		 C.On_Contract_id =	I.CONTRACT_ID
		and C.On_Product_Code = I.PRODUCT_CODE
		and C.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and C.Risk_Life_Insured_Dob_cv = I.DOB
		group by I.CONTRACT_ID,I.PRODUCT_CODE,I.PRODUCT_OPTION_CODE
		--,I.DOB

--select * from #LastSeenOnContract

		Update ConvIdentification_Temp
		set On_Census_Date = I.CENSUS_DATE,
		On_Contract_Risk_Start_Date = I.RISK_START_DATE,
		On_Contract_Risk_Expr_Date = I.RISK_EXPR_DATE,
		On_Contract_Status = (Case 
								when I.CENSUS_DATE = IDS_Census_Date then 'OPEN' 
								when I.CENSUS_DATE < IDS_Census_Date then 'LAPSED' 
								else 'UNKNOWN' 
								END),
		On_Contract_Contract_Key = I.CONTRACT_KEY,
		On_Contract_Contract_Risk_Key = I.CONTRACT_RISK_KEY,
		 On_Product_Option_Code =  I.PRODUCT_OPTION_CODE,
		 On_Contract_Sum_Insured = I.SUM_INSURED_AMT,
		 On_Contract_Product_Opt_Group_Desc = I.PRODUCT_OPT_GROUP_DESC,
		 On_Contract_Annual_Premium =  I.ANNUAL_PREM ,
		 On_Contract_QS_PC_BASE  = I.QS_PC_BASE,
		 On_Contract_QS_PC_INCR = I.QS_PC_INCR ,
		 On_Contract_QS_PC_CONV=  I.QS_PC_CONV ,
		 Reinsurer_Name = 'MUNICH RE',
		On_Contract_Original_Sum_Insured = NULL ,
		 On_Contract_Original_Annual_Premium = NULL
		from inforce I
		  Join #LastSeenOnContract L
		 on
		 L.On_Contract_ID_Inforce = I.CONTRACT_ID
		and L.On_Product_Code = I.PRODUCT_CODE
		and L.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and L.Risk_Life_Insured_Dob_cv = I.DOB
		join ConvIdentification_Temp C
		on
		 C.On_Contract_id =	I.CONTRACT_ID
		and C.On_Product_Code = I.PRODUCT_CODE
		and C.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and C.Risk_Life_Insured_Dob_cv = I.DOB
		where I.CENSUS_DATE = L.Census_Date_LastSeen

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		COMMIT TRAN T3;
		Drop Table #LastSeenOnContract


-- Enrich On Contract ID column details from Inforce (First seen recs for On Contract)
	BEGIN TRAN T4;
		
		IF OBJECT_ID('tempdb.dbo.#FirstSeenOnContract', 'U') IS NOT NULL
		 DROP TABLE #FirstSeenOnContract
		 CREATE TABLE #FirstSeenOnContract
		 (
		 Census_Date_FirstSeen Date,
		 On_Contract_ID_Inforce Varchar(11),
		 On_Product_Code varchar(10),
		 On_Product_Option_Code Varchar(20)
		-- Risk_Life_Insured_Dob_cv Date
		 )
		 Insert Into #FirstSeenOnContract
		 (
		 Census_Date_FirstSeen,
		  On_Contract_ID_Inforce,
		 On_Product_Code,
		 On_Product_Option_Code
		 --Risk_Life_Insured_Dob_cv
		 ) 
		 select
		 Min(I.CENSUS_DATE) Census_Date_FirstSeen,
		  I.CONTRACT_ID as On_Contract_ID_Inforce,
		   I.PRODUCT_CODE as On_Product_Code ,
		I.PRODUCT_OPTION_CODE as On_Product_Option_Code 
		--I.DOB as Risk_Life_Insured_Dob_cv
		from Inforce I
		join ConvIdentification_Temp C
		on
		 C.On_Contract_id =	I.CONTRACT_ID
		and C.On_Product_Code = I.PRODUCT_CODE
		and C.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and C.Risk_Life_Insured_Dob_cv = I.DOB
		group by I.CONTRACT_ID,I.PRODUCT_CODE,I.PRODUCT_OPTION_CODE
		--,I.DOB

--select * from #LastSeenOnContract

		Update ConvIdentification_Temp
		set
		On_Contract_Original_Sum_Insured = I.SUM_INSURED_AMT ,
		 On_Contract_Original_Annual_Premium = I.ANNUAL_PREM
		from inforce I
		  Join #FirstSeenOnContract F
		 on
		 F.On_Contract_ID_Inforce = I.CONTRACT_ID
		and F.On_Product_Code = I.PRODUCT_CODE
		and F.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and F.Risk_Life_Insured_Dob_cv = I.DOB
		join ConvIdentification_Temp C
		on
		 C.On_Contract_id =	I.CONTRACT_ID
		and C.On_Product_Code = I.PRODUCT_CODE
		and C.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		--and C.Risk_Life_Insured_Dob_cv = I.DOB
		where I.CENSUS_DATE = F.Census_Date_FirstSeen

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		COMMIT TRAN T4;
		Drop Table #FirstSeenOnContract
	
	-- On Contract Claims Data Match
	BEGIN TRAN T5;
	
	
	CREATE TABLE #LastestClaim
		 (
		  Row_End_Date Datetime,
		 EDW_Contract_Id varchar(50),
		 EDW_Product_Code Varchar(20),
		 EDW_Product_Option_Code varchar(20),
		 Incurred_Date Datetime	
		 )
		 Insert Into #LastestClaim
		 (
		 Row_End_Date,
		 EDW_Contract_Id,
		  EDW_Product_Code,
		 EDW_Product_Option_Code,
		 Incurred_Date	 
		 ) 
		 select
		 MAX(I.Row_End_Date) Row_End_Date,
		  I.EDW_Contract_Id as EDW_Contract_Id,
		   I.EDW_Product_Code as EDW_Product_Code ,
		I.EDW_Product_Option_Code as EDW_Product_Option_Code ,
		I.Incurred_Date as Incurred_Date
		from Reins_Claim_Listing I
		group by I.EDW_Contract_Id,I.EDW_Product_Code,I.EDW_Product_Option_Code,I.Incurred_Date

		update ConvIdentification_Temp
		set Claim_Number = R.claim_Number,
		Claim_Status = R.Claim_Status
		from ConvIdentification_Temp C
		join #LastestClaim L
		on L.EDW_Contract_Id = C.On_Contract_id
		and L.EDW_Product_Code = C.On_Product_Code
		and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		--and CONVERT(Date, L.Incurred_Date ) >= C.On_Census_Date
		join Reins_Claim_Listing R
		on L.EDW_Contract_Id = R.EDW_Contract_Id
		and L.EDW_Product_Code = R.EDW_Product_Code
		and L.EDW_Product_Option_Code = R.EDW_Product_Option_Code
		where R.Row_End_Date = L.Row_End_Date

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T5;
	DROP TABLE #LastestClaim

-- Updating Comments & Valid_For_Conversion	
  BEGIN TRAN T6;

	  update  [dbo].[ConvIdentification_Temp]
	  set Comments = 'Unable to match ON Contract'
	  where On_Census_Date is NULL


  	  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	  update  [dbo].[ConvIdentification_Temp]
	  set Comments = 'Unable to match OFF Contract'
	  where Off_Contract_Projection_Group is NULL

  	  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	  update  [dbo].[ConvIdentification_Temp]
	  set Comments = 'Unable to match ON & OFF Contracts'
	  where Off_Contract_Projection_Group is NULL and on_census_Date is NULL

	  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	    update  [dbo].[ConvIdentification_Temp]
	  set Valid_Conversion_Indicator = 'NO'
	  where Comments in ('Unable to match ON Contract','Unable to match ON & OFF Contracts')

	  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

  COMMIT TRAN T6;


	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	RollBACK TRAN T2;
	RollBACK TRAN T3;
	RollBACK TRAN T4;
	RollBACK TRAN T5;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_Able_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_Able_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
 --
 BEGIN TRY;
 BEGIN TRAN T1; 
/*
*/
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_Figtree_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_Figtree_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
 --
 BEGIN TRY;
 BEGIN TRAN T1; 
/*
*/
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_Stg_Able_Claim_Benefit]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_Stg_Able_Claim_Benefit]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @BatchLogID Int = 0
	DECLARE @MasterBatchLogID Int = 0
 --
 BEGIN TRY;
 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
 BEGIN TRAN T1; 
/*UPDATE [STG].[Stg_Able_Claim_Benefit] swd
SET 
  where 1=2
   AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	                             from  [CTL].[ImportLog],
									   [CTL].[PackageLog],
									   [CTL].[BatchLog],
									   [CTL].[PackageConfig],
										[CTL].[FileConfig],
										[CTL].[FileLog]
							   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
								 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
								 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
								 and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
								 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
								 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
								and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
								   )
								 --
								 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	                             and [CTL].[ImportLog].[TableName] = 'Stg.Stg_Able_Claim_Benefit')
 ;*/
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_Stg_Figtree_Life_Claim]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_Stg_Figtree_Life_Claim]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @BatchLogID Int = 0
	DECLARE @MasterBatchLogID Int = 0
 --
 BEGIN TRY;
 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
 BEGIN TRAN T1; 
 -- Update Date_of_Death to 16th March,2008 for claim C087918, in-case Date of death is received as 16th March,0208
--UPDATE [STG].[Stg_Figtree_Life_Claim]
--SET Date_of_Death = convert(Datetime,'16/mar/2008')
--  where 1=1
--   AND claim_number = 'C087918'
--   and Date_of_Death = convert(Datetime2,'16/mar/0208')
--   AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
--	                             from  [CTL].[ImportLog],
--									   [CTL].[PackageLog],
--									   [CTL].[BatchLog],
--									   [CTL].[PackageConfig],
--										[CTL].[FileConfig],
--										[CTL].[FileLog]
--							   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
--								 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
--								 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
--								  and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
--								 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
--								 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
--								and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
--								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
--								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
--								   )
--								 --
--								 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
--	                             and [CTL].[ImportLog].[TableName] = 'Stg.Stg_Figtree_Life_Claim')
 ;
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_Stg_WMS_Banner_DeathOnly]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_Stg_WMS_Banner_DeathOnly]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @BatchLogID Int = 0
	--DECLARE @MasterBatchLogID Int = 0
 --
 BEGIN TRY;
 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
 BEGIN TRAN T1; 
/*UPDATE [STG].[Stg_WMS_Banner_DeathOnly] swd
SET 
  where 1=2
   AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	                             from  [CTL].[ImportLog],
									   [CTL].[PackageLog],
									   [CTL].[BatchLog],
									   [CTL].[PackageConfig],
										[CTL].[FileConfig],
										[CTL].[FileLog]
							   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
								 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
								 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
								  and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
								 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
								 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
								and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
								   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
								   )
								 --
								 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	                             and [CTL].[ImportLog].[TableName] = 'Stg.Stg_WMS_Banner_DeathOnly')
 ;*/
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Correct_WMS_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Correct_WMS_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
 --
 BEGIN TRY;
 BEGIN TRAN T1; 
/*
*/
  --
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_Dedup_Stg_U2_Party]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		NK
-- Create date: 09 May 2019
-- Description:	Drop the Duplicated party_key records
-- =============================================
CREATE PROCEDURE [dbo].[usp_Dedup_Stg_U2_Party] 

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	
	SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Begin Try
   	
			--Drop the Duplicated party_key records
			--Create a list of contracts with duplicated parties

			--IF OBJECT_ID('tempdb.dbo.#DUPLICATED_PARTY', 'U') IS NOT NULL DROP TABLE #DUPLICATED_PARTY

	Begin Tran T1		

			Select Distinct U2.contract_key, U2.party_key, U2.party_pas, U2.contract_party
				into #DUPLICATED_PARTY
			from stg.Stg_U2_Benefit As U2 Join
			
			(Select contract_key From (Select Distinct CONTRACT_KEY, PARTY_KEY from STG.Stg_U2_Benefit) As III
				group by contract_key
				having count(*) > 1) As UPD on U2.contract_key = UPD.contract_key
				order by 1,2

			--remove from the list all cases where the party_key is the same as the contract_party_key (ie the correct parties)
			Delete From #DUPLICATED_PARTY WHERE contract_party=party_key

			Set @DeleteRowCount = @@ROWCOUNT

			--delete all benefits that are on the remaining list
			Delete from S 
				From STG.Stg_U2_Benefit As S
			JOIN #DUPLICATED_PARTY As D on S.CONTRACT_KEY = D.CONTRACT_KEY and isnull(S.Party_key,-1) = isnull(D.party_key,-1)
			
			Set @DeleteRowCount = @@ROWCOUNT
	Commit Tran T1
		
		

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount

	End Try
	BEGIN CATCH

		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

	THROW;
	
 END CATCH
 
END



GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Able_Claim_Benefit]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_Able_Claim_Benefit]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = NULL,
[Exclude_Reason] = NULL,
[Implied_Source_Benefit_Selected] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--
--Duplicate Record - Multiple Lumpsum IP Indicators are available
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Month_Eftv_Date],
   -- ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(distinct ISNULL(lumpsum_ip_indicator,'ooNVLoo')) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = CASE WHEN trg.[Exclude_Reason] IS NULL THEN 
'Duplicate Record - Multiple Lumpsum IP Indicators are available'
ELSE trg.[Exclude_Reason] + ',' + 'Duplicate Record - Multiple Lumpsum IP Indicators are available'
END,
Updated_Date_Time = GETDATE(),
Updated_By = system_user;

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
--Duplicate Record - Multiple Reinsurer details are available
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Month_Eftv_Date],
   -- ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(distinct ISNULL(reinsurer_name,'N/A')) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = CASE WHEN trg.[Exclude_Reason] IS NULL THEN 
'Duplicate Record - Multiple Reinsurer details are available'
ELSE trg.[Exclude_Reason] + ',' + 'Duplicate Record - Multiple Reinsurer details are available'
END,
Updated_Date_Time = GETDATE(),
Updated_By = system_user; 
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--Duplicate Record - Multiple Initial_Sum_Insured amounts are available
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Month_Eftv_Date],
    --ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(distinct ISNULL(Initial_Sum_Insured,-9999999)) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = CASE WHEN trg.[Exclude_Reason] IS NULL THEN 
'Duplicate Record - Multiple Initial_Sum_Insured amounts are available'
ELSE trg.[Exclude_Reason] + ',' + 'Duplicate Record - Multiple Initial_Sum_Insured amounts are available'
END,
Updated_Date_Time = GETDATE(),
Updated_By = system_user; 
--

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--Duplicate Record - Multiple Group_Plan_Names are available
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Month_Eftv_Date],
    --ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(distinct ISNULL(Group_Plan_Name,'ooNVLoo')) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = CASE WHEN trg.[Exclude_Reason] IS NULL THEN 'Duplicate Record - Multiple Group_Plan_Names are available'
ELSE trg.[Exclude_Reason] + ',' + 'Duplicate Record - Multiple Group_Plan_Names are available'
END,
Updated_Date_Time = GETDATE(),
Updated_By = system_user;
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--Duplicate Record - Multiple special arrangements
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Month_Eftv_Date],
    --ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(distinct ISNULL(special_arrangement_flag,9)) > 1
or count(distinct ISNULL(special_arrangement_duration,'ooNVLoo')) > 1 
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = CASE WHEN trg.[Exclude_Reason] IS NULL THEN 
'Duplicate Record - Multiple Special Arrangements are available'
ELSE trg.[Exclude_Reason] + ',' + 'Duplicate Record - Multiple Special Arrangements are available'
END,
Updated_Date_Time = GETDATE(),
Updated_By = system_user;
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--Duplicate Record - Unknown Reason
MERGE [dbo].[Able_Claim_Benefit] as trg
USING 
(
select 
[Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and exclude_flag is null
group by [Month_Eftv_Date],
    --ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(*) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period])
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = 'Duplicate Record - Unknown Reason',
Updated_Date_Time = GETDATE(),
Updated_By = system_user;
--
--set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Include one of the duplicates for processing into claim listing.
WITH w_source
as (
SELECT [Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	[Exclude_Flag],
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period],
Claim_Benefit_Id,
ROW_NUMBER() OVER (PARTITION BY [Month_Eftv_Date],
--ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
ISNULL(Claim_Number,'ooNVLoo') ,
ISNULL(Policy_Number,'ooNVLoo') ,
ISNULL(source_system,'ooNVLoo') ,
--ISNULL(benefit_number,'ooNVLoo')  ,
ISNULL(Product_code,'ooNVLoo') ,
[Exclude_Flag],
ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
	else Source_Benefit_Code
	END,'ooNVLoo'),
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
	else Source_Benefit_type
	END,'ooNVLoo'),
	claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') ,		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') 
		ORDER BY [Exclude_Reason] DESC, ISNULL(Source_Benefit_Selected,'ooNVLoo') DESC, Claim_Benefit_Id ASC) row_num
from [dbo].[Able_Claim_Benefit] t
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and  t.[Exclude_Flag] = 'Y'
and t.[Exclude_Reason] LIKE 'Duplicate Record%'
) 
UPDATE [dbo].[Able_Claim_Benefit]
SET [dbo].[Able_Claim_Benefit].[Exclude_Flag] = NULL,
 [dbo].[Able_Claim_Benefit].[Exclude_Reason] = NULL,
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Benefit] trg,
w_source src
WHERE src.row_num = 1
AND trg.Claim_Benefit_Id = src.Claim_Benefit_Id;
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--If a claim has Target_Benefit_Code populated, then don't exclude
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL,
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] IS NULL
and [Target_Benefit_Code] is not null;
--

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- If Target Benefit Code record/s is/are identified, exclude all other records for that claim
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Target Benefit Code is already available for similar claim record, hence this record is excluded',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Target_Benefit_Code] is null
and [Exclude_Flag] IS NULL
and [Claim_Number] in
(select [Claim_Number] from  [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] = 'N' );
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Where Target Benefit Code is not available - if there is only one record for that claim and Source_Benefit_Code is populated then don't exclude
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL,
[Implied_Source_Benefit_Selected] = '1',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] IS NULL
and [Claim_Number] IN
(select [Claim_Number] from  [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Claim_Number]
having count(*) = 1 )
AND [Source_Benefit_Code] is not null
AND (source_benefit_selected <> 1 or source_benefit_selected is null);
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Where Target Benefit Code is not available - if there are multiple records for that claim, and Source_Benefit_Code is populated, and Source_Benefit_Selected = 1 , then don't exclude
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL,
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] IS NULL
AND [Source_Benefit_Code] is not null
and [Source_Benefit_Selected] = '1';
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--If Source Benefit Code records/s is/are identified, exclude all other records for that claim
UPDATE [dbo].[Able_Claim_Benefit]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Source Benefit Code is already available with Source_Benefit_Selected 1 for similar claim record, hence this record is excluded',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] IS NULL
and [Claim_Number] IN
(select [Claim_Number] from  [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
group by [Claim_Number]
having count(*) > 1 )
and [Claim_Number] in
(select [Claim_Number] from  [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] = 'N' )
and ([Source_Benefit_Selected] <> '1' or [Source_Benefit_Selected] is null) ;
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--
;with w_unique_records
as
(
select [Month_Eftv_Date],
	--ISNULL(lumpsum_ip_indicator,'ooNVLoo') lumpsum_ip_indicator,
	ISNULL(Claim_Number,'ooNVLoo') Claim_Number,
	ISNULL(Policy_Number,'ooNVLoo') Policy_Number,
	ISNULL(source_system,'ooNVLoo') source_system,
	--ISNULL(benefit_number,'ooNVLoo')  benefit_number,
	ISNULL(Product_code,'ooNVLoo') Product_code,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo')  Product_Option_Code ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo') product_option_type,
			claim_status,
	ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END,'ooNVLoo') [Waiting_Period],		
      ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END,'ooNVLoo') [Benefit_Period]
from [dbo].[Able_Claim_Benefit]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and exclude_flag is null
group by [Month_Eftv_Date],
    --ISNULL(lumpsum_ip_indicator,'ooNVLoo') ,
	ISNULL(Claim_Number,'ooNVLoo') ,
	ISNULL(Policy_Number,'ooNVLoo') ,
	ISNULL(source_system,'ooNVLoo') ,
	--ISNULL(benefit_number,'ooNVLoo')  ,
	ISNULL(Product_code,'ooNVLoo') ,
	ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_code
			else Source_Benefit_Code
			END,'ooNVLoo'),
			ISNULL(CASE WHEN target_benefit_code is not null then target_benefit_type
			else Source_Benefit_type
			END,'ooNVLoo'),
			claim_status,
		ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                    WHEN 'Sickness' Then Waiting_Period_Sickness
	END,'ooNVLoo'),		
    ISNULL(CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                    WHEN 'Sickness' Then Benefit_Period_Sickness
	END,'ooNVLoo')
having count(*) = 1
)
UPDATE [dbo].[Able_Claim_Benefit]
SET [dbo].[Able_Claim_Benefit].[Exclude_Flag] = 'N',
[dbo].[Able_Claim_Benefit].[Exclude_Reason] = NULL,
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Benefit] trg, w_unique_records src
WHERE trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
    AND trg.exclude_flag is null
	--AND ISNULL(trg.lumpsum_ip_indicator,'ooNVLoo')  = src.lumpsum_ip_indicator
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number
	AND ISNULL(trg.Policy_Number,'ooNVLoo')  = src.Policy_Number
	AND ISNULL(trg.source_system,'ooNVLoo')  = src.source_system
	--AND ISNULL(trg.benefit_number,'ooNVLoo')   = src.benefit_number
	AND ISNULL(trg.Product_code,'ooNVLoo')  = src.Product_code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_code
			else trg.Source_Benefit_Code
			END,'ooNVLoo')   = src.Product_Option_Code
	AND ISNULL(CASE WHEN trg.target_benefit_code is not null then trg.target_benefit_type
			else trg.Source_Benefit_type
			END,'ooNVLoo')  = src.product_option_type
	AND trg.claim_status = src.claim_status
	AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Waiting_Period_Accident
		                    WHEN 'Sickness' Then trg.Waiting_Period_Sickness
	END,'ooNVLoo') = 	src.[Waiting_Period]	
    AND ISNULL(CASE trg.Claim_Event_Type WHEN 'Accident' Then trg.Benefit_Period_Accident
		                    WHEN 'Sickness' Then trg.Benefit_Period_Sickness
	END,'ooNVLoo') = src.[Benefit_Period];
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

COMMIT TRAN T1;
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[Able_Claim_Benefit]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time  > ( Select StartTime from CTL.ProcessLog where ProcessLogID =@ProcessLogID)
--
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Able_Claim_Expense_Trnx]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_Able_Claim_Expense_Trnx]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE dbo.[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 

 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---
UPDATE dbo.[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Claim Number is Mandatory',
[Updated_Date_Time] = Getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
and [Exclude_Flag] = 'N'
and Claim_Number IS NULL;

 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE dbo.[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Authorisation Date is Mandatory',
[Updated_Date_Time] = Getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
and [Exclude_Flag] = 'N'
and Authorisation_Date IS NULL;

 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE dbo.[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'GUID is Mandatory',
[Updated_Date_Time] = Getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
and [Exclude_Flag] = 'N'
and [GUID] IS NULL;

 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
;with w_src
AS (
select DISTINCT [Claim_Number]
from dbo.[Able_Claim_Expense_Trnx]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] = 'N'
except
select DISTINCT [Claim_Number]
from dbo.[Able_Claim_Benefit]
)
UPDATE [dbo].[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Claim Number not available in Claim_Benefit',
[Updated_Date_Time] = Getdate(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Expense_Trnx] trnx, w_src reject
WHERE trnx.[Claim_Number] = reject.[Claim_Number];
--
 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--1. Duplicate Record
;with w_src
AS (
select [Claim_Number]
      ,ISNULL([Invoice_Number],'ooNVLoo') [Invoice_Number]
      ,ISNULL([Payment_Reference],'ooNVLoo') [Payment_Reference]
      ,[Authorisation_Date]
from dbo.[Able_Claim_Expense_Trnx]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] = 'N'
group by [Claim_Number]
		  ,ISNULL([Invoice_Number],'ooNVLoo')
		  ,ISNULL([Payment_Reference],'ooNVLoo')
		  ,[Authorisation_Date]
having count(*) > 1
),
w_reject_records
AS
(
SELECT trnx.*
       ,ROW_NUMBER() OVER (PARTITION BY trnx.[Month_Eftv_Date],
									  trnx. [Claim_Number]
									  ,ISNULL(trnx.[Invoice_Number],'ooNVLoo')
									  ,ISNULL(trnx.[Payment_Reference],'ooNVLoo')
									  ,trnx.[Authorisation_Date]
					ORDER BY ISNULL(trnx.[Payment_Creation_Date],convert(datetime,'01/jan/1753')) DESC, trnx.[GUID] ASC) row_num
FROM dbo.[Able_Claim_Expense_Trnx] trnx,w_src reject 
where trnx.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trnx.[Exclude_Flag] = 'N'
and trnx.[Claim_Number] = reject.[Claim_Number]
  AND ISNULL(trnx.[Invoice_Number],'ooNVLoo') = reject.[Invoice_Number]
  AND ISNULL(trnx.[Payment_Reference] ,'ooNVLoo') = reject.[Payment_Reference]
  AND trnx.[Authorisation_Date] = reject.[Authorisation_Date]
)
UPDATE [dbo].[Able_Claim_Expense_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Duplicate Expense',
[Updated_Date_Time] = Getdate(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Expense_Trnx] trnx, w_reject_records reject
WHERE trnx.[Able_Claim_Expense_Trnx_Id] = reject.[Able_Claim_Expense_Trnx_Id]
AND reject.row_num > 1;

 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
COMMIT TRAN T1;
--
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[Able_Claim_Expense_Trnx]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time > (Select StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
--
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON














GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Able_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_Able_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN t1;
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'N',
[Details_Inadequate_Reason] = NULL
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Claim Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is null
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Policy Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and policy_number is null
and [Are_Details_Inadequate] = 'N';
-----------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Lumpsum_IP_Indicator is Unknown',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Lumpsum_IP_Indicator = 'Unknown'
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is Mandatory',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOB is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_of_Birth < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOD is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_of_Death < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Claim Finalised Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Finalised_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is in Future State',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date > GETDATE()
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Both Target Benefit Code (or) Source Benefit Code are unavailable',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and product_option_code is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Policy Details are unavailable',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_contract_key is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Country Code is not AUS',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_country_code <> 'AUS'
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Incurred Date is prior to Policy Commenced Date',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Start_Date > Incurred_Date
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Able claim without benefit sub-case',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and benefit_number is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
----------------------------------
UPDATE [dbo].[Able_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Product Option Details are unavailable',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_product_option_code is null
and product_option_code is not null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
/* UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product System Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Code and Class of Business are out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
AND trg.EDW_product_code = p.product_code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Option Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
	and trg.EDW_product_code = p.product_code
	and trg.EDW_Product_Option_Code = p.Product_Option_Code
	and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT */
-----------------------
COMMIT TRAN t1;
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH

SET ANSI_NULLS ON











GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_CMS_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================


CREATE PROCEDURE [dbo].[usp_DQProcessing_CMS_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN t1;

UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'N',
[Details_Inadequate_Reason] = NULL
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Claim Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is null
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Policy Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and policy_number is null
and [Are_Details_Inadequate] = 'N';
-----------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Lumpsum_IP_Indicator is Unknown',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Lumpsum_IP_Indicator = 'Unknown'
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is Mandatory',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOB is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_of_Birth < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOD is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_of_Death < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Claim Finalised Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Finalised_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is in Future State',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Incurred_Date > GETDATE()
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
--UPDATE [dbo].[CMS_Claim_Listing]
--SET [Are_Details_Inadequate] = 'Y',
--[Details_Inadequate_Reason] =  'Both Target Benefit Code (or) Source Benefit Code are unavailable',
--Updated_Date_Time = GETDATE(),
--Updated_By = system_user
--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and product_option_code is null
--and [Are_Details_Inadequate] = 'N';
--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Policy Details are unavailable',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_contract_key is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Country Code is not AUS',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_country_code <> 'AUS'
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Incurred Date is prior to Policy Commenced Date',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Start_Date > Incurred_Date
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Able claim without benefit sub-case',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and benefit_number is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
----------------------------------
UPDATE [dbo].[CMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Product Option Details are unavailable',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_product_option_code is null
and product_option_code is not null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
/* UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product System Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Code and Class of Business are out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
AND trg.EDW_product_code = p.product_code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[Able_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Option Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[Able_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.Product_System_Code = p.Product_System_Code
	and trg.EDW_product_code = p.product_code
	and trg.EDW_Product_Option_Code = p.Product_Option_Code
	and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT */
-----------------------
COMMIT TRAN t1;
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH

SET ANSI_NULLS ON











GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_FigTree_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_FigTree_Claim_Listing]
  @ProcessLogID int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'N',
[Details_Inadequate_Reason] = NULL
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Claim Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is null
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Establishment of Title claims are out of scope', --Exclude 'Establishment of Title' claims from Reins Claim Listing 25th Jan,2018
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and claim_type = 'Establishment of Title'
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Policy Number is unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and policy_number is null
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Date of Death is Mandatory',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_Of_Death is null
and [Are_Details_Inadequate] = 'N';
-------
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Date of Death is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_Of_Death < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOB is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Date_of_Birth < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Claim Finalised Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Finalised_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Date of Death is in Future State',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Date_Of_Death > GETDATE()
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Policy Details are unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Key IS NULL
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---------------------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Country Code is not AUS',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_country_code <> 'AUS'
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is prior to Policy Commenced Date',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Start_Date > Date_Of_Death
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[FigTree_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'EDW Product Option Details are unavailable',
Updated_Date_Time = getdate(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_product_option_code is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
-----------------------
/* UPDATE [dbo].[FigTree_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product System Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[FigTree_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
-----------------------
UPDATE [dbo].[FigTree_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Code and Class of Business are out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[FigTree_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
AND trg.EDW_product_code = p.product_code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
-----------------------
UPDATE [dbo].[FigTree_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Option Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[FigTree_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
	and trg.EDW_product_code = p.product_code
	and trg.EDW_Product_Option_Code = p.Product_Option_Code
	and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL */
--------------------
COMMIT TRAN T1;
--
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[FigTree_Claim_Listing]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time> ( select StartTime from CTL.ProcessLog where ProcessLogID =@ProcessLogID)
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Figtree_Life_Claim]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_Figtree_Life_Claim]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE dbo.[Figtree_Life_Claim]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
---
--1. Duplicate Record
MERGE [dbo].[Figtree_Life_Claim] as trg
USING 
(
select [Month_Eftv_Date],
       ISNULL(Claim_Number,'ooNVLoo') Claim_Number
from dbo.[Figtree_Life_Claim]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is not null
group by [Month_Eftv_Date],
         ISNULL(Claim_Number,'ooNVLoo')
having count(*) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number)
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = 'Duplicate Record for same claim number',
updated_date_time = GETDATE(),
updated_by = system_user;
--
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
COMMIT TRAN T1;
--
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[Figtree_Life_Claim]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time> ( select StartTime from CTL.ProcessLog where ProcessLogID =@ProcessLogID)
--
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON














GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_GL_Journal_Trnx]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_GL_Journal_Trnx]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
---------
DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[GL_Journal_Trnx]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[GL_Journal_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Policy Number is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and policy_number is null
and [Exclude_Flag] = 'N'
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[GL_Journal_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Source System is Mercury, hence ignore'
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and source_system_Ref_2 = 'MER'
and [Exclude_Flag] = 'N'
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[GL_Journal_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'EDW Policy details are unavailable',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_contract_key is null
and [Exclude_Flag] = 'N'
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[GL_Journal_Trnx]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Country Code is not AUS',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_country_Code <> 'AUS'
and [Exclude_Flag] = 'N'
set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

COMMIT TRAN T1;
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[GL_Journal_Trnx]
--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--------------------
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON













GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Layer_0]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_Layer_0]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
---------
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)

SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Census Date is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and census_date is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Policy Number is NULL'
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and policy_number is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Product System Code is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and product_system_code is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Contract Key is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and contract_key is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Product Option Code is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and product_option_code is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Contract Risk Key is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and contract_risk_key is null
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Both Treaty Id and reinsurer code are NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Treaty_Id is null
and Reinsurer_Code is NULL
and [Exclude_Flag] = 'N'
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Reins Percent is NULL',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Reins_Percent is null
and [Exclude_Flag] = 'N'
;
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

UPDATE [dbo].[ODB_Layer_0_Policies]
SET [Exclude_Flag] = 'Y',
[Exclude_Reason] = 'Reins Percent is not in range ( between 0 and 100)',
updated_date_time = GETDATE(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and (Reins_Percent < 0 or Reins_Percent > 100)
and [Exclude_Flag] = 'N'
;
SET @UpdateRowCount = @UpdateRowCount + @@RowCount

;WITH w_duplicates
AS
(
select census_date, policy_number, product_system_code, contract_key, contract_risk_key, product_option_code
from 
[dbo].[ODB_Layer_0_Policies]
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Exclude_Flag] = 'N'
group by census_date, policy_number, product_system_code, contract_key, contract_risk_key, product_option_code
having count(*) >1
)
UPDATE [dbo].[ODB_Layer_0_Policies]
set [dbo].[ODB_Layer_0_Policies].Exclude_Flag = 'Y',
[dbo].[ODB_Layer_0_Policies].[Exclude_Reason] = 'Duplicate Record',
[dbo].[ODB_Layer_0_Policies].updated_date_time = GETDATE(),
[dbo].[ODB_Layer_0_Policies].updated_by = system_user
from [dbo].[ODB_Layer_0_Policies] trg,w_duplicates src
where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.census_date = src.census_date
and trg.policy_number = src.policy_number
and trg.product_system_code = src.product_system_code
and trg.contract_key = src.contract_key
and trg.contract_risk_key = src.contract_risk_key
and trg.product_option_code = src.product_option_code;

SET @UpdateRowCount = @UpdateRowCount + @@RowCount

COMMIT TRAN T1;
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[ODB_Layer_0_Policies]
--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--------------------
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_Mercury_Trnx]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- RRNAA2
-- Opus Claims Payment Enhancement Change
-- RGU-575 - 22/06/2020 - Added new DQ rules for Opus transactions.
-- =============================================


CREATE PROCEDURE [dbo].[usp_DQProcessing_Mercury_Trnx]
   @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
   DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = NULL
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		;

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--	
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = 'Policy Number is NULL',
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		AND [dbo].[Mercury_Trnx].Policy_Number IS NULL
		AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--	
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = 'EDW Policy Details are not available',
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		AND [dbo].[Mercury_Trnx].EDW_Contract_Key IS NULL
		AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		;
		--
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--	
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = 'Country Code is not AUS',
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		AND [dbo].[Mercury_Trnx].EDW_Country_Code <> 'AUS'
		AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		;
		--
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	----
	--exec [dbo].[usp_EDW_Risk_For_Mercury] @ProcessingMonthYear
	----
	--UPDATE [dbo].[Mercury_Trnx]
	--	SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
	--		[dbo].[Mercury_Trnx].[Exclude_Reason] = 'No Risk available for this policy in EDW',
	--		[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
	--		[dbo].[Mercury_Trnx].updated_by = system_user
	--	WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
	--		AND [dbo].[Mercury_Trnx].EDW_Contract_Key NOT IN (SELECT DISTINCT EDW_contract_key
	--													FROM dbo.Temp_Contract_Risk)
	--	    AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
	--	;
 --    --
	--	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	 --
	 --UPDATE [dbo].[Mercury_Trnx]
		--SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
		--	[dbo].[Mercury_Trnx].[Exclude_Reason] = 'Product is not in scope for Reinsurance',
		--	[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
		--	[dbo].[Mercury_Trnx].updated_by = system_user
		--WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		--	AND [dbo].[Mercury_Trnx].EDW_Product_Code NOT IN (SELECT DISTINCT Product_Code
		--												FROM dbo.Reins_Treaty_Product)
		--	AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		--	AND [dbo].[Mercury_Trnx].GL_Product_Code NOT IN (SELECT DISTINCT GL_Product_Code
		--												FROM dbo.Reins_GL_Product
		--												WHERE In_Scope_For_Reinsurance = 'Y')
		--;
		--
		--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--	

	-- Exclusions for Opus

	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = 'SURR transaction type not in scope',
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		AND [dbo].[Mercury_Trnx].Client_ref_id_2 = 'SURR'
		and dbo.Mercury_Trnx.Product_System_Code = 'LS'
		AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		;
		--
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	--
		UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[Exclude_Flag] = 'Y',
			[dbo].[Mercury_Trnx].[Exclude_Reason] = 'Adjustment amt Trans_Ref_Key not in scope',
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
		WHERE [dbo].[Mercury_Trnx].Month_Effective_Date = convert(datetime,@ProcessingMonthYear)
		AND [dbo].[Mercury_Trnx].Trans_Ref_Key_1  in ('109','110','162','0109','0180','0120','0160','0182')
		and dbo.Mercury_Trnx.Product_System_Code = 'LS'
		AND [dbo].[Mercury_Trnx].[Exclude_Flag] = 'N'
		;
		--
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T1;		
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON
--
















GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_WMS_Banner_DeathOnly]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_DQProcessing_WMS_Banner_DeathOnly]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE dbo.[WMS_Banner_DeathOnly]
SET [Exclude_Flag] = 'N',
[Exclude_Reason] = NULL
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
---
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--1. Duplicate Record
MERGE [dbo].[WMS_Banner_DeathOnly] as trg
USING 
(
select [Month_Eftv_Date],
       ISNULL(Claim_Number,'ooNVLoo') Claim_Number
from dbo.[WMS_Banner_DeathOnly]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is not null
group by [Month_Eftv_Date],
         ISNULL(Claim_Number,'ooNVLoo')
having count(*) > 1
) AS src
ON (trg.[Month_Eftv_Date] = src.[Month_Eftv_Date]
	AND ISNULL(trg.Claim_Number,'ooNVLoo')  = src.Claim_Number)
WHEN MATCHED THEN UPDATE
SET trg.[Exclude_Flag] = 'Y',
trg.[Exclude_Reason] = 'Duplicate Record for same claim number',
updated_date_time = GETDATE(),
updated_by = system_user;

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
COMMIT TRAN T1;
--
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[WMS_Banner_DeathOnly]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time> ( select StartTime from CTL.ProcessLog where ProcessLogID =@ProcessLogID)
--
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
--
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_DQProcessing_WMS_Claim_Listing]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_DQProcessing_WMS_Claim_Listing]
  @ProcessLogID int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
---------
BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'N',
[Details_Inadequate_Reason] = NULL
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Claim Number is unavailable',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Number is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'Policy Number is unavailable',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Policy_Number is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Out of Scope Claims',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Type_Code_Mod not in (select wms_code from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH') union all select wms_desc from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH'))
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Out of Scope Claims',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and  Dept_Code like 'Y%'
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Out of Scope Claims',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and WMS_Document_Type IN ('BGLOPENCL','BSSOPENCL','BTSOPENCL','SDFOPENCL','SDROPENCL')
and [Are_Details_Inadequate] = 'N';
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'DOD Incident is Mandatory',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and DOD_Incident is null
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOD Incident is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and DOD_Incident < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'DOB is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Date_of_Birth < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Claim Finalised Date is prior to 01/jan/1753',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and Claim_Finalised_Date < convert(datetime,'01/jan/1753')
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] = 'DOD Incident is in future state',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and DOD_Incident > GETDATE()
and [Are_Details_Inadequate] = 'N';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Policy Details are unavailable',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Key IS NULL;
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Country Code is not AUS',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Country_Code <> 'AUS';
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-----------------------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Incurred Date is prior to Policy Commenced Date',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and EDW_Contract_Start_Date > DOD_Incident
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-------
UPDATE [dbo].[WMS_Claim_Listing]
SET [Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'EDW Product Option Details are unavailable',
updated_date_time = getdate(),
updated_by = system_user
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and edw_product_option_code is null
and [Are_Details_Inadequate] = 'N';

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
-----------------------
/* UPDATE [dbo].[WMS_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product System Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[WMS_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
-----------------------
UPDATE [dbo].[WMS_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Code and Class of Business are out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[WMS_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
AND trg.EDW_product_code = p.product_code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL
-----------------------
UPDATE [dbo].[WMS_Claim_Listing]
SET  
[Are_Details_Inadequate] = 'Y',
[Details_Inadequate_Reason] =  'Product Option Code is out of scope',
Updated_Date_Time = GETDATE(),
Updated_By = system_user
FROM [dbo].[WMS_Claim_Listing] trg LEFT OUTER JOIN
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business
		 FROM	 dbo.Reins_Treaty_Product) p
ON trg.EDW_Product_System_Code = p.Product_System_Code
	and trg.EDW_product_code = p.product_code
	and trg.EDW_Product_Option_Code = p.Product_Option_Code
	and trg.EDW_Class_Of_Business = p.Class_Of_Business
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and p.Product_System_Code IS NULL */
--
COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[WMS_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	  and Updated_Date_Time > (Select StartTime from [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID)
	--	
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_For_Able]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_For_Able]
    @ProcessLogID Int,
     @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Policy_Number VARCHAR(50)
	DECLARE @Product_System_Code VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct Policy_Number,
					Product_System_Code
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[Able_Claim_Listing]
	SET   [EDW_Contract_Key] = NULL,
		  [EDW_Policy_Number] = NULL,
		  [EDW_Contract_Id] = NULL,
		  [EDW_Contract_Start_Date] = NULL,
		  [EDW_Product_Key] = NULL,
		  [EDW_Product_Code] = NULL,
		  [EDW_Product_Name] = NULL,
		  EDW_Class_Of_Business = NULL,
		  EDW_Country_Code = NULL,
		  [Updated_Date_Time] = NULL,
		  [Updated_By] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	;
	;WITH w_source
	AS
	( 
		select      Policy_Number,
					Product_System_Code,
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					EDW_Country_Code
		from [dbo].[Able_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
			GROUP BY Policy_Number,
					Product_System_Code,
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					EDW_Country_Code
	)
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[Able_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[Able_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[Able_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[Able_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Able_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.Policy_Number
		AND main.Product_System_Code = src.Product_System_Code
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	 CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Policy_Number] [varchar](50) NULL,			
			[Product_System_Code] VARCHAR(50) NULL,
			[EDW_Contract_Id] [varchar](50) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Code] [varchar](4000) NULL,			
			[EDW_Product_Name] [varchar](300) NULL,
			EDW_Class_Of_Business VARCHAR(50) NULL,
			EDW_Country_Code VARCHAR(3) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number,
	@Product_System_Code
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( (1 = 2) or '
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7900
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( (1 = 2) or '
		END
		--
		SET @SQL =  @SQL + '( c.display_contract_id = '''+ @Policy_Number+'''
							and c.product_system_code ='''+@Product_System_Code+''') or '		
		--
		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number,
		@Product_System_Code
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL	
	--
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[Able_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[Able_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[Able_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[Able_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Able_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.EDW_Policy_Number
		AND main.Product_System_Code = src.Product_System_Code
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;		
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON



GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_For_FT]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_For_FT]
     @ProcessLogID Int,
    @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Policy_Number VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[Figtree_Claim_Listing]
	SET   [EDW_Contract_Key] = NULL,
		  [EDW_Policy_Number] = NULL,
		  [EDW_Product_System_Code] = NULL,
		  [EDW_Contract_Id] = NULL,
		  [EDW_Contract_Start_Date] = NULL,
		  [EDW_Product_Key] = NULL,
		  [EDW_Product_Code] = NULL,
		  [EDW_Product_Name] = NULL,
		  EDW_Class_Of_Business = NULL,
		  EDW_Country_Code = NULL
	WHERE 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	;
	;WITH w_source
	AS
	( 
		select      Policy_Number,
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					EDW_Country_Code
		from [dbo].[Figtree_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
			GROUP BY Policy_Number,
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					EDW_Country_Code
	)
	UPDATE [dbo].[Figtree_Claim_Listing]
		SET [dbo].[Figtree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[Figtree_Claim_Listing].[EDW_Product_System_Code] = src.[EDW_Product_System_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[Figtree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[Figtree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[Figtree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[Figtree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Figtree_Claim_Listing].updated_by = system_user
	FROM [dbo].[Figtree_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.Policy_Number
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT	
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct RTRIM(LTRIM(UPPER(Policy_Number))) Policy_Number
	from [dbo].[Figtree_Claim_Listing]  nolock
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V%01'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%AAA%'
	--
	DECLARE Columns_Lists_2  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct REPLACE( REPLACE(RTRIM(LTRIM(UPPER(Policy_Number))),'-' ,''),' ','') Policy_Number
	from [dbo].[Figtree_Claim_Listing]  nolock
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	and 
	  ( charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) >  0
	   OR 
	   charindex(' ',RTRIM(LTRIM(UPPER(policy_number)))) >  0
	   )
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V%01'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%AAA%'
	UNION ALL
	select distinct REPLACE(RTRIM(LTRIM(UPPER(policy_number))),'-' ,' ') Policy_Number
	from [dbo].[Figtree_Claim_Listing]  nolock
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) >  0
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V%01'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%AAA%'
	UNION ALL
	select distinct SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),3,len(RTRIM(LTRIM(UPPER(policy_number))))) Policy_Number
	from [dbo].[Figtree_Claim_Listing]  nolock
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V%01'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%AAA%'
	and RTRIM(LTRIM(UPPER(policy_number))) like 'CL%'
	UNION ALL
	select distinct SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),1,len(RTRIM(LTRIM(UPPER(policy_number))))-1)+'-'+SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),len(RTRIM(LTRIM(UPPER(policy_number)))),len(RTRIM(LTRIM(UPPER(policy_number))))) Policy_Number
	from [dbo].[Figtree_Claim_Listing]  nolock
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number IS NOT NULL
	and [EDW_Contract_Key] IS NULL
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%I%V%01'
	and RTRIM(LTRIM(UPPER(policy_number))) not like '%AAA%'
	and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) =  0
	--	
	 CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Policy_Number] [varchar](50) NULL,			
			[Product_System_Code] VARCHAR(50) NULL,
			[EDW_Contract_Id] [varchar](50) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Code] [varchar](4000) NULL,			
			[EDW_Product_Name] [varchar](300) NULL,
			EDW_Class_Of_Business VARCHAR(50) NULL,
			EDW_Country_Code VARCHAR(3) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( ( 1=2) or '
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( ( 1=2) or '
		END
		--
		SET @SQL =  @SQL + '( c.display_contract_id = '''+ @Policy_Number+''') OR (c.contract_id = '''+ @Policy_Number+''' ) or '			
		--
		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
	INSERT INTO #Temp_EDW_Contract
	EXEC Utility.dbo.usp_queryedw @SQL
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND (RTRIM(LTRIM(UPPER(main.Policy_Number))) = src.[EDW_Contract_Id])
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT	
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND (RTRIM(LTRIM(UPPER(main.Policy_Number))) = src.EDW_Policy_Number)
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT	
    --
	TRUNCATE TABLE #Temp_EDW_Contract
	OPEN Columns_Lists_2
	FETCH NEXT FROM Columns_Lists_2 into 
	@Policy_Number
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and contract_id IN (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  contract_id IN (NULL,'
		END
		--
		SET @SQL =  @SQL + ''''+ @Policy_Number+''','		
		--
		FETCH NEXT FROM Columns_Lists_2 into 
		@Policy_Number
	END

	CLOSE Columns_Lists_2
	--Deallocate Columns_Lists_2
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
	INSERT INTO #Temp_EDW_Contract
	EXEC Utility.dbo.usp_queryedw @SQL
	--
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND REPLACE(REPLACE(RTRIM(LTRIM(UPPER(main.policy_number))),'-' ,''),' ','') = src.[EDW_Contract_Id]
		AND 
		    ( charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0
			 OR 
			 charindex(' ',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0 )
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND REPLACE(RTRIM(LTRIM(UPPER(main.policy_number))),'-' ,' ') = src.[EDW_Contract_Id]
		AND charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND SUBSTRING(RTRIM(LTRIM(UPPER(main.policy_number))),3,len(RTRIM(LTRIM(UPPER(policy_number))))) = src.[EDW_Contract_Id]
		AND main.[EDW_Contract_Key] IS NULL
		and RTRIM(LTRIM(UPPER(policy_number))) like 'CL%'
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),1,len(RTRIM(LTRIM(UPPER(policy_number))))-1)+'-'+SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),len(RTRIM(LTRIM(UPPER(policy_number)))),len(RTRIM(LTRIM(UPPER(policy_number))))) = src.[EDW_Contract_Id]
		AND main.[EDW_Contract_Key] IS NULL
		and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) =  0
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	TRUNCATE TABLE #Temp_EDW_Contract
	OPEN Columns_Lists_2
	FETCH NEXT FROM Columns_Lists_2 into 
	@Policy_Number
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and display_contract_id IN (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  display_contract_id IN (NULL,'
		END
		--
		SET @SQL =  @SQL + ''''+ @Policy_Number+''','		
		--
		FETCH NEXT FROM Columns_Lists_2 into 
		@Policy_Number
	END

	CLOSE Columns_Lists_2
	Deallocate Columns_Lists_2
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
	INSERT INTO #Temp_EDW_Contract
	EXEC Utility.dbo.usp_queryedw @SQL
	--
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND REPLACE(REPLACE(RTRIM(LTRIM(UPPER(main.policy_number))),'-' ,''),' ','') = src.[EDW_Policy_Number]
		AND 
		    ( charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0
			 OR 
			 charindex(' ',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0 )
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND REPLACE(RTRIM(LTRIM(UPPER(main.policy_number))),'-' ,' ') = src.[EDW_Policy_Number]
		AND charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND SUBSTRING(RTRIM(LTRIM(UPPER(main.policy_number))),3,len(RTRIM(LTRIM(UPPER(policy_number))))) = src.[EDW_Policy_Number]
		AND main.[EDW_Contract_Key] IS NULL
		and RTRIM(LTRIM(UPPER(policy_number))) like 'CL%'
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Figtree_Claim_Listing].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
	FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),1,len(RTRIM(LTRIM(UPPER(policy_number))))-1)+'-'+SUBSTRING(RTRIM(LTRIM(UPPER(policy_number))),len(RTRIM(LTRIM(UPPER(policy_number)))),len(RTRIM(LTRIM(UPPER(policy_number))))) = src.[EDW_Policy_Number]
		AND main.[EDW_Contract_Key] IS NULL
		and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) =  0
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON






GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_For_GL]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_For_GL]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Policy_Number VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct RTRIM(LTRIM(UPPER(Policy_Number))) Policy_Number
	from [dbo].[GL_Journal_Trnx]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number is not null
	and [EDW_Contract_Key] IS NULL
	and ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	--and Source_System_Ref_2 NOT IN ('SPE','SF9')
	--
	DECLARE Columns_Lists_2  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct RTRIM(LTRIM(UPPER(Policy_Number)))+'-' Policy_Number
	from [dbo].[GL_Journal_Trnx]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number is not null
	and [EDW_Contract_Key] IS NULL
	and ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	and Policy_Number LIKE '%[^0-9]%'
	and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) =  0
	and right(RTRIM(LTRIM(UPPER(Policy_Number))),1) NOT LIKE '%[^0-9]%'
	UNION ALL
	select distinct left(RTRIM(LTRIM(UPPER(Policy_Number))),len(RTRIM(LTRIM(UPPER(Policy_Number))))-1)+'-'+right(RTRIM(LTRIM(UPPER(Policy_Number))),1) Policy_Number
	from [dbo].[GL_Journal_Trnx]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number is not null
	and [EDW_Contract_Key] IS NULL
	and Policy_Number LIKE '%[^0-9]%'
	and ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) =  0
	and left(right(RTRIM(LTRIM(UPPER(Policy_Number))),2),1) NOT LIKE '%[^0-9]%'
	and right(RTRIM(LTRIM(UPPER(Policy_Number))),1) LIKE '%[^0-9]%'
	UNION ALL
	select distinct REPLACE(RTRIM(LTRIM(UPPER(Policy_Number))),'-','') Policy_Number
	from [dbo].[GL_Journal_Trnx]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and Policy_Number is not null
	and [EDW_Contract_Key] IS NULL
	and Policy_Number LIKE '%[^0-9]%'
	and ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	and charindex('-',RTRIM(LTRIM(UPPER(policy_number)))) >  0
	and left(right(RTRIM(LTRIM(UPPER(Policy_Number))),3),1) NOT LIKE '%[^0-9]%'
	and right(RTRIM(LTRIM(UPPER(Policy_Number))),1) LIKE '%[^0-9]%'
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[GL_Journal_Trnx]
	SET   [EDW_Contract_Key] = NULL,
		  [EDW_Product_System_Code] = NULL,
		  [EDW_Policy_Number] = NULL,
		  [EDW_Contract_Id] = NULL,
		  [EDW_Product_Key] = NULL,
		  [EDW_Product_Code] = NULL,
		  [EDW_Product_Name] =NULL,
		  [EDW_Class_Of_Business] = NULL,
		  [EDW_Country_Code] = NULL,
		  [Updated_Date_Time] = NULL,
		  [Updated_By] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);	
	--
	;WITH w_source
	AS
	( 
		select      RTRIM(LTRIM(UPPER(Policy_Number))) Policy_Number,
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
		from [dbo].[GL_Journal_Trnx]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
			GROUP BY RTRIM(LTRIM(UPPER(Policy_Number))),
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
	)
	UPDATE [dbo].[GL_Journal_Trnx]
		SET [dbo].[GL_Journal_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[GL_Journal_Trnx].[EDW_Product_System_Code] = src.[EDW_Product_System_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[GL_Journal_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[GL_Journal_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[GL_Journal_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[GL_Journal_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[GL_Journal_Trnx].updated_by = system_user
	FROM [dbo].[GL_Journal_Trnx] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND RTRIM(LTRIM(UPPER(main.Policy_Number))) = src.Policy_Number
		AND ISNULL(main.source_system_Ref_2,'ooNVLoo') <> 'MER'
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	 CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Policy_Number] [varchar](50) NULL,
			[EDW_Contract_Id] [varchar](50) NULL,
			[Product_System_Code] VARCHAR(50) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Code] [varchar](4000) NULL,			
			[EDW_Product_Name] [varchar](300) NULL,
			EDW_Class_Of_Business VARCHAR(50) NULL,
			EDW_Country_Code VARCHAR(3) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.contract_id,
							c.product_system_code,
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( (1 = 2) or '
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.contract_id,
							c.product_system_code,
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and  ( (1 = 2) or '
		END
		--
		SET @SQL =  @SQL + '( c.display_contract_id = '''+ @Policy_Number+''') or (c.contract_id = '''+ @Policy_Number+''') or '		
		--
		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
	--
	
	UPDATE [dbo].[GL_Journal_Trnx]
		SET [dbo].[GL_Journal_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[GL_Journal_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[GL_Journal_Trnx].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[GL_Journal_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[GL_Journal_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[GL_Journal_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[GL_Journal_Trnx].updated_by = system_user
	FROM [dbo].[GL_Journal_Trnx] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND ( RTRIM(LTRIM(UPPER(main.Policy_Number))) = src.EDW_Policy_Number
		  OR RTRIM(LTRIM(UPPER(main.Policy_Number)))= src.[EDW_Contract_Id])
		  AND ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	--
	TRUNCATE TABLE #Temp_EDW_Contract;
	--
	OPEN Columns_Lists_2
	FETCH NEXT FROM Columns_Lists_2 into 
	@Policy_Number
	--
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.contract_id,
							c.product_system_code,
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code IN (''CP'',''OR'')
							and  ( (1 = 2) or '
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.contract_id,
							c.product_system_code,
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code IN (''CP'',''OR'')
							and  ( (1 = 2) or '
		END
		--
		SET @SQL =  @SQL + '(SUBSTR(c.display_contract_id,1,length(c.display_contract_id)-1) = '''+ @Policy_Number+''') or (c.display_contract_id = '''+ @Policy_Number+''')  or '		
		--
		FETCH NEXT FROM Columns_Lists_2 into 
		@Policy_Number
	END

	CLOSE Columns_Lists_2
	Deallocate Columns_Lists_2
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
	--
	UPDATE [dbo].[GL_Journal_Trnx]
		SET [dbo].[GL_Journal_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[GL_Journal_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[GL_Journal_Trnx].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[GL_Journal_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[GL_Journal_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[GL_Journal_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[GL_Journal_Trnx].updated_by = system_user
	FROM [dbo].[GL_Journal_Trnx] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND ( RTRIM(LTRIM(UPPER(main.Policy_Number)))+'-' = left(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))),len(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))))-1)
		     OR left(RTRIM(LTRIM(UPPER(main.Policy_Number))),len(RTRIM(LTRIM(UPPER(main.Policy_Number))))-1)+'-'+right(RTRIM(LTRIM(UPPER(main.Policy_Number))),1) = left(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))),len(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))))-1)
			 )
		and main.EDW_Contract_Key IS NULL
		and charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) =  0
		and Policy_Number LIKE '%[^0-9]%'
		AND ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT 

	UPDATE [dbo].[GL_Journal_Trnx]
		SET [dbo].[GL_Journal_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[GL_Journal_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[GL_Journal_Trnx].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[GL_Journal_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[GL_Journal_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[GL_Journal_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[GL_Journal_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[GL_Journal_Trnx].updated_by = system_user
	FROM [dbo].[GL_Journal_Trnx] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND REPLACE(RTRIM(LTRIM(UPPER(main.Policy_Number))),'-','')= left(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))),len(RTRIM(LTRIM(UPPER(src.[EDW_Policy_Number]))))-1)
		and main.EDW_Contract_Key IS NULL
		and charindex('-',RTRIM(LTRIM(UPPER(main.policy_number)))) >  0
		and Policy_Number LIKE '%[^0-9]%'
		AND ISNULL(source_system_Ref_2,'ooNVLoo') <> 'MER'
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT 
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON
----





GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_For_Layer_0]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_For_Layer_0]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Contract_Key VARCHAR(50)
	DECLARE @Product_Option_Code  VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct contract_key ,
					product_option_code
	from [dbo].[ODB_Layer_0_Policies]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and product_option_code is not null
	and contract_key is not null
	and contract_id is NULL
	--
	DECLARE Columns_Lists_2  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct contract_key
	from [dbo].[ODB_Layer_0_Policies]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and contract_key is not null
	and contract_id is NULL;

	BEGIN TRY;
	BEGIN TRAN T1;
	--
	--
	UPDATE [dbo].[ODB_Layer_0_Policies]
	SET   [Contract_Id] = NULL,
	      [Product_Code] = NULL,
		  [Product_Opt_Group_Desc] = NULL,
		  [Actrl_Corral_Group_Code] = NULL,
		  EDW_Country_Code = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	;
	--
	 CREATE TABLE #Temp_EDW_Contract (
			[Contract_Key] [numeric](10, 0) NULL,
			[Contract_Id] [varchar](50) NULL,
			[Product_Code] [varchar](20) NULL,			
			[Product_Option_Code] [varchar](20) NULL,			
			[Product_Opt_Group_Desc] [varchar](50) NULL,
			[Actrl_Corral_Group_Code] [varchar](10) NULL,
			EDW_Country_Code [varchar](3) NULL
	 )
	 --
	 CREATE TABLE #Temp_EDW_Contract_2 (
			[Contract_Key] [numeric](10, 0) NULL,
			[Contract_Id] [varchar](50) NULL,
			[Product_Code] [varchar](20) NULL,
			EDW_Country_Code [varchar](3) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Contract_Key,
	@Product_Option_Code
	--
	SET @SQL =  'select  c.contract_key, 
	                     c.contract_id,
						 p.product_code,
							po.Product_Option_Code, 
							po.Product_Opt_Group_Desc,
							po.actrl_corral_group_code,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_product_option po
							where c.product_key = p.product_key
							and p.product_key = po.product_key
							and  ( (1 = 2) or '
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
								c.contract_id,
								p.product_code,
							po.Product_Option_Code, 
							po.Product_Opt_Group_Desc,
							po.actrl_corral_group_code,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_product_option po
							where c.product_key = p.product_key
							and p.product_key = po.product_key
							and  ( (1 = 2) or '
		END
		--
		SET @SQL =  @SQL + '( c.contract_key = '+ @Contract_Key+'
							and po.product_option_code ='''+@Product_Option_Code+''') or '		
		--
		FETCH NEXT FROM Columns_Lists into 
		@Contract_Key,
		@Product_Option_Code
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
	--
	UPDATE [dbo].[ODB_Layer_0_Policies]
		SET [dbo].[ODB_Layer_0_Policies].[Contract_Id] = src.[Contract_Id],
		    [dbo].[ODB_Layer_0_Policies].[Product_Code] = src.[Product_Code],
			[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = src.[Product_Opt_Group_Desc],
			[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = src.[Actrl_Corral_Group_Code],
			[dbo].[ODB_Layer_0_Policies].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
			[dbo].[ODB_Layer_0_Policies].updated_by = system_user
	FROM [dbo].[ODB_Layer_0_Policies] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and main.Contract_Id IS NULL
	and main.Contract_Key = src.Contract_Key
	AND main.Product_Option_Code = src.Product_Option_Code
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	OPEN Columns_Lists_2
	FETCH NEXT FROM Columns_Lists_2 into 
	@Contract_Key
	--
	SET @SQL =  'select  c.contract_key, 
	                     c.contract_id,
						 p.product_code,
							c.country_code
							 from dw_contract c,
							dw_product p
							where c.product_key = p.product_key
							and contract_key in (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_2
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
	                     c.contract_id,
						 p.product_code,
							c.country_code
							 from dw_contract c,
							dw_product p
							where c.product_key = p.product_key
							and contract_key in (NULL,'
		END
		--
		SET @SQL =  @SQL + @Contract_Key+','		
		--
		FETCH NEXT FROM Columns_Lists_2 into 
		@Contract_Key
	END

	CLOSE Columns_Lists_2
    Deallocate Columns_Lists_2
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1)+ ')'
		    INSERT INTO #Temp_EDW_Contract_2
			EXEC Utility.dbo.usp_queryedw @SQL
	UPDATE [dbo].[ODB_Layer_0_Policies]
		SET [dbo].[ODB_Layer_0_Policies].[Contract_Id] = src.[Contract_Id],
		    [dbo].[ODB_Layer_0_Policies].[Product_Code] = src.[Product_Code],
			[dbo].[ODB_Layer_0_Policies].EDW_Country_Code = src.EDW_Country_Code,
			[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
			[dbo].[ODB_Layer_0_Policies].updated_by = system_user
	FROM [dbo].[ODB_Layer_0_Policies] main, #Temp_EDW_Contract_2 src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and main.Contract_Id IS NULL
	and main.Contract_Key = src.Contract_Key
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_For_Mercury]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- RRNAA2
-- Opus Claims Payment Enhancement Change
-- RGU-575 - 22/06/2020


CREATE PROCEDURE [dbo].[usp_EDW_Contract_For_Mercury]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL NVARCHAR(MAX)
	DECLARE @Policy_Number VARCHAR(50)
	DECLARE @Product_System_Code VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[Mercury_Trnx]
	SET   [EDW_Contract_Key] = NULL,
		  [EDW_Policy_Number] = NULL,
		  [EDW_Contract_Id] = NULL,
		  [EDW_Contract_Start_Date] = NULL,
		  [EDW_Product_Key] = NULL,
		  [EDW_Product_Code] = NULL,
		  [EDW_Product_Name] = NULL,
		  EDW_Class_Of_Business = NULL,
		  [EDW_Country_Code] = NULL,
		  [Updated_Date_Time] = NULL,
		  [Updated_By] = NULL
	WHERE [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear)
	;
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct RTRIM((LTRIM (Policy_Number))) Policy_Number ,
					Product_System_Code
	from [dbo].[Mercury_Trnx]
	where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear)
	AND Policy_Number IS NOT NULL
	AND EDW_Contract_Key IS NULL;	
	--	
	;WITH w_source
	AS
	( 
		select      RTRIM((LTRIM (Policy_Number))) Policy_Number,
					Product_System_Code,
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
		from [dbo].[Mercury_Trnx]
		WHERE [Month_Effective_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
			GROUP BY RTRIM((LTRIM (Policy_Number))),
					Product_System_Code,
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
	)
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[Mercury_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[Mercury_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[Mercury_Trnx].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[Mercury_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[Mercury_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[Mercury_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[Mercury_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Mercury_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
	FROM [dbo].[Mercury_Trnx] main, w_source src
	WHERE main.[Month_Effective_Date] = convert(datetime,@ProcessingMonthYear)
		AND RTRIM((LTRIM (main.Policy_Number))) = src.Policy_Number
		AND main.Product_System_Code = src.Product_System_Code
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	IF OBJECT_ID('tempdb.dbo.#Temp_EDW_Contract', 'U') IS NOT NULL
     DROP TABLE #Temp_EDW_Contract
	 CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Policy_Number] [varchar](50) NULL,			
			[Product_System_Code] VARCHAR(50) NULL,
			[EDW_Contract_Id] [varchar](50) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Code] [varchar](4000) NULL,			
			[EDW_Product_Name] [varchar](300) NULL,
			EDW_Class_Of_Business VARCHAR(50) NULL,
			EDW_Country_Code VARCHAR(3) NULL
	 )

	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number,
	@Product_System_Code
	--
	PRINT '@Policy_Number,@Product_System_Code' + @Policy_Number + @Product_System_Code
	SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or (c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									) ) and  ( (1 = 2) or '

	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or (c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)) and ( (1 = 2) or '
		END
		--
		if @Product_System_Code = 'LS'
		BEGIN
		SET @SQL =  @SQL + '(c.display_contract_id = '''+ @Policy_Number+''' and c.product_system_code = '''+@Product_System_Code+''' ) or (c.contract_id = '''+ @Policy_Number+''' and c.product_system_code = '''+@Product_System_Code+''') or'		
		END
		ELSE
		BEGIN
		SET @SQL =  @SQL + '(c.display_contract_id = '''+ @Policy_Number+''' and c.product_system_code = '''+@Product_System_Code+''' ) or'
		END
		-- 

		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number,
		@Product_System_Code
	END
	PRINT '@Policy_Number,@Product_System_Code' + @Policy_Number + @Product_System_Code

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-3) + ')'

		    		--print '@SQL ' + @SQL
			INSERT INTO #Temp_EDW_Contract	
			EXEC Utility.dbo.usp_queryedw @SQL
	
	select * from #Temp_EDW_Contract
	print 'policies for EDW check'
	--
	UPDATE [dbo].[Mercury_Trnx]
		SET [dbo].[Mercury_Trnx].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[Mercury_Trnx].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[Mercury_Trnx].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[Mercury_Trnx].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[Mercury_Trnx].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[Mercury_Trnx].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[Mercury_Trnx].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[Mercury_Trnx].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[Mercury_Trnx].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[Mercury_Trnx].Updated_Date_Time = getDATE(),
			[dbo].[Mercury_Trnx].updated_by = system_user
	FROM [dbo].[Mercury_Trnx] main, #Temp_EDW_Contract src
	WHERE main.[Month_Effective_Date] = convert(datetime,@ProcessingMonthYear)
		AND RTRIM((LTRIM (main.Policy_Number))) = src.EDW_Policy_Number or RTRIM((LTRIM (main.Policy_Number))) = src.EDW_Contract_Id
		AND main.Product_System_Code = src.Product_System_Code
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_for_WMS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_for_WMS]
     @ProcessLogID Int,
	 @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Policy_Number VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[WMS_Claim_Listing]
	SET   [EDW_Contract_Key] = NULL,
		  [EDW_Policy_Number] = NULL,
		  [EDW_Product_System_Code]= NULL,
		  [EDW_Contract_Id] = NULL,
		  [EDW_Contract_Start_Date] = NULL,
		  [EDW_Product_Key] = NULL,
		  [EDW_Product_Code] = NULL,
		  [EDW_Product_Name] = NULL,
		  EDW_Class_Of_Business = NULL,
		  EDW_Country_Code = NULL,
		  [Updated_Date_Time] = NULL,
		  [Updated_By] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	;
	;WITH w_source
	AS
	( 
		select      Policy_Number,
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
		from [dbo].[WMS_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
			GROUP BY Policy_Number,
					[EDW_Product_System_Code],
					EDW_Contract_Key,
					[EDW_Policy_Number],
					[EDW_Contract_Id],
					[EDW_Contract_Start_Date],
					[EDW_Product_Key],
					[EDW_Product_Code],
					[EDW_Product_Name],
					[EDW_Class_Of_Business],
					[EDW_Country_Code]
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
		    [dbo].[WMS_Claim_Listing].[EDW_Product_System_Code] = src.[EDW_Product_System_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[WMS_Claim_Listing].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.Policy_Number
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct case when charindex(',',Policy_Number) > 0
	                          and len(substring(Policy_Number,charindex(',',Policy_Number)+1,len(Policy_Number))) < 7 
						 Then substring(Policy_Number,1,charindex(',',Policy_Number)) + right('0000000'+substring(Policy_Number,charindex(',',Policy_Number)+1,len(Policy_Number)),7)
	                else Policy_Number 
					end Policy_Number
	from [dbo].[WMS_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [EDW_Contract_Key] IS NULL
	UNION 
	select distinct Policy_Number
	from [dbo].[WMS_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [EDW_Contract_Key] IS NULL;
	--
	 CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Policy_Number] [varchar](50) NULL,			
			[Product_System_Code] VARCHAR(50) NULL,
			[EDW_Contract_Id] [varchar](50) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Code] [varchar](4000) NULL,			
			[EDW_Product_Name] [varchar](300) NULL,
			EDW_Class_Of_Business VARCHAR(50) NULL,
			EDW_Country_Code VARCHAR(3) NULL
	 )
	
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number
	--
	SET @SQL =  'select     c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and c.contract_id IN (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7900
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and c.contract_id IN (NULL,'
		END
		--
		SET @SQL =  @SQL + ''''+ @Policy_Number+''','		
		--
		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number
	END

	CLOSE Columns_Lists	
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
	--
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[WMS_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[WMS_Claim_Listing].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.[EDW_Contract_Id]
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[WMS_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[WMS_Claim_Listing].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND case when charindex(',',main.Policy_Number) > 0 
	                  and len(substring(main.Policy_Number,charindex(',',main.Policy_Number)+1,len(main.Policy_Number))) < 7 
				 Then substring(main.Policy_Number,1,charindex(',',main.Policy_Number)) + right('0000000'+substring(main.Policy_Number,charindex(',',main.Policy_Number)+1,len(main.Policy_Number)),7)
	        else main.Policy_Number end = src.[EDW_Contract_Id]
	    AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	--	
	TRUNCATE TABLE #Temp_EDW_Contract
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Policy_Number
	--
	SET @SQL =  'select     c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and c.display_contract_id IN (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7900
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  c.contract_key, 
							c.display_contract_id, 
							c.product_system_code,
							c.contract_id,  
							c.contract_start_date, 
							p.product_key,							
							p.product_code edw_product_code,
							p.product_desc product_name,
							cb.class_of_Busn_desc,
							c.country_code
							 from dw_contract c,
							dw_product p,
							dw_class_of_busn cb
							where c.product_key = p.product_key
							and p.class_of_Busn_code = cb.class_of_busn_code
							and c.product_system_code NOT IN ( ''ZB'',''U1'',''EC'',''EXR'',''SM'',''BK'',''CS'',''F4'',''L7'',''L8'',''YC'',''S2'',''TG'',''TZ'',''AFG'')
							 and c.product_key <> -1
							 and ( c.product_system_code NOT IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
								or
									(c.product_system_code IN (''U2'',''RT'',''AS'',''CM'',''KS'',''RP'')
									and c.super_class_type_Code IN (''MBR'') 
									)
								  )
							and c.display_contract_id IN (NULL,'
		END
		--
		SET @SQL =  @SQL + ''''+ @Policy_Number+''','
		--
		FETCH NEXT FROM Columns_Lists into 
		@Policy_Number
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract
			EXEC Utility.dbo.usp_queryedw @SQL
	
	--
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[WMS_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[WMS_Claim_Listing].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.Policy_Number = src.EDW_Policy_Number
		AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Key] = src.[EDW_Contract_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Policy_Number] = src.[EDW_Policy_Number],
			[dbo].[WMS_Claim_Listing].[EDW_Product_System_Code] = src.[Product_System_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Id] = src.[EDW_Contract_Id],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Start_Date] = src.[EDW_Contract_Start_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Key] = src.[EDW_Product_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Code] = src.[EDW_Product_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Name] = src.[EDW_Product_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Class_Of_Business] = src.[EDW_Class_Of_Business],
			[dbo].[WMS_Claim_Listing].[EDW_Country_Code] = src.[EDW_Country_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, #Temp_EDW_Contract src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND case when charindex(',',main.Policy_Number) > 0 
	                  and len(substring(main.Policy_Number,charindex(',',main.Policy_Number)+1,len(main.Policy_Number))) < 7 
				 Then substring(main.Policy_Number,1,charindex(',',main.Policy_Number)) + right('0000000'+substring(main.Policy_Number,charindex(',',main.Policy_Number)+1,len(main.Policy_Number)),7)
	        else main.Policy_Number end = src.EDW_Policy_Number
	    AND main.[EDW_Contract_Key] IS NULL
	;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
    ---------
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_Vrbl_For_Able]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_Vrbl_For_Able]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @Incurred_Date datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and [EDW_Contract_Status_on_ID] IS NULL  
	and [EDW_Contract_End_Date_on_ID] IS NULL
	and [EDW_Contract_Claim_Ind_on_ID] IS NULL
	and [EDW_Contract_Status_on_FD] IS NULL  
	and [EDW_Contract_End_Date_on_FD] IS NULL
	and [EDW_Contract_Claim_Ind_on_FD] IS NULL;
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[Able_Claim_Listing]
	SET   [EDW_Contract_Status_on_ID] = NULL,
		  [EDW_Contract_End_Date_on_ID] = NULL,
		  [EDW_Contract_Claim_Ind_on_ID] = NULL,
		  [EDW_Contract_Status_on_FD] = NULL,
		  [EDW_Contract_End_Date_on_FD] = NULL,
		  [EDW_Contract_Claim_Ind_on_FD] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					Incurred_Date,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[Able_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Incurred_Date IS NOT NULL
			GROUP BY EDW_Contract_Key,
					Incurred_Date,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.Incurred_Date = src.Incurred_Date
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					Incurred_Date,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
		from [dbo].[Able_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Incurred_Date IS NOT NULL
			GROUP BY EDW_Contract_Key,
					Incurred_Date,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
	)
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.Incurred_Date = src.Incurred_Date
	;
	--

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[Able_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Incurred_Date IS NOT NULL
			GROUP BY EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	 CREATE TABLE #Temp_EDW_Contract_Vrbl (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[Row_Start_Date] [datetime] NULL,
			[Row_End_Date] [datetime] NULL,
			[Eftv_Date] [datetime] NULL,
			[EDW_Contract_Status] [varchar](3) NULL,
			[EDW_Contract_End_Date] [datetime] NULL,
			[EDW_Contract_Claim_Ind] [varchar](3) NULL
	 )
	--
	SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_Vrbl
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
		END
		
		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','

	FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		
	INSERT INTO #Temp_EDW_Contract_Vrbl
	EXEC Utility.dbo.usp_queryedw @SQL
				
	--SELECT * FROM #Temp_EDW_Contract_Vrbl	
	
	--
	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                Incurred_Date
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Incurred_Date is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
   )
   UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Incurred_Date = src.Incurred_Date
		;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Incurred_Date
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Incurred_Date is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
	    --
   )
   UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status],
			[dbo].[Able_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Incurred_Date
		;
	--

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;	
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[Able_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_Vrbl_For_FT]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_Vrbl_For_FT]
     @ProcessLogID Int,
	 @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @Incurred_Date datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[FigTree_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and [EDW_Contract_Status_on_ID] IS NULL  
	and [EDW_Contract_End_Date_on_ID] IS NULL
	and [EDW_Contract_Claim_Ind_on_ID] IS NULL
	and [EDW_Contract_Status_on_FD] IS NULL  
	and [EDW_Contract_End_Date_on_FD] IS NULL
	and [EDW_Contract_Claim_Ind_on_FD] IS NULL;
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	UPDATE [dbo].[FigTree_Claim_Listing]
	SET   [EDW_Contract_Status_on_ID] = NULL,
	      [EDW_Contract_Status_on_FD] = NULL,
		  [EDW_Contract_End_Date_on_ID] = NULL,
		  [EDW_Contract_End_Date_on_FD] = NULL,
		  [EDW_Contract_Claim_Ind_on_ID] = NULL,
		  [EDW_Contract_Claim_Ind_on_FD] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					Date_of_Death,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[Figtree_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Date_of_Death IS NOT NULL
			GROUP BY EDW_Contract_Key,
					Date_of_Death,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[Figtree_Claim_Listing]
		SET [dbo].[Figtree_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[Figtree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Figtree_Claim_Listing].updated_by = system_user
	FROM [dbo].[Figtree_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.Date_of_Death = src.Date_of_Death
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					Date_of_Death,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
		from [dbo].[Figtree_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Date_of_Death IS NOT NULL
			GROUP BY EDW_Contract_Key,
					Date_of_Death,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
	)
	UPDATE [dbo].[Figtree_Claim_Listing]
		SET [dbo].[Figtree_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[Figtree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Figtree_Claim_Listing].updated_by = system_user
	FROM [dbo].[Figtree_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.Date_of_Death = src.Date_of_Death
	;
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[Figtree_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND Date_of_Death IS NOT NULL
			GROUP BY EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[Figtree_Claim_Listing]
		SET [dbo].[Figtree_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[Figtree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Figtree_Claim_Listing].updated_by = system_user
	FROM [dbo].[Figtree_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	 CREATE TABLE #Temp_EDW_Contract_Vrbl (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[Row_Start_Date] [datetime] NULL,
			[Row_End_Date] [datetime] NULL,
			[Eftv_Date] [datetime] NULL,
			[EDW_Contract_Status] [varchar](10) NULL,
			[EDW_Contract_End_Date] [datetime] NULL,
			[EDW_Contract_Claim_Ind] [varchar](3) NULL
	 )
	--
	SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_Vrbl
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
		END
		
		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','

	FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		
	INSERT INTO #Temp_EDW_Contract_Vrbl
	EXEC Utility.dbo.usp_queryedw @SQL
				
	--
	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                Date_of_Death Incurred_Date
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
	    --
   )
   UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND  main.Date_of_Death = src.Incurred_Date
		;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                ISNULL([Claim_Finalised_Date],convert(datetime,@ProcessingMonthYear)) Incurred_Date
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
	    --
   )
   UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND  ISNULL(main.[Claim_Finalised_Date],convert(datetime,@ProcessingMonthYear)) = src.Incurred_Date
		;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T1;

	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[FigTree_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	  and Updated_Date_Time > (Select StartTime from [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID)
	--	
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Contract_Vrbl_For_WMS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Contract_Vrbl_For_WMS]
    @ProcessLogID Int
  , @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @Incurred_Date datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[WMS_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and [EDW_Contract_Status_on_ID] IS NULL  
	and [EDW_Contract_End_Date_on_ID] IS NULL
	and [EDW_Contract_Claim_Ind_on_ID] IS NULL
	and [EDW_Contract_Status_on_FD] IS NULL  
	and [EDW_Contract_End_Date_on_FD] IS NULL
	and [EDW_Contract_Claim_Ind_on_FD] IS NULL;
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[WMS_Claim_Listing]
	SET   [EDW_Contract_Status_on_ID] = NULL,
	      [EDW_Contract_Status_on_FD] = NULL,
		  [EDW_Contract_End_Date_on_ID] = NULL,
		  [EDW_Contract_End_Date_on_FD] =NULL,
		  [EDW_Contract_Claim_Ind_on_ID] = NULL,
		  [EDW_Contract_Claim_Ind_on_FD] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					DOD_Incident,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[WMS_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND DOD_Incident IS NOT NULL
			GROUP BY EDW_Contract_Key,
					DOD_Incident,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID],
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.DOD_Incident = src.DOD_Incident
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					DOD_Incident,
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
		from [dbo].[WMS_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND DOD_Incident IS NOT NULL
			GROUP BY EDW_Contract_Key,
					DOD_Incident,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_ID],
					[EDW_Contract_End_Date_on_ID],
					[EDW_Contract_Claim_Ind_on_ID]
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind_on_ID],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.DOD_Incident = src.DOD_Incident
	;
	--
	;WITH w_source
	AS
	( 
		select      EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Claim_Finalised_Date,
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
		from [dbo].[WMS_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and [EDW_Contract_Key] IS NOT NULL
		AND DOD_Incident IS NOT NULL
			GROUP BY EDW_Contract_Key,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)),
					[EDW_Contract_Status_on_FD],
					[EDW_Contract_End_Date_on_FD],
					[EDW_Contract_Claim_Ind_on_FD]
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status_on_FD],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date_on_FD],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind_on_FD],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Claim_Finalised_Date
	;
	 CREATE TABLE #Temp_EDW_Contract_Vrbl (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[Row_Start_Date] [datetime] NULL,
			[Row_End_Date] [datetime] NULL,
			[Eftv_Date] [datetime] NULL,
			[EDW_Contract_Status] [varchar](3) NULL,
			[EDW_Contract_End_Date] [datetime] NULL,
			[EDW_Contract_Claim_Ind] [varchar](3) NULL
	 )
	--
	SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_Vrbl
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  contract_key, 
		                row_start_date,
						row_end_date,
						eftv_date,
						contract_status_code, 
						contract_end_Date,
						claim_ind contract_claim_ind
							from dw_contract_vrbl 
						where contract_key IN (NULL,'
		END
		
		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','

	FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		
	INSERT INTO #Temp_EDW_Contract_Vrbl
	EXEC Utility.dbo.usp_queryedw @SQL
	--
	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                DOD_Incident Incurred_Date
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
	    --
   )
   UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_ID] = src.[EDW_Contract_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_ID] = src.[EDW_Contract_End_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_ID] = src.[EDW_Contract_Claim_Ind],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND  main.DOD_Incident = src.Incurred_Date
		;
	--
	;WITH w_source
	AS
	(
	select distinct EDW_Contract_Key,
	                ISNULL([Claim_Finalised_Date],convert(datetime,@ProcessingMonthYear)) Incurred_Date
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	)
	,w_target
	AS
	(
	select  src.EDW_contract_key, 
		    src.Incurred_Date,
			EDW_contract_status, 
			EDW_contract_end_Date,
			EDW_contract_claim_ind
		from #Temp_EDW_Contract_Vrbl vrbl,
		     w_source src
		where vrbl.EDW_contract_key = src.EDW_Contract_Key
		and src.Incurred_Date between vrbl.row_start_date and vrbl.row_end_date
	    --
   )
   UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Contract_Status_on_FD] = src.[EDW_Contract_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_End_Date_on_FD] = src.[EDW_Contract_End_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Claim_Ind_on_FD] = src.[EDW_Contract_Claim_Ind],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND   ISNULL(main.[Claim_Finalised_Date],convert(datetime,@ProcessingMonthYear)) = src.Incurred_Date
		;

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;	
	--
--SELECT @UpdateRowCount = count(*)
--FROM [dbo].[WMS_Claim_Listing]
--WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--and updated_date_time> ( select StartTime from CTL.ProcessLog where ProcessLogID =@ProcessLogID)
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---	
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Party_For_FT]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Party_For_FT]
     @ProcessLogID int,
	 @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Party_Key numeric(10, 0)
	DECLARE @Incurred_Date datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Party_Key
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Party_Key is not null
	--
	BEGIN TRAN T1;
	 CREATE TABLE #Temp_EDW_Person (
			[EDW_Party_Key] [numeric](10, 0) NULL,
			[Row_Start_Date] [datetime] NULL,
			[Row_End_Date] [datetime] NULL,
			[Eftv_Date] [datetime] NULL,
			 [EDW_Title] VARCHAR(50) NULL
			,[EDW_First_Name] VARCHAR(120) NULL
			,[EDW_Second_Name] VARCHAR(120) NULL
			,[EDW_Surname] VARCHAR(100) NULL
			,[EDW_Sex] VARCHAR(3) NULL
			,[EDW_Date_Of_Birth] datetime2 NULL
			,[EDW_Deceased_Ind] VARCHAR(1) NULL
			,[EDW_Date_of_Death] datetime2 NULL
	 )
	--
	SET @SQL =  'select  party_key, 
	                     row_start_date,
						 row_end_Date, 
						 eftv_Date, 
						 title, 
						 first_name, 
						 middle_name, 
						 surname, 
						 gender_code sex, 
						 dob, 
						 deceased_ind, 
						 dod
					from dw_person 
						where row_status_code = ''1''
						  and row_end_date = to_date(''31dec3000'',''ddmonyyyy'')
						  and party_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Party_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Person
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  party_key, 
	                     row_start_date,
						 row_end_Date, 
						 eftv_Date, 
						 title, 
						 first_name, 
						 middle_name, 
						 surname, 
						 gender_code sex, 
						 dob, 
						 deceased_ind, 
						 dod
					from dw_person 
						where row_status_code = ''1''
						  and row_end_date = to_date(''31dec3000'',''ddmonyyyy'')
						  and party_key IN (NULL,'
		END
		
		SET @SQL =  @SQL+CAST(@EDW_Party_Key AS VARCHAR)+','

	FETCH NEXT FROM Columns_Lists into 
		@EDW_Party_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		
	INSERT INTO #Temp_EDW_Person
	EXEC Utility.dbo.usp_queryedw @SQL
	--
	UPDATE [dbo].[FigTree_Claim_Listing]
	SET   [EDW_Title] = NULL,
		  [EDW_First_Name] = NULL,
		  [EDW_Second_Name] = NULL,
          [EDW_Surname] = NULL,
          [EDW_Sex] = NULL,
          [EDW_Date_Of_Birth] = NULL,
          [EDW_Deceased_Ind] = NULL,
          [EDW_Date_of_Death] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
   UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[FigTree_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[FigTree_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[FigTree_Claim_Listing].[EDW_Date_of_Death] =  CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[FigTree_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[FigTree_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, #Temp_EDW_Person src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Party_key = src.EDW_Party_key
		;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;	
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[FigTree_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	  and Updated_Date_Time > (Select StartTime from [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID)
	--	
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Party_For_WMS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Party_For_WMS]
     @ProcessLogID int
	 ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Party_Key numeric(10, 0)
	DECLARE @Incurred_Date datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Party_Key
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Party_Key is not null
	--
	BEGIN TRAN T1;
	 CREATE TABLE #Temp_EDW_Person (
			[EDW_Party_Key] [numeric](10, 0) NULL,
			[Row_Start_Date] [datetime] NULL,
			[Row_End_Date] [datetime] NULL,
			[Eftv_Date] [datetime] NULL,
			 [EDW_Title] VARCHAR(50) NULL
			,[EDW_First_Name] VARCHAR(120) NULL
			,[EDW_Second_Name] VARCHAR(120) NULL
			,[EDW_Surname] VARCHAR(100) NULL
			,[EDW_Sex] VARCHAR(3) NULL
			,[EDW_Date_Of_Birth] datetime2 NULL
			,[EDW_Deceased_Ind] VARCHAR(1) NULL
			,[EDW_Date_of_Death] datetime2 NULL
	 )
	--
	SET @SQL =  'select  party_key, 
	                     row_start_date,
						 row_end_Date, 
						 eftv_Date, 
						 title, 
						 first_name, 
						 middle_name, 
						 surname, 
						 gender_code sex, 
						 dob, 
						 deceased_ind, 
						 dod
					from dw_person 
						where row_status_code = ''1''
						  and row_end_date = to_date(''31dec3000'',''ddmonyyyy'')
						  and party_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Party_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Person
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  party_key, 
	                     row_start_date,
						 row_end_Date, 
						 eftv_Date, 
						 title, 
						 first_name, 
						 middle_name, 
						 surname, 
						 gender_code sex, 
						 dob, 
						 deceased_ind, 
						 dod
					from dw_person 
						where row_status_code = ''1''
						  and row_end_date = to_date(''31dec3000'',''ddmonyyyy'')
						  and party_key IN (NULL,'
		END
		
		SET @SQL =  @SQL+CAST(@EDW_Party_Key AS VARCHAR)+','

	FETCH NEXT FROM Columns_Lists into 
		@EDW_Party_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		
	INSERT INTO #Temp_EDW_Person
	EXEC Utility.dbo.usp_queryedw @SQL
				
	--SELECT * FROM #Temp_EDW_Person	
	UPDATE [dbo].[WMS_Claim_Listing]
	SET   [EDW_Title] = NULL,
		  [EDW_First_Name] = NULL,
		  [EDW_Second_Name] = NULL,
          [EDW_Surname] = NULL,
          [EDW_Sex] = NULL,
          [EDW_Date_Of_Birth] = NULL,
          [EDW_Deceased_Ind] = NULL,
          [EDW_Date_of_Death] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
   UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[WMS_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[WMS_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[WMS_Claim_Listing].[EDW_Date_of_Death] =  CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[WMS_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[WMS_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, #Temp_EDW_Person src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Party_key = src.EDW_Party_key
		;
	--
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;		
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Risk_For_Able]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Risk_For_Able]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @EDW_Product_Key numeric(10, 0)
	DECLARE @Product_Option_Code VARCHAR(50)
	DECLARE @Incurred_Date VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and [EDW_Product_Option_Key] is null


	truncate table dbo.Temp_Contract_Risk_Able
	print 'Truncate Temp_Contract_Risk_Able'
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--	
	UPDATE [dbo].[Able_Claim_Listing]
	SET   [EDW_Product_Option_Key] = NULL,
		  [EDW_Product_Option_Code] = NULL,
		  [EDW_Contract_Risk_Key] = NULL,
		  [EDW_Risk_Status_on_ID] = NULL,
		  [EDW_Risk_Status_on_FD] = NULL,
		  [EDW_Risk_Claim_Ind_on_ID] = NULL,
		  [EDW_Risk_Claim_Ind_on_FD] = NULL,
		  [EDW_Risk_Commenced_Date] = NULL,
		  [EDW_Risk_Expiry_Date] = NULL,
		  [EDW_Waiting_Period_on_ID] = NULL,
		  [EDW_Waiting_Period_on_FD] = NULL,
		  [EDW_Benefit_Period_on_ID] = NULL,
		  [EDW_Benefit_Period_on_FD] = NULL,
		  EDW_Sum_Insured_on_ID = NULL,
		  EDW_Sum_Insured_on_FD = NULL,
		  [EDW_Prem_Freq_Code_on_ID] = NULL,
		  [EDW_Prem_Freq_Code_on_FD] = NULL,
		  [EDW_Sum_Insured_Freq_Code] = NULL,
		  [EDW_Risk_Type_Code] = NULL,
		  [EDW_Party_Key] = NULL,
		  [EDW_Title] = NULL,
		  [EDW_First_Name] = NULL,
		  [EDW_Second_Name] = NULL,
          [EDW_Surname] = NULL,
          [EDW_Sex] = NULL,
          [EDW_Date_Of_Birth] = NULL,
          [EDW_Deceased_Ind] = NULL,
          [EDW_Date_of_Death] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
	;WITH w_source
	AS
	( 
		select      Claim_Number,
		            EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					ISNULL(Benefit_Type,'ooNVLoo') Benefit_Type,
	                Incurred_Date Incurred_Date,
					ISNULL(Claim_Event_Type,'ooNVLoo') Claim_Event_Type,
					Date_of_Birth,
					ISNULL(Waiting_Period,'ooNVLoo') Waiting_Period,
					ISNULL(Benefit_Finalised_Date,ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) Finalised_Date,
					--
					[EDW_Product_Option_Key] ,
					[EDW_Product_Option_Code],
					[EDW_Contract_Risk_Key] ,
					[EDW_Risk_Status_on_ID] ,
					[EDW_Risk_Status_on_FD],
					[EDW_Risk_Claim_Ind_on_ID] ,
					[EDW_Risk_Claim_Ind_on_FD],
					[EDW_Risk_Commenced_Date],
					[EDW_Risk_Expiry_Date],
					[EDW_Waiting_Period_on_ID],
					[EDW_Waiting_Period_on_FD],
					[EDW_Benefit_Period_on_ID],
					[EDW_Benefit_Period_on_FD],
					EDW_Sum_Insured_on_ID,
					EDW_Sum_Insured_on_FD,
					[EDW_Prem_Freq_Code_on_ID],	
					[EDW_Prem_Freq_Code_on_FD],
					[EDW_Sum_Insured_Freq_Code],
					[EDW_Risk_Type_Code],
					[EDW_Party_Key],
					[EDW_Title],
					[EDW_First_Name],
					[EDW_Second_Name],
					[EDW_Surname],
					[EDW_Sex],
					[EDW_Date_Of_Birth],
					[EDW_Deceased_Ind] ,
					[EDW_Date_of_Death]
		from [dbo].[Able_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and EDW_Contract_Key is not null
		and Product_Option_Code is not null
		and Incurred_Date is not null
		and [EDW_Product_Option_Key] is not null
	)
	UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_FD] = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.[EDW_Risk_Status_on_FD] END,			
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.[EDW_Risk_Claim_Ind_on_FD] END,	
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_ID] = src.[EDW_Waiting_Period_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_FD] = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.[EDW_Waiting_Period_on_FD] END,	
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_ID] = src.[EDW_Benefit_Period_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_FD] = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.[EDW_Benefit_Period_on_FD] END,	
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = src.EDW_Sum_Insured_on_ID,
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.EDW_Sum_Insured_on_FD END,	
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code_on_ID],
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = CASE WHEN ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Finalised_Date
																	  THEN src.[EDW_Prem_Freq_Code_on_FD] END,	
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
	FROM [dbo].[Able_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.EDW_Product_Key = src.EDW_Product_Key
		and main.Product_Option_Code = src.Product_Option_Code
		and ISNULL(main.Benefit_Type,'ooNVLoo') = src.Benefit_Type
		and main.Incurred_Date = src.Incurred_Date
		and ISNULL(main.Claim_Event_Type,'ooNVLoo') = src.Claim_Event_Type
		and main.Date_of_Birth = src.Date_of_Birth
		and ISNULL(main.Waiting_Period,'ooNVLoo') = src.Waiting_Period
		and main.[EDW_Product_Option_Key] IS NULL
		and main.Claim_Number = src.Claim_Number
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
  --   CREATE TABLE  Temp_Contract_Risk_Able (
		--	[EDW_Contract_Key] [numeric](10, 0) NULL,
		--	[EDW_Product_Key] [numeric](10, 0) NULL,
		--	[EDW_Product_Option_Key] [numeric](10, 0) NULL,
		--	[EDW_Product_Option_Code] [varchar](100) NULL,
		--	[EDW_Product_Opt_Group_Desc] [varchar](200) NULL,
		--	[Row_Start_Date] [datetime] NULL,
		--	[Row_End_Date] [datetime] NULL,
		--	[Eftv_Date] [datetime] NULL,
		--	[EDW_Contract_Risk_Key] [numeric](10, 0) NULL,
		--	[EDW_Risk_Status] [varchar](100) NULL,
		--	[EDW_Risk_Claim_Ind] [varchar](100) NULL,
		--	[EDW_Risk_Commenced_Date] [datetime2](7) NULL,
		--	[EDW_Risk_End_Date] [datetime] NULL,
		--	[EDW_Risk_Expiry_Date] [datetime2](7) NULL,
		--	[EDW_Waiting_Period] [varchar](341) NULL,
		--	[EDW_Injury_Benefit_Period] [varchar](4000) NULL,
		--	[EDW_Sickness_Benefit_Period] [varchar](4000) NULL,
		--	[EDW_Sum_Insured] [numeric](28, 6) NULL,
		--	[EDW_Prem_Freq_Code] [varchar](6) NULL,
		--	[EDW_Sum_Insured_Freq_Code] [varchar](6) NULL,
		--	[EDW_Risk_Type_Code] [varchar](10) NULL,
		--	[EDW_Source_System] [varchar](100) NULL,
		--	[EDW_Party_Key] [numeric](10, 0) NULL,
		--	[EDW_Title] [varchar](50) NULL,
		--	[EDW_First_Name] [varchar](120) NULL,
		--	[EDW_Second_Name] [varchar](120) NULL,
		--	[EDW_Surname] [varchar](100) NULL,
		--	[EDW_Sex] [varchar](3) NULL,
		--	[EDW_Date_Of_Birth] [datetime] NULL,
		--	[EDW_Deceased_Ind] [varchar](1) NULL,
		--	[EDW_Date_of_Death] [datetime] NULL
	 --)
	--
	SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date,
							 risk.risk_end_date, 
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							 risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 p.dob, 
							 p.deceased_ind, 
							 p.dod
							 from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro 
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 

	   If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO  Temp_Contract_Risk_Able
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date,
							 risk.risk_end_date, 
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							  risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 p.dob, 
							 p.deceased_ind, 
							 p.dod
							 from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro  
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
		END

		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','
		 --			
		FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
	INSERT INTO  Temp_Contract_Risk_Able
	EXEC Utility.dbo.usp_queryedw @SQL
	--	
	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                Incurred_Date Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					ISNULL(Waiting_Period,'ooNVLoo') Waiting_Period,
					ISNULL(Benefit_Period,'ooNVLoo') Benefit_Period
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and benefit_number is not null
	and [EDW_Product_Option_Key] is null
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	)
	,
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Waiting_Period,
			src.Benefit_Period,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Waiting_Period,src.Benefit_Period,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				[dbo].[Able_Waiting_Period] per,
				[dbo].[Able_Benefit_Period] ben,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and src.Waiting_Period = per.[Able_Waiting_Period]
		and ISNULL(risk.[EDW_Waiting_Period],'ooNVLoo') = per.[Waiting_Period]
		and src.Benefit_Period = ben.[Able_Benefit_Period]
		and ISNULL(CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END,'ooNVLoo') = ben.[Benefit_Period]
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		and per.[Source] = 'EDW'
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Benefit_Period,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Benefit_Period,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_ID] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_ID] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			and ISNULL(main.Waiting_Period,'ooNVLoo') = src.Waiting_Period
			and ISNULL(main.Benefit_Period,'ooNVLoo') = src.Benefit_Period
			AND main.Incurred_Date = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			and ur.Waiting_Period = src.Waiting_Period
			and ur.Benefit_Period= src.Benefit_Period
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;
		--
		;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                ISNULL(Benefit_Finalised_Date,ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					ISNULL(Waiting_Period,'ooNVLoo') Waiting_Period,
					ISNULL(Benefit_Period,'ooNVLoo') Benefit_Period
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and Benefit_Number is not null
	and [EDW_Product_Option_Key] is null 
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Waiting_Period,
			src.Benefit_Period,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Waiting_Period,src.Benefit_Period,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN risk.row_start_date < src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				[dbo].[Able_Waiting_Period] per,
				[dbo].[Able_Benefit_Period] ben,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and src.Waiting_Period = per.[Able_Waiting_Period]
		and ISNULL(risk.[EDW_Waiting_Period],'ooNVLoo') = per.[Waiting_Period]
		and src.Benefit_Period = ben.[Able_Benefit_Period]
		and ISNULL(CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END,'ooNVLoo') = ben.[Benefit_Period]
		and per.[Source] = 'EDW'
		and ci.EDW_Contract_Risk_Key = risk.edw_contract_risk_key
		and ci.[EDW_Product_Option_Key] = risk.[EDW_Product_Option_Key]
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Benefit_Period,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Benefit_Period,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_FD] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_FD] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			and ISNULL(main.Waiting_Period,'ooNVLoo') = src.Waiting_Period
			and ISNULL(main.Benefit_Period,'ooNVLoo') = src.Benefit_Period
			AND ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			and ur.Waiting_Period = src.Waiting_Period
			and ur.Benefit_Period= src.Benefit_Period
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;
		--
		;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                Incurred_Date Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					ISNULL(Waiting_Period,'ooNVLoo') Waiting_Period
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and benefit_number is not null
	and [EDW_Product_Option_Key] is null 
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Waiting_Period,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Waiting_Period,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				[dbo].[Able_Waiting_Period] per,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and src.Waiting_Period = per.[Able_Waiting_Period]
		and ISNULL(risk.[EDW_Waiting_Period],'ooNVLoo') = per.[Waiting_Period]
		and per.[Source] = 'EDW'
			and ci.EDW_Contract_Risk_Key = risk.edw_contract_risk_key
		and ci.[EDW_Product_Option_Key] = risk.[EDW_Product_Option_Key]
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_ID] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_ID] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			and ISNULL(main.Waiting_Period,'ooNVLoo') = src.Waiting_Period
			AND main.Incurred_Date = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			and ur.Waiting_Period = src.Waiting_Period
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;

			;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                ISNULL(Benefit_Finalised_Date,ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					ISNULL(Waiting_Period,'ooNVLoo') Waiting_Period
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and benefit_number is not null
	and [EDW_Product_Option_Key] is null 
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Waiting_Period,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Waiting_Period,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN risk.row_start_date < src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				[dbo].[Able_Waiting_Period] per,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and src.Waiting_Period = per.[Able_Waiting_Period]
		and ISNULL(risk.[EDW_Waiting_Period],'ooNVLoo') = per.[Waiting_Period]
		and per.[Source] = 'EDW'
			and ci.EDW_Contract_Risk_Key = risk.edw_contract_risk_key
		and ci.[EDW_Product_Option_Key] = risk.[EDW_Product_Option_Key]
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Waiting_Period,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_FD] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_FD] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			and ISNULL(main.Waiting_Period,'ooNVLoo') = src.Waiting_Period
			AND ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			and ur.Waiting_Period = src.Waiting_Period
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;


			;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                Incurred_Date Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and [EDW_Product_Option_Key] is null 
	and benefit_number is not null
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and ci.EDW_Contract_Risk_Key = risk.edw_contract_risk_key
		and ci.[EDW_Product_Option_Key] = risk.[EDW_Product_Option_Key]
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_ID] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_ID] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			AND main.Incurred_Date = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;

			;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                ISNULL(Benefit_Finalised_Date,ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and benefit_number is not null
	and [EDW_Product_Option_Key] is null
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_Able
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY risk.[EDW_Contract_Key],src.[Product_Option_Code], src.Benefit_Type,src.Incurred_Date,src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,										 
								         --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN risk.row_start_date < src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC ) rownum
			from  Temp_Contract_Risk_Able risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.[EDW_Product_Option_Code] = 
		CASE WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Death' THEN src.[Product_Option_Code]+'DTH'
		WHEN src.[Product_Option_Code] = 'GLI' AND src.Benefit_Type = 'Total Permanent Disability' THEN src.[Product_Option_Code]+'PDS'
		ELSE src.[Product_Option_Code] 
		END
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
			and ci.EDW_Contract_Risk_Key = risk.edw_contract_risk_key
		and ci.[EDW_Product_Option_Key] = risk.[EDW_Product_Option_Key]
		)
		,w_unique_records
		AS 
		 ( select EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Incurred_Date,Date_of_Birth 
		     from w_target
		 where rownum = 1
		group by EDW_Contract_Key,[Product_Option_Code], Benefit_Type,Claim_Event_Type,Incurred_Date,Date_of_Birth
		having count(*) = 1
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Able_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Able_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Able_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_FD] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_FD] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = src.[EDW_Sum_Insured],			
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Able_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Able_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Able_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Able_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Able_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Able_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Able_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Able_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src,w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			AND ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Product_Option_Code = src.[Product_Option_Code]
			and ur.Benefit_Type = src.Benefit_Type
			and ur.Claim_Event_Type    = src.Claim_Event_Type
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
		;

		;WITH w_source
	as
	(
	select  DISTINCT EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					EDW_Contract_Risk_Key
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and [EDW_Product_Option_Key] is not null
	and (EDW_Sum_Insured_on_ID is null or EDW_Sum_Insured_on_ID = 0 )
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_Able risk,
				w_source src
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		AND risk.[EDW_Sum_Insured] <> 0
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_Able risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.row_start_date = ( SELECT MIN(risk2.row_start_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
									 and src.Incurred_Date between risk2.eftv_date and risk2.row_end_date
									 AND risk2.[EDW_Sum_Insured] <> 0
								  )	
		and src.Incurred_Date < ( SELECT MIN(risk2.row_start_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
								  )	
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_Able risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.row_start_date = ( SELECT MIN(risk2.row_start_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
									 AND risk2.[EDW_Sum_Insured] <> 0
								  )	
		and src.Incurred_Date < ( SELECT MIN(risk2.row_start_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
								  )	
		and src.Incurred_Date < ( SELECT MIN(risk2.eftv_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
								  )
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_Able risk,
				w_source src
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.row_start_date = ( SELECT MAX(risk2.row_start_date) 
		                           FROM  Temp_Contract_Risk_Able  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
									 AND risk2.row_start_date < src.Incurred_Date 
									 AND risk2.[EDW_Sum_Insured] <> 0)
		) 
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_ID] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_ID] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = src.[EDW_Sum_Insured],						
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			AND main.Incurred_Date = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		;

		;WITH w_source
	as
	(
	select  DISTINCT EDW_Contract_Key,
					EDW_Product_Key,
					Product_Option_Code,
					Benefit_Type,
	                ISNULL(Benefit_Finalised_Date,ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) Incurred_Date,
					Claim_Event_Type,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					EDW_Contract_Risk_Key
	from [dbo].[Able_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Product_Option_Code is not null
	and Incurred_Date is not null
	and [EDW_Product_Option_Key] is not null
	and EDW_Sum_Insured_on_FD is null
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			src.[Product_Option_Code],
			risk.edw_product_option_code,
			src.Benefit_Type,
			src.Incurred_Date,
			src.Claim_Event_Type,
			src.Date_of_Birth,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Waiting_Period],
			CASE src.Claim_Event_Type 
			WHEN 'Accident' THEN risk.[EDW_Injury_Benefit_Period]
			WHEN 'Sickness' THEN risk.[EDW_Sickness_Benefit_Period]
			END [EDW_Benefit_Period], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_Able risk,
				w_source src
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		)
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[Able_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[Able_Claim_Listing].[EDW_Waiting_Period_on_FD] = src.[EDW_Waiting_Period],
			[dbo].[Able_Claim_Listing].[EDW_Benefit_Period_on_FD] = src.[EDW_Benefit_Period],
			[dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = src.[EDW_Sum_Insured],						
			[dbo].[Able_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Product_Option_Code = src.[Product_Option_Code]
			and main.Benefit_Type = src.Benefit_Type
			and main.Claim_Event_Type    = src.Claim_Event_Type
			AND ISNULL(main.Benefit_Finalised_Date,ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear))) = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		;
		UPDATE [dbo].[Able_Claim_Listing]
		SET [dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_ID = ISNULL(trg.EDW_Sum_Insured_on_ID,0),
		    [dbo].[Able_Claim_Listing].EDW_Sum_Insured_on_FD = ISNULL(trg.EDW_Sum_Insured_on_FD,0),
			[dbo].[Able_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Able_Claim_Listing].updated_by = system_user
		FROM [dbo].[Able_Claim_Listing] trg
		WHERE trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND trg.Product_Option_Code = 'WPB'
			AND trg.EDW_Contract_Risk_Key IS NOT NULL
		;
		--
		COMMIT TRAN T1;
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		--
		--SELECT @UpdateRowCount = count(*)
		--FROM [dbo].[Able_Claim_Listing]
		--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)		
	--			
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Risk_For_FT]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_EDW_Risk_For_FT]
     @ProcessLogID int,
	 @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[FigTree_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	and [EDW_Product_Option_Key] is null
	--
	truncate table dbo.Temp_Contract_Risk_FT
	print 'Truncate Temp_Contract_Risk_FT'

	BEGIN TRY;
	BEGIN TRAN T1;			
	--	
	UPDATE [dbo].[FigTree_Claim_Listing]
	SET   [EDW_Product_Option_Key] = NULL,
		  [EDW_Product_Option_Code] = NULL,
		  [EDW_Contract_Risk_Key] = NULL,
		  [EDW_Risk_Status_on_ID] = NULL,
		  [EDW_Risk_Status_on_FD] = NULL,
		  [EDW_Risk_Claim_Ind_on_ID] = NULL,
		  [EDW_Risk_Claim_Ind_on_FD] = NULL,
		  [EDW_Risk_Commenced_Date] = NULL,
		  [EDW_Risk_Expiry_Date] = NULL,
		  [EDW_Sum_Insured_on_ID] = NULL,
		  [EDW_Sum_Insured_on_FD] = NULL,
		  [EDW_Prem_Freq_Code_on_ID] = NULL,
		  [EDW_Prem_Freq_Code_on_FD] = NULL,
		  [EDW_Sum_Insured_Freq_Code] = NULL,
		  [EDW_Risk_Type_Code] = NULL,
		  [EDW_Source_Risk_Type_Code] = NULL,
		  [EDW_Party_Key] = NULL,
		  [EDW_Title] = NULL,
		  [EDW_First_Name] = NULL,
		  [EDW_Second_Name] = NULL,
          [EDW_Surname] = NULL,
          [EDW_Sex] = NULL,
          [EDW_Date_Of_Birth] = NULL,
          [EDW_Deceased_Ind] = NULL,
          [EDW_Date_of_Death] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

	--print 'Update  [FigTree_Claim_Listing] for Month EffectiveDate'
	--
	;WITH w_source
	AS
	( 
		select      Claim_Number,
		            EDW_Contract_Key,
					EDW_Product_Key,
	                Date_Of_Death,
					Date_of_Birth,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Finalised_Date,
					--
					[EDW_Product_Option_Key] ,
					[EDW_Product_Option_Code],
					[EDW_Contract_Risk_Key] ,
					[EDW_Risk_Status_on_ID] ,
					[EDW_Risk_Status_on_FD],
					[EDW_Risk_Claim_Ind_on_ID] ,
					[EDW_Risk_Claim_Ind_on_FD],
					[EDW_Risk_Commenced_Date],
					[EDW_Risk_Expiry_Date],
					EDW_Sum_Insured_on_ID,	
					[EDW_Sum_Insured_on_FD],				
					[EDW_Prem_Freq_Code_on_ID],
					[EDW_Prem_Freq_Code_on_FD],
					[EDW_Sum_Insured_Freq_Code],
					[EDW_Risk_Type_Code],
					EDW_Source_Risk_Type_Code,
					[EDW_Party_Key],
					[EDW_Title],
					[EDW_First_Name],
					[EDW_Second_Name],
					[EDW_Surname],
					[EDW_Sex],
					[EDW_Date_Of_Birth],
					[EDW_Deceased_Ind] ,
					[EDW_Date_of_Death]
		from [dbo].[Figtree_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and EDW_Contract_Key is not null
		and Date_Of_Death is not null
		and [EDW_Product_Option_Key] is not null
	)
	UPDATE [dbo].[Figtree_Claim_Listing]
		SET [dbo].[Figtree_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[Figtree_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[Figtree_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Status_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date 
			                                                         THEN src.[EDW_Risk_Status_on_FD] END,
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date 
			                                                         THEN src.[EDW_Risk_Claim_Ind_on_FD] END,
			[dbo].[Figtree_Claim_Listing].EDW_Sum_Insured_on_ID = src.EDW_Sum_Insured_on_ID,
			[dbo].[Figtree_Claim_Listing].[EDW_Sum_Insured_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date 
			                                                         THEN src.[EDW_Sum_Insured_on_FD] END,
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code_on_ID],
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date 
			                                                         THEN src.[EDW_Prem_Freq_Code_on_FD] END,
			[dbo].[Figtree_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[Figtree_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[Figtree_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[Figtree_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[Figtree_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[Figtree_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[Figtree_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[Figtree_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[Figtree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[Figtree_Claim_Listing].updated_by = system_user
	FROM [dbo].[Figtree_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.EDW_Product_Key = src.EDW_Product_Key
		and main.date_of_Death = src.date_of_Death
		and main.Date_of_Birth = src.Date_of_Birth
		and main.[EDW_Product_Option_Key] IS NULL
		and main.Claim_Number = src.Claim_Number
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 COMMIT Tran T1;
  print 'Update based on Previous Month Records' + convert(varchar,@UpdateRowCount)
	--
	--CREATE TABLE #Temp_Contract_Risk_FT (
	--		[EDW_Contract_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Option_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Option_Code] [varchar](20) NULL,
	--		[EDW_Product_Opt_Group_Desc] [varchar](50) NULL,
	--		[Actrl_Corral_Group_Code] [varchar](10) NULL,
	--		[Row_Start_Date] [datetime] NULL,
	--		[Row_End_Date] [datetime] NULL,
	--		[Eftv_Date] [datetime] NULL,
	--		[EDW_Contract_Risk_Key] [numeric](10, 0) NULL,
	--		[EDW_Risk_Status] [varchar](3) NULL,
	--		[EDW_Risk_Claim_Ind] [varchar](3) NULL,
	--		[EDW_Risk_Commenced_Date] [datetime2] NULL,
	--		[EDW_Risk_End_Date] [datetime] NULL,
	--		[EDW_Risk_Expiry_Date] [datetime2] NULL,
	--		[EDW_Waiting_Period] [varchar](341) NULL,
	--		[EDW_Injury_Benefit_Period] [varchar](4000) NULL,
	--		[EDW_Sickness_Benefit_Period] [varchar](4000) NULL,
	--		[EDW_Sum_Insured] [numeric](28, 6) NULL,
	--		[EDW_Prem_Freq_Code] [varchar](6) NULL,
	--		[EDW_Sum_Insured_Freq_Code] [varchar](6) NULL,
	--		[EDW_Risk_Type_Code] [varchar](10) NULL,
	--		[EDW_Source_Risk_Type_Code] [varchar](10) NULL,
	--		[EDW_Source_System] [varchar](100) NULL,
	--		[EDW_Party_Key] [numeric](10, 0) NULL,
	--		[EDW_Title] [varchar](50) NULL,
	--		[EDW_First_Name] [varchar](120) NULL,
	--		[EDW_Second_Name] [varchar](120) NULL,
	--		[EDW_Surname] [varchar](100) NULL,
	--		[EDW_Sex] [varchar](3) NULL,
	--		[EDW_Date_Of_Birth] [datetime2] NULL,
	--		[EDW_Deceased_Ind] [varchar](1) NULL,
	--		[EDW_Date_of_Death] [datetime2] NULL			
	-- )
	--
	SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 po.actrl_corral_group_code,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date, 
							 risk.risk_end_date,
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							 risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 ro.source_risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 to_date(to_char(p.dob,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dob, 
							 p.deceased_ind, 
							 to_date(to_char(p.dod,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dod
							 from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 

	If len(@SQL) > 7980
	--  If len(@SQL) > 1000
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO dbo.Temp_Contract_Risk_FT
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 po.actrl_corral_group_code,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date, 
							 risk.risk_end_date,
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							 risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 ro.source_risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 to_date(to_char(p.dob,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dob, 
							 p.deceased_ind, 
							 to_date(to_char(p.dod,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dod
							 from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
		END

		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','
		 --			
		FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
	INSERT INTO dbo.Temp_Contract_Risk_FT
	EXEC Utility.dbo.usp_queryedw @SQL
	
	print ' Updated Temp_Contract_Risk_FT table from EDW data'
	--

   BEGIN TRAN T2;

	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                EDW_Product_Key,
	                Date_of_Death Incurred_Date,
					ISNULL(Risk_Commenced_Date,convert(datetime,'01/jan/1753')) Risk_Commenced_Date ,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					edw_product_system_code
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	and [EDW_Product_Option_Key] is null 
	and claim_type = 'Death' 
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from dbo.Temp_Contract_Risk_FT
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Date_of_Birth,
			src.Risk_Commenced_Date,
			src.EDW_Product_System_Code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date,src.Risk_Commenced_Date, src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.[Risk_Commenced_Date] = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
										 CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN src.edw_product_system_code = 'OR' AND risk.edw_product_option_code = 'BAS' THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from dbo.Temp_Contract_Risk_FT risk,
				w_source src,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'CP'
					     AND ISNULL(risk.[EDW_Product_Opt_Group_Desc],'ooNVLoo') IN ('Death', 'Death/Trauma', 'TPD', 'Trauma')
					     AND ISNULL(risk.edw_source_risk_type_code,'ooNVLoo') not in ('BT','IO')
						 AND risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
					)
					OR
					(		src.EDW_Product_System_Code IN ( 'OR','U2')
					     AND risk.[EDW_Risk_Type_Code] IN ('DTH')
					)
			)
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Date_of_Birth,
			src.Risk_Commenced_Date,
			src.EDW_Product_System_Code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date,src.Risk_Commenced_Date, src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.[Risk_Commenced_Date] = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
										 CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN src.edw_product_system_code = 'OR' AND risk.edw_product_option_code = 'BAS' THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from dbo.Temp_Contract_Risk_FT risk,
				w_source src,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'CP'
					     AND ISNULL(risk.[EDW_Product_Opt_Group_Desc],'ooNVLoo') IN ('Death', 'Death/Trauma', 'TPD', 'Trauma')
					     AND ISNULL(risk.edw_source_risk_type_code,'ooNVLoo') not in ('BT','IO')
						 AND risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
					)
					OR
					(		src.EDW_Product_System_Code IN ( 'OR','U2')
					     AND risk.[EDW_Risk_Type_Code] IN ('DTH')
					)
			)
		and src.Incurred_Date < ( SELECT min(risk2.row_start_date)
		                        FROM dbo.Temp_Contract_Risk_FT risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT min(risk2.row_start_date)
		                        FROM dbo.Temp_Contract_Risk_FT risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
	)
	select * into #Temp_w_target from w_target

	;with w_unique_records
	AS 
	( select EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Incurred_Date,
					 Risk_Commenced_Date,
					 Date_of_Birth
					 from #Temp_w_target
	where rownum = 1
	GROUP BY EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Incurred_Date,
					 Risk_Commenced_Date,
					 Date_of_Birth
					having count(*) = 1
	)
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Sum_Insured_on_ID] = src.[EDW_Sum_Insured],			
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[FigTree_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[FigTree_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[FigTree_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[FigTree_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[FigTree_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, #Temp_w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.Date_of_Death = src.Incurred_Date
			and main.Date_of_Birth = src.Date_of_Birth
			and ISNULL(main.Risk_Commenced_Date,convert(datetime,'01/jan/1753')) = src.Risk_Commenced_Date
			AND src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Date_of_Birth = src.Date_of_Birth
			and ur.Risk_Commenced_Date = src.Risk_Commenced_Date
		;	
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
       Print 'Update Figtree Listing records based on Incurred Date Check ' + convert(varchar,@UpdateRowCount)
   COMMIT TRAN T2;

   Drop Table #Temp_w_target;

   BEGIN TRAN T3;

	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                EDW_Product_Key,
	                ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Finalised_Date,
					Date_of_Death,
					edw_product_code,
					edw_class_of_business,
					ISNULL(Risk_Commenced_Date,convert(datetime,'01/jan/1753')) Risk_Commenced_Date ,
					Date_of_Birth,
					CAST(year(Date_of_Birth) as VARCHAR) birth_year,
					edw_product_system_code
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	and [EDW_Product_Option_Key] is null
	and claim_type = 'Death'
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from dbo.Temp_Contract_Risk_FT
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Finalised_Date,
			src.Date_of_Birth,
			src.Risk_Commenced_Date,
			edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			ROW_NUMBER() OVER( PARTITION BY src.[EDW_Contract_Key],src.Finalised_Date,src.Risk_Commenced_Date, src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
										 CASE WHEN src.[Risk_Commenced_Date] = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
										 CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN src.edw_product_system_code = 'OR' AND risk.edw_product_option_code = 'BAS' THEN 1 
											  ELSE 0 END DESC,
								         --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from dbo.Temp_Contract_Risk_FT risk,
				w_source src,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'CP'
					     AND ISNULL(risk.[EDW_Product_Opt_Group_Desc],'ooNVLoo') IN ('Death', 'Death/Trauma', 'TPD', 'Trauma')
					     AND ISNULL(risk.edw_source_risk_type_code,'ooNVLoo') not in ('BT','IO')
						 AND risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
					)
					OR
					(		src.EDW_Product_System_Code IN ( 'OR','U2')
					     AND risk.[EDW_Risk_Type_Code] IN ('DTH')
					)
			)
		and src.Finalised_Date between risk.row_start_date and risk.row_end_date
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Finalised_Date,
			src.Date_of_Birth,
			src.Risk_Commenced_Date,
			edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			ROW_NUMBER() OVER( PARTITION BY src.[EDW_Contract_Key],src.Finalised_Date,src.Risk_Commenced_Date, src.Date_of_Birth
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
										 CASE WHEN src.[Risk_Commenced_Date] = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
										 CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,								         
								         CASE WHEN risk.EDW_Date_of_Birth = src.Date_of_Birth THEN 2 
										      WHEN CAST(year(risk.EDW_Date_of_Birth) as VARCHAR) = src.birth_year THEN 1 
											  ELSE 0 END DESC,
										 CASE WHEN src.edw_product_system_code = 'OR' AND risk.edw_product_option_code = 'BAS' THEN 1 
											  ELSE 0 END DESC,
								         --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from dbo.Temp_Contract_Risk_FT risk,
				w_source src,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'CP'
					     AND ISNULL(risk.[EDW_Product_Opt_Group_Desc],'ooNVLoo') IN ('Death', 'Death/Trauma', 'TPD', 'Trauma')
					     AND ISNULL(risk.edw_source_risk_type_code,'ooNVLoo') not in ('BT','IO')
						 AND risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
					)
					OR
					(		src.EDW_Product_System_Code IN ( 'OR','U2')
					     AND risk.[EDW_Risk_Type_Code] IN ('DTH')
					)
			)
		and src.Finalised_Date < ( SELECT min(risk2.row_start_date)
		                        FROM dbo.Temp_Contract_Risk_FT risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and src.Date_of_Death < ( SELECT min(risk2.row_start_date)
		                        FROM dbo.Temp_Contract_Risk_FT risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT min(risk2.row_start_date)
		                        FROM dbo.Temp_Contract_Risk_FT risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
	)
	select * into #Temp_W_Target2 from w_target
	;With w_unique_records
	AS 
	( select EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Finalised_Date,
					 Risk_Commenced_Date,
					 Date_of_Birth
					 from #Temp_W_Target2
	where rownum = 1
	GROUP BY EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Finalised_Date,
					 Risk_Commenced_Date,
					 Date_of_Birth
					having count(*) = 1
	)
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[FigTree_Claim_Listing].[EDW_Sum_Insured_on_FD] = src.[EDW_Sum_Insured],			
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[Figtree_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[FigTree_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[FigTree_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[FigTree_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[FigTree_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[FigTree_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[FigTree_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[FigTree_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[FigTree_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, #Temp_W_Target2 src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND ISNULL(main.Claim_Finalised_Date, convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
			AND main.Date_of_Birth = src.Date_of_Birth
			and ISNULL(main.Risk_Commenced_Date,convert(datetime,'01/jan/1753')) = src.Risk_Commenced_Date
			AND src.rownum = 1
			--
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Finalised_Date = src.Finalised_Date
			and ur.Date_of_Birth = src.Date_of_Birth
			and ur.Risk_Commenced_Date = src.Risk_Commenced_Date
		;
     
	 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	 print 'Update Figtree Claim Listing records based on Finalized Date ' + convert(varchar,@UpdateRowCount)

	 COMMIT TRAN T3;

	 DROP Table #Temp_W_Target2;

  BEGIN TRAN T4;

	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Finalised_Date,
					EDW_Contract_Risk_Key,
					[EDW_Product_Option_Key],
					edw_product_system_code
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	and [EDW_Product_Option_Key] is not null
	and EDW_Sum_Insured_on_FD is null
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Finalised_Date,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from dbo.Temp_Contract_Risk_FT risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Finalised_Date between risk.row_start_date and risk.row_end_date
		--
	)
	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].[EDW_Sum_Insured_on_FD] = src.[EDW_Sum_Insured],						
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
			and main.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
			AND ISNULL(main.Claim_Finalised_Date, convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
		;	
		
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	Print 'Update Figtree Claim Listing EDW_SUm_Insured_on_FD based on Finalised Date ' + convert(varchar,@UpdateRowCount)
			
	COMMIT TRAN T4;

		----
	BEGIN TRAN T5;
	
	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                Date_of_Death,
					EDW_Contract_Risk_Key,
					[EDW_Product_Option_Key],
					edw_product_system_code
	from [dbo].[FigTree_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and Date_of_Death is not null
	and [EDW_Product_Option_Key] is not null
	and (EDW_Sum_Insured_on_ID = 0 or EDW_Sum_Insured_on_ID IS NULL )
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Date_of_Death,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from dbo.Temp_Contract_Risk_FT  risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Date_of_Death between risk.row_start_date and risk.row_end_date
		and risk.EDW_Sum_Insured <> 0
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Date_of_Death,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from dbo.Temp_Contract_Risk_FT  risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Date_of_Death > (SELECT MIN(risk2.row_start_date) 
		                           FROM dbo.Temp_Contract_Risk_FT  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key)
		and risk.row_start_date = ( SELECT MAX(risk2.row_start_date) 
		                           FROM dbo.Temp_Contract_Risk_FT  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
									 AND risk2.row_start_date < src.Date_of_Death 
									 AND risk2.[EDW_Sum_Insured] <> 0)
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Date_of_Death,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from dbo.Temp_Contract_Risk_FT  risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Date_of_Death < (SELECT MIN(risk2.row_start_date) 
		                           FROM dbo.Temp_Contract_Risk_FT  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key)
		and risk.row_start_date = ( SELECT MIN(risk2.row_start_date) 
		                           FROM dbo.Temp_Contract_Risk_FT  risk2
								   WHERE risk2.EDW_Contract_Key = src.EDW_Contract_Key
									 AND risk2.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
									 AND risk2.[EDW_Sum_Insured] <> 0)
	)
	select * into #Temp_W_Target3 from w_target

	UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[FigTree_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[FigTree_Claim_Listing].[EDW_Sum_Insured_on_ID] = src.[EDW_Sum_Insured],						
			[dbo].[Figtree_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] main, #Temp_W_Target3 src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
			and main.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
			AND main.Date_of_Death = src.Date_of_Death
		;
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Figtree Claim Listing EDW_Sum_Insured_On_ID based on Incurred Date ' + convert(varchar,@UpdateRowCount)

	COMMIT TRAN T5;
	DROP TABLE #Temp_W_Target3;

	BEGIN TRAN T6;

		UPDATE [dbo].[FigTree_Claim_Listing]
		SET [dbo].[FigTree_Claim_Listing].EDW_Sum_Insured_on_ID = ISNULL(trg.EDW_Sum_Insured_on_ID,0),
		    [dbo].[FigTree_Claim_Listing].EDW_Sum_Insured_on_FD = ISNULL(trg.EDW_Sum_Insured_on_FD,0),
			[dbo].[FigTree_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[FigTree_Claim_Listing].updated_by = system_user
		FROM [dbo].[FigTree_Claim_Listing] trg
		WHERE trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND trg.EDW_Product_Option_Code = 'WPB'
			AND trg.EDW_Contract_Risk_Key IS NOT NULL
		;

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT	
	PRINT ' Update Figtree Claim Listing SUm Insured Amts for WPB ' + convert(varchar,@UpdateRowCount)

   COMMIT TRAN T6;
	--
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[FigTree_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	  and Updated_Date_Time > (Select StartTime from [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID)
	--			
	--			
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK;

		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Risk_For_Layer_0]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Risk_For_Layer_0]
     @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @Contract_Key VARCHAR(50)
	DECLARE @Product_Option_Code  VARCHAR(50)
	DECLARE @EDW_Product_Option_Code  VARCHAR(50)
	DECLARE @PAS_Client_ID  VARCHAR(50)
	DECLARE @EDW_Contract_Risk_Key  numeric(10,0)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct contract_key
	from [dbo].[ODB_Layer_0_Policies]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and product_option_code is not null
	and contract_key is not null
	and contract_risk_key is null
	and product_system_code IN ('FDA','CP','OR','DS')
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	--
	 CREATE TABLE #Temp_EDW_Contract_Risk (
			[Contract_Key] [numeric](10, 0) NULL,
			[EDW_Product_Key] [numeric](10, 0) NULL,
			[EDW_Product_Option_Key] [numeric](10, 0) NULL,
			[EDW_Product_Option_Code] [varchar](100) NULL,
			[EDW_Contract_Risk_Key] [numeric](10, 0) NULL,
			[PAS_Client_ID] [varchar](100) NULL,
			[EDW_Risk_Claim_Ind] [varchar](100) NULL,			
			[Product_Opt_Group_Desc] [varchar](50) NULL,
			[Actrl_Corral_Group_Code] [varchar](10) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Contract_Key
	--
	SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 risk.contract_risk_key,
							 risk.PAS_client_id,
							 risk.claim_ind, 
							po.Product_Opt_Group_Desc,
							po.actrl_corral_group_code
							 from dw_contract_risk risk,
							      dw_product_option po
							where 1=1
							and risk.product_option_key = po.product_option_key
							and risk.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_Risk
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 risk.contract_risk_key,
							 risk.PAS_client_id,
							 risk.claim_ind, 
							po.Product_Opt_Group_Desc,
							po.actrl_corral_group_code
							 from dw_contract_risk risk,
							      dw_product_option po
							where 1=1
							and risk.product_option_key = po.product_option_key
							and risk.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
		END
		--
		SET @SQL =  @SQL+CAST(@Contract_Key AS VARCHAR)+','
		--
		FETCH NEXT FROM Columns_Lists into 
		@Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO #Temp_EDW_Contract_Risk
			EXEC Utility.dbo.usp_queryedw @SQL
	--
	;WITH w_fda_policies 
		as
		(select distinct contract_key, product_system_code, product_code, product_option_code
		 from dbo.odb_layer_0_policies
		where census_date is not null
		and policy_number is not null
		and product_system_code is not null
		and product_option_code is not null
		and contract_risk_key is null
		and product_system_Code = 'FDA'
		),
		w_contract_risk
		as
		(
			SELECT  a.contract_key,b.product_option_Code, edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_fda_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = b.product_option_Code
			union all
			SELECT  a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_fda_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = 'S' + SUBSTRING(b.product_option_Code, 2, len(b.product_option_Code))
			and LEFT(b.product_option_Code,1) = 'L'
			union all
			SELECT  a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_fda_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = 'L' + SUBSTRING(b.product_option_Code, 2, len(b.product_option_Code))
			and LEFT(b.product_option_Code,1) = 'S'
			union all
			SELECT  a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_fda_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = SUBSTRING(b.product_option_Code, 1, len(b.product_option_Code)-1)+'S'
			and ( LEFT(b.product_option_Code,1) = 'I' or LEFT(b.product_option_Code,1) = 'P' or LEFT(b.product_option_Code,1) = 'V')
			and RIGHT(b.product_option_Code,1) = 'L'
			union all
			SELECT a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_fda_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = SUBSTRING(b.product_option_Code, 1, len(b.product_option_Code)-1)+'L'
			and ( LEFT(b.product_option_Code,1) = 'I' or LEFT(b.product_option_Code,1) = 'P' or LEFT(b.product_option_Code,1) = 'V')
			and RIGHT(b.product_option_Code,1) = 'S'
		) 
		,w_distinct_risks
		as
		(
			SELECT  contract_key,product_option_Code
			 FROM w_contract_risk
			 GROUP BY contract_key,product_option_Code
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.Product_Option_Code = risk.Product_Option_Code
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.Product_Option_Code = distinct_risk.Product_Option_Code
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		--
	;WITH w_cp_policies 
		as
		(
			select distinct client_id, contract_key, product_system_code, product_code, product_option_code
			 from dbo.odb_layer_0_policies
			where census_date is not null
			and policy_number is not null
			and product_system_code is not null
			and product_option_code is not null
			and contract_risk_key is null
			and product_system_Code = 'CP'
			and product_option_Code = 'CC'
		),
		w_contract_risk
		as
		(
			SELECT client_id, a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_CP_policies b
			WHERE a.contract_key = b.contract_key
			and substring(a.edw_product_option_code,1,2) = b.product_option_Code
			and charindex('-',a.edw_product_option_code) = 0
			and b.client_id = a.pas_client_id
		) 
		,w_distinct_risks
		as
		(
			SELECT  client_id, contract_key,product_option_Code
			 FROM w_contract_risk
			 GROUP BY client_id, contract_key,product_option_Code
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.Product_Option_Code = risk.Product_Option_Code
		AND main.client_id = risk.client_id
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.Product_Option_Code = distinct_risk.Product_Option_Code
		AND risk.client_id = distinct_risk.client_id
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			--
	;WITH w_cp_policies 
		as
		(
			select distinct client_id, contract_key, product_system_code, product_code, product_option_code
			 from dbo.odb_layer_0_policies
			where census_date is not null
			and policy_number is not null
			and product_system_code is not null
			and product_option_code is not null
			and contract_risk_key is null
			and product_system_Code = 'CP'
			and product_option_Code = 'CC'
		),
		w_contract_risk
		as
		(
			SELECT client_id, a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_CP_policies b
			WHERE a.contract_key = b.contract_key
			and substring(a.edw_product_option_code,1,2) = b.product_option_Code
			and charindex('-',a.edw_product_option_code) = 0
			and b.client_id = a.pas_client_id
			and [EDW_Risk_Claim_Ind] = 'Y'
		) 
		,w_distinct_risks
		as
		(
			SELECT  client_id, contract_key,product_option_Code
			 FROM w_contract_risk
			 GROUP BY client_id, contract_key,product_option_Code
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.Product_Option_Code = risk.Product_Option_Code
		AND main.client_id = risk.client_id
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.Product_Option_Code = distinct_risk.Product_Option_Code
		AND risk.client_id = distinct_risk.client_id
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		--
		;WITH w_cp_policies 
		as
		(
			select distinct client_id, contract_key, product_system_code, product_code, product_option_code
			 from dbo.odb_layer_0_policies
			where census_date is not null
			and policy_number is not null
			and product_system_code is not null
			and product_option_code is not null
			and contract_risk_key is null
			and product_system_Code = 'CP'
			and product_option_Code = 'CC'
		),
		w_contract_risk
		as
		(
			SELECT client_id, a.contract_key,b.product_option_Code,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_CP_policies b
			WHERE a.contract_key = b.contract_key
			and substring(a.edw_product_option_code,1,2) = b.product_option_Code
			and charindex('-',a.edw_product_option_code) = 0
			and [EDW_Risk_Claim_Ind] = 'Y'
		) 
		,w_distinct_risks
		as
		(
			SELECT  client_id, contract_key,product_option_Code
			 FROM w_contract_risk
			 GROUP BY client_id, contract_key,product_option_Code
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.Product_Option_Code = risk.Product_Option_Code
		AND main.client_id = risk.client_id
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.Product_Option_Code = distinct_risk.Product_Option_Code
		AND risk.client_id = distinct_risk.client_id
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			--
	;WITH w_or_policies 
		as
		(
			select client_id, contract_key, product_system_code, product_code
			 from dbo.odb_layer_0_policies
			where census_date is not null
			and policy_number is not null
			and product_system_code is not null
			and product_option_code is not null
			and contract_risk_key is null
			and product_system_Code = 'OR'
			group by client_id, contract_key, product_system_code, product_code
			having count(distinct product_option_code) = 1
		),
		w_contract_risk
		as
		(
			SELECT client_id, a.contract_key,edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_or_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = 'BAS'
		) 
		,w_distinct_risks
		as
		(
			SELECT  client_id, contract_key
			 FROM w_contract_risk
			 GROUP BY client_id, contract_key
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.client_id = risk.client_id
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.client_id = distinct_risk.client_id
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
				--
	;WITH w_ds_policies 
		as
		(
			select distinct client_id, contract_key, product_system_code, product_code,UPPER(Product_Option_Code) Product_Option_Code
			 from dbo.odb_layer_0_policies
			where census_date is not null
			and policy_number is not null
			and product_system_code is not null
			and product_option_code is not null
			and contract_risk_key is null
			and product_system_Code = 'DS'
		),
		w_contract_risk
		as
		(
			SELECT client_id, a.contract_key,b.Product_Option_Code, edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_ds_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = b.Product_Option_Code
			and EDW_Risk_Claim_Ind = 'Y'
			union
			SELECT client_id, a.contract_key,b.Product_Option_Code, edw_product_option_code , edw_contract_Risk_key,[Product_Opt_Group_Desc],[Actrl_Corral_Group_Code]
			FROM #Temp_EDW_Contract_Risk a,
			w_ds_policies b
			WHERE a.contract_key = b.contract_key
			and a.edw_product_option_code = b.Product_Code
			and EDW_Risk_Claim_Ind = 'Y'
		) 
		,w_distinct_risks
		as
		(
			SELECT  client_id, contract_key,Product_Option_Code
			 FROM w_contract_risk
			 GROUP BY client_id, contract_key,Product_Option_Code
			 having count(*) = 1
		)
		UPDATE [dbo].[ODB_Layer_0_Policies]
			SET [dbo].[ODB_Layer_0_Policies].[EDW_Product_Option_Code] = risk.edw_product_option_code,
				[dbo].[ODB_Layer_0_Policies].[Contract_Risk_Key] =risk.edw_contract_Risk_key,
				[dbo].[ODB_Layer_0_Policies].[Product_Opt_Group_Desc] = risk.[Product_Opt_Group_Desc],
				[dbo].[ODB_Layer_0_Policies].[Actrl_Corral_Group_Code] = risk.[Actrl_Corral_Group_Code],
				[dbo].[ODB_Layer_0_Policies].Updated_Date_Time = getDATE(),
				[dbo].[ODB_Layer_0_Policies].updated_by = system_user
		FROM [dbo].[ODB_Layer_0_Policies] main, w_contract_risk risk, w_distinct_risks distinct_risk
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		and main.Contract_risk_Key IS NULL
		and main.Contract_Key = risk.contract_key
		AND main.Product_Option_Code = risk.Product_Option_Code
		AND main.client_id = risk.client_id
		and risk.Contract_Key = distinct_risk.contract_key
		AND risk.Product_Option_Code = distinct_risk.Product_Option_Code
		AND risk.client_id = distinct_risk.client_id
		;		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--	
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON







GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Risk_For_WMS]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Risk_For_WMS]
     @ProcessLogID int,
	 @ProcessingMonthYear VARCHAR(100)
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @EDW_Contract_Key numeric(10, 0)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct EDW_Contract_Key
	from [dbo].[WMS_Claim_Listing]
	where 1=1
	and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null

	truncate table dbo.Temp_Contract_Risk_WMS
	--print 'Truncate Temp_Contract_Risk_WMS'

	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--	
	UPDATE [dbo].[WMS_Claim_Listing]
	SET   [EDW_Product_Option_Key] = NULL,
		  [EDW_Product_Option_Code] = NULL,
		  [EDW_Contract_Risk_Key] = NULL,
		  [EDW_Risk_Status_on_ID] = NULL,
		  [EDW_Risk_Status_on_FD] = NULL,
		  [EDW_Risk_Claim_Ind_on_ID] = NULL,
		  [EDW_Risk_Claim_Ind_on_FD] = NULL,
		  [EDW_Risk_Commenced_Date] = NULL,
		  [EDW_Risk_Expiry_Date] = NULL,
		  [EDW_Sum_Insured_on_ID] = NULL,
		  [EDW_Sum_Insured_on_FD] = NULL,
		  [EDW_Prem_Freq_Code_on_ID] = NULL,
		  [EDW_Prem_Freq_Code_on_FD] = NULL,
		  [EDW_Sum_Insured_Freq_Code] = NULL,
		  [EDW_Risk_Type_Code] = NULL,
		  [EDW_Source_Risk_Type_Code] = NULL,
		  [EDW_Party_Key] = NULL,
		  [EDW_Title] = NULL,
		  [EDW_First_Name] = NULL,
		  [EDW_Second_Name] = NULL,
          [EDW_Surname] = NULL,
          [EDW_Sex] = NULL,
          [EDW_Date_Of_Birth] = NULL,
          [EDW_Deceased_Ind] = NULL,
          [EDW_Date_of_Death] = NULL
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
	--
	--
	;WITH w_source
	AS
	( 
		select      Claim_Number,
		            EDW_Contract_Key,
					EDW_Product_Key,
	                DOD_Incident,
					ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Finalised_Date,
					--
					[EDW_Product_Option_Key] ,
					[EDW_Product_Option_Code],
					[EDW_Contract_Risk_Key] ,
					[EDW_Risk_Status_on_ID] ,
					[EDW_Risk_Status_on_FD],
					[EDW_Risk_Claim_Ind_on_ID] ,
					[EDW_Risk_Claim_Ind_on_FD],
					[EDW_Risk_Commenced_Date],
					[EDW_Risk_Expiry_Date],
					EDW_Sum_Insured_on_ID,
					[EDW_Sum_Insured_on_FD],
					[EDW_Prem_Freq_Code_on_ID],	
					[EDW_Prem_Freq_Code_on_FD],
					[EDW_Sum_Insured_Freq_Code],
					[EDW_Risk_Type_Code],
					[EDW_Source_Risk_Type_Code],
					[EDW_Party_Key],
					[EDW_Title],
					[EDW_First_Name],
					[EDW_Second_Name],
					[EDW_Surname],
					[EDW_Sex],
					[EDW_Date_Of_Birth],
					[EDW_Deceased_Ind] ,
					[EDW_Date_of_Death]
		from [dbo].[WMS_Claim_Listing]
		WHERE [Month_Eftv_Date] = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
		and EDW_Contract_Key is not null
		and DOD_Incident is not null
		and [EDW_Product_Option_Key] is not null
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
			                                                         THEN src.[EDW_Risk_Status_on_FD]
																	 END,
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
			                                                         THEN src.[EDW_Risk_Claim_Ind_on_FD]
																	 END,
			[dbo].[WMS_Claim_Listing].EDW_Sum_Insured_on_ID = src.EDW_Sum_Insured_on_ID,
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
			                                                         THEN src.[EDW_Sum_Insured_on_FD]
																	 END,
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code_on_ID],
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = CASE WHEN ISNULL(main.Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
			                                                         THEN src.[EDW_Prem_Freq_Code_on_FD]
																	 END,
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[WMS_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[WMS_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[WMS_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[WMS_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[WMS_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],			
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
	FROM [dbo].[WMS_Claim_Listing] main, w_source src
	WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		AND main.EDW_Contract_Key = src.EDW_Contract_Key
		AND main.EDW_Product_Key = src.EDW_Product_Key
		and main.DOD_Incident = src.DOD_Incident
		and main.[EDW_Product_Option_Key] IS NULL
		and main.Claim_Number = src.Claim_Number
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	--CREATE TABLE  Temp_Contract_Risk_WMS (
	--		[EDW_Contract_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Option_Key] [numeric](10, 0) NULL,
	--		[EDW_Product_Option_Code] [varchar](20) NULL,
	--		[EDW_Product_Opt_Group_Desc] [varchar](50) NULL,
	--		[Actrl_Corral_Group_Code] [varchar](10) NULL,
	--		[Row_Start_Date] [datetime] NULL,
	--		[Row_End_Date] [datetime] NULL,
	--		[Eftv_Date] [datetime] NULL,
	--		[EDW_Contract_Risk_Key] [numeric](10, 0) NULL,
	--		[EDW_Risk_Status] [varchar](3) NULL,
	--		[EDW_Risk_Claim_Ind] [varchar](3) NULL,
	--		[EDW_Risk_Commenced_Date] [datetime2] NULL,
	--		[EDW_Risk_End_Date] [datetime] NULL,
	--		[EDW_Risk_Expiry_Date] [datetime2] NULL,
	--		[EDW_Waiting_Period] [varchar](341) NULL,
	--		[EDW_Injury_Benefit_Period] [varchar](4000) NULL,
	--		[EDW_Sickness_Benefit_Period] [varchar](4000) NULL,
	--		[EDW_Sum_Insured] [numeric](28, 6) NULL,
	--		[EDW_Prem_Freq_Code] [varchar](6) NULL,
	--		[EDW_Sum_Insured_Freq_Code] [varchar](6) NULL,
	--		[EDW_Risk_Type_Code] [varchar](10) NULL,
	--		[EDW_Source_Risk_Type_Code] [varchar](10) NULL,
	--		[EDW_Source_System] [varchar](100) NULL,
	--		[EDW_Party_Key] [numeric](10, 0) NULL,
	--		[EDW_Title] [varchar](50) NULL,
	--		[EDW_First_Name] [varchar](120) NULL,
	--		[EDW_Second_Name] [varchar](120) NULL,
	--		[EDW_Surname] [varchar](100) NULL,
	--		[EDW_Sex] [varchar](3) NULL,
	--		[EDW_Date_Of_Birth] [datetime2] NULL,
	--		[EDW_Deceased_Ind] [varchar](1) NULL,
	--		[EDW_Date_of_Death] [datetime2] NULL			
	-- )
	--
	SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 po.actrl_corral_group_code,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date, 
							 risk.risk_end_date,
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							 risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 ro.source_risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 to_date(to_char(p.dob,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dob, 
							 p.deceased_ind, 
							 to_date(to_char(p.dod,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dod
							 from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro 
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@EDW_Contract_Key
	--
	WHILE @@FETCH_STATUS = 0 
	BEGIN 

	   If len(@SQL) > 7980
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
		    INSERT INTO  Temp_Contract_Risk_WMS
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  risk.contract_key,
		                     po.product_key,
							 po.product_option_key, 
							 po.product_option_code edw_product_option_code,
							 po.Product_Opt_Group_Desc,
							 po.actrl_corral_group_code,
							 risk.row_start_date,
							 risk.row_end_date,
							 risk.eftv_date,
							 risk.contract_risk_key,
							 risk.risk_status_code, 
							 risk.claim_ind, 
							 to_date(to_char(risk.risk_start_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_commencement_date, 
							 risk.risk_end_date,
							 to_date(to_char(risk.risk_expr_date,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') risk_expr_date, 
							 risk.risk_wait_period,
							 risk.injury_benefit_period,
							 risk.sickness_benefit_period,
							 --risk.benefit_period, 
							 risk.sum_insured_amt sum_insured,
							 risk.freq_code,
							 ro.sum_insrd_freq_code, 
							 ro.risk_type_code,
							 ro.source_risk_type_code,
							 risk.source_system_code,
							 risk.party_key,
							 p.title, 
							 p.first_name, 
							 p.middle_name, 
							 p.surname, 
							 p.gender_code sex, 
							 to_date(to_char(p.dob,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dob, 
							 p.deceased_ind, 
							 to_date(to_char(p.dod,''dd/mm/yyyy hh24:mi:ss''),''dd/mm/yyyy hh24:mi:ss'') dod
							  from dw_contract_risk risk,
							      dw_product prod,
							      dw_product_option po,
								  dw_person p,
								  dw_risk_opt ro 
							where 1=1
							and risk.product_option_key = po.product_option_key
							and po.product_key          = prod.product_key
							AND prod.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and risk.party_key = p.party_key
							and p.row_status_code = ''1''
							and CASE WHEN risk.product_system_code IN (''CP'',''DS'',''OR'')
							         THEN ''YD''
								ELSE risk.product_system_code
								END = p.product_system_code
							and p.row_end_date = to_date(''31dec3000'',''ddmonyyyy'') 
							and risk.contract_key IN (NULL,'
		END

		SET @SQL =  @SQL+CAST(@EDW_Contract_Key AS VARCHAR)+','
		 --			
		FETCH NEXT FROM Columns_Lists into 
		@EDW_Contract_Key
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-1) + ')'
	INSERT INTO  Temp_Contract_Risk_WMS
	EXEC Utility.dbo.usp_queryedw @SQL
	--		
	;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                EDW_Product_Key,
	                DOD_Incident Incurred_Date,
					edw_product_system_code,
					ISNULL(Commence_Date,convert(datetime,'01/jan/1753')) Commence_Date
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	and [EDW_Product_Option_Key] is null
	and Claim_Type_Code_Mod in (select wms_code from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH') 
	union all select wms_desc from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH'))
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_WMS
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Commence_Date,
			src.edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.Commence_Date = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,						         
										 CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from  Temp_Contract_Risk_WMS risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'FDA'
					     AND risk.edw_product_option_code not in ('FPWO', 'LPWO', 'SPWO', 'TPWO')
						 AND risk.edw_source_risk_type_code not in ('WD', 'WS','BT','IP')
						 AND risk.[EDW_Risk_Type_Code] not in ('CB', 'AA', 'IC')
						 AND 
								(   risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
								 OR risk.EDW_source_risk_type_code = 'AD'
								 or edw_product_option_code  in ('SADB', 'SFDB')
								 )
					)
					OR
					(		src.EDW_Product_System_Code = 'FL'
					     AND risk.edw_product_option_code  in ('SDL')
					)
					OR
					(		src.EDW_Product_System_Code = 'LS'
					     AND risk.[EDW_Risk_Type_Code] = 'DTH'
					)
					OR
					(		src.EDW_Product_System_Code = 'CM'
					     AND substring(risk.edw_product_option_code, 1, 2) = 'De'
					)
			)
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Commence_Date,
			src.edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.Commence_Date = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,						         
										 CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from  Temp_Contract_Risk_WMS risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'FDA'
					     AND risk.edw_product_option_code not in ('FPWO', 'LPWO', 'SPWO', 'TPWO')
						 AND risk.edw_source_risk_type_code not in ('WD', 'WS','BT','IP')
						 AND risk.[EDW_Risk_Type_Code] not in ('CB', 'AA', 'IC')
						 AND 
								(   risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
								 OR risk.EDW_source_risk_type_code = 'AD'
								 or edw_product_option_code  in ('SADB', 'SFDB')
								 )
					)
					OR
					(		src.EDW_Product_System_Code = 'FL'
					     AND risk.edw_product_option_code  in ('SDL')
					)
					OR
					(		src.EDW_Product_System_Code = 'LS'
					     AND risk.[EDW_Risk_Type_Code] = 'DTH'
					)
					OR
					(		src.EDW_Product_System_Code = 'CM'
					     AND substring(risk.edw_product_option_code, 1, 2) = 'De'
					)
			)
		and src.Incurred_Date < ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
	)
	,w_unique_records
	AS 
	( select EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Incurred_Date,
					 Commence_Date
					 from w_target
	where rownum = 1
	GROUP BY EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                Incurred_Date ,
					Commence_Date
					having count(*) = 1
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_on_ID] = src.[EDW_Sum_Insured],		
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[WMS_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[WMS_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[WMS_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[WMS_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[WMS_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND main.DOD_Incident = src.Incurred_Date
			and ISNULL(main.Commence_Date,convert(datetime,'01/jan/1753')) = src.Commence_Date
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Commence_Date = src.Commence_Date
			AND src.rownum = 1
		;	


		;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                EDW_Product_Key,
	                ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Incurred_Date,
					DOD_Incident,
					edw_product_system_code,
					ISNULL(Commence_Date,convert(datetime,'01/jan/1753')) Commence_Date
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	and [EDW_Product_Option_Key] is null
	and Claim_Type_Code_Mod in (select wms_code from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH') 
	union all select wms_desc from wms_field_mapping where wms_Field = 'Claim_Type' and wms_Code in ('IND DTH','DEATH','IND DEATH'))
	),
	w_claim_ind
	as
	( select edw_contract_risk_key,
	         [EDW_Product_Option_Key],
			 MAX(CASE WHEN EDW_Risk_Claim_Ind = 'Y' THEN 1 ELSE 0 END) EDW_Risk_Claim_Ind
		from  Temp_Contract_Risk_WMS
	 group by edw_contract_risk_key,
	         [EDW_Product_Option_Key]
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Commence_Date,
			src.edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.Commence_Date = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,						         
										 --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from  Temp_Contract_Risk_WMS risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'FDA'
					     AND risk.edw_product_option_code not in ('FPWO', 'LPWO', 'SPWO', 'TPWO')
						 AND risk.edw_source_risk_type_code not in ('WD', 'WS','BT','IP')
						 AND risk.[EDW_Risk_Type_Code] not in ('CB', 'AA', 'IC')
						 AND 
								(   risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
								 OR risk.EDW_source_risk_type_code = 'AD'
								 or edw_product_option_code  in ('SADB', 'SFDB')
								 )
					)
					OR
					(		src.EDW_Product_System_Code = 'FL'
					     AND risk.edw_product_option_code  in ('SDL')
					)
					OR
					(		src.EDW_Product_System_Code = 'LS'
					     AND risk.[EDW_Risk_Type_Code] = 'DTH'
					)
					OR
					(		src.EDW_Product_System_Code = 'CM'
					     AND substring(risk.edw_product_option_code, 1, 2) = 'De'
					)
			)
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			src.Commence_Date,
			src.edw_product_system_code,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date],
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.[EDW_Source_Risk_Type_Code],
			risk.[EDW_Product_Opt_Group_Desc],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death],
			--
			RANK() OVER( PARTITION BY src.[EDW_Contract_Key],src.Incurred_Date
								ORDER BY ci.EDW_Risk_Claim_Ind DESC,
								         CASE WHEN src.Commence_Date = risk.[EDW_Risk_Commenced_Date] THEN 1 ELSE 0 END DESC,
								         CASE WHEN src.EDW_Product_Key =  risk.EDW_Product_Key THEN 1 ELSE 0 END DESC,						         
										 --CASE WHEN risk.edw_risk_end_date > src.Incurred_Date THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.edw_source_system,'ooNVLoo') NOT IN ('AY','EF') THEN 1 ELSE 0 END DESC,
										 CASE WHEN ISNULL(risk.[EDW_Risk_Status],'ooNVLoo') NOT IN ( 'P','L') THEN 1 ELSE 0 END DESC) rownum
			from  Temp_Contract_Risk_WMS risk,
				w_source src ,
				w_claim_ind ci
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and (
					(		src.EDW_Product_System_Code = 'FDA'
					     AND risk.edw_product_option_code not in ('FPWO', 'LPWO', 'SPWO', 'TPWO')
						 AND risk.edw_source_risk_type_code not in ('WD', 'WS','BT','IP')
						 AND risk.[EDW_Risk_Type_Code] not in ('CB', 'AA', 'IC')
						 AND 
								(   risk.[EDW_Risk_Type_Code] IN ('DTH','BB')
								 OR risk.EDW_source_risk_type_code = 'AD'
								 or edw_product_option_code  in ('SADB', 'SFDB')
								 )
					)
					OR
					(		src.EDW_Product_System_Code = 'FL'
					     AND risk.edw_product_option_code  in ('SDL')
					)
					OR
					(		src.EDW_Product_System_Code = 'LS'
					     AND risk.[EDW_Risk_Type_Code] = 'DTH'
					)
					OR
					(		src.EDW_Product_System_Code = 'CM'
					     AND substring(risk.edw_product_option_code, 1, 2) = 'De'
					)
			)
		and src.Incurred_Date < ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and src.dod_incident <  ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.edw_contract_risk_key = ci.edw_contract_risk_key
		and risk.EDW_Product_Option_Key = ci.EDW_Product_Option_Key
		--
	)
	,w_unique_records
	AS 
	( select EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                 Incurred_Date,
					 Commence_Date
					 from w_target
	where rownum = 1
	GROUP BY EDW_Contract_Key,
	edw_product_system_code,
	                EDW_Product_Key,
	                Incurred_Date ,
					Commence_Date
					having count(*) = 1
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Product_Option_Code] = src.[EDW_Product_Option_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Contract_Risk_Key] = src.[EDW_Contract_Risk_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Commenced_Date] = src.[EDW_Risk_Commenced_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Expiry_Date] = src.[EDW_Risk_Expiry_Date],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_on_FD] = src.[EDW_Sum_Insured],					
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code],
			[dbo].[WMS_Claim_Listing].[EDW_Party_Key] = src.[EDW_Party_Key],
			[dbo].[WMS_Claim_Listing].[EDW_Title] = src.[EDW_Title],
			[dbo].[WMS_Claim_Listing].[EDW_First_Name] = src.[EDW_First_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Second_Name] = src.[EDW_Second_Name],
			[dbo].[WMS_Claim_Listing].[EDW_Surname] = src.[EDW_Surname],
			[dbo].[WMS_Claim_Listing].[EDW_Sex] = src.[EDW_Sex],
			[dbo].[WMS_Claim_Listing].[EDW_Date_of_Death] = CASE WHEN src.[EDW_Date_of_Death] = convert(datetime,'31/dec/3000') THEN NULL ELSE src.[EDW_Date_of_Death] END,
			[dbo].[WMS_Claim_Listing].[EDW_Date_Of_Birth] = src.[EDW_Date_Of_Birth],
			[dbo].[WMS_Claim_Listing].[EDW_Deceased_Ind] = src.[EDW_Deceased_Ind],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src, w_unique_records ur
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			AND ISNULL(main.Claim_Finalised_Date, convert(datetime,@ProcessingMonthYear)) = src.Incurred_Date
			and ISNULL(main.Commence_Date,convert(datetime,'01/jan/1753')) = src.Commence_Date
			AND ur.EDW_Contract_Key = src.EDW_Contract_Key
			AND ur.Incurred_Date = src.Incurred_Date
			and ur.Commence_Date = src.Commence_Date
			AND src.rownum = 1
		;	

			;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                ISNULL(Claim_Finalised_Date,convert(datetime,@ProcessingMonthYear)) Finalised_Date,
					EDW_Contract_Risk_Key,
					[EDW_Product_Option_Key],
					edw_product_system_code
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	and [EDW_Product_Option_Key] is not null	
	and EDW_Sum_Insured_on_FD is null
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Finalised_Date,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_WMS risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Finalised_Date between risk.row_start_date and risk.row_end_date
		--
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_FD] = src.[EDW_Risk_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_FD] = src.[EDW_Risk_Claim_Ind],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_on_FD] = src.[EDW_Sum_Insured],		
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_FD] = src.[EDW_Prem_Freq_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
			and main.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
			AND ISNULL(main.Claim_Finalised_Date, convert(datetime,@ProcessingMonthYear)) = src.Finalised_Date
		;

		;WITH w_source
	as
	(
	select distinct EDW_Contract_Key,
	                DOD_Incident Incurred_Date,
					EDW_Contract_Risk_Key,
					[EDW_Product_Option_Key],
					edw_product_system_code
	from [dbo].[WMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and EDW_Contract_Key is not null
	and DOD_Incident is not null
	and [EDW_Product_Option_Key] is not null	
	and ( EDW_Sum_Insured_on_ID is null or EDW_Sum_Insured_on_ID = 0)
	),
	w_target
	AS
	(
	select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_WMS risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Incurred_Date between risk.row_start_date and risk.row_end_date
		and risk.[EDW_Sum_Insured] <> 0
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_WMS risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Incurred_Date < ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 AND risk2.[EDW_Sum_Insured] <> 0
								 )
		--
		UNION ALL
		--
		select  risk.[EDW_Contract_Key],
		    risk.[EDW_Product_Key],
			risk.[EDW_Product_Option_Key], 
			risk.edw_product_option_code,
			src.Incurred_Date,
			--
			risk.edw_contract_risk_key,
			risk.[EDW_Risk_Status], 
			risk.[EDW_Risk_Claim_Ind], 
			risk.[EDW_Risk_Commenced_Date], 
			risk.[EDW_Risk_Expiry_Date], 
			risk.[EDW_Sum_Insured],
			risk.[EDW_Prem_Freq_Code],
			risk.[EDW_Sum_Insured_Freq_Code],
			risk.[EDW_Risk_Type_Code],
			risk.edw_party_key,
			risk.[EDW_Title],
			risk.[EDW_First_Name],
			risk.[EDW_Second_Name],
			risk.[EDW_Surname],
			risk.[EDW_Sex],
			risk.[EDW_Date_Of_Birth],
			risk.[EDW_Deceased_Ind],
			risk.[EDW_Date_of_Death]
			from  Temp_Contract_Risk_WMS risk,
				w_source src 
		where risk.EDW_Contract_Key = src.EDW_Contract_Key
		and  risk.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
		and risk.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
		and src.Incurred_Date > ( SELECT min(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 )
		and risk.row_start_date = ( SELECT MAX(risk2.row_start_date)
		                        FROM  Temp_Contract_Risk_WMS risk2
								WHERE risk.edw_contract_risk_key = risk2.edw_contract_risk_key
								 AND risk.EDW_Contract_Key = risk2.EDW_Contract_Key
								 and risk2.row_start_date < src.Incurred_Date
								 AND risk2.[EDW_Sum_Insured] <> 0
								 )
	)
	UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].[EDW_Risk_Status_on_ID] = src.[EDW_Risk_Status],
			[dbo].[WMS_Claim_Listing].[EDW_Risk_Claim_Ind_on_ID] = src.[EDW_Risk_Claim_Ind],
			[dbo].[WMS_Claim_Listing].[EDW_Sum_Insured_on_ID] = src.[EDW_Sum_Insured],		
			[dbo].[WMS_Claim_Listing].[EDW_Prem_Freq_Code_on_ID] = src.[EDW_Prem_Freq_Code],
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] main, w_target src
		WHERE main.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND main.EDW_Contract_Key = src.EDW_Contract_Key
			and main.EDW_Contract_Risk_Key = src.EDW_Contract_Risk_Key
			and main.[EDW_Product_Option_Key] = src.[EDW_Product_Option_Key]
			AND main.DOD_Incident = src.Incurred_Date
		;
		UPDATE [dbo].[WMS_Claim_Listing]
		SET [dbo].[WMS_Claim_Listing].EDW_Sum_Insured_on_ID = ISNULL(trg.EDW_Sum_Insured_on_ID,0),
		    [dbo].[WMS_Claim_Listing].EDW_Sum_Insured_on_FD = ISNULL(trg.EDW_Sum_Insured_on_FD,0),
			[dbo].[WMS_Claim_Listing].Updated_Date_Time = getDATE(),
			[dbo].[WMS_Claim_Listing].updated_by = system_user
		FROM [dbo].[WMS_Claim_Listing] trg
		WHERE trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
			AND trg.EDW_Product_Option_Code = 'WPB'
			AND trg.EDW_Contract_Risk_Key IS NOT NULL
		;

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		--
   COMMIT TRAN T1;
	--
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[WMS_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	  and Updated_Date_Time > (Select StartTime from [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID)
	--	
	--			
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_EDW_Treaty_Product]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_EDW_Treaty_Product]
AS
---------
-- 
SET NOCOUNT ON
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @product_code VARCHAR(50)
	DECLARE @product_option_Code VARCHAR(50)
	DECLARE @Product_System_Code VARCHAR(50)
	DECLARE @Class_Of_Business VARCHAR(50)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @No_of_recs Int = 0
	--
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	UPDATE [dbo].[Reins_Treaty_Product]
	SET  [EDW_Actrl_Corral_Group_Code] = NULL,
	     [EDW_Product_Opt_Group_Desc] = NULL,
		 [EDW_Sum_Insured_Freq_Code] = NULL,
		 [EDW_Risk_Type_Code] = NULL,
		 [EDW_Source_Risk_Type_Code]= NULL
	;
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select distinct product_system_code,
					product_code,
					product_option_Code,
					Class_Of_Business
	from [dbo].[Reins_Treaty_Product];	
	--	
	 CREATE TABLE #Temp_EDW_Product (
			[Product_System_Code] VARCHAR(50) NULL,
			[Product_Key] [numeric](10, 0) NULL,
			[Product_Code] [varchar](4000) NULL,
			[product_option_Code] [varchar](50) NULL,
			[Class_Of_Business] [varchar](50) NULL,
			[Actrl_Corral_Group_Code] [varchar](10) NULL,
			[EDW_Product_Opt_Group_Desc] [varchar](200) NULL,
			[EDW_Sum_Insured_Freq_Code] [varchar](6) NULL,
			[EDW_Risk_Type_Code] [varchar](10) NULL,
			[EDW_Source_Risk_Type_Code] [varchar](10) NULL
	 )
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Product_System_Code,
	@product_code,
	@product_option_Code,
	@Class_Of_Business
	--
	SET @SQL =  'select     p.product_system_code,
	                        p.product_key,							
							p.product_code edw_product_code,
							po.product_option_code,
							cb.class_of_Busn_desc,
							po.Actrl_Corral_Group_Code,
							po.Product_Opt_Group_Desc,
							ro.sum_insrd_freq_code,
							ro.risk_type_code,
							ro.source_risk_type_code
							 from dw_product p,
							 dw_product_option po,
							dw_class_of_busn cb,
								  dw_risk_opt ro 
							where p.class_of_Busn_code = cb.class_of_busn_code
							and p.product_key = po.product_key
							AND p.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and  (p.product_system_code,p.product_code,po.product_option_code,cb.class_of_Busn_desc) 
							IN ( SELECT NULL product_system_code,NULL product_code, NULL  product_option_code, NULL class_of_Busn_desc FROM DUAL UNION ALL'
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		If len(@SQL) > 7800
		BEGIN
			SET @SQL = substring(@SQL,1,len(@SQL)-9) + ')'
		    INSERT INTO #Temp_EDW_Product
			EXEC Utility.dbo.usp_queryedw @SQL
			SET @SQL =  'select  p.product_system_code,
	                        p.product_key,							
							p.product_code edw_product_code,
							po.product_option_code,
							cb.class_of_Busn_desc,
							po.Actrl_Corral_Group_Code,
							po.Product_Opt_Group_Desc,
							ro.sum_insrd_freq_code,
							ro.risk_type_code,
							ro.source_risk_type_code
							 from dw_product p,
							 dw_product_option po,
							dw_class_of_busn cb,
								  dw_risk_opt ro 
							where  p.class_of_Busn_code = cb.class_of_busn_code
							and p.product_key = po.product_key
							AND p.product_system_code  = ro.product_system_code(+)
							AND po.product_option_code = ro.risk_opt_code(+)
							and  (p.product_system_code,p.product_code,po.product_option_code,cb.class_of_Busn_desc) 
							IN ( SELECT NULL product_system_code,NULL product_code, NULL  product_option_code, NULL class_of_Busn_desc FROM DUAL UNION ALL'
		END
		--
		SET @SQL =  @SQL + ' SELECT '''+ @Product_System_Code+''', '''+@product_code+''', '''+@product_option_Code+''', '''+@Class_Of_Business+''' FROM DUAL UNION ALL'		
		--
		FETCH NEXT FROM Columns_Lists into 
		@Product_System_Code,
		@product_code,
		@product_option_Code,
		@Class_Of_Business
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = substring(@SQL,1,len(@SQL)-9) + ')'
		    INSERT INTO #Temp_EDW_Product
			EXEC Utility.dbo.usp_queryedw @SQL
	
	--
	UPDATE [dbo].[Reins_Treaty_Product]
		SET [dbo].[Reins_Treaty_Product].[EDW_Actrl_Corral_Group_Code] = src.[Actrl_Corral_Group_Code],
		     [dbo].[Reins_Treaty_Product].[EDW_Product_Opt_Group_Desc] = src.[EDW_Product_Opt_Group_Desc], 
			[dbo].[Reins_Treaty_Product].[EDW_Sum_Insured_Freq_Code] = src.[EDW_Sum_Insured_Freq_Code],
		     [dbo].[Reins_Treaty_Product].[EDW_Risk_Type_Code] = src.[EDW_Risk_Type_Code], 
			 [dbo].[Reins_Treaty_Product].[EDW_Source_Risk_Type_Code] = src.[EDW_Source_Risk_Type_Code], 
			[dbo].[Reins_Treaty_Product].Updated_Date_Time = getDATE(),
			[dbo].[Reins_Treaty_Product].updated_by = system_user
	FROM [dbo].[Reins_Treaty_Product] main, #Temp_EDW_Product src
	WHERE main.Product_System_Code = src.Product_System_Code
	and main.Product_System_Code = src.Product_System_Code
	and main.[Product_Code] = src.[Product_Code]
	and main.Product_Option_Code = src.product_option_Code
	and main.Class_Of_Business = src.Class_Of_Business
	;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Find_Conversions]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ===============================================================
-- Author:		AWJ
-- Create date: August 2017
-- Description:	Finds and matches New Records that are conversions
-- ===============================================================
CREATE PROCEDURE [dbo].[usp_Find_Conversions] @CENSUS_DATE datetime,@PAS nvarchar(3), @ProcessLogID int
--[dbo].[usp_Find_Conversions] '2019-06-30','FDA','-10001'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran IdentifyConversions

		IF OBJECT_ID('tempdb.dbo.#CONV_PARAMS', 'U') IS NOT NULL DROP TABLE #CONV_PARAMS
		IF OBJECT_ID('tempdb.dbo.#NEWBENS', 'U') IS NOT NULL DROP TABLE #NEWBENS
		IF OBJECT_ID('tempdb.dbo.#LAPSEDBENS', 'U') IS NOT NULL DROP TABLE #LAPSEDBENS

		--DECLARE @PAS nvarchar(3), @CENSUS_DATE date
		--SELECT Top 1 @PAS=PRODUCT_SYSTEM_CODE, @CENSUS_DATE=CENSUS_DATE From INFORCE_TEMP
		DECLARE @LAPSE_FROM date = (
			SELECT DateAdd(month, -convert(int, VALUE),@CENSUS_DATE) 
			from INI 
			WHERE PARAMETER = 'CONVERSION MAX GAP' 
				and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE,@CENSUS_DATE))
		--Print @LAPSE_FROM
		--
		  DECLARE @InforceTableName nvarchar(20) = ''
		  SET @InforceTableName  = 'INFORCE_TEMP_' + @PAS
		 -- pRINT @InforceTableName
		  --
		--Put in a Hash Table
		Select PAS=@PAS, CENSUS_DATE=@CENSUS_DATE, LAPSE_FROM=@LAPSE_FROM into #CONV_PARAMS
		--Select * from #CONV_PARAMS
		--sELECT * FROM #CONV_PARAMS
			--truncate table CONVERTED_TEMP
		delete from CONVERTED_TEMP where Pas = @PAS

		Print 'Deleted from Converted_temp count = ' + convert(varchar(50), @@ROWCOUNT)

		CREATE Table #NEWBENS (CENSUS_DATE Date, PARTY_KEY int, CONTRACT_KEY int, CONTRACT_RISK_KEY int, PRODUCT_CODE nvarchar(20), PRODUCT_OPTION_CODE nvarchar(20), PRODUCT_OPT_GROUP_DESC nvarchar(20), FIRST_CENSUS Date, SUM_INSURED_AMT money, NEW_COUNT int NULL)
		
		DECLARE @InsertNewBensSQL nvarchar(500) = ''
		SET @InsertNewBensSQL = 'Insert Into #NEWBENS
			Select
				T.CENSUS_DATE
				,T.PARTY_KEY 
				,T.CONTRACT_KEY
				,T.CONTRACT_RISK_KEY
				,T.PRODUCT_CODE
				,T.PRODUCT_OPTION_CODE
				,T.PRODUCT_OPT_GROUP_DESC
				,T.CENSUS_DATE As FIRST_CENSUS
				,T.SUM_INSURED_AMT
				,NULL
			from ' + @InforceTableName + ' As T LEFT JOIN INFORCE As I on T.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY and I.CENSUS_DATE < T.CENSUS_DATE
			Where I.CONTRACT_RISK_KEY is NULL'


		--Execute the query @InsertNewBensSQL for #NewBens table population
		Execute sp_executesql @InsertNewBensSQL

		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		
		Print 'Insert into #NewBens ' + convert(varchar(50),@InsertRowCount)

		--Insert Into #NEWBENS
		--	Select
		--		T.CENSUS_DATE
		--		,T.PARTY_KEY 
		--		,T.CONTRACT_KEY
		--		,T.CONTRACT_RISK_KEY
		--		,T.PRODUCT_CODE
		--		,T.PRODUCT_OPTION_CODE
		--		,T.PRODUCT_OPT_GROUP_DESC
		--		,T.CENSUS_DATE As FIRST_CENSUS
		--		,T.SUM_INSURED_AMT
		--		,NULL
		--	from INFORCE_TEMP As T LEFT JOIN INFORCE As I on T.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY and I.CENSUS_DATE < T.CENSUS_DATE
		--	Where I.CONTRACT_RISK_KEY is NULL

		CREATE TABLE #LAPSEDBENS (CENSUS_DATE Date, PARTY_KEY int, CONTRACT_KEY int, CONTRACT_RISK_KEY int, PRODUCT_CODE nvarchar(20), PRODUCT_OPTION_CODE nvarchar(20), PRODUCT_OPT_GROUP_DESC nvarchar(20), LAST_CENSUS Date, SUM_INSURED_AMT money, OFF_COUNT int)
		
		Insert Into #LAPSEDBENS
			Select
				L.CENSUS_DATE
				,I.PARTY_KEY 
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_CODE
				,I.PRODUCT_OPTION_CODE
				,I.PRODUCT_OPT_GROUP_DESC
				,L.CENSUS_DATE
				,I.SUM_INSURED_AMT
				,NULL
			from LAPSED As L JOIN INFORCE As I On L.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY and L.CENSUS_DATE = I.CENSUS_DATE, #CONV_PARAMS As P
			Where L.CENSUS_DATE >= P.LAPSE_FROM and I.PRODUCT_SYSTEM_CODE = P.PAS and REINSTATEMENT_DATE is NULL

		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT

		Print 'Insert into #LAPSEDBENS ' + convert(varchar(50),@@ROWCOUNT)

		--Delete from #LAPSEDBENS all records where the contract_risk_key is present in the current INFORCE_TEMP (ie it is reinstated at the same time as the new benefit)
		DECLARE @DeleteLapsedFromInforceTempSQL nvarchar(500) = ''
		SET @DeleteLapsedFromInforceTempSQL = 'Delete from L From #LAPSEDBENS As L JOIN ' + @InforceTableName + ' As I On L.contract_risk_key = I.contract_risk_key'
		
		--Delete from L From #LAPSEDBENS As L JOIN INFORCE_TEMP As I On L.contract_risk_key = I.contract_risk_key

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete from InforceTemp records found in #LapsedBen ' + convert(varchar(50),@@ROWCOUNT)

	-- For the Ultimate PAS, when the Product_optn_code changes from "CC%" to "RDB" , the contract_risk_key changes in this scenario. Due to this such benefit needs to be taken up differently. 
	-- So such records are directly inserted into the converted temp table

		If @Pas = 'CP' 
		BEGIN
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,Created_Date_Time,Created_By,Process_Log_ID,Pas)

		Select 
			N.CENSUS_DATE
			,N.PARTY_KEY
			,N.PRODUCT_OPT_GROUP_DESC
			,N.PRODUCT_OPTION_CODE
			,N.CONTRACT_KEY
			,N.CONTRACT_RISK_KEY
			,N.SUM_INSURED_AMT
			,L.CENSUS_DATE
			,L.CONTRACT_KEY
			,L.CONTRACT_RISK_KEY
			,L.PRODUCT_OPTION_CODE
			,L.SUM_INSURED_AMT
			,getdate() ,'SYSTEM_USER' ,@ProcessLogID
			,@Pas
		 From #LAPSEDBENS As L JOIN #NEWBENS As N 
			ON L.PARTY_KEY = N.PARTY_KEY AND L.CONTRACT_KEY = N.CONTRACT_KEY
		Where L.PRODUCT_CODE IN ('CCI' , 'FCI') AND L.PRODUCT_OPTION_CODE LIKE 'CC%' AND N.PRODUCT_OPTION_CODE = 'RDB'
	
		END
		--Delete from #NEWBENS all records where the PARTY_KEY and PRODUCT_OPT_GROUP_DESC is not in the #LAPSEDBENS
		Delete from N
		FROM
			#NEWBENS As N LEFT JOIN (Select Party_key, product_opt_group_desc from #LAPSEDBENS) As L
			On N.PARTY_KEY = L.PARTY_KEY and N.PRODUCT_OPT_GROUP_DESC = L.PRODUCT_OPT_GROUP_DESC
		Where L.PARTY_KEY is NULL			

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete from #NEWBENS all records where the PARTY_KEY and PRODUCT_OPT_GROUP_DESC is not in the #LAPSEDBENS ' + convert(varchar(50),@@ROWCOUNT)

		--Delete from #LAPSEDBENS all records where the party_key and PRODUCT_OPT_GROUP_DESC is not in the #NEWBENS
		Delete from L
		FROM
			#LAPSEDBENS As L LEFT JOIN (Select Party_key, product_opt_group_desc from #NEWBENS) As N
			On N.PARTY_KEY = L.PARTY_KEY and N.PRODUCT_OPT_GROUP_DESC = L.PRODUCT_OPT_GROUP_DESC
		Where N.PARTY_KEY is NULL		
		
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete from #LAPSEDBENS all records where the party_key and PRODUCT_OPT_GROUP_DESC is not in the #NEWBENS ' + convert(varchar(50),@@ROWCOUNT)	

		--So now have Candidate Lists for Conversions in the # tables
		--Select * FROM #LAPSEDBENS
		--Select * FROM lapsed
		--Select * FROM inforce
		--Select * FROM #NEWBENS
		--Select L.CONTRACT_RISK_KEY, N.CONTRACT_RISK_KEY from #LAPSEDBENS As L JOIN #NEWBENS AS N on L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC = N.PRODUCT_OPT_GROUP_DESC

	

		

		--Find all the identical cases where only the CONTRACT_KEY and|or CONTRACT_RISK_KEY has been refreshed
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
					,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
					,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY, OFF_PRODUCT_OPTION_CODE, OFF_SUM_INSURED_AMT, CONVERSION_TYPE,Created_Date_Time,Created_By,Process_Log_ID,PAS)
		Select CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
			,CONTRACT_KEY,CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
			,OFF_CENSUS_DATE, OFF_CONTRACT_KEY, OFF_CONTRACT_RISK_KEY, OFF_PRODUCT_OPTION_CODE, OFF_SUM_INSURED_AMT
			,CONVERSION_TYPE='REPLACE',getdate() ,'SYSTEM_USER' ,@ProcessLogID,@PAS
			--,CHECK1=count(*) over (Partition by CONTRACT_RISK_KEY)
			--,CHECK1=count(*) over (Partition by OFF_CONTRACT_RISK_KEY)
		From (
			Select 
				N.CENSUS_DATE
				,N.PARTY_KEY
				,N.PRODUCT_OPT_GROUP_DESC
				,NEW_PRODUCT_CODE = N.PRODUCT_CODE
				,NEW_PRODUCT_OPTION_CODE = N.PRODUCT_OPTION_CODE
				,N.CONTRACT_KEY
				,N.CONTRACT_RISK_KEY
				,NEW_SUM_INSURED_AMT = N.SUM_INSURED_AMT
				,OFF_CENSUS_DATE = L.CENSUS_DATE
				,OFF_CONTRACT_KEY = L.CONTRACT_KEY 
				,OFF_CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
				,OFF_PRODUCT_CODE = L.PRODUCT_CODE
				,OFF_PRODUCT_OPTION_CODE = L.PRODUCT_OPTION_CODE
				,OFF_SUM_INSURED_AMT = L.SUM_INSURED_AMT
				,EXACT = count(*) Over (Partition by N.PARTY_KEY, N.PRODUCT_OPTION_CODE, N.SUM_INSURED_AMT)
			 From #LAPSEDBENS As L JOIN #NEWBENS As N 
				ON L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC=N.PRODUCT_OPT_GROUP_DESC 
					and L.PRODUCT_CODE = N.PRODUCT_CODE 
					and L.PRODUCT_OPTION_CODE = N.PRODUCT_OPTION_CODE 
					and L.SUM_INSURED_AMT = N.SUM_INSURED_AMT
			) As LL
		Where LL.EXACT = 1

		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT

		Print 'Insert recs to Converted_Temp ' + convert(varchar(50),@@ROWCOUNT)	

		--Delete matched cases from the #Tables
		Delete from #LAPSEDBENS where CONTRACT_RISK_KEY in (Select Distinct OFF_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #LapsedBens ' + convert(varchar(50),@@ROWCOUNT)	
		Delete from #NEWBENS where CONTRACT_RISK_KEY in (Select Distinct NEW_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #NEWBENS ' + convert(varchar(50),@@ROWCOUNT)	

		--Find all the matches where SUM INSURED is identical and PRODUCT_OPTION_CODE change is just stepped->level or level->stepped and only one Identical Match
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE, OFF_SUM_INSURED_AMT, CONVERSION_TYPE,Created_Date_Time,Created_By,Process_Log_ID,Pas)

		Select CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC, NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT
				   ,CONVERSION_TYPE='STP_LVL',getdate() ,'SYSTEM_USER' ,@ProcessLogID,@Pas
		From (
			Select 
				N.CENSUS_DATE, N.PARTY_KEY, N.PRODUCT_OPT_GROUP_DESC, NEW_PRODUCT_OPTION_CODE = N.PRODUCT_OPTION_CODE
				,NEW_CONTRACT_KEY=N.CONTRACT_KEY,NEW_CONTRACT_RISK_KEY=N.CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT=N.SUM_INSURED_AMT
				,OFF_CENSUS_DATE=L.CENSUS_DATE,OFF_CONTRACT_KEY=L.CONTRACT_KEY,OFF_CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE=L.PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT=L.SUM_INSURED_AMT
				,count(*) Over (Partition By N.PARTY_KEY, N.PRODUCT_CODE,N.PRODUCT_OPT_GROUP_DESC,N.SUM_INSURED_AMT,replace(replace(N.PRODUCT_OPTION_CODE,'L','#'),'S','#')) As EXACT
			FROM #NEWBENS As N JOIN #LAPSEDBENS As L 
				On N.PARTY_KEY = L.PARTY_KEY 
					and N.PRODUCT_OPT_GROUP_DESC = L.PRODUCT_OPT_GROUP_DESC 
					and N.PRODUCT_CODE = L.PRODUCT_CODE
					and N.SUM_INSURED_AMT = L.SUM_INSURED_AMT
					and replace(replace(N.PRODUCT_OPTION_CODE,'L','#'),'S','#') = replace(replace(L.PRODUCT_OPTION_CODE,'L','#'),'S','#')
			) As NN
		Where EXACT=1
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Insert recs to Converted_Temp where SUM INSURED is identical ' + convert(varchar(50),@@ROWCOUNT)	


		Delete from #LAPSEDBENS where CONTRACT_RISK_KEY in (Select Distinct OFF_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #LapsedBens ' + convert(varchar(50),@DeleteRowCount)	
		Delete from #NEWBENS where CONTRACT_RISK_KEY in (Select Distinct NEW_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #NEWBENS ' + convert(varchar(50),@@ROWCOUNT)	

		--Find all the matches where SUM INSURED with PRODUCT_OPT_GROUP_DESC is identical and only one Sum Insured is an Identical Match
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,Created_Date_Time,Created_By,Process_Log_ID,Pas)

		Select CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,getdate() ,'SYSTEM_USER' ,@ProcessLogID,@Pas
		From (
			Select 
				N.CENSUS_DATE, N.PARTY_KEY, N.PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE = N.PRODUCT_OPTION_CODE
				,NEW_CONTRACT_KEY=N.CONTRACT_KEY,NEW_CONTRACT_RISK_KEY=N.CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT=N.SUM_INSURED_AMT
				,OFF_CENSUS_DATE=L.CENSUS_DATE,OFF_CONTRACT_KEY=L.CONTRACT_KEY,OFF_CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE=L.PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT=L.SUM_INSURED_AMT
				,count(*) Over (Partition By N.PARTY_KEY, N.PRODUCT_OPT_GROUP_DESC) As EXACT
			FROM #NEWBENS As N JOIN #LAPSEDBENS As L 
				On N.PARTY_KEY = L.PARTY_KEY 
					and N.PRODUCT_OPT_GROUP_DESC = L.PRODUCT_OPT_GROUP_DESC 
					and N.SUM_INSURED_AMT =L.SUM_INSURED_AMT
			) As NN
		Where EXACT=1
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Insert recs to Converted_Temp where SUM INSURED with PRODUCT_OPT_GROUP_DESC is identical ' + convert(varchar(50),@@ROWCOUNT)	
		Delete from #LAPSEDBENS where CONTRACT_RISK_KEY in (Select Distinct OFF_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #LapsedBens ' + convert(varchar(50),@@ROWCOUNT)	
		Delete from #NEWBENS where CONTRACT_RISK_KEY in (Select Distinct NEW_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete macthed records from #NEWBENS ' + convert(varchar(50),@@ROWCOUNT)	

		--Add in the Count of Similar Records that could potentially match the same source or destinations
		UPDATE L Set 
			OFF_COUNT = (Select count(*) from #LAPSEDBENS as L1 where L1.PRODUCT_OPT_GROUP_DESC=L.PRODUCT_OPT_GROUP_DESC and L1.PARTY_KEY = L.PARTY_KEY)
		From #LAPSEDBENS As L

		UPDATE N Set 
			NEW_COUNT = (Select count(*) from #NEWBENS as N1 where N1.PRODUCT_OPT_GROUP_DESC=N.PRODUCT_OPT_GROUP_DESC and N1.PARTY_KEY = N.PARTY_KEY)
		From #NEWBENS As N

		-- Find all the remaining 1 -> 1 matches
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,Created_Date_Time,Created_By,Process_Log_ID,Pas)

		Select 
			N.CENSUS_DATE
			,N.PARTY_KEY
			,N.PRODUCT_OPT_GROUP_DESC
			,N.PRODUCT_OPTION_CODE
			,N.CONTRACT_KEY
			,N.CONTRACT_RISK_KEY
			,N.SUM_INSURED_AMT
			,L.CENSUS_DATE
			,L.CONTRACT_KEY
			,L.CONTRACT_RISK_KEY
			,L.PRODUCT_OPTION_CODE
			,L.SUM_INSURED_AMT
			,getdate() ,'SYSTEM_USER' ,@ProcessLogID
			,@Pas
		 From #LAPSEDBENS As L JOIN #NEWBENS As N 
			ON L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC=N.PRODUCT_OPT_GROUP_DESC 
		Where L.OFF_COUNT = 1 and N.NEW_COUNT = 1
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Insert recs to Converted_Temp all the remaining 1 -> 1 matches ' + convert(varchar(50),@@ROWCOUNT)	

		--remove from Lapse List and New Bens Lists
		Delete from #LAPSEDBENS where CONTRACT_RISK_KEY in (Select Distinct OFF_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		Delete from #NEWBENS where CONTRACT_RISK_KEY in (Select Distinct NEW_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)

		--Remaining cases have multiple potential matches but no exact match
		IF OBJECT_ID('tempdb.dbo.#MULTI', 'U') IS NOT NULL DROP TABLE #MULTI
		Select 
			N.PARTY_KEY
			,N.PRODUCT_OPT_GROUP_DESC
			,TOTAL_OFF
			,OFF_COUNT 
			,TOTAL_ON
			,NEW_COUNT
			into #MULTI
		FROM (
			SELECT
				PARTY_KEY
				,PRODUCT_OPT_GROUP_DESC
				,TOTAL_OFF = sum(SUM_INSURED_AMT)
				,OFF_COUNT = count(*)
			FROM #LAPSEDBENS
			GROUP BY PARTY_KEY,PRODUCT_OPT_GROUP_DESC) As L 
		FULL OUTER JOIN (
			SELECT
				PARTY_KEY
				,PRODUCT_OPT_GROUP_DESC
				,TOTAL_ON = sum(SUM_INSURED_AMT)
				,NEW_COUNT = count(*)
			FROM #NEWBENS
			GROUP BY PARTY_KEY,PRODUCT_OPT_GROUP_DESC) As N
		ON L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC = N.PRODUCT_OPT_GROUP_DESC

		--Cases where there is same or an increase in Total Benefits match by Descending Size
		INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_PRODUCT_OPTION_CODE
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,Created_Date_Time,Created_By,Process_Log_ID,Pas)

		Select 
			N.CENSUS_DATE
			,N.PARTY_KEY
			,N.PRODUCT_OPT_GROUP_DESC
			,N.PRODUCT_OPTION_CODE
			,N.CONTRACT_KEY
			,N.CONTRACT_RISK_KEY
			,N.SUM_INSURED_AMT
			,L.CENSUS_DATE
			,L.CONTRACT_KEY
			,L.CONTRACT_RISK_KEY
			,L.PRODUCT_OPTION_CODE
			,L.SUM_INSURED_AMT
			,getdate() ,'SYSTEM_USER' ,@ProcessLogID
			,@Pas
		From
			(Select
				NN.*
				,Row_number() Over (Partition by NN.PARTY_KEY, NN.PRODUCT_OPT_GROUP_DESC Order by NN.SUM_INSURED_AMT Desc) As RANKING
			FROM #NEWBENS as NN JOIN #MULTI as M on NN.PARTY_KEY = M.PARTY_KEY and NN.PRODUCT_OPT_GROUP_DESC = M.PRODUCT_OPT_GROUP_DESC
			WHERE M.TOTAL_ON >= M.TOTAL_OFF) As N
			JOIN
			(Select
				LL.*
				,Row_number() Over (Partition by LL.PARTY_KEY, LL.PRODUCT_OPT_GROUP_DESC Order by LL.SUM_INSURED_AMT Desc) As RANKING
			FROM #LAPSEDBENS as LL JOIN #MULTI as M on LL.PARTY_KEY = M.PARTY_KEY and LL.PRODUCT_OPT_GROUP_DESC = M.PRODUCT_OPT_GROUP_DESC
			WHERE M.TOTAL_ON >= M.TOTAL_OFF) As L
			On N.PARTY_KEY = L.PARTY_KEY and N.PRODUCT_OPT_GROUP_DESC = L.PRODUCT_OPT_GROUP_DESC and N.RANKING = L.RANKING

		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Insert recs to Converted_Temp there is same or an increase in Total Benefits match by Descending Size ' + convert(varchar(50),@@ROWCOUNT)	

		--Select count(*) from CONVERTED_TEMP

		--remove from Lapse List and New Bens Lists and delete any left overs
		Delete from #LAPSEDBENS where CONTRACT_RISK_KEY in (Select Distinct OFF_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		Delete from #NEWBENS where CONTRACT_RISK_KEY in (Select Distinct NEW_CONTRACT_RISK_KEY from CONVERTED_TEMP where Pas=@Pas)
		DELETE FROM L
		FROM #LAPSEDBENS AS L LEFT JOIN #NEWBENS as N on L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC = N.PRODUCT_OPT_GROUP_DESC
		WHERE N.PARTY_KEY is NULL
		DELETE FROM N
		FROM #LAPSEDBENS AS L RIGHT JOIN #NEWBENS as N on L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC = N.PRODUCT_OPT_GROUP_DESC
		WHERE L.PARTY_KEY is NULL

		--remaining are all multi matches with a benefit reduction so attempt to match each case against one in the #LAPSED	that is slightly bigger
		--order the cases in order of descending size
		IF OBJECT_ID('tempdb.dbo.#CNEW', 'U') IS NOT NULL DROP TABLE #CNEW
		Select * into #CNEW FROM #NEWBENS ORDER BY SUM_INSURED_AMT Desc --needed as Cursors don't like ORDER BY clauses
		--Select * from #CNEW
		DECLARE cNEW CURSOR FAST_FORWARD FOR (Select PARTY_KEY, CONTRACT_RISK_KEY, PRODUCT_OPTION_CODE, PRODUCT_OPT_GROUP_DESC, SUM_INSURED_AMT FROM #CNEW)
		OPEN cNEW
		DECLARE @PARTY_KEY int, @NEW_CR int, @POC nvarchar(20), @POGD nvarchar(20), @NEW_SI money, @OFF_CR int
		FETCH NEXT FROM cNEW INTO  @PARTY_KEY, @NEW_CR, @POC, @POGD, @NEW_SI
		--Print @NEW_CR
		WHILE @@FETCH_STATUS=0
			BEGIN
	
			Select Top 1 @OFF_CR=CONTRACT_RISK_KEY  
			From #LAPSEDBENS 
			Where PARTY_KEY = @PARTY_KEY and PRODUCT_OPT_GROUP_DESC = @POGD and SUM_INSURED_AMT >= @NEW_SI
			ORDER BY SUM_INSURED_AMT
			--Print 'NewCR'+ @NEW_CR


			If @OFF_CR is not NULL
				BEGIN
				--Print 'NewCR'+ @NEW_CR
				INSERT INTO CONVERTED_TEMP(CENSUS_DATE,PARTY_KEY,NEW_PRODUCT_OPTION_CODE, PRODUCT_OPT_GROUP_DESC
				   ,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY,NEW_SUM_INSURED_AMT
				   ,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_PRODUCT_OPTION_CODE,OFF_SUM_INSURED_AMT,Created_Date_Time,Created_By,Process_Log_ID,Pas)

				Select 
					N.CENSUS_DATE
					,N.PARTY_KEY
					,N.PRODUCT_OPTION_CODE
					,N.PRODUCT_OPT_GROUP_DESC
					,N.CONTRACT_KEY
					,N.CONTRACT_RISK_KEY
					,N.SUM_INSURED_AMT
					,L.CENSUS_DATE
					,L.CONTRACT_KEY
					,L.CONTRACT_RISK_KEY
					,L.PRODUCT_OPTION_CODE
					,L.SUM_INSURED_AMT
					,getdate() ,'SYSTEM_USER' ,@ProcessLogID
					,@Pas
				 From #LAPSEDBENS As L JOIN #NEWBENS As N 
					ON L.PARTY_KEY = N.PARTY_KEY and L.PRODUCT_OPT_GROUP_DESC=N.PRODUCT_OPT_GROUP_DESC 
				 Where N.CONTRACT_RISK_KEY = @NEW_CR and L.CONTRACT_RISK_KEY = @OFF_CR
				 --
				 Print @@ROWCOUNT
				 --Print 'NewCR'+ @NEW_CR
				 --Print 'OFFCR' + @OFF_CR
				 --
				 Delete from #NEWBENS where CONTRACT_RISK_KEY = @NEW_CR
				 Delete from #LAPSEDBENS where CONTRACT_RISK_KEY = @OFF_CR


				END

			FETCH NEXT FROM cNEW INTO  @PARTY_KEY, @NEW_CR, @POC, @POGD, @NEW_SI
		
			END
		CLOSE cNEW
		DEALLOCATE cNEW
		

		--Now Label all the cases which are not yet labelled
		Update C SET
			CONVERSION_TYPE=Case 
				when NEW_PRODUCT_OPTION_CODE = OFF_PRODUCT_OPTION_CODE Then 'REPLACE'
				when replace(replace(NEW_PRODUCT_OPTION_CODE,'L','#'),'S','#') = replace(replace(OFF_PRODUCT_OPTION_CODE,'L','#'),'S','#') Then 'STP_LVL'
				When dbo.DateMin(I.RISK_START_DATE,I.QS_START_DATE) > DateAdd(Year, -5, C.CENSUS_DATE) Then 'CONV<5'
				When dbo.DateMin(I.RISK_START_DATE,I.QS_START_DATE) > DateAdd(Year, -10, C.CENSUS_DATE) Then 'CONV<10'
				ELSE 'CONV10+'
			End
		from CONVERTED_TEMP As C JOIN LAPSED As L on C.OFF_CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY and C.OFF_CENSUS_DATE = L.CENSUS_DATE
			JOIN INFORCE As I on L.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY and L.CENSUS_DATE = I.CENSUS_DATE
		where CONVERSION_TYPE is NULL
		and C.Pas=@Pas
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Converted_Temp Label all the cases which are not yet labelled ' + convert(varchar(50),@UpdateRowCount)

		--return the number of conversion matches in the result
		DECLARE @CONV_COUNT int = (Select count(*) from CONVERTED_TEMP where Pas=@Pas)
		Print 'Conv_count = ' + convert(varchar(50),@CONV_COUNT)
	
	Commit TRAN IdentifyConversions

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
	RETURN @CONV_COUNT
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN IdentifyConversions;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_AdjTreatyUpdate_Claims]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: Jan 2021
-- Description:	Claims - update the Listing tables Treaty Id for Adjustments
-- =============================================

CREATE PROCEDURE [dbo].[usp_GUI_AdjTreatyUpdate_Claims] 	
@ProcessingMonthYear datetime
	
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE @MonthEffectiveDate Date
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @return_value   int = 0


BEGIN TRY;
BEGIN TRAN Tran1;

	-- Update Able_Claim_Listing with the Adjustments Filter Treaty_ID

--print 'ABLE'

	Update l
	SET 
		l.Layer_1_Treaty_Id = tqs.Treaty_Id,
		l.Is_Layer_1_Covered = 'Y',
		l.Layer_1_Treaty_Percent = tqs.[Treaty_Relevant_Percent],
		l.Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
		l.Layer_2_Treaty_Id = tss.Treaty_Id,
		l.Is_Layer_2_Covered = 'Y',
		l.[Layer_2_Reins_Percent] = tqs.[Treaty_Relevant_Percent],
		l.Layer_2_Treaty_Rule = 'Removed_from_GenRe_SS',
		l.[Updated_Date_Time] = getdate(),
		l.updated_by  = system_user
	FROM dbo.ABLE_Claim_Listing AS l
	INNER JOIN dbo.Inforce_Adjusted AS ia
	ON
	(CAST(Year(l.Incurred_Date) as varchar) + Cast(Month(l.Incurred_Date) as varchar)) = (CAST(Year(ia.Census_Date) as varchar) + Cast(Month(ia.Census_Date) as varchar))
	INNER JOIN dbo.Inforce_Adjusted_Detail AS iad
	ON iad.Inforce_Adjusted_Id = ia.Inforce_Adjusted_Id
	AND l.EDW_Contract_Id = iad.CONTRACT_ID
	AND l.EDW_Contract_Risk_Key = iad.CONTRACT_RISK_KEY
	INNER JOIN dbo.Ref_Adjustment_Type AS rat
	ON iad.ADJUSTMENT_TYPE_ID = rat.Ref_Adjustment_Type_Id
	AND rat.Code = 'FILTER'
	INNER JOIN dbo.Reins_Treaty tqs
	ON ia.Census_Date < tqs.Treaty_End_Date
	AND tqs.Treaty_Name = 'Removed from GenRe QS'
	INNER JOIN dbo.Reins_Treaty tss
	ON ia.Census_Date < tss.Treaty_End_Date
	AND tss.Treaty_Name = 'Removed from GenRe SS'
	where l.Month_Eftv_Date = convert(datetime,@ProcessingMonthYear)


 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 --print 'FT'
 	-- Update Figtree_Claim_Listing with the Adjustments Filter Treaty_ID

	Update l
	SET 
		l.Layer_1_Treaty_Id = tqs.Treaty_Id,
		l.Is_Layer_1_Covered = 'Y',
		l.Layer_1_Treaty_Percent = tqs.[Treaty_Relevant_Percent],
		l.Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
		l.Layer_2_Treaty_Id = tss.Treaty_Id,
		l.Is_Layer_2_Covered = 'Y',
		l.[Layer_2_Reins_Percent] = tqs.[Treaty_Relevant_Percent],
		l.Layer_2_Treaty_Rule = 'Removed_from_GenRe_SS',
		l.[Updated_Date_Time] = getdate(),
		l.updated_by  = system_user
	FROM dbo.FigTree_Claim_Listing AS l
	INNER JOIN dbo.Inforce_Adjusted AS ia
	ON
	(CAST(Year(l.Date_of_Death) as varchar) + Cast(Month(l.Date_of_Death) as varchar)) = (CAST(Year(ia.Census_Date) as varchar) + Cast(Month(ia.Census_Date) as varchar))
	INNER JOIN dbo.Inforce_Adjusted_Detail AS iad
	ON iad.Inforce_Adjusted_Id = ia.Inforce_Adjusted_Id
	AND l.EDW_Contract_Id = iad.CONTRACT_ID
	AND l.EDW_Contract_Risk_Key = iad.CONTRACT_RISK_KEY
	INNER JOIN dbo.Ref_Adjustment_Type AS rat
	ON iad.ADJUSTMENT_TYPE_ID = rat.Ref_Adjustment_Type_Id
	AND rat.Code = 'FILTER'
	INNER JOIN dbo.Reins_Treaty tqs
	ON ia.Census_Date < tqs.Treaty_End_Date
	AND tqs.Treaty_Name = 'Removed from GenRe QS'
	INNER JOIN dbo.Reins_Treaty tss
	ON ia.Census_Date < tss.Treaty_End_Date
	AND tss.Treaty_Name = 'Removed from GenRe SS'
	where l.Month_Eftv_Date = convert(datetime,@ProcessingMonthYear)

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

--print 'WMS'

	-- Update WMS_Claim_Listing with the Adjustments Filter Treaty_ID

	Update l
	SET 
		l.Layer_1_Treaty_Id = tqs.Treaty_Id,
		l.Is_Layer_1_Covered = 'Y',
		l.Layer_1_Treaty_Percent = tqs.[Treaty_Relevant_Percent],
		l.Layer_1_Treaty_Rule = 'Removed_from_GenRe_QS',
		l.Layer_2_Treaty_Id = tss.Treaty_Id,
		l.Is_Layer_2_Covered = 'Y',
		l.[Layer_2_Reins_Percent] = tqs.[Treaty_Relevant_Percent],
		l.Layer_2_Treaty_Rule = 'Removed_from_GenRe_SS',
		l.[Updated_Date_Time] = getdate(),
		l.updated_by  = system_user
	FROM dbo.WMS_Claim_Listing AS l
	INNER JOIN dbo.Inforce_Adjusted AS ia
	ON
	(CAST(Year(l.DOD_Incident) as varchar) + Cast(Month(l.DOD_Incident) as varchar)) = (CAST(Year(ia.Census_Date) as varchar) + Cast(Month(ia.Census_Date) as varchar))
	INNER JOIN dbo.Inforce_Adjusted_Detail AS iad
	ON iad.Inforce_Adjusted_Id = ia.Inforce_Adjusted_Id
	AND l.EDW_Contract_Id = iad.CONTRACT_ID
	AND l.EDW_Contract_Risk_Key = iad.CONTRACT_RISK_KEY
	INNER JOIN dbo.Ref_Adjustment_Type AS rat
	ON iad.ADJUSTMENT_TYPE_ID = rat.Ref_Adjustment_Type_Id
	AND rat.Code = 'FILTER'
	INNER JOIN dbo.Reins_Treaty tqs
	ON ia.Census_Date < tqs.Treaty_End_Date
	AND tqs.Treaty_Name = 'Removed from GenRe QS'
	INNER JOIN dbo.Reins_Treaty tss
	ON ia.Census_Date < tss.Treaty_End_Date
	AND tss.Treaty_Name = 'Removed from GenRe SS'
	where l.Month_Eftv_Date = convert(datetime,@ProcessingMonthYear)

  Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
 
 COMMIT TRAN Tran1;

 	Begin TRAN T2;

	-- Update Reins_claim_Listing for Able Records

	update [dbo].[Reins_Claim_Listing]
	set  
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Id = A.layer_1_Treaty_id,
		[dbo].[Reins_Claim_Listing].Is_Layer_1_Covered = A.Is_Layer_1_Covered,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Percent = A.Layer_1_Treaty_Percent,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Rule = A.Layer_1_Treaty_Rule,
		[dbo].[Reins_Claim_Listing].[Layer_2_Treaty_Id] = A.Layer_2_Treaty_Id,
		[dbo].[Reins_Claim_Listing].Is_Layer_2_Covered = A.Is_Layer_2_Covered, 
		[dbo].[Reins_Claim_Listing].[Layer_2_Reins_Percent] = A.[Layer_2_Reins_Percent], 
		[dbo].[Reins_Claim_Listing].Layer_2_Treaty_Rule = A.Layer_2_Treaty_Rule, 
		[Updated_Date_Time] = getdate(),
		[Updated_By]  = system_user 
	FROM [dbo].[Reins_Claim_Listing] trg
	INNER JOIN Able_Claim_Listing A
	ON 	'AB' + cast(A.Claim_Benefit_Id as varchar) = trg.Claim_Source_Id
	and A.EDW_Contract_Key = trg.EDW_Contract_Key
	and A.EDW_Contract_Risk_Key = trg.EDW_Contract_Risk_Key
	and A.Incurred_Date = trg.Incurred_Date
	where
	 trg.Claim_Source = 'Able'

     SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	 PRINT 'Update Reins Claim Listing for Able'

	COMMIT TRAN T2;

	BEGIN TRAN T3;

	-- Update FT to ReinsClaim Listing
	
	update [dbo].[Reins_Claim_Listing]
	set  
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Id = F.layer_1_Treaty_id,
		[dbo].[Reins_Claim_Listing].Is_Layer_1_Covered = F.Is_Layer_1_Covered,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Percent = F.Layer_1_Treaty_Percent,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Rule = F.Layer_1_Treaty_Rule,
		[dbo].[Reins_Claim_Listing].[Layer_2_Treaty_Id] = F.Layer_2_Treaty_Id,
		[dbo].[Reins_Claim_Listing].Is_Layer_2_Covered = F.Is_Layer_2_Covered, 
		[dbo].[Reins_Claim_Listing].[Layer_2_Reins_Percent] = F.[Layer_2_Reins_Percent], 
		[dbo].[Reins_Claim_Listing].Layer_2_Treaty_Rule = F.Layer_2_Treaty_Rule, 
		[Updated_Date_Time] = getdate(),
		[Updated_By]  = system_user			
	FROM [dbo].[Reins_Claim_Listing] trg
	INNER JOIN FigTree_Claim_Listing F
	ON 'FT'+ CAST(F.[FigTree_Life_Claim_Id] AS VARCHAR) = trg.Claim_Source_Id
	and F.EDW_Contract_Key = trg.EDW_Contract_Key
	and F.EDW_Contract_Risk_Key = trg.EDW_Contract_Risk_Key
	and F.Date_of_Death = trg.Incurred_Date
	where
	 trg.Claim_Source = 'FigTree'

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	PRINT 'Update Reins Claim Listing for FT'

	COMMIT TRAN T3;

	BEGIN TRAN T4;
	-- update WMS listing to claim Listing

	update [dbo].[Reins_Claim_Listing]
	set  
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Id = W.layer_1_Treaty_id,
		[dbo].[Reins_Claim_Listing].Is_Layer_1_Covered = W.Is_Layer_1_Covered,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Percent = W.Layer_1_Treaty_Percent,
		[dbo].[Reins_Claim_Listing].Layer_1_Treaty_Rule = W.Layer_1_Treaty_Rule,
		[dbo].[Reins_Claim_Listing].[Layer_2_Treaty_Id] = W.Layer_2_Treaty_Id,
		[dbo].[Reins_Claim_Listing].Is_Layer_2_Covered = W.Is_Layer_2_Covered, 
		[dbo].[Reins_Claim_Listing].[Layer_2_Reins_Percent] = W.[Layer_2_Reins_Percent], 
		[dbo].[Reins_Claim_Listing].Layer_2_Treaty_Rule = W.Layer_2_Treaty_Rule, 
		[Updated_Date_Time] = getdate(),
		[Updated_By]  = system_user	  
	FROM [dbo].[Reins_Claim_Listing] trg
	INNER JOIN WMS_Claim_Listing W
	ON 'WMS'+ CAST([WMS_Banner_DeathOnly_ID] AS VARCHAR) = trg.Claim_Source_Id
	and W.EDW_Contract_Key = trg.EDW_Contract_Key
	and W.EDW_Contract_Risk_Key = trg.EDW_Contract_Risk_Key
	and W.DOD_Incident = trg.Incurred_Date
	where
	trg.Claim_Source = 'WMS'

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	PRINT 'Update Reins Claim Listing for WMS'

	COMMIT TRAN T4;


	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		ROLLBACK TRAN T2;
		ROLLBACK TRAN T3;
		ROLLBACK TRAN T4;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Adjustment_TreatyIDUpdate_Inforce]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[usp_GUI_Adjustment_TreatyIDUpdate_Inforce](@Census_Date DATE)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@Can_Load_Message NVARCHAR(255),
		@Treaty_Id_QS INT,
		@Treaty_Id_SS INT

	BEGIN TRY
		-- Check for existing Sign Offs. Abort if exits
	
		IF (dbo.udf_Is_Adjustment_Uploaded(@Census_Date) = 0)
		BEGIN
			SELECT @Can_Load_Message = FORMATMESSAGE(N'Adjustments are not uploaded for Census Date: %s', CONVERT(VARCHAR(10), @Census_Date, 121))
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		IF (dbo.udf_Is_Adjustment_Signed_Off(@Census_Date) = 1)
		BEGIN
			SELECT @Can_Load_Message = FORMATMESSAGE(N'Adjustments are already signed off for Census Date: %s', CONVERT(VARCHAR(10), @Census_Date, 121))
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		SELECT 
				@Treaty_Id_QS = (SELECT Treaty_Id FROM dbo.Reins_Treaty WHERE Treaty_Name = 'Removed from GenRe QS'),
				@Treaty_Id_SS = (SELECT Treaty_Id FROM dbo.Reins_Treaty WHERE Treaty_Name = 'Removed from GenRe SS')
	
		IF (@Treaty_Id_QS IS NULL OR @Treaty_Id_SS IS NULL)
		BEGIN
			SELECT @Can_Load_Message = FORMATMESSAGE(N'Treaty [%s] or [%s] is not found', @Treaty_Id_QS, @Treaty_Id_SS)
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		BEGIN TRAN
		
			UPDATE i
				SET	i.[QS_Treaty_id] = @Treaty_Id_QS
				, i.[SS_Treaty_id] = @Treaty_Id_SS
			FROM dbo.INFORCE AS i
			INNER JOIN dbo.Inforce_Adjusted AS ia
				ON ia.Census_Date = i.CENSUS_DATE

			INNER JOIN dbo.Inforce_Adjusted_Detail AS iad
				ON iad.Inforce_Adjusted_Id = ia.Inforce_Adjusted_Id

				--AND iad.CONTRACT_ID = i.CONTRACT_ID
				--AND iad.CONTRACT_RISK_KEY = i.CONTRACT_RISK_KEY

			INNER JOIN dbo.Ref_Adjustment_Type AS rat
				ON iad.ADJUSTMENT_TYPE_ID = rat.Ref_Adjustment_Type_Id
				AND rat.Code = 'FILTER'
			WHERE i.CENSUS_DATE = @Census_Date
				AND i.INFORCE_ID = iad.INFORCE_ID

			
		COMMIT

		RETURN 0
	
	END TRY
	BEGIN CATCH

		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	
	END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Claim_Premium_Alignment_Report]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Description: Shows discrepancies between claims and premiums

Usage      : EXEC dbo.usp_GUI_Claim_Premium_Alignment_Report

When		Who			Why
2020-10-20	THNSYQ		RGU-1024	Initial version
=============================================*/

CREATE PROCEDURE [dbo].[usp_GUI_Claim_Premium_Alignment_Report]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @Census_Date DATE;

	SELECT @Census_Date = MAX(CENSUS_DATE)
	FROM dbo.INFORCE

			--PRINT @Census_Date

	DROP TABLE IF EXISTS #temp_claims
	DROP TABLE IF EXISTS #temp_treaty_mismatch
	DROP TABLE IF EXISTS #temp_no_premium

	-- Get claims

	SELECT 
			rcl.EDW_Contract_Id

			, rcl.EDW_Contract_Key
			, rcl.EDW_Contract_Risk_Key

			, rcl.EDW_Product_Code
			, rcl.EDW_Product_Option_Code
			, rcl.Reins_Benefit_Type AS Product_Group_Desc
			, rcl.Incurred_Date AS Claim_Incurred_Date
			, rcl.Claim_Number AS Claim_Number
			, rcl.Benefit_Number AS Benefit_Number
			, rcl.Claim_Source AS Claim_Source
			, claim_trqs.Treaty_Id AS Claim_QS_Treaty_ID
			, claim_trqs.Treaty_Name AS Claim_QS_Treaty_Name
			, rcl.Layer_1_Reins_Percent AS Claim_QS_Treaty_Reins_Percent
			, rcl.Layer_1_Init_Reins_Exposure AS Claim_QS_Treaty_Reins_Exposure
			, claim_trss.Treaty_Id AS Claim_SS_Treaty_ID
			, claim_trss.Treaty_Name AS Claim_SS_Treaty_Name
			, rcl.Layer_2_Reins_Percent AS Claim_SS_Treaty_Reins_Percent
			, rcl.Layer_2_Init_Reins_Exposure AS Claim_SS_Treaty_Reins_Exposure

			, rcl.Incurred_Date
			, EOMONTH(rcl.Incurred_Date) AS Incurred_Date_EOM
	INTO #temp_claims
	FROM 
		(
			SELECT MAX(Reins_Cyclic_Id) AS Reins_Cyclic_Id
			FROM dbo.Reins_Cyclic
			WHERE Reins_Cyclic_Status = 'CLOSED'

					--ST
					--AND Reins_Cyclic_Id <= 48
		) AS rc
	INNER JOIN
		(
			SELECT DISTINCT t.Claim_Number, t.Reins_Cyclic_Id
			FROM dbo.Reins_Claim_Expense_Trnx_Recoverable AS t
		) AS trxrec
		ON trxrec.Reins_Cyclic_Id = rc.Reins_Cyclic_Id
	-- These claims are to be matched with premiums
	INNER JOIN [dbo].[Reins_Claim_Listing] AS rcl
		ON rcl.Claim_Number = trxrec.Claim_Number
		AND rcl.Row_End_Date = CONVERT(DATETIME,'31/DEC/3000')
	
	LEFT JOIN dbo.Reins_Treaty AS claim_trqs
		ON claim_trqs.Treaty_Id = rcl.Layer_1_Treaty_Id
	LEFT JOIN dbo.Reins_Treaty AS claim_trss
		ON claim_trss.Treaty_Id = rcl.Layer_2_Treaty_Id

	-- SELECT TOP 100 * FROM #temp_claims

	-- Validation by treaty

	SELECT 
		rcl.EDW_Contract_Id
		, rcl.EDW_Contract_Key
		, rcl.EDW_Contract_Risk_Key
		, rcl.EDW_Product_Code
		, rcl.EDW_Product_Option_Code
		, rcl.Product_Group_Desc
		, rcl.Incurred_Date AS Claim_Incurred_Date
		, rcl.Claim_Number AS Claim_Number
		, rcl.Benefit_Number AS Benefit_Number
		, rcl.Claim_Source AS Claim_Source
		, i.Premium_QS_Treaty_ID
		, i.Premium_QS_Treaty_Name
		, i.PROJECTION_GROUP AS Premium_Projection_Group
		, i.Premium_SS_Treaty_ID
		, i.Premium_SS_Treaty_Name
		, rcl.Claim_QS_Treaty_ID
		, rcl.Claim_QS_Treaty_Name
		, rcl.Claim_QS_Treaty_Reins_Percent
		, rcl.Claim_QS_Treaty_Reins_Exposure
		, rcl.Claim_SS_Treaty_ID
		, rcl.Claim_SS_Treaty_Name
		, rcl.Claim_SS_Treaty_Reins_Percent
		, rcl.Claim_SS_Treaty_Reins_Exposure
		, CAST(IIF(i.Rn IS NULL, 'PREMIUM NOT FOUND', 'MIS-MATCHED TREATY') AS VARCHAR(30)) AS Exception_Reason 

	INTO #temp_treaty_mismatch
	FROM #temp_claims AS rcl
	OUTER APPLY
		(
			--SELECT *
			--FROM 
			--(
				-- Get the latest available Premium between claim incurred date and current census date
				SELECT 
					inf.PROJECTION_GROUP
					, prem_trqs.Treaty_id AS Premium_QS_Treaty_ID
					, prem_trqs.Treaty_Name AS Premium_QS_Treaty_Name
					, prem_trss.Treaty_id AS Premium_SS_Treaty_ID
					, prem_trss.Treaty_Name AS Premium_SS_Treaty_Name
					, ROW_NUMBER() OVER(PARTITION BY inf.CONTRACT_KEY, inf.CONTRACT_RISK_KEY ORDER BY inf.CENSUS_DATE DESC) AS Rn
				FROM dbo.INFORCE AS inf
				LEFT JOIN dbo.Reins_Treaty AS prem_trqs
					ON prem_trqs.Treaty_Id = inf.QS_Treaty_id
				LEFT JOIN dbo.Reins_Treaty AS prem_trss
					ON prem_trss.Treaty_Id = inf.SS_Treaty_id
				WHERE inf.CONTRACT_KEY = rcl.EDW_Contract_Key
				   AND inf.CONTRACT_RISK_KEY = rcl.EDW_Contract_Risk_Key
				   --AND inf.CENSUS_DATE >= rcl.Incurred_Date_EOM --Match by year and month
				   AND inf.CENSUS_DATE <= @Census_Date
			--) AS a
			--WHERE a.Rn = 1
		) AS i

	WHERE i.Rn = 1
		AND 
			(
				rcl.Claim_QS_Treaty_ID <> i.Premium_QS_Treaty_ID
				OR rcl.Claim_SS_Treaty_ID <> i.Premium_SS_Treaty_ID
				
				OR rcl.Claim_QS_Treaty_ID IS NULL
				OR i.Premium_QS_Treaty_ID IS NULL
				OR rcl.Claim_SS_Treaty_ID IS NULL
				OR i.Premium_SS_Treaty_ID IS NULL
			)
		OR i.Rn IS NULL

			--SELECT * -- TOP (100) * 
			--FROM #temp_treaty_mismatch
			--RETURN
 

	-- Validation by premium payments

	SELECT --TOP 100

		 --a.Census_Date_Found
	   --a.Incurred_Date_Premium_Payment
	   --, a.QS_Claim_Incurred
	   --, a.SS_Claim_Incurred

	   a.EDW_Contract_Id
	   , a.EDW_Contract_Key
	   , a.EDW_Contract_Risk_Key
	   , a.EDW_Product_Code
	   , a.EDW_Product_Option_Code
	   , a.Product_Group_Desc
	   , a.Claim_Incurred_Date
	   , a.Claim_Number
	   , a.Benefit_Number
	   , a.Claim_Source
	   , a.Premium_QS_Treaty_ID
	   , a.Premium_QS_Treaty_Name
	   , a.Premium_Projection_Group
	   , a.Premium_SS_Treaty_ID
	   , a.Premium_SS_Treaty_Name
	   , a.Claim_QS_Treaty_ID
	   , a.Claim_QS_Treaty_Name
	   , a.Claim_QS_Treaty_Reins_Percent
	   , a.Claim_QS_Treaty_Reins_Exposure
	   , a.Claim_SS_Treaty_ID
	   , a.Claim_SS_Treaty_Name
	   , a.Claim_SS_Treaty_Reins_Percent
	   , a.Claim_SS_Treaty_Reins_Exposure
	   , CAST('PREMIUM PAYMENT NOT FOUND' AS VARCHAR(30)) AS Exception_Reason

	   --, a.QS_AMT_REINP_BCKD
	   --, a.QS_AMT_REINP_CURR
	   --, a.SS_PREM_CURR
	   --, a.SS_PREM_BCKD

	INTO #temp_no_premium
	FROM
	(
		SELECT 
			i.Census_Date_Found

				   , i.QS_AMT_REINP_CURR
				   --, rcl.Claim_SS_Treaty_Reins_Exposure
				   , i.SS_PREM_CURR
				   , i.QS_AMT_REINP_BCKD
				   , i.SS_PREM_BCKD
				   , rcl.Incurred_Date
				   , i.Current_Or_Next_Premium_Paid_Date
				   , DATEDIFF(MONTH, rcl.Incurred_Date, i.Current_Or_Next_Premium_Paid_Date) AS Months_No_Premium

			, 
				CASE
					WHEN i.Census_Date_Found = 1 
						AND (
								(i.QS_AMT_REINP_CURR > 0.00 AND rcl.Claim_SS_Treaty_Reins_Exposure > 0.00 AND i.SS_PREM_CURR > 0.00)
								OR 
								(i.QS_AMT_REINP_CURR > 0.00 AND (rcl.Claim_SS_Treaty_Reins_Exposure IS NULL OR rcl.Claim_SS_Treaty_Reins_Exposure = 0.00))
									--(
									--	rcl.Claim_SS_Treaty_Reins_Exposure > 0.00 AND i.SS_PREM_CURR > 0.00
									--	OR
									--	rcl.Claim_SS_Treaty_Reins_Exposure IS NULL
									--	OR
									--	rcl.Claim_SS_Treaty_Reins_Exposure = 0.00
									--)
							)
					THEN 1
					ELSE 0
				END AS Incurred_Date_Premium_Payment

			,		
				-- If less than 0 then show in the report
				CASE
					WHEN i.Census_Date_Found = 0 AND ISNULL(i.QS_AMT_REINP_CURR, 0.00) <> 0.00
						THEN i.QS_AMT_REINP_BCKD / i.QS_AMT_REINP_CURR - DATEDIFF(MONTH, rcl.Incurred_Date, i.Current_Or_Next_Premium_Paid_Date)
					WHEN i.Census_Date_Found = 0 AND ISNULL(i.QS_AMT_REINP_CURR, 0.00) = 0.00
						THEN 0.00
					ELSE
						NULL
				END  AS QS_Claim_Incurred
		   , 
				-- If less than 0 then show in the report
				CASE
					WHEN i.Census_Date_Found = 0 AND rcl.Claim_SS_Treaty_Reins_Exposure > 0.00 AND ISNULL(i.SS_PREM_CURR, 0.00) <> 0.00
						THEN i.SS_PREM_BCKD / i.SS_PREM_CURR - DATEDIFF(MONTH, rcl.Incurred_Date, i.Current_Or_Next_Premium_Paid_Date)
					WHEN i.Census_Date_Found = 0 AND rcl.Claim_SS_Treaty_Reins_Exposure > 0.00 AND ISNULL(i.SS_PREM_CURR, 0.00) = 0.00
						THEN 0.00
					ELSE
						NULL
				END  AS SS_Claim_Incurred
		   
		   , rcl.EDW_Contract_Id
		   , rcl.EDW_Contract_Key
		   , rcl.EDW_Contract_Risk_Key
		   , rcl.EDW_Product_Code
		   , rcl.EDW_Product_Option_Code
		   , rcl.Product_Group_Desc
		   , rcl.Incurred_Date AS Claim_Incurred_Date
		   , rcl.Claim_Number AS Claim_Number
		   , rcl.Benefit_Number AS Benefit_Number
		   , rcl.Claim_Source AS Claim_Source
		   , i.Premium_QS_Treaty_ID
		   , i.Premium_QS_Treaty_Name
		   , i.PROJECTION_GROUP AS Premium_Projection_Group
		   , i.Premium_SS_Treaty_ID
		   , i.Premium_SS_Treaty_Name
		   , rcl.Claim_QS_Treaty_ID
		   , rcl.Claim_QS_Treaty_Name
		   , rcl.Claim_QS_Treaty_Reins_Percent
		   , rcl.Claim_QS_Treaty_Reins_Exposure
		   , rcl.Claim_SS_Treaty_ID
		   , rcl.Claim_SS_Treaty_Name
		   , rcl.Claim_SS_Treaty_Reins_Percent
		   , rcl.Claim_SS_Treaty_Reins_Exposure

		FROM #temp_claims AS rcl

		CROSS APPLY
			(
				--SELECT *
				--FROM 
				--(
					-- Get current or next available Premium from claim incurred date
					SELECT 
						inf.CENSUS_DATE AS Current_Or_Next_Premium_Paid_Date
						, inf.CONTRACT_KEY
						, inf.CONTRACT_RISK_KEY
						, inf.PROJECTION_GROUP
						, inf.QS_AMT_REINP_CURR
						, inf.SS_PREM_CURR
						, inf.SS_PREM_BCKD
						, inf.QS_AMT_REINP_BCKD
						
						, prem_trqs.Treaty_id AS Premium_QS_Treaty_ID
						, prem_trqs.Treaty_Name AS Premium_QS_Treaty_Name
						, prem_trss.Treaty_id AS Premium_SS_Treaty_ID
						, prem_trss.Treaty_Name AS Premium_SS_Treaty_Name

						, IIF(inf.CENSUS_DATE = rcl.Incurred_Date_EOM, 1, 0) AS Census_Date_Found
						, ROW_NUMBER() OVER(PARTITION BY inf.CONTRACT_KEY, inf.CONTRACT_RISK_KEY ORDER BY inf.CENSUS_DATE) AS Rn
					FROM dbo.INFORCE AS inf
					LEFT JOIN dbo.Reins_Treaty AS prem_trqs
						ON prem_trqs.Treaty_Id = inf.QS_Treaty_id
					LEFT JOIN dbo.Reins_Treaty AS prem_trss
						ON prem_trss.Treaty_Id = inf.SS_Treaty_id
					WHERE inf.CONTRACT_KEY = rcl.EDW_Contract_Key
					   AND inf.CONTRACT_RISK_KEY = rcl.EDW_Contract_Risk_Key
					   AND inf.CENSUS_DATE >= rcl.Incurred_Date_EOM
					   AND inf.CENSUS_DATE <= @Census_Date

				--) AS a
				--WHERE a.Rn = 1
			) AS i
		WHERE i.Rn = 1

	) AS a

	WHERE 
		a.Census_Date_Found = 1 AND a.Incurred_Date_Premium_Payment = 0
		
		OR 
			(
				a.Census_Date_Found = 0 
				AND 
				(
					a.QS_Claim_Incurred < 0.00
					OR a.SS_Claim_Incurred < 0.00
				)
			)


	--SELECT TOP 10 * 
	--FROM #temp_treaty_mismatch
	--SELECT TOP 10 * 
	--FROM #temp_no_premium

	--RETURN

	-- Add Benefit_First_Seen_Date and Benefit_Last_Seen_Date

	SELECT un.EDW_Contract_Id AS Policy_Id
		 , un.EDW_Product_Code
		 , un.EDW_Product_Option_Code
		 , un.Product_Group_Desc
		 , i.Benefit_First_Seen_Date
		 , i.Benefit_Last_Seen_Date
		 , un.Claim_Incurred_Date
		 , un.Claim_Number
		 , un.Benefit_Number
		 , un.Claim_Source
		 , un.Premium_QS_Treaty_ID
		 , un.Premium_QS_Treaty_Name
		 , un.Premium_Projection_Group
		 , un.Premium_SS_Treaty_ID
		 , un.Premium_SS_Treaty_Name
		 , un.Claim_QS_Treaty_ID
		 , un.Claim_QS_Treaty_Name
		 , un.Claim_QS_Treaty_Reins_Percent
		 , un.Claim_QS_Treaty_Reins_Exposure
		 , un.Claim_SS_Treaty_ID
		 , un.Claim_SS_Treaty_Name
		 , un.Claim_SS_Treaty_Reins_Percent
		 , un.Claim_SS_Treaty_Reins_Exposure
		 , un.Exception_Reason
	FROM
	(
		SELECT tc.EDW_Contract_Id
			 , tc.EDW_Contract_Key
			 , tc.EDW_Contract_Risk_Key
			 , tc.EDW_Product_Code
			 , tc.EDW_Product_Option_Code
			 , tc.Product_Group_Desc
			 , tc.Claim_Incurred_Date
			 , tc.Claim_Number
			 , tc.Benefit_Number
			 , tc.Claim_Source
			 , tc.Premium_QS_Treaty_ID
			 , tc.Premium_QS_Treaty_Name
			 , tc.Premium_Projection_Group
			 , tc.Premium_SS_Treaty_ID
			 , tc.Premium_SS_Treaty_Name
			 , tc.Claim_QS_Treaty_ID
			 , tc.Claim_QS_Treaty_Name
			 , tc.Claim_QS_Treaty_Reins_Percent
			 , tc.Claim_QS_Treaty_Reins_Exposure
			 , tc.Claim_SS_Treaty_ID
			 , tc.Claim_SS_Treaty_Name
			 , tc.Claim_SS_Treaty_Reins_Percent
			 , tc.Claim_SS_Treaty_Reins_Exposure
			 , tc.Exception_Reason
		FROM #temp_treaty_mismatch AS tc
		UNION ALL
		SELECT tc.EDW_Contract_Id
			 , tc.EDW_Contract_Key
			 , tc.EDW_Contract_Risk_Key
			 , tc.EDW_Product_Code
			 , tc.EDW_Product_Option_Code
			 , tc.Product_Group_Desc
			 , tc.Claim_Incurred_Date
			 , tc.Claim_Number
			 , tc.Benefit_Number
			 , tc.Claim_Source
			 , tc.Premium_QS_Treaty_ID
			 , tc.Premium_QS_Treaty_Name
			 , tc.Premium_Projection_Group
			 , tc.Premium_SS_Treaty_ID
			 , tc.Premium_SS_Treaty_Name
			 , tc.Claim_QS_Treaty_ID
			 , tc.Claim_QS_Treaty_Name
			 , tc.Claim_QS_Treaty_Reins_Percent
			 , tc.Claim_QS_Treaty_Reins_Exposure
			 , tc.Claim_SS_Treaty_ID
			 , tc.Claim_SS_Treaty_Name
			 , tc.Claim_SS_Treaty_Reins_Percent
			 , tc.Claim_SS_Treaty_Reins_Exposure
			 , tc.Exception_Reason
		FROM #temp_no_premium AS tc
	) AS un
	OUTER APPLY
	(
		SELECT TOP(1)
			--, ROW_NUMBER() OVER(PARTITION BY inf.CONTRACT_ID,inf.CONTRACT_RISK_KEY ORDER BY inf.CENSUS_DATE DESC) AS Rn
			MAX(inf.CENSUS_DATE) OVER(PARTITION BY inf.CONTRACT_KEY,inf.CONTRACT_RISK_KEY) AS Benefit_Last_Seen_Date
			, MIN(inf.CENSUS_DATE) OVER(PARTITION BY inf.CONTRACT_KEY,inf.CONTRACT_RISK_KEY) AS Benefit_First_Seen_Date
		FROM dbo.INFORCE AS inf
		WHERE inf.CONTRACT_KEY = un.EDW_Contract_Key
			AND inf.CONTRACT_RISK_KEY = un.EDW_Contract_Risk_Key
			AND inf.CENSUS_DATE <= @Census_Date
	) AS i
	--WHERE i.Rn = 1

	RETURN 0
 END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_ConvIdentification_TreatyIDUpdate]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: 30-09-2020
-- Description:	GUI Procedure to facilitate updation of the treaty id column in inforce for Inter pas Conversion records
-- =============================================
CREATE PROCEDURE [dbo].[usp_GUI_ConvIdentification_TreatyIDUpdate] 
with EXECUTE as SELF

AS
BEGIN


	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0
 Declare @ProcessingMonthYear	date = null
 Declare @ProcessLogId int = 0
	

BEGIN TRY


 
 select @ProcessingMonthYear = MAX(IDS_Census_Date),
 @ProcessLogId = Max(Process_Log_ID)
 from ConvIdentification

 --print @ProcessLogId
 --print @ProcessingMonthYear
 
 BEGIN TRAN T1

 -- Update Inforce - Treaty ID Update

		update I
		set I.QS_Treaty_id = T.Treaty_Id 		
		from Inforce I
		join ConvIdentification_Temp C
		on
		 C.On_Contract_id =	I.CONTRACT_ID
		and C.On_Product_Code = I.PRODUCT_CODE
		and C.On_Product_Option_Code = I.PRODUCT_OPTION_CODE
		and C.IDS_Census_Date = I.CENSUS_DATE
		and C.Valid_Conversion_Indicator = 'YES'		
		join Reins_Treaty T
		on C.IDS_Census_Date < T.Treaty_End_Date
		where C.IDS_Census_Date = @ProcessingMonthYear
		and T.Treaty_Name = 'Removed from GenRe QS'

		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 COMMIT TRAN T1

 -- Updating the claims Listing table - Treaty ID update

	set @return_value = 0
	EXEC @return_value = [dbo].[usp_Claims_ListingTableTreatyIDUpdate] @ProcessingMonthYear, @ProcessLogId

	set @UpdateRowCount = @UpdateRowCount + @return_value	
	
select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Generate_GenRe_PremBdx]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure [dbo].[usp_GUI_Generate_GenRe_PremBdx](@Census_Date date,@Error_Found BIT OUTPUT)
	WITH EXECUTE AS SELF
AS
Begin

	SET NOCOUNT ON;
	DECLARE @Can_Run_Message NVARCHAR(255)
	DECLARE @Batch_ID int = 0
	DECLARE @Task_Status varchar(30) = ''
	DECLARE @InsertRowCount int = 0
	DECLARE @UpdateRowCount int = 0
	DECLARE @DeleteRowCount int = 0


	DROP TABLE IF EXISTS #temp_errors

	create table #temp_errors
	(
	 ErrorMessage nvarchar(255)
	)

	Begin Try

	-- Check if schedule is in sign off held status for the month being passed as param
	-- check if batch id available for the month being passed.

	select @Batch_ID = Batch_ID 
	from IDS_Control.dbo.CTL_Active_Task_Param 
	where Task_Name = 'Sign_Off_Complete' 
	and Param_Name = 'CENSUS_DATE                                       '
	and Param_Value = @Census_Date

	if @Batch_ID = 0 
	BEGIN
		--SELECT @Can_Run_Message = N'Schedule not found for the Month selected.'	
		INSERT INTO #temp_errors values(N'Schedule not found for the Month selected.')
		--RAISERROR(@Can_Run_Message, 16, 1);		
	END
	
	if @Batch_ID > 0 
	BEGIN
	-- Get the status of the task of sign off for the batch

	select @Task_Status = Task_status 
	from IDS_Control.dbo.CTL_Active_Task_Config 
	where Batch_ID = @Batch_ID and Task_Name = 'Sign_Off_Complete'

	END 

	if @Task_Status <> 'Held'
	BEGIN
		--SELECT @Can_Run_Message = N'The Prem Gen Re Bdx are already generated for the month ' + convert(varchar(10),@census_Date)
		INSERT INTO #temp_errors values(N'The Prem Gen Re Bdx are already generated for the month ' + convert(varchar(10),@census_Date))
		--RAISERROR(@Can_Run_Message, 16, 1);		
	END

	-- if valid month - update the status on sign off task for Reins_premium_monthly task to generate the Premium Bdx.
	if @Task_Status = 'Held'
	BEGIN
		Begin Tran T1
	
			update IDS_Control.dbo.CTL_Active_Task_Config 
			set Task_Status = 'Completed'
			where Batch_ID = @Batch_ID 
			and Task_Name = 'Sign_Off_Complete'

			set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

			update IDS_Control.dbo.CTL_Active_Task_Config
			set Task_Status = 'Ready'
			where Batch_ID = @Batch_ID
			and Task_Name in (select distinct Task_Name from IDS_Control.dbo.CTL_Active_Task_Dependency
			where Parent_Task_Name = 'Sign_Off_Complete'
			and batch_id = @Batch_ID)

			set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		Commit Tran T1


		--select @Can_Run_Message = N'The schedule triggered to generate the Premium Gen Re Bdx for the month ' + convert(varchar(10),@census_Date)
		--INSERT INTO #temp_errors values(@InsertRowCount, N'The schedule triggered to generate the Premium Gen Re Bdx for the month ' + convert(varchar(10),@census_Date))
	
	END

	SELECT @Error_Found = COUNT(*) FROM #temp_errors

	select ErrorMessage from #temp_errors
	
	Return 0

	End Try
	Begin Catch
		If @@TRANCOUNT >0
		Rollback Tran T1;
		Throw
	End Catch
End

GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Generate_MunichRe_PremBdx]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE Procedure [dbo].[usp_GUI_Generate_MunichRe_PremBdx](@Census_Date date,@Error_Found BIT OUTPUT)
	WITH EXECUTE AS SELF
AS
Begin

	SET NOCOUNT ON;
	DECLARE @Can_Run_Message NVARCHAR(255)
	DECLARE @Batch_ID int = 0
	DECLARE @Task_Status varchar(30) = ''
	DECLARE @InsertRowCount int = 0
	DECLARE @UpdateRowCount int = 0
	DECLARE @DeleteRowCount int = 0


	DROP TABLE IF EXISTS #temp_errors

	create table #temp_errors
	(
	 ErrorMessage nvarchar(255)
	)

	Begin Try

	-- Check if schedule is in sign off held status for the month being passed as param
	-- check if batch id available for the month being passed.

	select @Batch_ID = Batch_ID 
	from IDS_Control.dbo.CTL_Active_Task_Param 
	where Task_Name = 'Sign_Off_MunichRe_Complete' 
	and Param_Name = 'CENSUS_DATE                                       '
	and Param_Value = @Census_Date

	if @Batch_ID = 0 
	BEGIN

		INSERT INTO #temp_errors values(N'Schedule not found for the Month selected.')
	
	END
	
	if @Batch_ID > 0 
	BEGIN
	-- Get the status of the task of sign off for the batch

	select @Task_Status = Task_status 
	from IDS_Control.dbo.CTL_Active_Task_Config 
	where Batch_ID = @Batch_ID and Task_Name = 'Sign_Off_MunichRe_Complete'

	END 

	if @Task_Status <> 'Held'
	BEGIN
	
		INSERT INTO #temp_errors values(N'The Prem Gen Re Bdx are already generated for the month ' + convert(varchar(10),@census_Date))

	END

	-- if valid month - update the status on sign off task for Reins_premium_monthly task to generate the Premium Bdx.
	if @Task_Status = 'Held'
	BEGIN
		Begin Tran T1
	
			update IDS_Control.dbo.CTL_Active_Task_Config 
			set Task_Status = 'Completed'
			where Batch_ID = @Batch_ID 
			and Task_Name = 'Sign_Off_MunichRe_Complete'

			set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

			update IDS_Control.dbo.CTL_Active_Task_Config
			set Task_Status = 'Ready'
			where Batch_ID = @Batch_ID
			and Task_Name in (select distinct Task_Name from IDS_Control.dbo.CTL_Active_Task_Dependency
			where Parent_Task_Name = 'Sign_Off_MunichRe_Complete'
			and batch_id = @Batch_ID)

			set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		Commit Tran T1

	
	END

	SELECT @Error_Found = COUNT(*) FROM #temp_errors

	select ErrorMessage from #temp_errors
	
	Return 0

	End Try
	Begin Catch
		If @@TRANCOUNT >0
		Rollback Tran T1;
		Throw
	End Catch
End

GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Get_BenefitsByInsuredNames]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Description: Extracts data from from dbo.INFORCE table by Insured Name

Usage      : 
				DECLARE @Census_Date DATE = '2017-11-30',
						@InsuredName_Values NVARCHAR(4000) = N'xxxxx,xxxxxxxxxxxx,xxx',
						@Delimiter NCHAR(1) = N','
				EXECUTE dbo.usp_GUI_Get_BenefitsByInsuredNames @Census_Date, @InsuredName_Values, @Delimiter

When		Who			Why
2020-10-19	THNSYQ		RGU-1019	Initial version
=============================================*/
CREATE PROCEDURE [dbo].[usp_GUI_Get_BenefitsByInsuredNames]
	 @Census_Date DATE,
	 @InsuredName_Values NVARCHAR(4000),
	 @Delimiter NCHAR(1)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT DISTINCT
			i.INFORCE_ID
			, i.FIRST_NAME
			, i.MIDDLE_NAME
			, i.SURNAME
			, i.CENSUS_DATE
			, i.CONTRACT_ID
			, i.CONTRACT_RISK_KEY
			, i.PROJECTION_GROUP
			, i.PRODUCT_CODE
			, i.PRODUCT_OPTION_CODE
			, i.QS_ANN_PREM_IF
			, i.QS_AMT_REINP_CURR
			, i.QS_AMT_REINP_BCKD
			, i.QS_AMT_IC_BASE
			, i.QS_AMT_IC_INCR
			, i.QS_AMT_OC_CURR
			, i.QS_AMT_OC_BCKD
			, i.QS_AMT_OCX_CURR
			, i.QS_AMT_OCX_BCKD
			, i.QS_AMT_LAPSE_RVS
			, i.SS_ANN_PREM
			, i.SS_PREM_CURR
			, i.SS_PREM_BCKD
	FROM dbo.INFORCE AS i
		INNER JOIN
			(
				SELECT [Data] AS Search_Value
				FROM dbo.Split(@InsuredName_Values, @Delimiter)
				GROUP BY [Data]
			) AS c
			ON i.CENSUS_DATE = @Census_Date
				AND
					(
						c.Search_Value = i.FIRST_NAME
						OR c.Search_Value = i.MIDDLE_NAME
						OR c.Search_Value = i.SURNAME
					)

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Get_BenefitsByPolicies]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Description: Extracts data from from dbo.INFORCE table by Policies

Usage      : 
				DECLARE @Census_Date DATE = '2017-11-30',
						@PolicyId_Values NVARCHAR(4000) = N'NH11507941,NH13168851',
						@Delimiter NCHAR(1) = N','
				EXECUTE dbo.usp_GUI_Get_BenefitsByPolicies @Census_Date, @PolicyId_Values, @Delimiter

When		Who			Why
2020-10-19	THNSYQ		RGU-1019	Initial version
=============================================*/
CREATE PROCEDURE [dbo].[usp_GUI_Get_BenefitsByPolicies]
	 @Census_Date DATE,
	 @PolicyId_Values NVARCHAR(4000),
	 @Delimiter NCHAR(1)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT DISTINCT
			i.INFORCE_ID
			, i.FIRST_NAME
			, i.MIDDLE_NAME
			, i.SURNAME
			, i.CENSUS_DATE
			, i.CONTRACT_ID
			, i.CONTRACT_RISK_KEY
			, i.PROJECTION_GROUP
			, i.PRODUCT_CODE
			, i.PRODUCT_OPTION_CODE
			, i.QS_ANN_PREM_IF
			, i.QS_AMT_REINP_CURR
			, i.QS_AMT_REINP_BCKD
			, i.QS_AMT_IC_BASE
			, i.QS_AMT_IC_INCR
			, i.QS_AMT_OC_CURR
			, i.QS_AMT_OC_BCKD
			, i.QS_AMT_OCX_CURR
			, i.QS_AMT_OCX_BCKD
			, i.QS_AMT_LAPSE_RVS
			, i.SS_ANN_PREM
			, i.SS_PREM_CURR
			, i.SS_PREM_BCKD
	FROM dbo.INFORCE AS i
		INNER JOIN
			(
				SELECT [Data] AS Search_Value
				FROM dbo.Split(@PolicyId_Values, @Delimiter)
				GROUP BY [Data]
			) AS c
			ON i.CENSUS_DATE = @Census_Date
				AND i.CONTRACT_ID = c.Search_Value

END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Insert_Signatures]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[usp_GUI_Insert_Signatures](@Action varchar(30),@SignOff varchar(30),@Census_Date date)
AS
Begin

	Begin Try
	
		Begin Tran T1
			If (@Action='Insert')
			Insert into dbo.SIGNATURES(SIGN_OFF,CENSUS_DATE,UserId,COMPUTER,TIME_STAMP) 
			Values(@SignOff, @Census_Date, LEFT(stuff(suser_sname(), 1, charindex('\', suser_sname()), ''), 6), LEFT(HOST_NAME(), 10), GETDATE())
			Else
			Update dbo.SIGNATURES
			Set  UserId=LEFT(STUFF(suser_sname(), 1, charindex('\', suser_sname()), ''), 6)
				,COMPUTER=LEFT(Host_name(), 10)
				,TIME_STAMP=getdate()
				where Sign_Off=@SignOff and CENSUS_DATE=@Census_Date
		Commit Tran T1
	End Try
	Begin Catch
		If @@TRANCOUNT >0
		Rollback Tran T1;
		Throw
	End Catch
End

--select * from signatures order by 1 desc
--delete from Signatures where ID>=12110
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Load_Gen_Re_Adjustment]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Description: Performs ETL of Adustments. Deletes existing Adjustments if allowed.

Usage      : EXEC dbo.usp_GUI_Load_Gen_Re_Adjustment

When		Who			Why
2020-10-12	THNSYQ		RGU-1020	Initial version
2020-11-04	THNSYQ		RGU-1085	Fixed upload of empty file
2020-11-04	THNSYQ		RGU-1084	Handle nullable columns in staging table
2020-11-16	THNSYQ		RGU-1086	Added checking for already loaded adjustments
=============================================*/
CREATE PROCEDURE [dbo].[usp_GUI_Load_Gen_Re_Adjustment]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@Inforce_Adjusted_Id INT --FK
		, @Adjustment_Count INT
		, @With_Result_Set BIT = 0
		, @Error_Found BIT = 0
		, @Can_Load_Message NVARCHAR(255)
		, @Census_Date_Prev DATE
		, @Census_Date_Next DATE
		, @Census_Date_Ctl DATE
		, @Census_Date_Min DATE;

	BEGIN TRY

		-- Get converted Adjustments data from Staging

		EXEC dbo.usp_GUI_Validate_Gen_Re_Adjustment @With_Result_Set, @Error_Found OUTPUT

		IF @Error_Found = 1
		BEGIN
			SELECT @Can_Load_Message = N'Data loaded from adjustment file is invalid'
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		SELECT @Census_Date_Ctl = dbo.udf_Get_Stg_Gen_Re_Adjustment_Census_Date()
		
		IF @Census_Date_Ctl IS NULL
		BEGIN
			SELECT @Can_Load_Message = N'Census date is not specified in adjustment file '
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		SELECT @Census_Date_Min = MIN(Census_Date) FROM dbo.udf_Get_Gen_Re_Adjustment()

		IF @Census_Date_Ctl <> ISNULL(@Census_Date_Min, @Census_Date_Ctl)
		BEGIN
			SELECT @Can_Load_Message = N'Census date in file name does not match Census date in adjustment data'
			RAISERROR(@Can_Load_Message, 16, 1);
		END
		
		-- Check for existing Sign Offs. Abort if exits

		IF ((dbo.udf_Is_Adjustment_Uploaded(@Census_Date_Ctl) & dbo.udf_Is_Adjustment_Signed_Off(@Census_Date_Ctl)) = 1)
		BEGIN
			SELECT @Can_Load_Message = N'Can''t overwrite adjustments because it is already signed off'
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		-- Check Previous month

		SELECT @Census_Date_Prev = Last_Day_Of_Month FROM dbo.udf_Get_Month_Dates(@Census_Date_Ctl, -1)

		IF (dbo.udf_Is_Adjustment_Uploaded(@Census_Date_Prev) = 1 AND dbo.udf_Is_Adjustment_Signed_Off(@Census_Date_Prev) = 0)
		BEGIN
			SELECT @Can_Load_Message = FORMATMESSAGE(N'Adjustments is not signed off for previous Census Date %s', CONVERT(VARCHAR(10), @Census_Date_Prev, 121))
			RAISERROR(@Can_Load_Message, 16, 1);
		END

		-- Check Next month

		SELECT @Census_Date_Next = Last_Day_Of_Month FROM dbo.udf_Get_Month_Dates(@Census_Date_Ctl, 1)

		IF (dbo.udf_Is_Adjustment_Uploaded(@Census_Date_Next) = 1)
		BEGIN
			SELECT @Can_Load_Message = FORMATMESSAGE(N'Adjustments is already loaded for the next Census Date %s', CONVERT(VARCHAR(10), @Census_Date_Next, 121))
			RAISERROR(@Can_Load_Message, 16, 1);
		END
		
		BEGIN TRAN
			
			-- Delete data from previous uploads for Census Date

			SELECT @Inforce_Adjusted_Id = MIN(ia.Inforce_Adjusted_Id)
			FROM dbo.Inforce_Adjusted AS ia
			WHERE ia.Census_Date = @Census_Date_Ctl

			DELETE FROM dbo.Inforce_Adjusted_detail
			WHERE Inforce_Adjusted_Id = @Inforce_Adjusted_Id

			DELETE FROM dbo.Inforce_Adjusted
			WHERE Inforce_Adjusted_Id = @Inforce_Adjusted_Id

			-- Insert new data
		
			INSERT INTO dbo.Inforce_Adjusted
			(
				Census_Date
			)
			VALUES (@Census_Date_Ctl)

			SELECT @Inforce_Adjusted_Id = SCOPE_IDENTITY()

			INSERT INTO dbo.Inforce_Adjusted_Detail
			(
				Inforce_Adjusted_Id,
				INFORCE_ID,
				CONTRACT_ID,
				CONTRACT_RISK_KEY,
				PROJECTION_GROUP,
				PRODUCT_CODE,
				PRODUCT_OPTION_CODE,
				QS_ANN_PREM_IF,
				QS_AMT_REINP_CURR,
				QS_AMT_REINP_BCKD,
				QS_AMT_IC_BASE,
				QS_AMT_IC_INCR,
				QS_AMT_OC_CURR,
				QS_AMT_OC_BCKD,
				QS_AMT_OCX_CURR,
				QS_AMT_OCX_BCKD,
				QS_AMT_LAPSE_RVS,
				SS_ANN_PREM,
				SS_PREM_CURR,
				SS_PREM_BCKD,
				ADJUSTMENT_TYPE_ID,
				ADJUSTMENT_COMMENT,
				ADJUSTMENT_REASON
			)

			SELECT @Inforce_Adjusted_Id,
				   i.INFORCE_ID,
				   a.CONTRACT_ID,
				   a.CONTRACT_RISK_KEY,
				   a.PROJECTION_GROUP,
				   a.PRODUCT_CODE,
				   a.PRODUCT_OPTION_CODE,
				   a.QS_ANN_PREM_IF,
				   a.QS_AMT_REINP_CURR,
				   a.QS_AMT_REINP_BCKD,
				   a.QS_AMT_IC_BASE,
				   a.QS_AMT_IC_INCR,
				   a.QS_AMT_OC_CURR,
				   a.QS_AMT_OC_BCKD,
				   a.QS_AMT_OCX_CURR,
				   a.QS_AMT_OCX_BCKD,
				   a.QS_AMT_LAPSE_RVS,
				   a.SS_ANN_PREM,
				   a.SS_PREM_CURR,
				   a.SS_PREM_BCKD,
				   rat.Ref_Adjustment_Type_Id,
				   a.ADJUSTMENT_COMMENT,
				   a.ADJUSTMENT_REASON
			FROM dbo.udf_Get_Gen_Re_Adjustment() AS a
			LEFT JOIN dbo.Ref_Adjustment_Type AS rat
				ON rat.Code = a.ADJUSTMENT_TYPE

			LEFT JOIN dbo.INFORCE AS i
				ON i.CENSUS_DATE = a.CENSUS_DATE
				AND i.CONTRACT_ID = a.CONTRACT_ID
				AND i.CONTRACT_RISK_KEY = a.CONTRACT_RISK_KEY

			SET @Adjustment_Count = @@ROWCOUNT
			
			UPDATE dbo.Inforce_Adjusted
				SET Adjustment_Count = @Adjustment_Count
			WHERE Inforce_Adjusted_Id = @Inforce_Adjusted_Id

		COMMIT

		RETURN 0
	
	END TRY
	BEGIN CATCH

		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;

	
	END CATCH


END
GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Load_MunichRe_IPClmFinalView]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[usp_GUI_Load_MunichRe_IPClmFinalView] 
	@ProcessingMonthYear	datetime

	WITH EXECUTE AS SELF
AS

BEGIN
	SET NOCOUNT ON
		
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0

	 BEGIN TRY

    -- Insert statements for procedure here
	delete from [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_vwVersion]
	delete from [dbo].[M_WEBXL_AMP_IP_Claims_Listing_vwVersion]
	

 BEGIN TRAN Tran1;

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_vwVersion]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAID_FROM_DATE]
           ,[PAID_TO_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[OFFSET_IND]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAID_FROM_DATE]
      ,[PAID_TO_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[OFFSET_IND]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT] 
  FROM [dbo].[M_WEBXL_AMP_IP_Claims_Bdx]
  where [Month_Effective_Date] = @ProcessingMonthYear

   Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

 COMMIT TRAN Tran1;

 BEGIN TRAN TRAN2;

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Listing_vwVersion]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[SEX]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[CRNT_SUM_INSURED_AMT]
           ,[CRNT_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[SEX]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[CRNT_SUM_INSURED_AMT]
      ,[CRNT_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
  FROM [dbo].[M_WEBXL_AMP_IP_Claims_Listing]
  where [Month_Effective_Date] = @ProcessingMonthYear

     Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

 COMMIT TRAN TRAN2;


	
Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Tran1;
	ROLLBACK TRAN Tran2;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH				
				
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Load_MunichRe_LSClmFinalView]    Script Date: 1/05/2022 3:55:27 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE procedure [dbo].[usp_GUI_Load_MunichRe_LSClmFinalView] 
	@ProcessingMonthYear	datetime

	WITH EXECUTE AS SELF
AS

BEGIN
	SET NOCOUNT ON
		
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0

	 BEGIN TRY

    -- Insert statements for procedure here
	delete from [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_vwVersion]
	delete from [dbo].[M_WEBXL_AMP_LS_Claims_Listing_vwVersion]
	

 BEGIN TRAN TRAN1;

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_vwVersion]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAY_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAY_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT]
  FROM [dbo].[M_WEBXL_AMP_LS_Claims_Bdx]
  where [Month_Effective_Date] = @ProcessingMonthYear

    Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

 COMMIT TRAN TRAN1;

 BEGIN TRAN TRAN2;

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Listing_vwVersion]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
  FROM [dbo].[M_WEBXL_AMP_LS_Claims_Listing]
  where [Month_Effective_Date] = @ProcessingMonthYear

       Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

 COMMIT TRAN TRAN2;

	
Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Tran1;
	ROLLBACK TRAN Tran2;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH				
				
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_GUI_Validate_Gen_Re_Adjustment]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* =============================================
Description: Performs data validation of Adjustments loaded from file into staging table

Usage      : 
				DECLARE @With_Result_Set BIT = 1, @Error_Found BIT
				EXEC dbo.usp_GUI_Validate_Gen_Re_Adjustment @With_Result_Set, @Error_Found OUTPUT
				PRINT @Error_Found

When		Who			Why
2020-10-12	THNSYQ		RGU-1020	Initial version
=============================================*/
CREATE PROCEDURE [dbo].[usp_GUI_Validate_Gen_Re_Adjustment](@With_Result_Set BIT, @Error_Found BIT OUTPUT)
AS
BEGIN
	SET NOCOUNT ON;

	DROP TABLE IF EXISTS #temp_stage_adj
	DROP TABLE IF EXISTS #temp_stage_adj_inforce
	DROP TABLE IF EXISTS #temp_errors

	-- Cache converted data
	SELECT a.Stg_Gen_Re_Adjustment_Id,
           --a.Ctl_Loaded_File_Id,
           a.CENSUS_DATE,
           a.CONTRACT_ID,
           a.CONTRACT_RISK_KEY,
           a.PROJECTION_GROUP,
           a.PRODUCT_CODE,
           a.PRODUCT_OPTION_CODE,
           a.QS_ANN_PREM_IF,
           a.QS_AMT_REINP_CURR,
           a.QS_AMT_REINP_BCKD,
           a.QS_AMT_IC_BASE,
           a.QS_AMT_IC_INCR,
           a.QS_AMT_OC_CURR,
           a.QS_AMT_OC_BCKD,
           a.QS_AMT_OCX_CURR,
           a.QS_AMT_OCX_BCKD,
           a.QS_AMT_LAPSE_RVS,
           a.SS_ANN_PREM,
           a.SS_PREM_CURR,
           a.SS_PREM_BCKD,
           a.ADJUSTMENT_TYPE,
           a.ADJUSTMENT_COMMENT,
           a.ADJUSTMENT_REASON,
           --a.Created_Date_Time,
           --a.Created_By,
           a.INFO_CENSUS_DATE,
           a.INFO_CONTRACT_ID,
           a.INFO_CONTRACT_RISK_KEY,
           a.INFO_PROJECTION_GROUP,
           a.INFO_PRODUCT_CODE,
           a.INFO_PRODUCT_OPTION_CODE,
           a.INFO_QS_ANN_PREM_IF,
           a.INFO_QS_AMT_REINP_CURR,
           a.INFO_QS_AMT_REINP_BCKD,
           a.INFO_QS_AMT_IC_BASE,
           a.INFO_QS_AMT_IC_INCR,
           a.INFO_QS_AMT_OC_CURR,
           a.INFO_QS_AMT_OC_BCKD,
           a.INFO_QS_AMT_OCX_CURR,
           a.INFO_QS_AMT_OCX_BCKD,
           a.INFO_QS_AMT_LAPSE_RVS,
           a.INFO_SS_ANN_PREM,
           a.INFO_SS_PREM_CURR,
           a.INFO_SS_PREM_BCKD,
           a.INFO_ADJUSTMENT_TYPE,
           --a.INFO_ADJUSTMENT_COMMENT,
           a.INFO_ADJUSTMENT_REASON
	INTO #temp_stage_adj
	FROM dbo.udf_Get_Gen_Re_Adjustment() AS a

	-- Get data conversion errors

	SELECT Stg_Gen_Re_Adjustment_Id, 
			Validation_Error
	INTO #temp_errors
	FROM
	(
		SELECT *
		FROM #temp_stage_adj
	) AS p
	UNPIVOT
	(Validation_Error FOR Validated_Columns IN 
		(
			INFO_CENSUS_DATE,
			INFO_CONTRACT_ID,
			INFO_CONTRACT_RISK_KEY,
			INFO_PROJECTION_GROUP,
			INFO_PRODUCT_CODE,
			INFO_PRODUCT_OPTION_CODE,
			INFO_QS_ANN_PREM_IF,
			INFO_QS_AMT_REINP_CURR,
			INFO_QS_AMT_REINP_BCKD,
			INFO_QS_AMT_IC_BASE,
			INFO_QS_AMT_IC_INCR,
			INFO_QS_AMT_OC_CURR,
			INFO_QS_AMT_OC_BCKD,
			INFO_QS_AMT_OCX_CURR,
			INFO_QS_AMT_OCX_BCKD,
			INFO_QS_AMT_LAPSE_RVS,
			INFO_SS_ANN_PREM,
			INFO_SS_PREM_CURR,
			INFO_SS_PREM_BCKD,
			INFO_ADJUSTMENT_TYPE,
			--INFO_ADJUSTMENT_COMMENT,
			INFO_ADJUSTMENT_REASON
		) 
	) AS unpvt

	INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error)
	SELECT 
		--CONTRACT_RISK_KEY
		--, COUNT(*) AS DUP_CONTRACT_RISK_KEY
		MAX(Stg_Gen_Re_Adjustment_Id) AS Stg_Gen_Re_Adjustment_Id
		, CONCAT('CONTRACT_RISK_KEY [', CAST(CONTRACT_RISK_KEY AS INT), '] appears ', CAST(COUNT(*) AS INT), ' times') AS Validation_Error
	FROM #temp_stage_adj
	GROUP BY CONTRACT_RISK_KEY
	HAVING COUNT(*) > 1

	-- Get Validation Errors

	SELECT 
			ROW_NUMBER() OVER(ORDER BY(SELECT 1)) AS ID
		   , t.Stg_Gen_Re_Adjustment_Id
		   --, t.Ctl_Loaded_File_Id
		   , t.CENSUS_DATE
		   , t.CONTRACT_ID
		   , t.CONTRACT_RISK_KEY
		   , t.PROJECTION_GROUP
		   , t.PRODUCT_CODE
		   , t.PRODUCT_OPTION_CODE
		   , t.QS_ANN_PREM_IF
		   , t.QS_AMT_REINP_CURR
		   , t.QS_AMT_REINP_BCKD
		   , t.QS_AMT_IC_BASE
		   , t.QS_AMT_IC_INCR
		   , t.QS_AMT_OC_CURR
		   , t.QS_AMT_OC_BCKD
		   , t.QS_AMT_OCX_CURR
		   , t.QS_AMT_OCX_BCKD
		   , t.QS_AMT_LAPSE_RVS
		   , t.SS_ANN_PREM
		   , t.SS_PREM_CURR
		   , t.SS_PREM_BCKD
		   , t.ADJUSTMENT_TYPE
		   , t.ADJUSTMENT_COMMENT
		   , t.ADJUSTMENT_REASON
		   --, t.Created_Date_Time
		   --, t.Created_By
	   
		   , i.CONTRACT_RISK_KEY	AS INFORCE_CONTRACT_RISK_KEY
		   , i.PROJECTION_GROUP		AS INFORCE_PROJECTION_GROUP
		   , i.PRODUCT_CODE			AS INFORCE_PRODUCT_CODE		
		   , i.PRODUCT_OPTION_CODE	AS INFORCE_PRODUCT_OPTION_CODE
		   --, i.QS_ANN_PREM_IF		AS INFORCE_QS_ANN_PREM_IF		
		   --, i.QS_AMT_REINP_CURR	AS INFORCE_QS_AMT_REINP_CURR
		   --, i.QS_AMT_REINP_BCKD	AS INFORCE_QS_AMT_REINP_BCKD
		   --, i.QS_AMT_IC_BASE		AS INFORCE_QS_AMT_IC_BASE		
		   --, i.QS_AMT_IC_INCR		AS INFORCE_QS_AMT_IC_INCR		
		   --, i.QS_AMT_OC_CURR		AS INFORCE_QS_AMT_OC_CURR		
		   --, i.QS_AMT_OC_BCKD		AS INFORCE_QS_AMT_OC_BCKD		
		   --, i.QS_AMT_OCX_CURR		AS INFORCE_QS_AMT_OCX_CURR	
		   --, i.QS_AMT_OCX_BCKD		AS INFORCE_QS_AMT_OCX_BCKD	
		   --, i.QS_AMT_LAPSE_RVS		AS INFORCE_QS_AMT_LAPSE_RVS
		   --, i.SS_ANN_PREM			AS INFORCE_SS_ANN_PREM		
		   --, i.SS_PREM_CURR			AS INFORCE_SS_PREM_CURR		
		   --, i.SS_PREM_BCKD			AS INFORCE_SS_PREM_BCKD

	INTO #temp_stage_adj_inforce
	FROM #temp_stage_adj AS t
	LEFT JOIN dbo.INFORCE AS i
		ON i.CENSUS_DATE = t.CENSUS_DATE
		AND i.CONTRACT_ID = t.CONTRACT_ID
		AND i.CONTRACT_RISK_KEY = t.CONTRACT_RISK_KEY

	DECLARE 
		@ID INT = 1,
		@Stg_Gen_Re_Adjustment_Id INT,
		--@Ctl_Loaded_File_Id INT,
		--@CENSUS_DATE DATE,
		--@CONTRACT_ID NVARCHAR(11),
		@CONTRACT_RISK_KEY INT,
		@PROJECTION_GROUP NVARCHAR(15),
		@PRODUCT_CODE NVARCHAR(20),
		@PRODUCT_OPTION_CODE NVARCHAR(20),
		--@ADJUSTMENT_TYPE VARCHAR(6),
		--@ADJUSTMENT_COMMENT VARCHAR(255),
		--@ADJUSTMENT_REASON VARCHAR(255),
		--@Created_Date_Time DATETIME,
		--@Created_By VARCHAR(30),
		@INFORCE_CONTRACT_RISK_KEY INT,
		@INFORCE_PROJECTION_GROUP NVARCHAR(15),
		@INFORCE_PRODUCT_CODE NVARCHAR(20),
		@INFORCE_PRODUCT_OPTION_CODE NVARCHAR(20),

		@Census_Date_One DATE,
		@Census_Date_Next DATE

	--SELECT @Census_Date_One = MIN(CENSUS_DATE)
	--	, @Census_Date_Nex = MAX(CENSUS_DATE)
	--FROM #temp_stage_adj
	
	--IF @Census_Date_Min <> @Census_Date_Max
	--	INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('Multiple Census Dates are found [', @INFORCE_PROJECTION_GROUP, '] to [',@PROJECTION_GROUP,'] for CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY))
	
	
	WHILE EXISTS(SELECT 1 FROM #temp_stage_adj_inforce WHERE ID = @ID)
	BEGIN
		SELECT @ID							 = t.ID
			   , @Stg_Gen_Re_Adjustment_Id		     = t.Stg_Gen_Re_Adjustment_Id
			   --, @Ctl_Loaded_File_Id			     = t.Ctl_Loaded_File_Id
			   --, @CENSUS_DATE					     = t.CENSUS_DATE
			   --, @CONTRACT_ID					     = t.CONTRACT_ID
			   , @CONTRACT_RISK_KEY				     = t.CONTRACT_RISK_KEY
			   , @PROJECTION_GROUP				     = t.PROJECTION_GROUP
			   , @PRODUCT_CODE					     = t.PRODUCT_CODE
			   , @PRODUCT_OPTION_CODE			     = t.PRODUCT_OPTION_CODE

			   --, @ADJUSTMENT_TYPE				     = t.ADJUSTMENT_TYPE
			   --, @ADJUSTMENT_COMMENT			     = t.ADJUSTMENT_COMMENT
			   --, @ADJUSTMENT_REASON				     = t.ADJUSTMENT_REASON
			   --, @Created_Date_Time				     = t.Created_Date_Time
			   --, @Created_By					     = t.Created_By
			   , @INFORCE_CONTRACT_RISK_KEY		     = t.INFORCE_CONTRACT_RISK_KEY
			   , @INFORCE_PROJECTION_GROUP		     = t.INFORCE_PROJECTION_GROUP
			   , @INFORCE_PRODUCT_CODE			     = t.INFORCE_PRODUCT_CODE
			   , @INFORCE_PRODUCT_OPTION_CODE		 = t.INFORCE_PRODUCT_OPTION_CODE

			   , @Census_Date_One = CASE WHEN @ID = 1 
										THEN t.CENSUS_DATE
										ELSE @Census_Date_One
									END
                                    
			   , @Census_Date_Next = t.CENSUS_DATE
		FROM #temp_stage_adj_inforce AS t 
		WHERE t.ID = @ID

		IF @INFORCE_CONTRACT_RISK_KEY IS NOT NULL
		BEGIN
			-- If record is found in INFORCE then validate values
			
			-- Only one Census Date is allowed
			IF @Census_Date_One <> @Census_Date_Next
				INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('Multiple Census Dates are found [', CONVERT(DATE, @Census_Date_Next, 121) , '] excpected [', CONVERT(DATE, @Census_Date_One, 121),'] for CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY))
		
			-- These columns are not supposed to change
			IF @PROJECTION_GROUP <> @INFORCE_PROJECTION_GROUP
				INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('PROJECTION_GROUP has changed from [', @INFORCE_PROJECTION_GROUP, '] to [',@PROJECTION_GROUP,'] for CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY))
			IF @PRODUCT_CODE <> @INFORCE_PRODUCT_CODE
				INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('PRODUCT_CODE has changed from [', @INFORCE_PRODUCT_CODE, '] to [',@PRODUCT_CODE,'] for CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY))
			IF @PRODUCT_OPTION_CODE <> @INFORCE_PRODUCT_OPTION_CODE
				INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('PRODUCT_OPTION_CODE has changed from [', @INFORCE_PRODUCT_OPTION_CODE, '] to [',@PRODUCT_OPTION_CODE,'] for CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY))

		END
		ELSE
		BEGIN
			-- The benefit is not in INFORCE table
			INSERT INTO #temp_errors( Stg_Gen_Re_Adjustment_Id, Validation_Error) VALUES(@Stg_Gen_Re_Adjustment_Id, CONCAT('CONTRACT_RISK_KEY:',@CONTRACT_RISK_KEY, ' is unknown'))
		END
	
		SET @ID = @ID + 1
	END

	SELECT @Error_Found = COUNT(*)
	FROM #temp_errors

	IF @With_Result_Set = 1
	BEGIN
    
		SELECT 
			   ROW_NUMBER() OVER(ORDER BY (SELECT 1)) AS Record_ID,
			   a.CENSUS_DATE,
			   a.CONTRACT_ID,
			   a.CONTRACT_RISK_KEY,
			   a.PROJECTION_GROUP,
			   a.PRODUCT_CODE,
			   a.PRODUCT_OPTION_CODE,
			   a.QS_ANN_PREM_IF,
			   a.QS_AMT_REINP_CURR,
			   a.QS_AMT_REINP_BCKD,
			   a.QS_AMT_IC_BASE,
			   a.QS_AMT_IC_INCR,
			   a.QS_AMT_OC_CURR,
			   a.QS_AMT_OC_BCKD,
			   a.QS_AMT_OCX_CURR,
			   a.QS_AMT_OCX_BCKD,
			   a.QS_AMT_LAPSE_RVS,
			   a.SS_ANN_PREM,
			   a.SS_PREM_CURR,
			   a.SS_PREM_BCKD,
			   a.ADJUSTMENT_TYPE,
			   a.ADJUSTMENT_COMMENT,
			   a.ADJUSTMENT_REASON,
			   --a.Created_Date_Time,
			   --a.Created_By,
			   e.Validation_Error 
		FROM #temp_stage_adj AS a
		LEFT JOIN #temp_errors AS e
		ON e.Stg_Gen_Re_Adjustment_Id = a.Stg_Gen_Re_Adjustment_Id
	END

	RETURN 0
END
GO
/****** Object:  StoredProcedure [dbo].[usp_InsertChecks]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================
-- Author:	KHNNR2
-- Create date: Jun 2019
-- Description:	
-- ==================================================================
-- Author:	Chee Liau
-- Create date: Oct 2017
-- Description:	Insert checks results into [dbo].[INDEPENDENT_CHECKS]
-- ==================================================================
--
CREATE PROCEDURE [dbo].[usp_InsertChecks]
@CURR_DATE date
,@PROD_SYSTEM_CODE nvarchar(3)
,@ProcessLogID int

AS
BEGIN
-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran InsertIndpendentCheck

DECLARE @RECS int

-- Create a temporary table to store pas data
		CREATE TABLE #PAS_TEMP (
		[CENSUS_DATE] [date] NULL,
		[CONTRACT_ID] [nvarchar](11) NULL,
		[CLIENT_ID] [nvarchar](20) NULL,
		[BENEFIT_CODE] [nvarchar](20) NULL,
		[ANNUAL_PREM] [money] NULL,
		[ANNUAL_BEN] [money] NULL,
		[IP_SUM_INSURED] [money] NULL
		)

	-- DISCO
	IF @PROD_SYSTEM_CODE = 'DS'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [dbo].[PAS_DISCO]
	END
	-- U2
	IF @PROD_SYSTEM_CODE = 'U2'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [dbo].[PAS_U2]
	END
	-- ULTIMATE TERM
	IF @PROD_SYSTEM_CODE = 'CP'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [dbo].[PAS_ULTIMATE]
	END
	-- INCOM
	IF @PROD_SYSTEM_CODE = 'OR'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [MPF_INCOM_TERM]
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [MPF_INCOM_ILUL]
	END
	-- CLAS
	IF @PROD_SYSTEM_CODE = 'FDA'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED] FROM [dbo].[PAS_CLAS]
	END

	-- OPUS
	IF @PROD_SYSTEM_CODE = 'LS'
	BEGIN
	INSERT INTO #PAS_TEMP ([CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], [IP_SUM_INSURED])
	SELECT [CENSUS_DATE], [CONTRACT_ID], [CLIENT_ID] , [BENEFIT_CODE], [ANNUAL_PREM], [ANNUAL_BEN], NULL FROM [dbo].[PAS_OPUS]
	END


--Delete any exisiting data for the census date
DELETE FROM [dbo].[INDEPENDENT_CHECKS] WHERE [CENSUS_DATE] = @CURR_DATE AND [PRODUCT_SYSTEM_CODE] = @PROD_SYSTEM_CODE;

SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete from [INDEPENDENT_CHECKS] ' + convert(varchar(50),@@ROWCOUNT)


;WITH V_INFORCE AS (
	SELECT I.[PRODUCT_SYSTEM_CODE] AS PRODUCT_SYSTEM_CODE
		,I.[CENSUS_DATE] AS CENSUS_DATE
		,I.[CONTRACT_ID] AS CONTRACT_ID
		,SUM(I.[ANNUAL_PREM]) AS ANNUAL_PREM
		,SUM(I.[SUM_INSURED_AMT]) AS SUM_INSURED_AMT
		,SUM(ISNULL(ANNUAL_PREM,0) - ISNULL(FREQ_LDNG_AMT,0) - ISNULL(ANNUAL_POL_FEE,0)) AS CLAS_PREM_REC
		,SUM(ISNULL(FREQ_LDNG_AMT,0) + ISNULL(ANNUAL_POL_FEE,0)) AS CLAS_PREM_ADJ
		,CI.[CLAS_IP_SI_FACTOR] AS CLAS_IP_SI_FACTOR
	FROM [dbo].[INFORCE] I
		LEFT JOIN (SELECT B.[CONTRACT_ID], SUM(B.[CLAS_IP_SI_FACTOR]) AS CLAS_IP_SI_FACTOR
	FROM (SELECT [CONTRACT_ID]
		,[SUM_INSURED_AMT]
		/nullif(SUM([SUM_INSURED_AMT]/CASE [SUM_INSRD_FREQ_CODE] WHEN 'WKL' THEN 52.18 ELSE 12 END) OVER (PARTITION BY [CONTRACT_ID]),0)
		AS CLAS_IP_SI_FACTOR
	FROM [dbo].[INFORCE]
	WHERE [CENSUS_DATE] = @CURR_DATE
		AND [PRODUCT_SYSTEM_CODE] = @PROD_SYSTEM_CODE
		AND [SUM_INSRD_FREQ_CODE] IN ('WKL','MNTH')
		) B
		GROUP 
		BY B.[CONTRACT_ID]
		) CI ON I.[CONTRACT_ID] = CI.[CONTRACT_ID]
	WHERE I.[CENSUS_DATE] = @CURR_DATE
		AND I.[PRODUCT_SYSTEM_CODE] = @PROD_SYSTEM_CODE
		GROUP BY I.[PRODUCT_SYSTEM_CODE]
		,I.[CENSUS_DATE]
		,I.[CONTRACT_ID]
		,CI.[CLAS_IP_SI_FACTOR] 
		), V_PAS AS (
	SELECT @PROD_SYSTEM_CODE AS PRODUCT_SYSTEM_CODE
		,P.[CENSUS_DATE] AS CENSUS_DATE
		,P.[CONTRACT_ID] AS CONTRACT_ID
		,SUM(P.[ANNUAL_PREM]) AS ANNUAL_PREM
		,SUM(P.[ANNUAL_BEN]) AS SUM_INSURED_AMT
		,SUM(P.[IP_SUM_INSURED]) AS IP_SUM_INSURED_AMT
	FROM #PAS_TEMP P
		WHERE P.[CENSUS_DATE] = @CURR_DATE
		GROUP BY P.[CENSUS_DATE]
		,P.[CONTRACT_ID]
		), V_CHECK AS (
	SELECT @CURR_DATE AS CENSUS_DATE
		,@PROD_SYSTEM_CODE AS PRODUCT_SYSTEM_CODE
		,1 AS SORT_ORDER
		,'MATCHING' AS CATEGORY
		UNION ALL
	SELECT @CURR_DATE AS CENSUS_DATE
		,@PROD_SYSTEM_CODE AS PRODUCT_SYSTEM_CODE
		,2 AS SORT_ORDER
		,'NON-MATCHING' AS CATEGORY
	UNION ALL
		SELECT @CURR_DATE AS CENSUS_DATE
		,@PROD_SYSTEM_CODE AS PRODUCT_SYSTEM_CODE
		,3 AS SORT_ORDER
		,'IN SQL BUT NOT IN PAS' AS CATEGORY
		UNION ALL
	SELECT @CURR_DATE AS CENSUS_DATE
		,@PROD_SYSTEM_CODE AS PRODUCT_SYSTEM_CODE
		,4 AS SORT_ORDER
		,'IN PAS BUT NOT IN SQL' AS CATEGORY
		), V_RESULTS AS (
	SELECT ISNULL(I.[CONTRACT_ID], P.[CONTRACT_ID]) AS CONTRACT_ID
		,ISNULL(I.[CENSUS_DATE], P.[CENSUS_DATE]) AS CENSUS_DATE
		,ISNULL(I.[PRODUCT_SYSTEM_CODE], P.[PRODUCT_SYSTEM_CODE]) AS PRODUCT_SYSTEM_CODE
		,CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
		WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
	END AS SORT_ORDER
		,COUNT(DISTINCT ISNULL(I.[CONTRACT_ID], P.[CONTRACT_ID])) AS POLICIES
		,SUM(I.[ANNUAL_PREM]) AS SQL_PREMIUM
		,SUM(P.[ANNUAL_PREM] + CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN ISNULL(I.[CLAS_PREM_ADJ],0) ELSE 0 END) AS PAS_PREMIUM
		,SUM(I.[SUM_INSURED_AMT]) AS SQL_SI
		,SUM(P.[SUM_INSURED_AMT] + CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN ISNULL(P.[IP_SUM_INSURED_AMT],0) * ISNULL(I.[CLAS_IP_SI_FACTOR], 1) ELSE 0 END) AS PAS_SI
	FROM V_INFORCE I
		FULL OUTER JOIN V_PAS P ON (I.[CONTRACT_ID] = P.[CONTRACT_ID])
		GROUP BY ISNULL(I.[CENSUS_DATE], P.[CENSUS_DATE])
		,ISNULL(I.[PRODUCT_SYSTEM_CODE], P.[PRODUCT_SYSTEM_CODE])
		,ISNULL(I.[CONTRACT_ID], P.[CONTRACT_ID])
	,CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
		WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
	END 
	Having CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
	WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
		END >1
), V_RESULTS_Matching AS (
	SELECT 'NA' AS CONTRACT_ID
		,ISNULL(I.[CENSUS_DATE], P.[CENSUS_DATE]) AS CENSUS_DATE
		,ISNULL(I.[PRODUCT_SYSTEM_CODE], P.[PRODUCT_SYSTEM_CODE]) AS PRODUCT_SYSTEM_CODE
		,CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
		WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
		END AS SORT_ORDER
		,COUNT(DISTINCT ISNULL(I.[CONTRACT_ID], P.[CONTRACT_ID])) AS POLICIES
		,SUM(I.[ANNUAL_PREM]) AS SQL_PREMIUM
		,SUM(P.[ANNUAL_PREM] + CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN ISNULL(I.[CLAS_PREM_ADJ],0) ELSE 0 END) AS PAS_PREMIUM
		,SUM(I.[SUM_INSURED_AMT]) AS SQL_SI
		,SUM(P.[SUM_INSURED_AMT] + CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN ISNULL(P.[IP_SUM_INSURED_AMT],0) * ISNULL(I.[CLAS_IP_SI_FACTOR], 1) ELSE 0 END) AS PAS_SI
	FROM V_INFORCE I
		FULL OUTER JOIN V_PAS P ON (I.[CONTRACT_ID] = P.[CONTRACT_ID])
		GROUP BY ISNULL(I.[CENSUS_DATE], P.[CENSUS_DATE])
		,ISNULL(I.[PRODUCT_SYSTEM_CODE], P.[PRODUCT_SYSTEM_CODE])
--,ISNULL(I.[CONTRACT_ID], P.[CONTRACT_ID])
	,CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
		WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
	END
	Having CASE
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) <= 1 THEN 1
		WHEN I.[CONTRACT_ID] = P.[CONTRACT_ID] AND ROUND(ABS(CASE WHEN @PROD_SYSTEM_CODE = 'FDA' THEN I.[CLAS_PREM_REC] ELSE I.[ANNUAL_PREM] END - P.[ANNUAL_PREM]), 0) > 1 THEN 2
		WHEN I.[CONTRACT_ID] IS NOT NULL AND P.[CONTRACT_ID] IS NULL THEN 3
		WHEN I.[CONTRACT_ID] IS NULL AND P.[CONTRACT_ID] IS NOT NULL THEN 4
		END=1
)

INSERT INTO [dbo].[INDEPENDENT_CHECKS] ([CENSUS_DATE], [PRODUCT_SYSTEM_CODE], [SORT_ORDER], [CATEGORY], [POLICIES], [SQL_PREMIUM], [PAS_PREMIUM], [SQL_SI], [PAS_SI],[CONTRACT_ID],[CREATED_BY],[CREATED_DATE_TIME],[PROCESS_LOG_ID])
		(SELECT C.[CENSUS_DATE] AS CENSUS_DATE
		,C.[PRODUCT_SYSTEM_CODE] AS PRODUCT_SYSTEM_CODE
		,C.[SORT_ORDER] AS SORT_ORDER
		,C.[CATEGORY] AS CATEGORY
		,ISNULL(R.[POLICIES], 0) AS POLICIES
		,R.[SQL_PREMIUM] AS SQL_PREMIUM
		,R.[PAS_PREMIUM] AS PAS_PREMIUM
		,R.[SQL_SI] AS SQL_SI
		,R.[PAS_SI] AS PAS_SI
		,ISNULL(R.[CONTRACT_ID], 'TBD') AS CONTRACT_ID 
		,'SYSTEM_USER'
		,getdate() 
		
		,@ProcessLogID as PROCESS_LOG_ID
	FROM V_RESULTS R
		RIGHT OUTER JOIN V_CHECK C ON (R.[SORT_ORDER] = C.[SORT_ORDER])
	Union all	
		SELECT C.[CENSUS_DATE] AS CENSUS_DATE
		,C.[PRODUCT_SYSTEM_CODE] AS PRODUCT_SYSTEM_CODE
		,C.[SORT_ORDER] AS SORT_ORDER
		,C.[CATEGORY] AS CATEGORY
		,ISNULL(R.[POLICIES], 0) AS POLICIES
		,R.[SQL_PREMIUM] AS SQL_PREMIUM
		,R.[PAS_PREMIUM] AS PAS_PREMIUM
		,R.[SQL_SI] AS SQL_SI
		,R.[PAS_SI] AS PAS_SI
		,ISNULL(R.[CONTRACT_ID], 'TBD') AS CONTRACT_ID
		,'SYSTEM_USER'
		,getdate() 
		,@ProcessLogID as PROCESS_LOG_ID 
	FROM V_RESULTS_Matching R
		RIGHT OUTER JOIN V_CHECK C ON (R.[SORT_ORDER] = C.[SORT_ORDER]))	

SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT

		Print 'Insert into [INDEPENDENT_CHECKS] ' + convert(varchar(50),@@ROWCOUNT)

DROP TABLE #PAS_TEMP;
--RETURN @RECS

	Commit TRAN InsertIndpendentCheck

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
	
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN InsertIndpendentCheck;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Able_Claim_Expense_Trnx]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_Able_Claim_Expense_Trnx]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
 --
 BEGIN TRY;
 BEGIN TRAN T1;
 delete from dbo.Able_Claim_Expense_Trnx
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
--
 SET @DeleteRowCount = @@ROWCOUNT;
 --
 ;WITH w_delta_records
AS
(
SELECT   [Claim_Number]
		,[Payee]
		,[Invoice_Type]
		,[Invoice_Number]
		,[Amount_inc_GST]
		,[GST]
		,[Payment_Method]
		,[Vendor_Id]
		,[Admin_Initials]
		,[Payment_Creation_Date]
		,[Payment_Reference]
		,[Authorised_By]
		,[Authorisation_Date]
		,[GUID]
  FROM [dbo].[Able_Claim_Expense]
   where 1=1
   AND month_eftv_date = convert(datetime,@ProcessingMonthYear)
   GROUP BY  [Claim_Number]
			,[Payee]
			,[Invoice_Type]
			,[Invoice_Number]
			,[Amount_inc_GST]
			,[GST]
			,[Payment_Method]
			,[Vendor_Id]
			,[Admin_Initials]
			,[Payment_Creation_Date]
			,[Payment_Reference]
			,[Authorised_By]
			,[Authorisation_Date]
			,[GUID]
   except
   SELECT   [Claim_Number]
		,[Payee]
		,[Invoice_Type]
		,[Invoice_Number]
		,[Amount_inc_GST]
		,[GST]
		,[Payment_Method]
		,[Vendor_Id]
		,[Admin_Initials]
		,[Payment_Creation_Date]
		,[Payment_Reference]
		,[Authorised_By]
		,[Authorisation_Date]
		,[GUID]
  FROM [dbo].[Able_Claim_Expense]
   where 1=1
   AND month_eftv_date = EOMONTH(DATEADD(month,-1, convert(datetime,@ProcessingMonthYear)))
   GROUP BY  [Claim_Number]
			,[Payee]
			,[Invoice_Type]
			,[Invoice_Number]
			,[Amount_inc_GST]
			,[GST]
			,[Payment_Method]
			,[Vendor_Id]
			,[Admin_Initials]
			,[Payment_Creation_Date]
			,[Payment_Reference]
			,[Authorised_By]
			,[Authorisation_Date]
			,[GUID]
)
 insert into dbo.Able_Claim_Expense_Trnx
(	   [Month_Eftv_Date]
      ,[Claim_Number]
      ,[Payee]
      ,[Invoice_Type]
      ,[Invoice_Number]
      ,[Amount_inc_GST]
      ,[GST]
      ,[Payment_Method]
      ,[Vendor_Id]
      ,[Admin_Initials]
      ,[Payment_Creation_Date]
      ,[Payment_Reference]
      ,[Authorised_By]
      ,[Authorisation_Date]
      ,[GUID]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason])
SELECT convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date]
      ,a.[Claim_Number]
      ,a.[Payee]
      ,a.[Invoice_Type]
      ,a.[Invoice_Number]
      ,a.[Amount_inc_GST]
      ,a.[GST]
      ,a.[Payment_Method]
      ,a.[Vendor_Id]
      ,a.[Admin_Initials]
      ,a.[Payment_Creation_Date]
      ,a.[Payment_Reference]
      ,a.[Authorised_By]
      ,a.[Authorisation_Date]
      ,a.[GUID]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID [Process_Log_ID]
      ,NULL [Exclude_Flag]
	  ,NULL [Exclude_Reason]
  FROM w_delta_records a
   where 1=1
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	;WITH w_existing_claims
	 AS
	 (
	 select distinct [Able_Claim_Expense_Trnx_Id],[GUID] 
	 from dbo.Able_Claim_Expense_Trnx [nolock] 
	 where month_Eftv_date < convert(datetime,@ProcessingMonthYear)
	 )
	 UPDATE dbo.Able_Claim_Expense_Trnx
	 SET dbo.Able_Claim_Expense_Trnx.[Able_Claim_Expense_Trnx_Id] = src.[Able_Claim_Expense_Trnx_Id],
	     updated_date_time = GETDATE(),
		 Updated_By = system_user
	 FROM dbo.Able_Claim_Expense_Trnx trg,w_existing_claims src
	 where trg.month_Eftv_date = convert(datetime,@ProcessingMonthYear)
	 and trg.[GUID] = src.[GUID]

	 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	 --
	 UPDATE dbo.Able_Claim_Expense_Trnx
	 SET [Able_Claim_Expense_Trnx_Id] = NEXT VALUE FOR [dbo].[Able_Claim_Expense_Trnx_Seq],
	     updated_date_time = GETDATE(),
		 Updated_By = system_user
	 WHERE month_Eftv_date = convert(datetime,@ProcessingMonthYear)
	 and [Able_Claim_Expense_Trnx_Id] IS NULL
	 --
 	 set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].Able_Claim_Expense_Trnx
	--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Able_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_Able_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	
	BEGIN TRY;
	BEGIN TRAN T1;
delete from [dbo].[Able_Claim_Listing]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
--
 SET @DeleteRowCount = @@ROWCOUNT;
insert into [dbo].[Able_Claim_Listing]
([Month_Eftv_Date]
      ,[Claim_Benefit_Id]
      ,[Claim_Number]
      ,[Claim_Status]
      ,[Case_Type]
      ,[Claim_Type]
      ,[Lumpsum_IP_Indicator]
      ,[Surname]
      ,[First_Name]
      ,[Second_Name]
      ,[Sex]
      ,[Date_of_Birth]
      ,[Date_of_Death]
      ,[Occupation]
      ,[State]
      ,[Post_Code]
      ,[Registration_Date]
      ,[First_Contact_Date]
      ,[Incurred_Date]
      ,[Age_At_Incurred_Date]
      ,[Claim_Event_Type]
      ,[Primary_Cause]
      ,[Primary_Cause_Date]
      ,[Claim_Finalised_Date]
      ,[Claim_Finalised_Reason]
      ,[Claim_Reopen_Date]
      ,[Claim_Reopen_Reason]
      ,[Concurrent_Claim_Indicator]
      ,[Concurrent_Claim_Numbers]
      ,[Product_System_Code]
      ,[Policy_Number]
      ,[Contract_Start_Date]
      ,[Contract_Status]
      ,[Class_of_Business]
      ,[Contract_End_Date]
      ,[Party_Id]
      ,[Product_Code]
      ,[Product_Name]
      ,[Product_Option_Code]
      ,[Benefit_Type]
      ,[Target_Benefit_Code]
      ,[Target_Benefit_Description]
      ,[Target_Benefit_Type]
      ,[Source_Benefit_Code]
      ,[Source_Benefit_Description]
      ,[Source_Benefit_Type]
      ,[Source_Benefit_Selected]
      ,[Implied_Source_Benefit_Selected]
      ,[Risk_Commenced_Date]
      ,[Risk_Expiry_Date]
      ,[Benefit_Number]
      ,[Benefit_Creation_Date]
      ,[Benefit_Start_Date]
      ,[Benefit_Status]
      ,[Benefit_End_Date]
      ,[Waiting_Period]
      ,[Benefit_Period]
      ,[Benefit_Reopen_Date]
      ,[Benefit_Reopen_Reason]
      ,[Escalation_Ind]
      ,[Ind_Value]
      ,[Initial_Sum_Insured]
      ,[Initial_Sum_Insured_Freq]
      ,[Initial_Sum_Insured_x12]
      ,[Sum_Insured]
      ,[Source]
      ,[Incident_Occurred_Overseas]
      ,[Country_of_Incident]
      ,[Expected_Resolution_Date]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Process_Log_ID]
	  ,Benefit_Finalised_Date
	  ,Benefit_Finalised_Reason
	  ,Coverage_Number
	  )
SELECT [Month_Eftv_Date]
,[Claim_Benefit_Id]
      ,[Claim_Number]
      ,[Claim_Status]
      ,[Case_Type]
	  ,[Claim_Type]
	  ,[Lumpsum_IP_Indicator]
	  ,[Surname]
      ,Given_Name AS [First_Name]
      ,NULL AS [Second_Name]
      ,[Sex]
      ,[Date_of_Birth]
      ,[Date_of_Death]
      ,[Occupation]
      ,[State]
      ,[Post_Code]
      ,[Registration_Date]
      ,[First_Contact_Date]
      ,[Incurred_Date]
      ,[Age_At_Incurred_Date]
      ,[Claim_Event_Type]
      ,CASE WHEN Primary_Cause_Code IS NOT NULL THEN Primary_Cause_Code+':'+Primary_Cause_Description
	      ELSE Primary_Cause_Description 
	   END [Primary_Cause]
      ,[Primary_Cause_Date]
      ,[Claim_Finalised_Date]
	   ,[Claim_Finalised_Reason]
	   ,[Claim_Reopen_Date]
	   ,[Claim_Reopen_Reason]
      ,[Concurrent_Claim_Indicator]
      ,[Concurrent_Claim_Numbers]      
      ,pas.[Product_System_Code]
      ,[Policy_Number]
      ,[Contract_Start_Date]
      ,[Contract_Status]
      ,[Class_of_Business]
      ,[Contract_End_Date]
      ,[Party_Id]
      ,[Product_Code]
      ,[Product_Name]
      ,CASE WHEN [Target_Benefit_Code] is not null THEN [Target_Benefit_Code]
		WHEN  Source_Benefit_Code is not null and  ( ISNULL([Implied_Source_Benefit_Selected],0) = 1 or ISNULL([Source_Benefit_Selected],0) = 1 )
		THEN Source_Benefit_Code
		END [Product_Option_Code],
	 CASE WHEN [Target_Benefit_Code] is not null THEN target_benefit_type
		WHEN  Source_Benefit_Code is not null and  ( ISNULL([Implied_Source_Benefit_Selected],0) = 1 or ISNULL([Source_Benefit_Selected],0) = 1 )
		THEN Source_Benefit_type
		END Benefit_Type
	  ,[Target_Benefit_Code]
      ,[Target_Benefit_Description]
      ,[Target_Benefit_Type]
      ,[Source_Benefit_Code]
      ,[Source_Benefit_Description]
      ,[Source_Benefit_Type]
      ,[Source_Benefit_Selected]
	  ,[Implied_Source_Benefit_Selected]
      ,[Risk_Commenced_Date]
	  ,[Risk_Expiry_Date]
      ,[Benefit_Number]
      ,[Benefit_Creation_Date]
      ,[Benefit_Start_Date]
     ,[Benefit_Status]
      ,[Benefit_End_Date]
      ,CASE Claim_Event_Type WHEN 'Accident' Then Waiting_Period_Accident
		                      WHEN 'Sickness' Then Waiting_Period_Sickness
		END [Waiting_Period]		
      ,CASE Claim_Event_Type WHEN 'Accident' Then Benefit_Period_Accident
		                      WHEN 'Sickness' Then Benefit_Period_Sickness
		END [Benefit_Period]
      ,[Benefit_Reopen_Date]
      ,[Benefit_Reopen_Reason]
      ,Indexation_Flag AS [Escalation_Ind]
      ,CASE WHEN Agreed_Value IS NULL THEN 'Unknown'
		     WHEN Agreed_Value = 'Y' THEN 'Agreed'
			 WHEN Agreed_Value = 'N' THEN 'Indemnity'
		END [Ind_Value]
      ,[Initial_Sum_Insured]
      ,[Initial_Sum_Insured_Freq]
      ,[Initial_Sum_Insured_x12]
      ,[Sum_Insured]
      ,[Source]
      ,[Incident_Occurred_Overseas]
      ,[Country_of_Incident]     
      ,[Expected_Resolution_Date]
	  ,GETDATE()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID
	  ,Finalised_Date Benefit_Finalised_Date
	  ,Finalised_Reason Benefit_Finalised_Reason
	  ,Coverage_Number
  FROM [dbo].[Able_Claim_Benefit] trg
  inner join [dbo].[IDR_Product_System] pas
  on trg.source_system = pas.able_source_system
  where 1=1
  and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   and exclude_flag = 'N';
 --
 SET @InsertRowCount = @@ROWCOUNT
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_CMS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================

CREATE PROCEDURE [dbo].[usp_Load_CMS_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	
	BEGIN TRY;

	delete from [dbo].[CMS_Claim_Listing]
	where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

	set @DeleteRowCount = @@ROWCOUNT + @DeleteRowCount

	BEGIN TRAN T1;

insert into [dbo].[CMS_Claim_Listing]
([Month_Eftv_Date]
    --  ,[Claim_Benefit_Id]
      ,[Claim_Number]
      ,[Claim_Status]
      ,[Case_Type]
      ,[Claim_Type]
      ,[Lumpsum_IP_Indicator]
      ,[Surname]
      ,[First_Name]
      ,[Second_Name]
      ,[Sex]
      ,[Date_of_Birth]
      ,[Date_of_Death]
      ,[Occupation]
      ,[State]
      ,[Post_Code]
      ,[EDW_Party_Key]
      ,[EDW_Title]
      ,[EDW_Surname]
      ,[EDW_First_Name]
      ,[EDW_Second_Name]
      ,[EDW_Sex]
      ,[EDW_Date_Of_Birth]
      ,[EDW_Deceased_Ind]
      ,[EDW_Date_of_Death]
      ,[Registration_Date]
      ,[First_Contact_Date]
      ,[Incurred_Date]
      ,[Age_At_Incurred_Date]
      ,[Claim_Event_Type]
      ,[Primary_Cause]
      ,[Primary_Cause_Date]
      ,[Claim_Finalised_Date]
      ,[Claim_Finalised_Reason]
      ,[Claim_Reopen_Date]
      ,[Claim_Reopen_Reason]
      ,[Concurrent_Claim_Indicator]
      ,[Concurrent_Claim_Numbers]
      ,[Product_System_Code]
      ,[Policy_Number]
      ,[Contract_Start_Date]
      ,[Contract_Status]
      ,[Class_of_Business]
      ,[Contract_End_Date]
      ,[Party_Id]
      ,[EDW_Contract_Key]
      ,[EDW_Policy_Number]
      ,[EDW_Contract_Id]
      ,[EDW_Contract_Start_Date]
      ,[EDW_Contract_Status_on_ID]
      ,[EDW_Contract_Status_on_FD]
      ,[EDW_Class_Of_Business]
      ,[EDW_Contract_End_Date_on_ID]
      ,[EDW_Contract_End_Date_on_FD]
      ,[EDW_Contract_Claim_Ind_on_ID]
      ,[EDW_Contract_Claim_Ind_on_FD]
      ,[Product_Code]
      ,[Product_Name]
      ,[EDW_Product_Key]
      ,[EDW_Product_Code]
      ,[EDW_Product_Name]
      ,[Product_Option_Code]
      ,[Benefit_Type]
      ,[Target_Benefit_Code]
      ,[Target_Benefit_Description]
      ,[Target_Benefit_Type]
      ,[Source_Benefit_Code]
      ,[Source_Benefit_Description]
      ,[Source_Benefit_Type]
      ,[Source_Benefit_Selected]
      ,[Implied_Source_Benefit_Selected]
      ,[Risk_Commenced_Date]
      ,[Risk_Expiry_Date]
      ,[EDW_Product_Option_Key]
      ,[EDW_Product_Option_Code]
      ,[EDW_Contract_Risk_Key]
      ,[EDW_Risk_Status_on_ID]
      ,[EDW_Risk_Status_on_FD]
      ,[EDW_Risk_Claim_Ind_on_ID]
      ,[EDW_Risk_Claim_Ind_on_FD]
      ,[EDW_Risk_Commenced_Date]
      ,[EDW_Risk_Expiry_Date]
      ,[Waiting_Period]
      ,[Benefit_Period]
      ,[EDW_Waiting_Period_on_ID]
      ,[EDW_Waiting_Period_on_FD]
      ,[EDW_Benefit_Period_on_ID]
      ,[EDW_Benefit_Period_on_FD]
      ,[Benefit_Number]
      ,[Benefit_Creation_Date]
      ,[Benefit_Status]
      ,[Benefit_Start_Date]
      ,[Benefit_End_Date]
      ,[Benefit_Finalised_Date]
      ,[Benefit_Finalised_Reason]
      ,[Benefit_Reopen_Date]
      ,[Benefit_Reopen_Reason]
      ,[Escalation_Ind]
      ,[Ind_Value]
      ,[Initial_Sum_Insured]
      ,[Initial_Sum_Insured_Freq]
      ,[Initial_Sum_Insured_x12]
      ,[Sum_Insured]
      ,[EDW_Sum_Insured_on_ID]
      ,[EDW_Sum_Insured_on_FD]
      ,[Source]
      ,[Incident_Occurred_Overseas]
      ,[Country_of_Incident]
      ,[Expected_Resolution_Date]   
	  ,[EDW_Country_Code]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Process_Log_ID]  )
select
 '2021-09-30' as [Month_Eftv_Date],
	--[Claim_Benefit_Id] [int] NOT NULL,
	CMS.Case_Number as [Claim_Number],
	CMS.Claim_Status as [Claim_Status],
    NULL as [Case_Type] ,
	CT.Claim_Type_Desc as [Claim_Type] ,
	CMS.Lumpsum_IP_Indicator as [Lumpsum_IP_Indicator],
	CL.Surname as [Surname],
	CL.Given_Name as [First_Name] , 
	NULL as [Second_Name] ,
	CL.Sex as [Sex] ,
	CL.Date_of_Birth as [Date_of_Birth],
	CL.Date_of_Death as [Date_of_Death],
	CL.Occupation as [Occupation],
	CL.State as [State],
	CL.Post_Code as [Post_Code],
	NULL as [EDW_Party_Key],
	NULL as [EDW_Title] ,
	NULL as [EDW_Surname],
	NULL as [EDW_First_Name],
	NULL  as [EDW_Second_Name],
	NULL as [EDW_Sex],
	CMS.EDW_Date_of_Birth as [EDW_Date_Of_Birth],
	NULL as [EDW_Deceased_Ind],
	NULL [EDW_Date_of_Death],
	CMS.Registration_Date [Registration_Date],
	CMS.First_Contact_Date as [First_Contact_Date],
	CMS.Incurred_Date as [Incurred_Date] ,
	DATEDIFF(YEAR,CL.Date_of_Birth,cms.Incurred_Date) as [Age_At_Incurred_Date],
	CMS.Claim_Event_Type as [Claim_Event_Type],
	CC.Claim_Cause_Desc as [Primary_Cause],
	NULL as [Primary_Cause_Date],
	CMS.Claim_Finalised_Date as [Claim_Finalised_Date],
	CMS.Claim_Finalised_Reason as [Claim_Finalised_Reason],
	CMS.Claim_Reopen_Date as [Claim_Reopen_Date],
	CMS.Claim_Reopen_Reason as [Claim_Reopen_Reason],
	NULL as [Concurrent_Claim_Indicator],
	NULL as [Concurrent_Claim_Numbers],
	CMS.Product_System_Code as [Product_System_Code],
	CMS.Policy_Number as [Policy_Number],
	cms.Benefit_Start_Date as [Contract_Start_Date],
	CMS.Benefit_Status as [Contract_Status],
	NULL as [Class_of_Business],
	CMS.Benefit_End_Date as [Contract_End_Date],
	NULL  as [Party_Id],
	edw_contract.Contract_Key as [EDW_Contract_Key],
	edw_contract.EDW_Policy_Number as [EDW_Policy_Number],
	edw_contract.Contract_Id as [EDW_Contract_Id],
	edw_contract.Contract_Start_Date as [EDW_Contract_Start_Date] ,
	NULL as [EDW_Contract_Status_on_ID],
	NULL as [EDW_Contract_Status_on_FD],
	edw_contract.Class_Of_Business as [EDW_Class_Of_Business] ,
	NULL as [EDW_Contract_End_Date_on_ID],
	NULL as [EDW_Contract_End_Date_on_FD],
	NULL as [EDW_Contract_Claim_Ind_on_ID],
	NULL as [EDW_Contract_Claim_Ind_on_FD],
	P.Product_Code as [Product_Code],
	P.Product_Name as [Product_Name],
	edw_contract.Product_Key as [EDW_Product_Key],
	edw_contract.Product_Code as [EDW_Product_Code],
	edw_contract.Product_Name as [EDW_Product_Name],
	B.Benefit_Code as [Product_Option_Code],
	B.Benefit_Type as [Benefit_Type],
	NULL as [Target_Benefit_Code],
	NULL as [Target_Benefit_Description],
	NULL as [Target_Benefit_Type],
	NULL as [Source_Benefit_Code] ,
	NULL as [Source_Benefit_Description],
	NULL as [Source_Benefit_Type] ,
	NULL as [Source_Benefit_Selected],
	NULL as [Implied_Source_Benefit_Selected],
	CMS.Risk_Commenced_Date [Risk_Commenced_Date] ,
	NULL as [Risk_Expiry_Date] ,
	NULL as [EDW_Product_Option_Key],
	NULL as [EDW_Product_Option_Code],
	CMS.EDW_Contract_Risk_Key as [EDW_Contract_Risk_Key],
	NULL as [EDW_Risk_Status_on_ID],
	NULL as [EDW_Risk_Status_on_FD],
	NULL as [EDW_Risk_Claim_Ind_on_ID],
	NULL as [EDW_Risk_Claim_Ind_on_FD],
	CMS.EDW_Risk_Commenced_Date as [EDW_Risk_Commenced_Date],
	CMS.EDW_Risk_Expiry_Date as [EDW_Risk_Expiry_Date],
	(case when CMS.Claim_Event_Type is NULL then NULL else W.Waiting_Period end ) as [Waiting_Period],
	(case when CMS.Claim_Event_Type is NULL then NULL else BP.Benefit_Period end ) as [Benefit_Period],
	NULL as [EDW_Waiting_Period_on_ID],
	NULL as [EDW_Waiting_Period_on_FD],
	NULL as [EDW_Benefit_Period_on_ID],
	NULL as [EDW_Benefit_Period_on_FD],
	CMS.Benefit_Number as [Benefit_Number] ,
	CMS.Benefit_Creation_Date as [Benefit_Creation_Date],
	CMS.Benefit_Status as [Benefit_Status],
	CMS.Benefit_Start_Date as [Benefit_Start_Date],
	CMS.Benefit_End_Date as [Benefit_End_Date],
	CMS.Benefit_Finalised_Date as [Benefit_Finalised_Date],
	CMS.Benefit_Finalised_Reason as [Benefit_Finalised_Reason],
	CMS.Benefit_Reopen_Date as [Benefit_Reopen_Date],
	CMS.Benefit_Reopen_Reason as [Benefit_Reopen_Reason],
	CMS.Indexation_Flag as [Escalation_Ind],
	NULL as [Ind_Value],
	CMS.Orig_Benefit as [Initial_Sum_Insured],
	NULL as [Initial_Sum_Insured_Freq],
	NULL as [Initial_Sum_Insured_x12],
	CMS.Orig_Benefit as [Sum_Insured] ,
	NULL as [EDW_Sum_Insured_on_ID],
	NULL as [EDW_Sum_Insured_on_FD],
	NULL [Source] ,
	CMS.Incident_Occurred_Overseas as [Incident_Occurred_Overseas],
	CMS.Country_of_Incident as [Country_of_Incident],
	CMS.Expected_Resolution_Date as [Expected_Resolution_Date],
	CMS.EDW_Country_Code as [EDW_Country_Code],
	getdate() as [Created_Date_Time],
	NULL [Updated_Date_Time],
	NULL[Updated_By],
	@ProcessLogID as [Process_Log_ID]
from [IDS_Claims_Daily].[dbo].IDS_Claim_Vrbl CMS
left join [IDS_Claims_Daily].[dbo].Dim_Claim_Type as CT 
on  CT.IDS_Claim_Type_Id = CMS.IDS_Claim_Type_Id
left join [IDS_Claims_Daily].[dbo].IDS_Case_Claimant_Vrbl CL
on CMS.IDS_Case_Id = CL.IDS_Case_Id
and CMS.Source_Claim_System = CL.Source_Claim_System
left join [IDS_Claims_Daily].[dbo].[Dim_Claim_Cause] CC
on CC.Source_Claim_System = CMS.Source_Claim_System
and cc.IDS_Claim_Cause_Id = CMS.Primary_IDS_Claim_Cause_Id
left join [IDS_Claims_Daily].[dbo].Dim_Product P
on P.IDS_Product_Id = CMS.IDS_Product_Id
left join [IDS_Claims_Daily].[dbo].Dim_Benefit B
on B.IDS_Product_Id = CMS.IDS_Product_Id
and B.IDS_Benefit_Id = CMS.IDS_Benefit_Id
left join [IDS_Claims_Daily].[dbo].Dim_Waiting_Period W
on W.IDS_Waiting_Period_Id = (Case when CMS.Claim_Event_Type = 'Sickness' then CMS.Sickness_Waiting_Period_Id else CMS.Accident_Waiting_Period_Id end)
and W.Source_Claim_System = CMS.Source_Claim_System
left join [IDS_Claims_Daily].[dbo].Dim_Benefit_Period BP
on BP.IDS_Benefit_Period_Id = (Case when CMS.Claim_Event_Type = 'Sickness' then CMS.Sickness_Benefit_Period_Id else CMS.Accident_Benefit_Period_Id end)
and BP.Source_Claim_System = CMS.Source_Claim_System
Left Join IDS_Claims_Daily.[dbo].Claim_EDW_Contract edw_contract 
On edw_contract.Source_Claim_System = CMS.Source_Claim_System
And CMS.Case_Number = edw_contract.Claim_Number
And CMS.Policy_Number = edw_contract.Policy_Number
And CMS.Product_System_Code = edw_contract.Product_System_Code
where CMS.Source_Claim_System = 'CMS'
and CMS.Row_Eftv_Date < @ProcessingMonthYear and CMS.Row_End_Date > @ProcessingMonthYear -- to change date to @ProcessingMonthYear
and CL.Row_Eftv_Date < @ProcessingMonthYear and CL.Row_End_Date > @ProcessingMonthYear -- to change date to @ProcessingMonthYear
 --
 SET @InsertRowCount = @@ROWCOUNT + @InsertRowCount
	--
	COMMIT TRAN T1;

	BEGIN Tran T2;
	-- Update EDW_Benefit_Vrb Table details

	update CMS_Claim_Listing
	set 
	EDW_Party_Key = B.Party_Key,
	EDW_Title = B.Title,
	EDW_Surname = B.Surname,
	EDW_First_Name = B.First_Name,
	EDW_Second_Name = B.Second_Name,
	EDW_Sex = case when B.Sex = 'Female' then 'F' else (case when B.Sex = 'Male' then 'M' else B.Sex end ) END,
	EDW_Deceased_Ind = B.Deceased_Ind,
	EDW_Date_of_Death = B.DOD,
	EDW_Product_Option_Key = B.Product_Option_Key,
	edw_product_option_code = B.Product_Option_Code
	from CMS_Claim_Listing CMS
	 join IDS_Claims_Daily.[dbo].[Claim_EDW_Benefit_Vrbl] b
	on b.[Contract_Key] = CMS.EDW_Contract_Key
	and b.Benefit_Number = CMS.Benefit_Number
	AND b.Claim_Eftv_Date = CMS.Registration_Date
	AND b.[Claim_Eftv_Date_Type] = 'Notified'
	AND CMS.Month_Eftv_Date BETWEEN b.[Row_Eftv_Date] and b.[Row_End_Date]  
	where 
	CMS.Month_Eftv_Date = @ProcessingMonthYear  -- to change date to @ProcessingMonthYear
	AND b.Source_Claim_System = 'CMS'
	and CMS.Registration_Date is not null

	 SET @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
	   	 
	COMMIT TRAN T2;


	BEGIN TRAN T3;

	update CMS_Claim_Listing
	set 
	EDW_Risk_Status_on_ID = B.Risk_Status_Code,
	EDW_Risk_Claim_Ind_on_ID = B.Risk_Claim_Ind,
	EDW_Waiting_Period_on_ID = B.Waiting_Period,
	EDW_Benefit_Period_on_ID = B.Benefit_Period,
	EDW_Sum_Insured_on_ID = B.Sum_Insured
	from CMS_Claim_Listing CMS
	join IDS_Claims_Daily.[dbo].[Claim_EDW_Benefit_Vrbl] b
	on b.[Contract_Key] = CMS.EDW_Contract_Key
	and b.Benefit_Number = CMS.Benefit_Number
	AND b.Claim_Eftv_Date = CMS.Incurred_Date
	AND b.[Claim_Eftv_Date_Type] = 'Incurred'
	AND CMS.Month_Eftv_Date BETWEEN b.[Row_Eftv_Date] and b.[Row_End_Date]  
	where 
	CMS.Month_Eftv_Date = @ProcessingMonthYear  -- to change date to @ProcessingMonthYear
	AND b.Source_Claim_System = 'CMS'
	and CMS.Incurred_Date is not null

	 SET @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount
	
	COMMIT TRAN T3;

	BEGIN TRAN T4;

	update CMS_Claim_Listing
	set 
	EDW_Risk_Status_on_FD = B.Risk_Status_Code,
	EDW_Risk_Claim_Ind_on_FD = B.Risk_Claim_Ind,
	EDW_Waiting_Period_on_FD = B.Waiting_Period,
	EDW_Benefit_Period_on_FD = B.Benefit_Period,
	EDW_Sum_Insured_on_FD = B.Sum_Insured
	from CMS_Claim_Listing CMS
	join IDS_Claims_Daily.[dbo].[Claim_EDW_Benefit_Vrbl] b
	on b.[Contract_Key] = CMS.EDW_Contract_Key
	and b.Benefit_Number = CMS.Benefit_Number
	AND b.Claim_Eftv_Date = CMS.Claim_Finalised_Date
	AND b.[Claim_Eftv_Date_Type] = 'Finalised'
	AND CMS.Month_Eftv_Date BETWEEN b.[Row_Eftv_Date] and b.[Row_End_Date]  
	where 
	CMS.Month_Eftv_Date = @ProcessingMonthYear  -- to change date to @ProcessingMonthYear
	AND b.Source_Claim_System = 'CMS'
	and CMS.Claim_Finalised_Date is not null

	SET @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

	COMMIT TRAN T4;

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK Transaction

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount;
	
	THROW;

END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_ConvIdentificationTable]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[usp_Load_ConvIdentificationTable]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;
	BEGIN TRAN T1;

	delete from [dbo].[ConvIdentification]
	where [IDS_Census_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'
--
 SET @DeleteRowCount = @@ROWCOUNT;
insert into [dbo].[ConvIdentification]
		 ([Risk_Life_Insured_Full_Name_cv]
           ,[Risk_Life_Insured_Scv_Customer_Id_cv]
           ,[Risk_Life_Insured_Dob_cv]
           ,[Curr_Age]
           ,[API_Risk_Type_Code_cv]
           ,[Off_Date]
           ,[Off_Contract_End_Date]
           ,[Age_At_Off_Date]
           ,[On_Date]
           ,[Age_At_On_Date]
           ,[Lag_between_Off_and_On]
           ,[Off_Owner_Name]
           ,[Off_Owner_SCV_ID]
           ,[On_Owner_Name]
           ,[On_Owner_SCV_ID]
           ,[Off_Product_Group]
           ,[On_Product_Group]
           ,[Off_P12]
           ,[On_P12]
           ,[Off_PAS]
           ,[Off_AMPL_exNMLA]
           ,[On_PAS]
           ,[On_AMPL_exNMLA]
           ,[Off_Product_Code]
           ,[On_Product_Code]
           ,[Off_Contract_Id]
           ,[On_Contract_Id]
           ,[Off_Delinks_ExDelinks]
           ,[On_Delinks_ExDelinks]
           ,[On_Off_Plnr_Same]
           ,[Off_Plnr_Id]
           ,[Off_Plnr_Name]
           ,[Off_Practice_Name]
           ,[Off_Brand]
           ,[On_Plnr_Id]
           ,[On_Plnr_Name]
           ,[On_Practice_Name]
           ,[On_Brand]
          -- ,[Off_IP_Injury_Benefit_Period]
          -- ,[On_IP_Injury_Benefit_Period]
           ,[Off_API_Amt]
           ,[On_API_Amt]
           ,[Off_Sum_Insured]
           ,[On_Sum_Insured]
           ,[Product_Option_Code]
           ,[Off_Record_Identifier]
           ,[Off_Sequence_Number]
           ,[IDS_Census_Date]
           ,[On_Record_Identifier]
           ,[On_Sequence_Number]
           ,[On_Census_Date]
           ,[On_Contract_Risk_Start_Date]
           ,[On_Contract_Risk_Expr_Date]
           ,[On_Contract_Status]
           ,[On_Contract_Contract_Key]
           ,[Off_Contract_Contract_Key]
           ,[On_Contract_Contract_Risk_Key]
           ,[On_Product_Option_Code]
           ,[On_Contract_Original_Sum_Insured]
           ,[On_Contract_Sum_Insured]
           ,[Off_Contract_Contract_Risk_Key]
           ,[Off_Contract_Risk_Start_Date]
           ,[Off_Product_Option_Code]
           ,[Off_Contract_Sum_Insured]
           ,[Off_Contract_Product_Opt_Group_Desc]
           ,[On_Contract_Product_Opt_Group_Desc]
           ,[On_Contract_Original_Annual_Premium]
           ,[On_Contract_Annual_Premium]
           ,[On_Contract_QS_PC_BASE]
           ,[On_Contract_QS_PC_INCR]
           ,[On_Contract_QS_PC_CONV]
           ,[Off_Contract_Projection_Group]
           ,[Comments]
           ,[On_Contract_Insurance_Transfer_Offer_Flag]
           ,[Reinsurer_Name]
           ,[RECALC_QS_IC_PC_BASE]
           ,[RECALC_QS_IC_PC_INCR]
           ,[RECALC_QS_IC_PC_CONV]
           ,[RECALC_QS_OC_PC_BASE]
           ,[RECALC_QS_OC_PC_INCR]
           ,[RECALC_QS_OC_PC_CONV]
           ,[RECALC_QS_OCX_PC_BASE]
           ,[RECALC_QS_OCX_PC_INCR]
           ,[RECALC_QS_OCX_PC_CONV]
           ,[PY_Campaign_Indicator]
           ,[Valid_Conversion_Indicator]
           ,[Claim_Number]
           ,[Claim_Status]
           ,[Created_By]
           ,[Created_Date]
           ,[Updated_By]
           ,[Updated_Date]
           ,[Process_Log_ID])
SELECT DISTINCT
	  S.Risk_Life_Insured_Full_Name_cv
	  ,S.Risk_Life_Insured_Scv_Customer_Id_cv
	  ,S.Risk_Life_Insured_Dob_cv
	  ,S.Curr_Age
	  ,S.API_Risk_Type_Code_cv
	  ,S.Off_Date
	  ,S.Off_Contract_End_Date
	  ,S.Age_At_Off_Date
	  ,S.On_Date
	  ,S.Age_At_On_Date
	  ,S.Lag_between_Off_and_On
	  ,S.Off_Owner_Name
	  ,S.Off_Owner_SCV_ID
	  ,S.On_Owner_Name
	  ,S.On_Owner_SCV_ID
	  ,S.Off_Product_Group
	  ,S.On_Product_Group
	  ,S.Off_P12
	  ,S.On_P12
	  ,S.Off_PAS
	  ,S.Off_AMPL_exNMLA
	  ,S.On_PAS
	  ,S.On_AMPL_exNMLA
	  ,S.Off_Product_Code
	  ,S.On_Product_Code
	  ,S.Off_Contract_Id
	  ,S.On_Contract_Id
	  ,S.Off_Delinks_ExDelinks
	  ,S.On_Delinks_ExDelinks
	  ,S.On_Off_Plnr_Same
	  ,S.Off_Plnr_Id
	  ,S.Off_Plnr_Name
	  ,S.Off_Practice_Name
	  ,S.Off_Brand
	  ,S.On_Plnr_Id
	  ,S.On_Plnr_Name
	  ,S.On_Practice_Name
	  ,S.On_Brand
	 -- ,S.Off_IP_Injury_Benefit_Period
	 -- ,S.On_IP_Injury_Benefit_Period
	  ,S.Off_API_Amt
	  ,S.On_API_Amt
	  ,S.Off_Sum_Insured
	  ,S.On_Sum_Insured
	  ,S.Product_Option_Code
	  ,T.[Off_Record_Identifier]
      ,T.[Off_Sequence_Number]
      ,T.[IDS_Census_Date]
      ,T.[On_Record_Identifier]
      ,T.[On_Sequence_Number]
      ,T.[On_Census_Date]
      ,T.[On_Contract_Risk_Start_Date]
      ,T.[On_Contract_Risk_Expr_Date]
      ,T.[On_Contract_Status]
      ,T.[On_Contract_Contract_Key]
      ,T.[Off_Contract_Contract_Key]
      ,T.[On_Contract_Contract_Risk_Key]
      ,T.[On_Product_Option_Code]
      ,T.[On_Contract_Original_Sum_Insured]
      ,T.[On_Contract_Sum_Insured]
      ,T.[Off_Contract_Contract_Risk_Key]
      ,T.[Off_Contract_Risk_Start_Date]
      ,T.[Off_Product_Option_Code]
      ,T.[Off_Contract_Sum_Insured]
      ,T.[Off_Contract_Product_Opt_Group_Desc]
      ,T.[On_Contract_Product_Opt_Group_Desc]
      ,T.[On_Contract_Original_Annual_Premium]
      ,T.[On_Contract_Annual_Premium]
      ,T.[On_Contract_QS_PC_BASE]
      ,T.[On_Contract_QS_PC_INCR]
      ,T.[On_Contract_QS_PC_CONV]
      ,T.[Off_Contract_Projection_Group]
      ,T.[Comments]
      ,T.[On_Contract_Insurance_Transfer_Offer_Flag]
      ,T.[Reinsurer_Name]
      ,T.[RECALC_QS_IC_PC_BASE]
      ,T.[RECALC_QS_IC_PC_INCR]
      ,T.[RECALC_QS_IC_PC_CONV]
      ,T.[RECALC_QS_OC_PC_BASE]
      ,T.[RECALC_QS_OC_PC_INCR]
      ,T.[RECALC_QS_OC_PC_CONV]
      ,T.[RECALC_QS_OCX_PC_BASE]
      ,T.[RECALC_QS_OCX_PC_INCR]
      ,T.[RECALC_QS_OCX_PC_CONV]
      ,T.[PY_Campaign_Indicator]
      ,T.[Valid_Conversion_Indicator]
      ,T.[Claim_Number]
      ,T.[Claim_Status]
	  ,USER_NAME()
	  ,getdate()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID  	
  FROM [stg].[stg_ConvIdentification] S
  join ConvIdentification_Temp T
  on S.Off_Contract_Id = T.Off_Contract_Id
  and S.Off_Product_Code = T.Off_Product_Code
  and S.API_Risk_Type_Code_cv = T.API_Risk_Type_Code_cv
  and S.Risk_Life_Insured_Dob_cv = T.Risk_Life_Insured_Dob_cv
  and S.On_Contract_Id = T.On_Contract_id
  and S.On_Product_Code = T.On_Product_Code
  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

	

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_ConvIdentificationTemp_Table]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_Load_ConvIdentificationTemp_Table]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;
	BEGIN TRAN T1;
delete from [dbo].[ConvIdentification_Temp]
PRINT 'Table deleted for old census date'
--
 SET @DeleteRowCount = @@ROWCOUNT;
insert into [dbo].[ConvIdentification_Temp]
    (
			[Off_Sequence_Number]
			,[On_Sequence_Number]
			,[Off_Contract_Id]
		   ,[Off_Product_Code]
		   ,[API_Risk_Type_Code_cv]
		   ,[Off_Date]
		   ,[Risk_Life_Insured_Dob_cv]
		   ,[Off_Record_Identifier]
           ,[IDS_Census_Date]
		   ,[On_Contract_id]
		   ,[On_Product_Code]
		   ,[On_Date]
           ,[On_Record_Identifier]
           ,[On_Contract_Risk_Start_Date]
           ,[On_Census_Date]
           ,[On_Contract_Risk_Expr_Date]
           ,[On_Contract_Status]
           ,[On_Contract_Contract_Key]
           ,[Off_Contract_Contract_Key]
           ,[On_Contract_Contract_Risk_Key]
           ,[On_Product_Option_Code]
           ,[On_Contract_Original_Sum_Insured]
           ,[On_Contract_Sum_Insured]
           ,[Off_Contract_Contract_Risk_Key]
           ,[Off_Contract_Risk_Start_Date]
           ,[Off_Product_Option_Code]
           ,[Off_Contract_Sum_Insured]
           ,[Off_Contract_Product_Opt_Group_Desc]
           ,[On_Contract_Product_Opt_Group_Desc]
           ,[On_Contract_Original_Annual_Premium]
           ,[On_Contract_Annual_Premium]
           ,[On_Contract_QS_PC_BASE]
           ,[On_Contract_QS_PC_INCR]
           ,[On_Contract_QS_PC_CONV]
           ,[Off_Contract_Projection_Group]
           ,[Comments]
           ,[On_Contract_Insurance_Transfer_Offer_Flag]
           ,[Reinsurer_Name]
           ,[RECALC_QS_IC_PC_BASE]
           ,[RECALC_QS_IC_PC_INCR]
           ,[RECALC_QS_IC_PC_CONV]
           ,[RECALC_QS_OC_PC_BASE]
           ,[RECALC_QS_OC_PC_INCR]
           ,[RECALC_QS_OC_PC_CONV]
           ,[RECALC_QS_OCX_PC_BASE]
           ,[RECALC_QS_OCX_PC_INCR]
           ,[RECALC_QS_OCX_PC_CONV]
		   ,[PY_Campaign_Indicator]
		   ,[Valid_Conversion_Indicator]
		   ,[Claim_Number]
		   ,[Claim_Status]
           ,[Created_By]
           ,[Created_Date]
           ,[Updated_By]
           ,[Updated_Date]
           ,[Process_Log_ID]
	  )
SELECT 
		ROW_NUMBER() OVER(partition by CONCAT(Off_Contract_Id,Off_Product_Code,API_Risk_Type_Code_cv,Off_Date,Risk_Life_Insured_Dob_cv) 
		ORDER BY CONCAT(Off_Contract_Id,Off_Product_Code,API_Risk_Type_Code_cv,Off_Date,Risk_Life_Insured_Dob_cv)) as [Off_Sequence_Number]
		,ROW_NUMBER() OVER(partition by CONCAT(On_Contract_id,On_Product_Code,API_Risk_Type_Code_cv,Risk_Life_Insured_Dob_cv) 
		ORDER BY CONCAT(On_Contract_id,On_Product_Code,API_Risk_Type_Code_cv,Risk_Life_Insured_Dob_cv)) as [On_Sequence_Number]
		,Off_Contract_Id
		,Off_Product_Code
		,[API_Risk_Type_Code_cv]
		,[Off_Date]
	    ,[Risk_Life_Insured_Dob_cv]
		,CONCAT(Off_Contract_Id,Off_Product_Code,API_Risk_Type_Code_cv,Off_Date,Risk_Life_Insured_Dob_cv) as [Off_Record_Identifier]
      ,@ProcessingMonthYear
	  ,[On_Contract_id]
	  ,[On_Product_Code]
	  ,[On_Date]
      ,CONCAT(On_Contract_id,On_Product_Code,API_Risk_Type_Code_cv,Risk_Life_Insured_Dob_cv) as [On_Record_Identifier]
 	  ,NULL
	  ,NULL
	  ,NULL
      ,NULL
      ,NULL 
	   ,NULL
	  ,NULL
	  ,[Product_Option_Code]
	  ,NULL
      ,NULL
	   ,NULL
	  ,NULL
	  ,NULL
	  ,NULL
      ,NULL
	   ,NULL
	  ,NULL
	  ,NULL
	  ,NULL
      ,NULL
	   ,NULL
	  ,NULL
	  ,NULL
	  ,NULL
      ,NULL
	   ,NULL
	  ,NULL
	  ,NULL
	  ,NULL
      ,NULL
	   ,NULL
	  ,NULL
	  ,NULL
	  ,NULL
	  ,[PY_Campaign_Indicator]
	  ,(case when [Valid_Conversion_Indicator] = 'NA' then 'YES' 
	   when len([Valid_Conversion_Indicator]) = 0 then 'Yes'
	   when [Valid_Conversion_Indicator] is NULL then 'Yes'
	   else [Valid_Conversion_Indicator]
	   end) as [Valid_Conversion_Indicator]
	  ,NULL
	  ,NULL
      ,SYSTEM_USER
	  ,GETDATE()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID	  
  FROM [stg].[stg_ConvIdentification];
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

	

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_CP]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS

-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" for inserting lapsed records into Inforce and Inforce_Temp tables 
-- ==============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	Load Ultimate (CP) data from Staging Table
-- ==============================================
-- Author:		AWJ
-- Create date: July 2017
-- Description:	Load ULTIMATE data from Staging Table
-- ==============================================
-- Change Log:
-- Apr 2018 - AWJ - Add in ASSESS_CODE from the Staging Table
-- ==========================================================
--EXEC usp_Load_ULTIMATE
	
CREATE PROCEDURE [dbo].[usp_Load_CP] @ProcessLogID int,@CENSUS_DATE datetime
			-- Add the parameters for the stored procedure here
	AS
	BEGIN
			-- SET NOCOUNT ON added to prevent extra result sets from
			-- interfering with SELECT statements.
	SET NOCOUNT ON;


		--Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
		--DECLARE @CENSUS date = (SELECT top 1 CENSUS_DATE From stg.Stg_Ult_Benefit)
		DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))
		
		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0

		IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
		Select
			TREATY_START         = @TREATY_START
			,CENSUS_DATE         = @CENSUS_DATE
			,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
			,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
			,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
			,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
			,PRODUCT_SYSTEM_CODE = 'CP'
		Into #LOAD_PARAMS

		--Select * from #LOAD_PARAMS

		--Log the Function Call
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='Start'

BEGIN TRY

Begin Tran INFORCE_TEMP_CP_Loading

		--Load the data from the Staging Table into INFORCE_TEMP
		truncate TABLE INFORCE_TEMP_CP
		-- Create a temp table to store records only for the in-scope Product Benefit Combinations
		CREATE TABLE #TEMP_ULTIMATE_BENEFIT(
		CENSUS_DATE datetime2(7)
           ,CONTRACT_KEY numeric(10,0)
           ,PARTY_KEY numeric(10,0)
           ,CONTRACT_RISK_KEY numeric(10,0)
           ,CONTRACT_ID varchar(50)
           ,PAS_CLIENT_ID varchar(20)
           ,PRODUCT_SYSTEM_CODE varchar(3)
           ,FIRST_NAME varchar(120)
           ,MIDDLE_NAME varchar(120)
           ,SURNAME varchar(100)
           ,GENDER_CODE varchar(3)
           ,DOB datetime2(7)
           ,CONTRACT_START_DATE datetime2(7)
           ,PRODUCT_CODE varchar(20)
           ,PRODUCT_OPTION_CODE varchar(20)
           ,PRODUCT_OPT_GROUP_DESC varchar(50)
           ,RISK_START_DATE datetime2(7)
           ,RISK_EXPR_DATE datetime2(7)
           ,SMOKER_STATUS_CODE varchar(10)
           ,SDUTY_STATE_CODE varchar(3)
           ,POST_CODE varchar(30)
           ,OCUPTN_CLASS_CODE varchar(20)
           ,CLASS_OF_BUSN_CODE varchar(2)
           ,STEP_LVL_PREM_CODE varchar(2)
           ,PREM_FREQ numeric(5,2)
           ,LINKED_BENEFIT_CODE varchar(10)
           ,RISK_CMSN_TYPE_CODE varchar(10)
           ,SUM_INSURED_AMT numeric(20,3)
           ,ANNUAL_POL_FEE float
           ,PREM_AMT numeric(20,3)
           ,EXPLICIT_SDUTY_AMT numeric(20,2)
           ,ANNUAL_PREM float
           ,ASSESS_CODE varchar(10)
           ,BENEFIT_INDEXATION varchar(10)
           ,SALESCHANNEL varchar(15)
           ,DTH_SUM_ASSD float
           ,TPD_SUM_ASSD float
           ,CC_SUM_ASSD float
           ,ANN_PHI_BEN float
           ,MP char(6)
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_BY varchar(50)
		)
		INSERT INTO #TEMP_ULTIMATE_BENEFIT
		select DISTINCT [CENSUS_DATE]
      ,[CONTRACT_KEY]
      ,[PARTY_KEY]
      ,[CONTRACT_RISK_KEY]
      ,[CONTRACT_ID]
      ,[PAS_CLIENT_ID]
      ,s.[PRODUCT_SYSTEM_CODE]
      ,[FIRST_NAME]
      ,[MIDDLE_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[CONTRACT_START_DATE]
      ,s.[PRODUCT_CODE]
      ,s.[PRODUCT_OPTION_CODE]
      ,[PRODUCT_OPT_GROUP_DESC]
      ,[RISK_START_DATE]
      ,[RISK_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[SDUTY_STATE_CODE]
      ,[POST_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[CLASS_OF_BUSN_CODE]
      ,[STEP_LVL_PREM_CODE]
      ,[PREM_FREQ]
      ,[LINKED_BENEFIT_CODE]
      ,[RISK_CMSN_TYPE_CODE]
      ,[SUM_INSURED_AMT]
      ,[ANNUAL_POL_FEE]
      ,[PREM_AMT]
      ,[EXPLICIT_SDUTY_AMT]
      ,[ANNUAL_PREM]
      ,[ASSESS_CODE]
      ,[BENEFIT_INDEXATION]
      ,[SALESCHANNEL]
      ,[DTH_SUM_ASSD]
      ,[TPD_SUM_ASSD]
      ,[CC_SUM_ASSD]
      ,[ANN_PHI_BEN]
      ,[MP]
      ,s.[Created_Date_Time]
      ,[Import_Log_ID]
      ,s.[Created_BY]
	 from [stg].[Stg_Ultimate_Benefit]s
	 join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
	 and p.Treaty_Id not in (-1,-999)


		INSERT INTO [INFORCE_TEMP_CP] (
					[CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PAS_CLIENT_ID],[PRODUCT_SYSTEM_CODE]
				   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
				   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
				   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
				   ,[POST_CODE]
				   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[SERIES_START_DATE],[ANNUAL_POL_FEE],[PREM_AMT]
				   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[ANNUAL_PREM],[ASSESS_CODE],[RISK_WAIT_PERIOD],[SICKNESS_BENEFIT_PERIOD],[INJURY_BENEFIT_PERIOD]
				   ,[INDMNTY_OPTION_CODE],[RISK_CMSN_TYPE_CODE]
				   ,[AIDS_CVRG_CODE]
				   ,[BENEFIT_INDEXATION]
				   ,[SUM_INSRD_FREQ_CODE],[INCR_CLAIM_OPT_PCNT]
				   ,[CPI_INCR]
				   ,[SALESCHANNEL]
				   ,[LINKED_BENEFIT_CODE]
				   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
				   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
				   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]
				   )
		SELECT DISTINCT
			C.CENSUS_DATE,CONTRACT_KEY,PARTY_KEY,C.CONTRACT_RISK_KEY,CONTRACT_ID,PAS_CLIENT_ID,C.PRODUCT_SYSTEM_CODE
			,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB
			,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC
			,coalesce(RISK_START_DATE,CONTRACT_START_DATE),RISK_EXPR_DATE,nullif(SMOKER_STATUS_CODE,'NA'),SDUTY_STATE_CODE
			,POST_CODE=Case when SDUTY_STATE_CODE <> 'OS' Then Left(POST_CODE,4) ELSE NULL End
			,OCUPTN_CLASS_CODE,nullif(STEP_LVL_PREM_CODE,'NA'),SUM_INSURED_AMT
			,AT_RISK_AMT = SUM_INSURED_AMT
			,SERIES_START_DATE = NULL,ANNUAL_POL_FEE,PREM_AMT
			,EXPLICIT_SDUTY_AMT,PREM_FREQ,ANNUAL_PREM, ASSESS_CODE
			,RISK_WAIT_PERIOD = NULL,SICKNESS_BENEFIT_PERIOD=NULL,INJURY_BENEFIT_PERIOD=Null
			,INDMNTY_OPTION_CODE=NULL
			,RISK_CMSN_TYPE_CODE=RISK_CMSN_TYPE_CODE
			,AIDS_CVRG_CODE=null
			,BENEFIT_INDEXATION = nullif(BENEFIT_INDEXATION, 'NA')
			,SUM_INSRD_FREQ_CODE = 'ADHOC'
			,INCR_CLAIM_OPT_PCNT = NULL
			,CPI_INCR=isnull(CPI.CPI_INCR,0)
			,SALESCHANNEL
			,LINKED_BENEFIT_CODE
			,'INDIV'
			,PROJECTION_GROUP = 'AMPL_LS_UW_???'
			,MP
			,DTH_SUM_ASSD,TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN
			,ANNUAL_PREM + ANNUAL_POL_FEE As PROPHET_PREM
			,getdate()
			,NULL
			,CURRENT_USER
			,NULL
			,@ProcessLogID
		FROM #TEMP_ULTIMATE_BENEFIT As C LEFT JOIN (
			Select contract_risk_key, CPI_INCR=sum(SUM_INSURED_CHG_AMT) FROM stg.Stg_Ultimate_Cpi GROUP BY contract_risk_key
			) AS CPI on C.CONTRACT_RISK_KEY = CPI.CONTRACT_RISK_KEY
			, #LOAD_PARAMS P

			SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
			Print 'Loaded INFORCE_TEMP_CP Table ' + convert(varchar(50), @InsertRowCount)

		--Update Missing CONTRACT_START_DATE from the Earliest RISK_START_DATE 
		Update T SET
			CONTRACT_START_DATE = UPD.EARLIEST_RISK_START
		From INFORCE_TEMP_CP As T JOIN
			(Select 
				CONTRACT_RISK_KEY
				,EARLIEST_RISK_START = min(RISK_START_DATE) over (Partition by CONTRACT_KEY)
			 From INFORCE_TEMP_CP) As UPD
			 ON T.CONTRACT_RISK_KEY = UPD.CONTRACT_RISK_KEY 
		WHERE CONTRACT_START_DATE is NULL
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Set Missing Contract Start to Earliest Risk Start ' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Set Missing Contract Start to Earliest Risk Start', @RECS=@@ROWCOUNT

		--Update the ACODE and PCODE
		--EXEC usp_Assign_PCODE 'TEMP'
		EXEC usp_Assign_PCODE 'CP','TEMP'

		--Insert other Ultimate Specific Option Flags
		Update INFORCE_TEMP_CP Set OPTION_FLAGS = coalesce(OPTION_FLAGS+'B','B') Where PRODUCT_CODE = 'CCI' and PRODUCT_OPT_GROUP_DESC in ('DTH/TRAUMA', 'TRAUMA')
		Update INFORCE_TEMP_CP Set OPTION_FLAGS = coalesce(OPTION_FLAGS+'B','B') Where PRODUCT_OPTION_CODE = 'CCVB' and PRODUCT_OPT_GROUP_DESC = 'TRAUMA' and isnull(charindex('B',OPTION_FLAGS),0)=0
		Update INF SET OPTION_FLAGS = coalesce(OPTION_FLAGS+'P','P') --PARTIALS_IND='P'
		From INFORCE_TEMP_CP As INF JOIN
			(Select CONTRACT_KEY, PARTY_KEY, substring(PRODUCT_OPTION_CODE,1,4) As BEN
			from INFORCE_TEMP_CP Where PRODUCT_OPTION_CODE like '%-PPK') As UPD
			on INF.contract_key = UPD.CONTRACT_KEY and INF.PARTY_KEY = UPD.PARTY_KEY and INF.PRODUCT_OPTION_CODE = UPD.BEN
			where isnull(charindex('P',OPTION_FLAGS),0)=0
		
		Delete from INFORCE_TEMP_CP where PRODUCT_OPTION_CODE like '%-PPK' --delete partial indicator record
		
		Update INF SET OPTION_FLAGS = coalesce(OPTION_FLAGS+'Q','Q') --PARTIALS_IND = 'PP' 
		From INFORCE_TEMP_CP As INF JOIN
			(Select CONTRACT_KEY, PARTY_KEY, substring(PRODUCT_OPTION_CODE,1,4) As BEN
			from INFORCE_TEMP_CP Where PRODUCT_OPTION_CODE like '%-PPP') As UPD
			on INF.contract_key = UPD.CONTRACT_KEY and INF.PARTY_KEY = UPD.PARTY_KEY and INF.PRODUCT_OPTION_CODE = UPD.BEN
			where isnull(charindex('Q',OPTION_FLAGS),0)=0
		
		Delete from INFORCE_TEMP_CP where PRODUCT_OPTION_CODE like '%-PPP' --delete partial indicator record
		
		Update INF SET  OPTION_FLAGS = coalesce(OPTION_FLAGS+'R','R') -- REINSTATE_IND = 'Y'
		From INFORCE_TEMP_CP As INF JOIN
			(Select CONTRACT_KEY, PARTY_KEY, substring(PRODUCT_OPTION_CODE,1,4) As BEN
			from INFORCE_TEMP_CP Where PRODUCT_OPTION_CODE like '%-TRE') As UPD
			on INF.contract_key = UPD.CONTRACT_KEY and INF.PARTY_KEY = UPD.PARTY_KEY and INF.PRODUCT_OPTION_CODE = UPD.BEN
			where isnull(charindex('R',OPTION_FLAGS),0)=0
		
		Delete from INFORCE_TEMP_CP where PRODUCT_OPTION_CODE like '%-TRE' --delete trauma reinstatement record
		
		Update INF SET OPTION_FLAGS = coalesce(OPTION_FLAGS+'B','B') --BUYBACK_IND = 'Y'
		From INFORCE_TEMP_CP As INF JOIN
			(Select CONTRACT_KEY, PARTY_KEY, substring(PRODUCT_OPTION_CODE,1,4) As BEN
			from INFORCE_TEMP_CP Where PRODUCT_OPTION_CODE like '%-BBK') As UPD
			on INF.contract_key = UPD.CONTRACT_KEY and INF.PARTY_KEY = UPD.PARTY_KEY and INF.PRODUCT_OPTION_CODE = UPD.BEN
			where isnull(charindex('B',OPTION_FLAGS),0)=0
		
		Delete from INFORCE_TEMP_CP where PRODUCT_OPTION_CODE like '%-BBK' --delete buyback record
		
		Update INF SET  OPTION_FLAGS = coalesce(OPTION_FLAGS+'B','B') --BUYBACK_IND = 'Y'
		From INFORCE_TEMP_CP As INF JOIN
			(Select CONTRACT_KEY, PARTY_KEY
			from INFORCE_TEMP_CP Where PRODUCT_OPTION_CODE = 'DLSC-PLS') As UPD
			on INF.contract_key = UPD.CONTRACT_KEY and INF.PARTY_KEY = UPD.PARTY_KEY and INF.PRODUCT_OPTION_CODE = 'DLSC'
			where isnull(charindex('B',OPTION_FLAGS),0)=0
		
		Delete from INFORCE_TEMP_CP where PRODUCT_OPTION_CODE like '%-PLS' --delete buyback record
		
		Update INF SET OPTION_FLAGS = coalesce(OPTION_FLAGS+'B','B') --BUYBACK_IND = 'Y'
			From INFORCE_TEMP_CP as INF
			WHERE PRODUCT_OPTION_CODE = 'DLSB' and isnull(charindex('B',OPTION_FLAGS),0)=0

		--Select * from INFORCE_TEMP_CP where CharIndex('B', OPTION_FLAGS)>0

		--Linked Benefit Code
		--Update the Death/Trauma to 'SA' as it is a self inclusive linked product
		
		Update INFORCE_TEMP_CP
		Set LINKED_BENEFIT_CODE = 'SA'
		from INFORCE_TEMP_CP
		where PRODUCT_OPT_GROUP_DESC = 'DTH/TRAUMA'
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Death/Trauma SA Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Death/Trauma SA Linked', @RECS=@@ROWCOUNT

		--Update the NA Products
		Update INFORCE_TEMP_CP
		Set LINKED_BENEFIT_CODE = Null
		from INFORCE_TEMP_CP
		where PRODUCT_OPT_GROUP_DESC in ('BOI','WP')
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update BOI/Waiver Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update BOI/Waiver Linked', @RECS=@@ROWCOUNT

		IF OBJECT_ID('tempdb.dbo.#LINKED_BENEFITS', 'U') IS NOT NULL DROP TABLE #LINKED_BENEFITS
		--Update Linked Benefit Code
		Select 
			CONTRACT_ID
			,PAS_CLIENT_ID
			,sum(LINKED_GROUP) As LINKED_GROUP
		into #LINKED_BENEFITS
		From (
			Select Distinct
				CONTRACT_ID, PAS_CLIENT_ID
				,Case PRODUCT_OPT_GROUP_DESC
					When 'DTH' Then 1
					When 'TPD' Then 2
					When 'TRAUMA' Then 4
					Else 0
				End As LINKED_GROUP
			From INFORCE_TEMP_CP
			Where LINKED_BENEFIT_CODE in ('L','NA')) As III
		Group by CONTRACT_ID, PAS_CLIENT_ID
		
		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		Print 'Update Other Linked Benefits' + convert(varchar(50), @InsertRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Other Linked Benefits', @RECS=@@ROWCOUNT

		--Change S to SA
		Update INFORCE_TEMP_CP Set
			LINKED_BENEFIT_CODE = 'SA'
		where LINKED_BENEFIT_CODE = 'S'

		--Update the StandAlone Deaths 
		Update INF Set
			LINKED_BENEFIT_CODE = 'SA'
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 1 and INF.LINKED_BENEFIT_CODE in ('L','NA') and INF.PRODUCT_OPT_GROUP_DESC = 'DTH'
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Deaths SA Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Deaths SA Linked', @RECS=@@ROWCOUNT

		--Update the StandAlone TPD
		Update INF Set
			LINKED_BENEFIT_CODE = 'SA'
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 2 and INF.LINKED_BENEFIT_CODE in ('L','NA') and INF.PRODUCT_OPT_GROUP_DESC = 'TPD'
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update TPD SA Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update TPD SA Linked', @RECS=@@ROWCOUNT

		--Update the StandAlone Trauma
		Update INF Set
			LINKED_BENEFIT_CODE = 'SA'
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 4 and INF.LINKED_BENEFIT_CODE in ('L','NA') and INF.PRODUCT_OPT_GROUP_DESC = 'TRAUMA'
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Trauma SA Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Trauma SA Linked', @RECS=@@ROWCOUNT

		--Update the TPD Accelerated Deaths 
		Update INF Set
			LINKED_BENEFIT_CODE = Case 
				When PRODUCT_OPT_GROUP_DESC = 'DTH' Then 'T'
				When PRODUCT_OPT_GROUP_DESC = 'TPD' Then 'D'
				End 
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 3 and INF.LINKED_BENEFIT_CODE in ('L','NA')
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update TPD Accel' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update TPD Accel', @RECS=@@ROWCOUNT

		--Update the Trauma Accelerated Deaths 
		Update INF Set
			LINKED_BENEFIT_CODE = Case 
				When PRODUCT_OPT_GROUP_DESC = 'DTH' Then 'H'
				When PRODUCT_OPT_GROUP_DESC = 'TRAUMA' Then 'D'
				End 
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 5 and INF.LINKED_BENEFIT_CODE in ('L','NA')
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Trauma Accel' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Trauma Accel', @RECS=@@ROWCOUNT

		--Update the TPD/Trauma that dont have Death to be StandAlone
		Update INF Set
			LINKED_BENEFIT_CODE = Case 
				When PRODUCT_OPT_GROUP_DESC = 'TPD' Then 'SA'
				When PRODUCT_OPT_GROUP_DESC = 'TRAUMA' Then 'SA'
				End 
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 6 and INF.LINKED_BENEFIT_CODE in ('L','NA')
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Trauma/TPD Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Trauma/TPD Linked', @RECS=@@ROWCOUNT

		--Update The Lot
		Update INF Set
			LINKED_BENEFIT_CODE = Case 
				When PRODUCT_OPT_GROUP_DESC = 'DTH' Then 'HT'
				When PRODUCT_OPT_GROUP_DESC = 'TPD' Then 'DH'
				When PRODUCT_OPT_GROUP_DESC = 'TRAUMA' Then 'DT'
				End 
		From INFORCE_TEMP_CP As INF Join #LINKED_BENEFITS as L On INF.CONTRACT_ID = L.CONTRACT_ID and isnull(INF.PAS_CLIENT_ID,'') = isnull(L.PAS_CLIENT_ID,'')
		Where L.LINKED_GROUP = 7 and INF.LINKED_BENEFIT_CODE in ('L','NA')
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Death/Trauma/TPD Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Death/Trauma/TPD Linked', @RECS=@@ROWCOUNT

		--Update the NULLs
		Update INFORCE_TEMP_CP Set LINKED_BENEFIT_CODE = 'NA' where LINKED_BENEFIT_CODE is NULL

		--Update STEP_LVL_PREM_CODE on WP to the same as the death benefit
		UPDATE T SET
			STEP_LVL_PREM_CODE = UPD.STEP_LVL_PREM_CODE
		From INFORCE_TEMP_CP As T Join
			(Select 
				CONTRACT_KEY
				,STEP_LVL_PREM_CODE
				,ROW_NUMBER() Over (Partition by contract_key order by DTH_SUM_ASSD Desc, TPD_SUM_ASSD Desc, CC_SUM_ASSD Desc) as Ranking
				FROM INFORCE_TEMP_CP
			) As UPD
			On T.contract_key = UPD.contract_key
		Where UPD.Ranking = 1 and T.product_opt_group_desc = 'WP'

		--Change any remaining to stepped
		UPDATE INFORCE_TEMP_CP SET STEP_LVL_PREM_CODE = 'S' where STEP_LVL_PREM_CODE is NULL

		--Update the SR_CODES
		DECLARE @SR TABLE(CONTRACT_RISK_KEY int Not NULL, SR_CODES nvarchar(21) Null, SR_RATE float NULL, SR_DISC_PC float NULL)
		Insert into @SR
		SELECT 
			CONTRACT_RISK_KEY 
			,SPCL_RISK_TYPE_CODES = STUFF(
						   (SELECT '/' + t2.SPCL_RISK_TYPE_CODE
								FROM (Select Distinct CONTRACT_RISK_KEY, SPCL_RISK_TYPE_CODE from stg.Stg_Ultimate_Sr) As t2
								WHERE t1.CONTRACT_RISK_KEY=t2.CONTRACT_RISK_KEY
								ORDER BY t2.SPCL_RISK_TYPE_CODE
								FOR XML PATH(''), TYPE
						   ).value('.','varchar(max)')
						   ,1,1, ''
					  )
			,SUM(convert(float,SPECIAL_RISK_RATE)) As SR_RATE
			,SUM(convert(float,SPECIAL_DISC_PC)) As SR_DISC_PC

		  
		  FROM stg.Stg_Ultimate_Sr As t1
		  Group by 
			[CONTRACT_RISK_KEY]
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Combine Special Risks Table' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Combine Special Risks Table', @RECS=@@ROWCOUNT

		--Update the inforce table with SR Policies
		UPDATE INF SET
			[SR_CODES] = SR.SR_CODES
			,[SR_RATE] = SR.SR_RATE 
			,[SR_DISC_PC] = SR.SR_DISC_PC
		FROM INFORCE_TEMP_CP As INF JOIN @SR As SR on INF.CONTRACT_RISK_KEY = SR.CONTRACT_RISK_KEY 
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Special Risks' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Special Risks', @RECS=@@ROWCOUNT

		Commit TRAN INFORCE_TEMP_CP_Loading

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN INFORCE_TEMP_CP_Loading;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempCP


		--Update the Record of Lapses
		--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
		Delete from stg.Stg_Ultimate_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_CP)
		
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Unlapsed from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

		--Delete from Lapse Staging any policies that are not present in the previous month
		Delete From stg.Stg_Ultimate_Off
		where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='CP')
		
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Excluded from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT

		--Insert the Lapsed Policies into the Lapse Table 
		--truncate table LAPSED_TEMP
		--1.
		delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='CP'
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				,MONTHS_WRITE_OFF = dbo.intMinMax(coalesce(dbo.IntMin(DateDiff(Month,PREM_RENEW_TO_DATE,P.TOMORROW)-1,3),0),0,P.MONTHS_SINCE_TREATY)
				,I.Reins_Life_Identifier
			FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_CP As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN stg.Stg_Ultimate_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
				,#LOAD_PARAMS As P
			WHERE T.CONTRACT_RISK_KEY is NULL
				and I.CENSUS_DATE = P.LAST_MONTH
				and I.PRODUCT_SYSTEM_CODE = 'CP'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table ' + convert(varchar(50),@InsertRowCount)

		--Add lapsed benefits where the contract is not in the LAPSED list
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
		Select
			I.CENSUS_DATE
			,I.CONTRACT_KEY
			,I.CONTRACT_RISK_KEY
			,I.PRODUCT_SYSTEM_CODE
			,MONTHS_WRITE_OFF = 0
			,I.Reins_Life_Identifier
		From INFORCE As I, #LOAD_PARAMS as P
		where
			I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'CP' --Inforce records from Last Month
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_CP) --List of Current Records (not Lapsed)
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='CP') --List of Lapsed Records Already Included
			--2. in above line
			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list '  + convert(varchar(50),@InsertRowCount)

		--Update the AMOUNTS in LAPSE_TEMP
		Update L Set
			QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
				From INFORCE As I 
				Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
					and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
		From
			LAPSED_TEMP As L, #LOAD_PARAMS As P
		Where MONTHS_WRITE_OFF > 0
		and L.PRODUCT_SYSTEM_CODE='CP'
		--3 is above line
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update the AMOUNTS in LAPSE_TEMP ' + convert(varchar(50),@UpdateRowCount)

		--Update the Lapsed table
		Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='CP'
		Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)--5. is adding 3 audit columns in the insert clause
			Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,Current_User,getdate()
				From LAPSED_TEMP As L, #LOAD_PARAMS As P
				where L.PRODUCT_SYSTEM_CODE='CP'
		--4. is above line
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Add to Lapse Listing ' + convert(varchar(50),@UpdateRowCount)

	Commit tran LapseUpdateToInforceTempCP

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN LapseUpdateToInforceTempCP;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


	BEGIN TRY

	BEGIN TRAN ConversionUpdateToInforceTempCP

		
		--Look for Conversions from the LAPSED Table and update the CONVERTED Table
		DECLARE @CONV_RECS int
		EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'CP', @ProcessLogID
		--EXEC @CONV_RECS = usp_Find_Conversions
		--Print @CONV_RECS

		--Delete any existing values in the CONVERTED FILE
		Delete from C From CONVERTED As C, #LOAD_PARAMS As P WHERE C.PRODUCT_SYSTEM_CODE = 'CP' and C.CENSUS_DATE = P.CENSUS_DATE

		SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
		Print 'Delete any existing values in the CONVERTED FILE ' + convert(varchar(50),@DeleteRowCount)
		
		--Replace with the New Values
		
		Insert into CONVERTED(PRODUCT_SYSTEM_CODE,CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY
			,NEW_SUM_INSURED_AMT,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_SUM_INSURED_AMT,CONVERSION_TYPE,[Created_Date_Time],[Process_Log_ID],[Created_BY])
		Select
			'CP'
			,CENSUS_DATE
			,PARTY_KEY
			,PRODUCT_OPT_GROUP_DESC
			,NEW_CONTRACT_KEY
			,NEW_CONTRACT_RISK_KEY
			,NEW_SUM_INSURED_AMT
			,OFF_CENSUS_DATE
			,OFF_CONTRACT_KEY
			,OFF_CONTRACT_RISK_KEY
			,OFF_SUM_INSURED_AMT
			,CONVERSION_TYPE
			,getdate()
			,@ProcessLogID
			,CURRENT_USER
		FROM CONVERTED_TEMP
		WHERE PAS='CP'
		--Select Top 100 * FROM CONVERTED_TEMP
		--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS_DATE, @STEP='Identify Conversions', @RECS=@CONV_RECS
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)

	COMMIT TRAN ConversionUpdateToInforceTempCP

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN ConversionUpdateToInforceTempCP;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;
	
END CATCH
				------------------------------------------------------------------------------------------------------------
				----Calculate the Quota Share information
				------------------------------------------------------------------------------------------------------------
				--DECLARE @QS_RECS int = 0
				--EXEC @QS_RECS = usp_Calc_QS
				----Print @QS_RECS
				--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='QS Calculations', @RECS=@QS_RECS
				------------------------------------------------------------------------------------------------------------

				-------------------------------------------------------------------------------------------------------------
				----Calculate the Surplus Information
				-------------------------------------------------------------------------------------------------------------
				--DECLARE @SS_RECS int = 0
				--EXEC @SS_RECS = usp_Calc_SS
				----Print @SS_RECS
				--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='SS Calculations', @RECS=@SS_RECS
				--------------------------------------------------------------------------------------------------------------


				----Identify Reinstatements
				----Create #Table to contain the lapse and reinstatement information
				--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
				--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
				--Insert into #REIN
				--Select
				--	T.CONTRACT_RISK_KEY
				--	,T.CENSUS_DATE
				--	,L.LAPSE_DATE
				--	,L.QS_AMT_LAPSE_RECOVERED
				--FROM [INFORCE_TEMP_CP] As T JOIN LAPSED As L 
				--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
				--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
				--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
				--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

				----Update Both Lapse and Inforce Temp Tables
				--BEGIN TRANSACTION;
				--Update T Set
				--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
				--FROM INFORCE_TEMP_CP As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

				--Update L Set
				--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
				--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
				--FROM
				--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

				--COMMIT;
				--DECLARE @QS_REIN int = (Select count(*) From #REIN)
				----Print @QS_REIN
				--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='Process Reinstatements', @RECS=@QS_REIN

				----Update Lapses for Conversions (Similar to Reinstatements)
				--BEGIN TRANSACTION;
				--Update T SET
				--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
				--from CONVERTED As C JOIN INFORCE_TEMP_CP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

				--Update L Set
				--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
				--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
				--from CONVERTED As C JOIN INFORCE_TEMP_CP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
				--COMMIT;

				--DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
				----Print @QS_CONV
				--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='Process Conversions', @RECS=@QS_CONV

				----Update the INFORCE Table
				----DECLARE @CENSUS Date = '31-Dec-2016'

				--Delete from INFORCE where PRODUCT_SYSTEM_CODE='CP' and CENSUS_DATE=@CENSUS
				--Insert into INFORCE Select * FROM INFORCE_TEMP_CP
				--EXEC usp_LOG @STORED_PROC='usp_Load_ULTIMATE', @CENSUS_DATE=@CENSUS, @STEP='Insert New Records', @RECS=@@ROWCOUNT 

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_CP_Pas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	<Loading PAS Ultimate (CP) data into IDS_Reinsurance DB from staging table>
-- =============================================

 CREATE PROCEDURE [dbo].[usp_Load_CP_Pas]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE DateTime

AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Declare @Import_Log_ID int = (select distinct top 1 Import_Log_ID from [Stg].[Stg_Ultimate_Pol_Pas])
	Declare @Created_Date datetime = getdate()
	Declare @Created_by varchar(50) = current_user 

	Begin Try
		
 
		  -- Delete any existing data in target table
			DELETE FROM [dbo].[PAS_ULTIMATE] WHERE CENSUS_DATE = @EFTV_DATE
			
			Set @DeleteRowCount = @@ROWCOUNT 

			-- Load data from staging table to target
			INSERT INTO [dbo].[PAS_ULTIMATE]([CENSUS_DATE],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],[CREATED_DATE],[CREATED_BY],[PROCESS_LOG_ID])
				SELECT   @EFTV_DATE
						,P.[POLID] AS CONTRACT_ID
						,NULL AS CLIENT_ID
						,NULL AS BENEFIT_CODE
						,12/ P.[MODX] * ( P.[SUN_AMT]) AS ANNUAL_PREM
						,SUM(C.[CO_SUM_INS]) AS ANNUAL_BEN
						,@Created_Date
						,@Created_by
						,@Import_Log_ID

				FROM     [Stg].[Stg_Ultimate_Pol_Pas] P
				JOIN     [Stg].[Stg_Ultimate_Cov_Pas] C ON P.[POLID] = C.[POLID]
				WHERE    RTRIM(LTRIM(P.[ST_CD])) IN ('1', '2', '3')
				AND      RTRIM(LTRIM(P.[POLICY_PRODUCT_CDE])) = 'T1'
				AND      RTRIM(LTRIM(P.[REGISTER])) <> '3'
				GROUP
				BY       P.[POLID], P.[MODX],P.[SUN_AMT]

				Set @InsertRowCount = @@ROWCOUNT

			Select   @InsertRowCount InsertRowCount, 
					 @UpdateRowCount UpdateRowCount, 
					 @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_DS]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  StoredProcedure [dbo].[usp_Load_DS]    Script Date: 24/08/2020 4:45:15 PM ******/




-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS

-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" to drive and insert �PREV_ Reins_Life_Identifier� 
--              values for lapsed records into Inforce_Temp (PAS) tables
-- ==============================================
-- Author:		KHNNR2
-- Create date: May 2017
-- Description:	Load DISCO (DS) data from Staging Table
-- ==============================================
-- Change Log:
-- Feb 2018 - AWJ - Production Fix to set null CONTRACT_START_DATE to earliest RISK_START_DATE
-- EXEC usp_Stage_Disco '31-Dec-2016'
-- EXEC usp_Load_DISCO

      
CREATE PROCEDURE [dbo].[usp_Load_DS] @ProcessLogID int,@CENSUS_DATE datetime
-- Add the parameters for the stored procedure here
AS
BEGIN
		-- SET NOCOUNT ON added to prevent extra result sets from
		-- interfering with SELECT statements.
		SET NOCOUNT ON;


				--Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
		--DECLARE @CENSUS_DATE date = (SELECT top 1 CENSUS_DATE From STAGE_DISCO)
		DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))

		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0

		IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
		Select
			TREATY_START         = @TREATY_START
			,CENSUS_DATE         = @CENSUS_DATE
			,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
			,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
			,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
			,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
			,PRODUCT_SYSTEM_CODE = 'DS'
		Into #LOAD_PARAMS

		--Select * from #LOAD_PARAMS

		--Log the Function Call
		--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Start'

BEGIN TRY

		Begin Tran INFORCE_TEMP_DS_Loading
		--Load the data from the Staging Table into INFORCE_TEMP_DS
		TRUNCATE TABLE INFORCE_TEMP_DS


     -- Create a temp table to store records only for the in-scope Product Benefit Combinations
		CREATE TABLE #temp_disco_ben(CENSUS_DATE datetime2(7)
           ,CONTRACT_KEY numeric(10,0)
           ,PARTY_KEY numeric(10,0)
           ,CONTRACT_RISK_KEY numeric(10,0)
           ,CONTRACT_ID varchar(50)
           ,PAS_CLIENT_ID varchar(20)
           ,PRODUCT_SYSTEM_CODE varchar(3)
           ,FIRST_NAME varchar(120)
           ,MIDDLE_NAME varchar(120)
           ,SURNAME varchar(100)
           ,GENDER_CODE varchar(3)
           ,DOB datetime2(7)
           ,CONTRACT_START_DATE datetime2(7)
           ,PRODUCT_CODE varchar(20)
           ,CLASS_OF_BUSN_CODE varchar(2)
           ,PRODUCT_OPTION_CODE varchar(20)
           ,PRODUCT_OPT_GROUP_DESC varchar(50)
           ,RISK_START_DATE datetime2(7)
           ,RISK_EXPR_DATE datetime2(7)
           ,SMOKER_STATUS_CODE varchar(10)
           ,SDUTY_STATE_CODE varchar(3)
           ,POST_CODE varchar(30)
           ,OCUPTN_CLASS_CODE varchar(20)
           ,STEP_LVL_PREM_CODE varchar(2)
           ,SUM_INSURED_AMT numeric(20,3)
           ,ANNUAL_POL_FEE float
           ,PREM_AMT numeric(20,3)
           ,EXPLICIT_SDUTY_AMT numeric(20,2)
           ,PREM_FREQ numeric(5,2)
           ,ANNUAL_PREM float
           ,RISK_WAIT_PERIOD_TYPE varchar(4000)
           ,RISK_WAIT_PERIOD_VAL varchar(4000)
           ,ILLNESS_PAY_PERIOD float
           ,INJURY_PAY_PERIOD float
           ,EXPRY_AGE varchar(4)
           ,AIDS_COVER_IND varchar(1)
           ,RISK_CMSN_TYPE_CODE varchar(10)
           ,CLAIM_IND varchar(1)
           ,ASSESS_CODE varchar(10)
           ,ON_HOLD_STATUS_CODE varchar(10)
           ,BENEFIT_INDEXATION varchar(10)
           ,CLAIM_INDEXATION varchar(1)
           ,INDMNTY_OPTION_CODE varchar(10)
           ,DAY_1_ACCIDENT_IND varchar(1)
           ,CHRONIC_OPTION_CODE varchar(10)
           ,SUPER_CONTRB_OPT_CODE varchar(10)
           ,NUM_TRANCHES float
           ,SALESCHANNEL varchar(15)
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_BY varchar(50)
		)
		INSERT INTO #temp_disco_ben
		SELECT distinct  [CENSUS_DATE]
      ,[CONTRACT_KEY]
      ,[PARTY_KEY]
      ,[CONTRACT_RISK_KEY]
      ,[CONTRACT_ID]
      ,[PAS_CLIENT_ID]
      ,s.[PRODUCT_SYSTEM_CODE]
      ,[FIRST_NAME]
      ,[MIDDLE_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[CONTRACT_START_DATE]
      ,s.[PRODUCT_CODE]
      ,[CLASS_OF_BUSN_CODE]
      ,s.[PRODUCT_OPTION_CODE]
      ,[PRODUCT_OPT_GROUP_DESC]
      ,[RISK_START_DATE]
      ,[RISK_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[SDUTY_STATE_CODE]
      ,[POST_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[STEP_LVL_PREM_CODE]
      ,[SUM_INSURED_AMT]
      ,[ANNUAL_POL_FEE]
      ,[PREM_AMT]
      ,[EXPLICIT_SDUTY_AMT]
      ,[PREM_FREQ]
      ,[ANNUAL_PREM]
      ,[RISK_WAIT_PERIOD_TYPE]
      ,[RISK_WAIT_PERIOD_VAL]
      ,[ILLNESS_PAY_PERIOD]
      ,[INJURY_PAY_PERIOD]
      ,[EXPRY_AGE]
      ,[AIDS_COVER_IND]
      ,[RISK_CMSN_TYPE_CODE]
      ,[CLAIM_IND]
      ,[ASSESS_CODE]
      ,[ON_HOLD_STATUS_CODE]
      ,[BENEFIT_INDEXATION]
      ,[CLAIM_INDEXATION]
      ,[INDMNTY_OPTION_CODE]
      ,[DAY_1_ACCIDENT_IND]
      ,[CHRONIC_OPTION_CODE]
      ,[SUPER_CONTRB_OPT_CODE]
      ,[NUM_TRANCHES]
      ,[SALESCHANNEL]
      ,s.[Created_Date_Time]
      ,[Import_Log_ID]
      ,s.[Created_BY]
	 from [stg].[Stg_Disco_Benefit] s
	 left outer join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
	 where p.Treaty_Id  not in (-1, -999)


		

		
		INSERT INTO [INFORCE_TEMP_DS] (
					[CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PAS_CLIENT_ID],[PRODUCT_SYSTEM_CODE]
				   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
				   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
				   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
				   ,[POST_CODE]
				   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[ANNUAL_POL_FEE],[PREM_AMT]
				   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[RISK_CMSN_TYPE_CODE],[ANNUAL_PREM]
				   ,[RISK_WAIT_PERIOD],[SICKNESS_BENEFIT_PERIOD],[INJURY_BENEFIT_PERIOD]
				   ,[INDMNTY_OPTION_CODE]
				   ,[AIDS_CVRG_CODE]
				   ,[BENEFIT_INDEXATION]
				   ,[SUM_INSRD_FREQ_CODE],[INCR_CLAIM_OPT_PCNT]
				   ,[CAMPAIGN_CODES],[DIAL_DOWN_PREM_PCNT],[ASSESS_CODE],[ASSESS_LOAD_PCNT],[SUBJECT_TO_CAMPAIGN_PCNT],[ADJ_ENTRY_AGE]
				   ,[GRP_DISC_PCNT],[DD_DISC_PCNT],[LSIDP_DISC_PCNT],[LSIDA_DISC_AMT],[MPD_DISC_PCNT],[VCDP_DISC_PCNT],[LD_DISC_PCNT],[TPD_OVERLAP_DISC]
				   ,[FULL_DAY_CVRG_CODE]
				   ,[SWITCH_AGE],[NUM_TRANCHES],[CPI_INCR],[FREQ_LDNG_AMT]
				   ,[SALESCHANNEL],[TABLE_CODE],[COVER_TYPE],[OPTION_FLAGS]
				   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
				   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
				   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]  -- New Added Field in Table 
				   )
		SELECT
					CENSUS_DATE,D.CONTRACT_KEY,PARTY_KEY,D.CONTRACT_RISK_KEY,CONTRACT_ID,PAS_CLIENT_ID,PRODUCT_SYSTEM_CODE
					,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB
					,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE
					,PRODUCT_OPT_GROUP_DESC --Select Distinct PRODUCT_OPT_GROUP_DESC from STAGE_DISCO
					,RISK_START_DATE,RISK_EXPR_DATE,SMOKER_STATUS_CODE,SDUTY_STATE_CODE
					,POST_CODE=Case when SDUTY_STATE_CODE <> 'OS' Then Left(POST_CODE,4) ELSE NULL End
					,OCUPTN_CLASS_CODE,STEP_LVL_PREM_CODE,SUM_INSURED_AMT,SUM_INSURED_AMT,ANNUAL_POL_FEE,PREM_AMT
					,EXPLICIT_SDUTY_AMT,PREM_FREQ,RISK_CMSN_TYPE_CODE,ANNUAL_PREM
					,RISK_WAIT_PERIOD = left('000',3-len(RISK_WAIT_PERIOD_VAL))+RISK_WAIT_PERIOD_VAL+RISK_WAIT_PERIOD_TYPE
					,SICKNESS_BENEFIT_PERIOD = Case
						When ILLNESS_PAY_PERIOD <10 Then 'M' + format(12*convert(int,ILLNESS_PAY_PERIOD), 'd2')
						When ILLNESS_PAY_PERIOD = 99 Then 'AL'
						Else 'A' + format(convert(int,ILLNESS_PAY_PERIOD), 'd2')
						End
					,INJURY_BENEFIT_PERIOD = Case
						When INJURY_PAY_PERIOD <10 Then 'M' + format(12*convert(int,INJURY_PAY_PERIOD), 'd2')
						When INJURY_PAY_PERIOD = 99 Then 'AL'
						Else 'A' + format(convert(int,INJURY_PAY_PERIOD), 'd2')
						End
					,INDMNTY_OPTION_CODE = Case PRODUCT_CODE
						WHEN 'BEC'  Then Null
						WHEN 'DII'  Then Null
						WHEN 'RBE'  Then Null
						WHEN 'RBEN' Then Null
						WHEN 'RDI'  Then Null
						WHEN 'RII'  Then Null
						Else INDMNTY_OPTION_CODE
						End
					,AIDS_CVRG_CODE= AIDS_COVER_IND
					,BENEFIT_INDEXATION = nullif(BENEFIT_INDEXATION, 'NA')
					,SUM_INSRD_FREQ_CODE = 'MNTH'
					,INCR_CLAIM_OPT_PCNT = Case 
						When PRODUCT_CODE in ('RBE','RBEN','RII') Then 0
						When PRODUCT_CODE in ('IPA','BEC') Then 99
						WHEN CLAIM_INDEXATION='Y' Then 99
						Else 0
						End
					,CAMPAIGN_CODES = NULL --left(CAMPAIGN_CODES,50)
					,DIAL_DOWN_PREM_PCNT = Null
					,ASSESS_CODE
					,ASSESS_LOAD_PCNT = null 
					,SUBJECT_TO_CAMPAIGN_PCNT = null
					,ADJ_ENTRY_AGE = null
					,GRP_DISC_PCNT = null
					,DD_DISC_PCNT = null 
					,LSIDP_DISC_PCNT = null
					,LSIDA_DISC_AMT = null
					,MPD_DISC_PCNT = null
					,VCDP_DISC_PCNT = null
					,LD_DISC_PCNT = null
					,TPD_OVERLAP_DISC = null
					,FULL_DAY_CVRG_CODE = null --if(FULL_DAY_CVRG_CODE,'NA')
					,SWITCH_AGE = null
					,NUM_TRANCHES
					,CPI_INCR = coalesce(CPI.SUM_INSURED_CHG_AMT,0)
					,null--FREQ_LDNG_AMT
					,SALESCHANNEL
					,Null --TABLE_CODE
					,Null --COVER_TYPE
					,[OPTION_FLAGS] = 
						Case When DAY_1_ACCIDENT_IND = 'Y' Then 'A' Else '' End
						+ Case When CHRONIC_OPTION_CODE = 'Y' Then 'C' Else '' End
						+ Case When ON_HOLD_STATUS_CODE = 'Y' Then 'H' Else '' End
						+ Case When SUPER_CONTRB_OPT_CODE = 'Y' Then 'S' Else '' End
						+ Case When SUPER_CONTRB_OPT_CODE = 'U' Then 'U' Else '' End

					,UNDERWRITING_CATEGORY = 'INDIV'
					,PROJECTION_GROUP = 'AMPL_IP_???' --replace ??? in QS_CALC
					,'PDIS1A' --MP
					,0 --DTH_SUM_ASSD
					,0 --TPD_SUM_ASSD
					,0 --CC_SUM_ASSD
					,ANN_PHI_BEN = 12 * SUM_INSURED_AMT
					,PROPHET_PREM = ANNUAL_PREM
					,getdate()    -- Default data for added fields
					,NULL
					,CURRENT_USER
					,NULL
					,@ProcessLogID

		FROM #temp_disco_ben As D LEFT JOIN (
						Select contract_key, sum(SUM_INSURED_CHG_AMT) As SUM_INSURED_CHG_AMT
						From stg.Stg_Disco_Cpi 
						Group by contract_key
						) As CPI on D.CONTRACT_KEY = CPI.CONTRACT_KEY


			SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
			Print 'Loaded INFORCE_DISCO_ Table ' + convert(varchar(50), @InsertRowCount)

		    --Default missing Benefit Period where possible from the expiry age

		UPDATE T Set
					[SICKNESS_BENEFIT_PERIOD] = coalesce(SICKNESS_BENEFIT_PERIOD,INJURY_BENEFIT_PERIOD, 'A'+S.EXPRY_AGE)
					,[INJURY_BENEFIT_PERIOD] = coalesce(INJURY_BENEFIT_PERIOD, SICKNESS_BENEFIT_PERIOD, 'A'+S.EXPRY_AGE)
				FROM INFORCE_TEMP_DS As T
					JOIN STG.Stg_Disco_Benefit S on T.CONTRACT_KEY = S.CONTRACT_KEY
				where SICKNESS_BENEFIT_PERIOD is NULL or INJURY_BENEFIT_PERIOD is NULL

				SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
				Print 'Update Default missing Benefit Period' + convert(varchar(50),@UpdateRowCount)

			--Update Missing CONTRACT_START_DATE from the Earliest RISK_START_DATE 
		
		Update T SET
				CONTRACT_START_DATE = UPD.EARLIEST_RISK_START
				From INFORCE_TEMP_DS As T JOIN
					(Select 
						CONTRACT_RISK_KEY
						,EARLIEST_RISK_START = min(RISK_START_DATE) over (Partition by CONTRACT_KEY)
					From INFORCE_TEMP_DS) As UPD
				ON T.CONTRACT_RISK_KEY = UPD.CONTRACT_RISK_KEY 
				WHERE CONTRACT_START_DATE is NULL

			SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Set Missing Contract Start to Earliest Risk Start ' + convert(varchar(50),@UpdateRowCount)

			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Set Missing Contract Start to Earliest Risk Start', @RECS=@@ROWCOUNT
		
		--Assign ACODES and PCODES

			EXEC usp_Assign_PCODE 'DS','TEMP'

			Commit TRAN INFORCE_TEMP_DS_Loading

			select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

		END TRY

BEGIN CATCH
	
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN INFORCE_TEMP_DS_Loading;

			select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

		THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempDISCO

		--Update the Record of Lapses
		--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
	
		Delete from stg.Stg_Disco_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_DS)
		--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Unlapsed from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Delete from Lapse Staging any policies that are not present in the previous month
		
		Delete From stg.Stg_Disco_Off
		where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='DS')
		--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Excluded from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Insert the Lapsed Policies into the Lapse Table 
		--Select top 100 * from STAGE_DISCO_OFF
		--truncate table LAPSED_TEMP
		delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='DS'
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				 I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				,MONTHS_WRITE_OFF = dbo.IntMinMax(coalesce(dbo.IntMin(DateDiff(Month,PREM_RENEW_TO_DATE,P.TOMORROW)-1,3),0),0,P.MONTHS_SINCE_TREATY)
				,I.Reins_Life_Identifier
			FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_DS As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN stg.Stg_Disco_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
				,#LOAD_PARAMS As P
			WHERE T.CONTRACT_RISK_KEY is NULL
				 and I.CENSUS_DATE = P.LAST_MONTH
				 and I.PRODUCT_SYSTEM_CODE = 'DS'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table ' + convert(varchar(50),@InsertRowCount)	

			--Add lapsed benefits where the contract is not in the LAPSED list
			insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				,MONTHS_WRITE_OFF = 0
				,I.Reins_Life_Identifier
			From INFORCE As I, #LOAD_PARAMS as P
			where
				I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'DS' --Inforce records from Last Month
				and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_DS)  --List of Current Records (not Lapsed)
				and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='DS') --List of Lapsed Records Already Included

			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list '  + convert(varchar(50),@InsertRowCount)

			--Update the AMOUNTS in LAPSE_TEMP
			Update L Set
				QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
					From INFORCE As I 
					Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
						and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
			From
				LAPSED_TEMP As L, #LOAD_PARAMS As P
			Where MONTHS_WRITE_OFF > 0
			and L.PRODUCT_SYSTEM_CODE='DS'

			SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Add AMOUNTS in LAPSE_TEMP' + convert(varchar(50),@UpdateRowCount)

			--Update the Lapsed table
			Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='DS'
			Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)
				Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,Current_User,Getdate()
				From LAPSED_TEMP As L, #LOAD_PARAMS As P
				where  L.PRODUCT_SYSTEM_CODE='DS'
			SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Update Lapse Listing ' + convert(varchar(50),@UpdateRowCount)
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Add to Lapse Listing', @RECS=@@ROWCOUNT


			Commit tran LapseUpdateToInforceTempDISCO

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
			IF @@TRANCOUNT > 0

				ROLLBACK TRAN LapseUpdateToInforceTempDISCO;

				select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

			THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN CnvUpdateToInforceTempDISCO

			--Look for Conversions from the LAPSED Table and update the CONVERTED Table
			DECLARE @CONV_RECS int
			EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'DS', @ProcessLogID

			--Look for Conversions from the LAPSED Table and update the CONVERTED Table
			--Print @CONV_RECS

			--Delete any existing values in the CONVERTED FILE
			Delete from C From CONVERTED As C, #LOAD_PARAMS As P WHERE C.PRODUCT_SYSTEM_CODE = 'DS' and C.CENSUS_DATE = P.CENSUS_DATE

			SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
			Print 'Delete any existing values in the CONVERTED FILE ' + convert(varchar(50),@DeleteRowCount)

--Replace with the New Values
			Insert into CONVERTED(PRODUCT_SYSTEM_CODE,CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY
				,NEW_SUM_INSURED_AMT,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_SUM_INSURED_AMT,CONVERSION_TYPE,[Created_Date_Time],[Process_Log_ID],[Created_BY])
			Select
				'DS'
				,CENSUS_DATE
				,PARTY_KEY
				,PRODUCT_OPT_GROUP_DESC
				,NEW_CONTRACT_KEY
				,NEW_CONTRACT_RISK_KEY
				,NEW_SUM_INSURED_AMT
				,OFF_CENSUS_DATE
				,OFF_CONTRACT_KEY
				,OFF_CONTRACT_RISK_KEY
				,OFF_SUM_INSURED_AMT
				,CONVERSION_TYPE
				,getdate()
			    ,@ProcessLogID
			    ,CURRENT_USER
			FROM CONVERTED_TEMP
			WHERE PAS='DS'
			--Select Top 100 * FROM CONVERTED_TEMP
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE=@CENSUS_DATE, @STEP='Identify Conversions', @RECS=@CONV_RECS

			 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
			 Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)
			--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Identify Conversions', @RECS=@CONV_RECS

		COMMIT TRAN ConversionUpdateToInforceTempU2

		SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
			IF @@TRANCOUNT > 0
				--ROLLBACK TRAN INFORCE_TEMP_U2_Loading;
				--ROLLBACK TRAN LapseUpdateToInforceTempU2;
				ROLLBACK TRAN CnvUpdateToInforceTempDISCO;

				select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

			THROW;
	
END CATCH
			------------------------------------------------------------------------------------------------------------
			----Calculate the Quota Share information
			------------------------------------------------------------------------------------------------------------
			--DECLARE @QS_RECS int = 0
			--EXEC @QS_RECS = usp_Calc_QS
			----Print @QS_RECS
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE_DATE=@CENSUS_DATE, @STEP='QS Calculations', @RECS=@QS_RECS
			------------------------------------------------------------------------------------------------------------

			-------------------------------------------------------------------------------------------------------------
			----Calculate the Surplus Information
			-------------------------------------------------------------------------------------------------------------
			--DECLARE @SS_RECS int = 0
			--EXEC @SS_RECS = usp_Calc_SS
			----Print @SS_RECS
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE_DATE=@CENSUS_DATE, @STEP='SS Calculations', @RECS=@SS_RECS
			--------------------------------------------------------------------------------------------------------------

			----Identify Reinstatements
			----Create #Table to contain the lapse and reinstatement information
			--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
			--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
			--Insert into #REIN
			--Select
			--	T.CONTRACT_RISK_KEY
			--	,T.CENSUS_DATE
			--	,L.LAPSE_DATE
			--	,L.QS_AMT_LAPSE_RECOVERED
			--FROM [INFORCE_TEMP_DS] As T JOIN LAPSED As L 
			--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
			--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
			--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
			--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

			----Update Both Lapse and Inforce Temp Tables
			--BEGIN TRANSACTION;
			--Update T Set
			--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
			--FROM INFORCE_TEMP_DS As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

			--Update L Set
			--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
			--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
			--FROM
			--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

			--COMMIT;
			--DECLARE @QS_REIN int = (Select count(*) From #REIN)
			----Print @QS_REIN
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE_DATE=@CENSUS_DATE, @STEP='Process Reinstatements', @RECS=@QS_REIN

			----Update Lapses for Conversions (Similar to Reinstatements)
			--BEGIN TRANSACTION;
			--Update T SET
			--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
			--from CONVERTED As C JOIN INFORCE_TEMP_DS as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
			--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

			--Update L Set
			--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
			--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
			--from CONVERTED As C JOIN INFORCE_TEMP_DS as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
			--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
			--COMMIT;

			--DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
			----Print @QS_CONV
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE_DATE=@CENSUS_DATE, @STEP='Process Conversions', @RECS=@QS_CONV

			----Update the INFORCE Table
			----DECLARE @CENSUS_DATE Date = '28-Feb-2017'
			--Delete from INFORCE where PRODUCT_SYSTEM_CODE='DS' and CENSUS_DATE=@CENSUS_DATE
			--Insert into INFORCE Select * FROM INFORCE_TEMP_DS
			--EXEC usp_LOG @STORED_PROC='usp_Load_DISCO', @CENSUS_DATE_DATE=@CENSUS_DATE, @STEP='Insert New Records', @RECS=@@ROWCOUNT 

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_DS_Pas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	<Loading PAS DISCO (DS) data into IDS_Reinsurance DB from staging table>
-- =============================================

CREATE PROCEDURE [dbo].[usp_Load_DS_Pas]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE DateTime
			
AS
BEGIN
	SET NOCOUNT ON

	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Declare @Import_Log_ID int = (select distinct top 1 Import_Log_ID from stg.Stg_Disco_Pas)
	Declare @Created_Date datetime = getdate()
	Declare @Created_by varchar(50) = current_user 
	
	
	Begin Try 
		 -- Delete any existing data in target table
			DELETE FROM [dbo].[PAS_DISCO] WHERE [CENSUS_DATE] = @EFTV_DATE
	
			Set @DeleteRowCount = @@ROWCOUNT 

			-- Load data from staging table to target
			INSERT INTO [dbo].[PAS_DISCO]([CENSUS_DATE],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],[CREATED_DATE],	[CREATED_BY],[PROCESS_LOG_ID])
				SELECT   @EFTV_DATE
						,S.DIS_POL_NUM AS CONTRACT_ID
						,REPLICATE('0', 9 - LEN(S.LI_CLNT_KEY)) + S.LI_CLNT_KEY AS CLIENT_ID
						,S.POL_TYPE AS BENEFIT_CODE
						,SUM(CASE S.PAYT_FREQ
								WHEN 'H' THEN 2
								WHEN 'M' THEN 12
								WHEN 'Y' THEN 1
							 END * (ISNULL(S.TOT_CURR_INST_PREM,0) - ISNULL(S.CURR_REDUC_INST,0))) AS ANNUAL_PREM
						,SUM(S.TOT_MTHLY_BEN) AS ANNUAL_BEN
						,@Created_Date
						,@Created_by
						,@Import_Log_ID

				FROM     stg.Stg_Disco_Pas S
				WHERE    S.CTRY_NAME = 'AUST'
				AND      S.POL_STATUS IS NULL
				GROUP BY S.DIS_POL_NUM
						,REPLICATE('0', 9 - LEN(S.LI_CLNT_KEY)) + S.LI_CLNT_KEY
						,S.POL_TYPE

				Set @InsertRowCount = @@ROWCOUNT 

			Select   @InsertRowCount InsertRowCount, 
					 @UpdateRowCount UpdateRowCount, 
					 @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH


END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_FDA]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS

-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" to drive and insert �PREV_ Reins_Life_Identifier� 
--              values for lapsed records into Inforce_Temp (PAS) tables
-- -- ==============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	Load CLAS (FDA) data from Staging Table
-- -- ==============================================
-- Author:		AWJ
-- Create date: July 2017
-- Description:	Load CLAS data from Staging Table
-- ==============================================
--EXEC usp_Load_FDA '-10001','2019-06-30'

CREATE PROCEDURE [dbo].[usp_Load_FDA] @ProcessLogID int,@CENSUS_DATE datetime
	-- Add the parameters for the stored procedure here
AS
BEGIN
			-- SET NOCOUNT ON added to prevent extra result sets from
			-- interfering with SELECT statements.
			SET NOCOUNT ON;


			--Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
			--DECLARE @CENSUS date = (SELECT top 1 CENSUS_DATE From STAGE_CLAS)
			DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))

			DECLARE @InsertRowCount Int = 0
			DECLARE @UpdateRowCount Int = 0
			DECLARE @DeleteRowCount int = 0

			IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
				Select
				TREATY_START         = @TREATY_START
				,CENSUS_DATE         = @CENSUS_DATE 
				,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE )
				,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE )       -- 1st day of month following the census
				,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE )
				,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE ), Month(@CENSUS_DATE ), 0) --Day zero is the Last Day of the previous month
				,PRODUCT_SYSTEM_CODE = 'FDA'
			Into #LOAD_PARAMS

		--Select * from #LOAD_PARAMS

		--Log the Function Call
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE , @STEP='Start'

BEGIN TRY

Begin Tran INFORCE_TEMP_FDA_Loading

		--Load the data from the Staging Table into INFORCE_TEMP_FDA
		truncate TABLE INFORCE_TEMP_FDA
		     -- Create a temp table to store records only for the in-scope Product Benefit Combinations
		CREATE TABLE #TEMP_Clas(CENSUS_DATE date
           ,CONTRACT_KEY int
           ,PARTY_KEY int
           ,CONTRACT_RISK_KEY int
           ,CONTRACT_ID nvarchar(10)
           ,PAS_CLIENT_ID nvarchar(10)
           ,PRODUCT_SYSTEM_CODE nvarchar(3)
           ,FIRST_NAME nvarchar(50)
           ,MIDDLE_NAME nvarchar(50)
           ,SURNAME nvarchar(50)
           ,GENDER_CODE nvarchar(1)
           ,DOB date
           ,CONTRACT_START_DATE date
           ,PRODUCT_CODE nvarchar(5)
           ,CLASS_OF_BUSN_CODE nvarchar(1)
           ,PRODUCT_OPTION_CODE nvarchar(6)
           ,PRODUCT_OPT_GROUP_DESC nvarchar(10)
           ,RISK_START_DATE date
           ,RISK_EXPR_DATE date
           ,SMOKER_STATUS_CODE nvarchar(1)
           ,SDUTY_STATE_CODE nvarchar(3)
           ,POST_CODE nvarchar(10)
           ,OCUPTN_CLASS_CODE nvarchar(6)
           ,STEP_LVL_PREM_CODE nvarchar(1)
           ,SUM_INSURED_AMT money
           ,AT_RISK_AMT money
           ,SERIES_START_DATE date
           ,ANNUAL_POL_FEE money
           ,PREM_AMT money
           ,EXPLICIT_SDUTY_AMT money
           ,PREM_FREQ int
           ,ANNUAL_PREM money
           ,RISK_WAIT_PERIOD_VAL int
           ,RISK_WAIT_PERIOD_TYPE nvarchar(1)
           ,SICKNESS_BENEFIT_PERIOD nvarchar(3)
           ,INJURY_BENEFIT_PERIOD nvarchar(3)
           ,INDMNTY_OPTION_CODE nvarchar(2)
           ,AIDS_CVRG_CODE nvarchar(2)
           ,BENEFIT_INDEXATION nvarchar(2)
           ,SUM_INSRD_FREQ_CODE nvarchar(5)
           ,INCR_CLAIM_OPT_PCNT int
           ,CAMPAIGN_CODES nvarchar(50)
           ,DIAL_DOWN_PREM_PCNT real
           ,ASSESS_LOAD_PCNT real
           ,SUBJECT_TO_CAMPAIGN_PCNT real
           ,ADJ_ENTRY_AGE int
           ,GRP_DISC_PCNT real
           ,DD_DISC_PCNT real
           ,LSIDP_DISC_PCNT real
           ,LSIDA_DISC_AMT real
           ,MPD_DISC_PCNT int
           ,VCDP_DISC_PCNT int
           ,LD_DISC_PCNT int
           ,TPD_OVERLAP_DISC real
           ,FULL_DAY_CVRG_CODE nvarchar(3)
           ,SWITCH_AGE int
           ,NUM_TRANCHES int
           ,TRANCHE_CPI_SI money
           ,FREQ_LDNG_AMT real
           ,SALESCHANNEL nvarchar(12)
           ,TABLE_CODE nvarchar(8)
           ,COVER_TYPE nvarchar(2)
           ,PROJECTION_GROUP nvarchar(15)
           ,MP nvarchar(6)
           ,DTH_SUM_ASSD money
           ,TPD_SUM_ASSD money
           ,CC_SUM_ASSD money
           ,ANN_PHI_BEN money
           ,PROPHET_PREM money
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_By varchar(50)
		)

		INSERT INTO #TEMP_Clas
		SELECT distinct [CENSUS_DATE]
           ,[CONTRACT_KEY]
           ,[PARTY_KEY]
           ,[CONTRACT_RISK_KEY]
           ,[CONTRACT_ID]
           ,[PAS_CLIENT_ID]
           ,s.[PRODUCT_SYSTEM_CODE]
           ,[FIRST_NAME]
           ,[MIDDLE_NAME]
           ,[SURNAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[CONTRACT_START_DATE]
           ,s.[PRODUCT_CODE]
           ,[CLASS_OF_BUSN_CODE]
           ,s.[PRODUCT_OPTION_CODE]
           ,[PRODUCT_OPT_GROUP_DESC]
           ,[RISK_START_DATE]
           ,[RISK_EXPR_DATE]
           ,[SMOKER_STATUS_CODE]
           ,[SDUTY_STATE_CODE]
           ,[POST_CODE]
           ,[OCUPTN_CLASS_CODE]
           ,[STEP_LVL_PREM_CODE]
           ,[SUM_INSURED_AMT]
           ,[AT_RISK_AMT]
           ,[SERIES_START_DATE]
           ,[ANNUAL_POL_FEE]
           ,[PREM_AMT]
           ,[EXPLICIT_SDUTY_AMT]
           ,[PREM_FREQ]
           ,[ANNUAL_PREM]
           ,[RISK_WAIT_PERIOD_VAL]
           ,[RISK_WAIT_PERIOD_TYPE]
           ,[SICKNESS_BENEFIT_PERIOD]
           ,[INJURY_BENEFIT_PERIOD]
           ,[INDMNTY_OPTION_CODE]
           ,[AIDS_CVRG_CODE]
           ,[BENEFIT_INDEXATION]
           ,[SUM_INSRD_FREQ_CODE]
           ,[INCR_CLAIM_OPT_PCNT]
           ,[CAMPAIGN_CODES]
           ,[DIAL_DOWN_PREM_PCNT]
           ,[ASSESS_LOAD_PCNT]
           ,[SUBJECT_TO_CAMPAIGN_PCNT]
           ,[ADJ_ENTRY_AGE]
           ,[GRP_DISC_PCNT]
           ,[DD_DISC_PCNT]
           ,[LSIDP_DISC_PCNT]
           ,[LSIDA_DISC_AMT]
           ,[MPD_DISC_PCNT]
           ,[VCDP_DISC_PCNT]
           ,[LD_DISC_PCNT]
           ,[TPD_OVERLAP_DISC]
           ,[FULL_DAY_CVRG_CODE]
           ,[SWITCH_AGE]
           ,[NUM_TRANCHES]
           ,[TRANCHE_CPI_SI]
           ,[FREQ_LDNG_AMT]
           ,[SALESCHANNEL]
           ,[TABLE_CODE]
           ,[COVER_TYPE]
           ,[PROJECTION_GROUP]
           ,[MP]
           ,[DTH_SUM_ASSD]
           ,[TPD_SUM_ASSD]
           ,[CC_SUM_ASSD]
           ,[ANN_PHI_BEN]
           ,[PROPHET_PREM]
           ,s.[Created_Date_Time]
           ,[Import_Log_ID]
           ,s.[Created_By]
	 from [stg].[Stg_Clas]s
	 join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
	 and  p.Treaty_Id  not in (-1, -999)
		
		INSERT INTO [INFORCE_TEMP_FDA] (
					[CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PAS_CLIENT_ID],[PRODUCT_SYSTEM_CODE]
				   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
				   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
				   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
				   ,[POST_CODE]
				   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[SERIES_START_DATE],[ANNUAL_POL_FEE],[PREM_AMT]
				   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[ANNUAL_PREM],[RISK_WAIT_PERIOD],[SICKNESS_BENEFIT_PERIOD],[INJURY_BENEFIT_PERIOD]
				   ,[INDMNTY_OPTION_CODE]
				   ,[AIDS_CVRG_CODE]
				   ,[BENEFIT_INDEXATION]
				   ,[SUM_INSRD_FREQ_CODE],[INCR_CLAIM_OPT_PCNT]
				   ,[CAMPAIGN_CODES],[DIAL_DOWN_PREM_PCNT],[ASSESS_LOAD_PCNT],[SUBJECT_TO_CAMPAIGN_PCNT],[ADJ_ENTRY_AGE]
				   ,[GRP_DISC_PCNT],[DD_DISC_PCNT],[LSIDP_DISC_PCNT],[LSIDA_DISC_AMT],[MPD_DISC_PCNT],[VCDP_DISC_PCNT],[LD_DISC_PCNT],[TPD_OVERLAP_DISC]
				   ,[FULL_DAY_CVRG_CODE]
				   ,[SWITCH_AGE],[NUM_TRANCHES],[CPI_INCR],[FREQ_LDNG_AMT]
				   ,[SALESCHANNEL],[TABLE_CODE],[COVER_TYPE]
				   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
				   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
				   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]
				   )
		SELECT
			C.CENSUS_DATE,CONTRACT_KEY,PARTY_KEY,C.CONTRACT_RISK_KEY,CONTRACT_ID,PAS_CLIENT_ID,C.PRODUCT_SYSTEM_CODE
			,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB
			,CONTRACT_START_DATE
			,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC
			,RISK_START_DATE,RISK_EXPR_DATE,SMOKER_STATUS_CODE,SDUTY_STATE_CODE
			,POST_CODE=Case when SDUTY_STATE_CODE <> 'OS' Then Left(POST_CODE,4) ELSE NULL End
			,OCUPTN_CLASS_CODE,STEP_LVL_PREM_CODE,SUM_INSURED_AMT,AT_RISK_AMT,SERIES_START_DATE,ANNUAL_POL_FEE,PREM_AMT
			,EXPLICIT_SDUTY_AMT,PREM_FREQ,ANNUAL_PREM
			,RISK_WAIT_PERIOD = format(RISK_WAIT_PERIOD_VAL,'000') + RISK_WAIT_PERIOD_TYPE
			,SICKNESS_BENEFIT_PERIOD,INJURY_BENEFIT_PERIOD
			,INDMNTY_OPTION_CODE=nullif(INDMNTY_OPTION_CODE,'NA')
			,AIDS_CVRG_CODE=nullif(AIDS_CVRG_CODE,'NA')
			,BENEFIT_INDEXATION = nullif(BENEFIT_INDEXATION, 'NA')
			,SUM_INSRD_FREQ_CODE,INCR_CLAIM_OPT_PCNT
			,CAMPAIGN_CODES=left(CAMPAIGN_CODES,50)
			,DIAL_DOWN_PREM_PCNT,ASSESS_LOAD_PCNT,SUBJECT_TO_CAMPAIGN_PCNT,ADJ_ENTRY_AGE
			,GRP_DISC_PCNT,DD_DISC_PCNT,LSIDP_DISC_PCNT,LSIDA_DISC_AMT,MPD_DISC_PCNT,VCDP_DISC_PCNT,LD_DISC_PCNT,TPD_OVERLAP_DISC
			,FULL_DAY_CVRG_CODE=nullif(FULL_DAY_CVRG_CODE,'NA')
			,SWITCH_AGE,NUM_TRANCHES
			,CPI_INCR = isnull(CPI.CPI_INCR,0)
			,FREQ_LDNG_AMT
			,SALESCHANNEL,TABLE_CODE,COVER_TYPE
			,'INDIV'
			,PROJECTION_GROUP = 'AMPN_' + Case 
				When C.PRODUCT_OPT_GROUP_DESC in ('AA','BE','IC','IP','CB') Then 'IP'
				When C.PRODUCT_OPT_GROUP_DESC in ('BB','BF','DTH','DTH/TPD','DTH/TRAUMA','TPD','TRAUMA','WP') Then 'LS'
				When C.PRODUCT_OPT_GROUP_DESC = 'OTHER' Then Case When PRODUCT_OPTION_CODE in ('PLD','PLDS','LHEP','SADB','SADC') Then 'LS' ELSE 'IP' End
				When C.PRODUCT_OPT_GROUP_DESC = 'GFI' Then Case When PRODUCT_OPTION_CODE in ('FC1') Then 'IP' Else 'LS' End
				End 
				+ Case When C.STEP_LVL_PREM_CODE = 'L' Then '_LVL' Else '_STP' End 
				+ '_???' --Case When QS_START_DATE <= P.TREATY_START Then '_INF' ELSE '_NB' End
			,MP
			,DTH_SUM_ASSD,TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN,PROPHET_PREM
			,getdate()    -- Default data for added fields
			,NULL
			,CURRENT_USER
			,NULL
			,@ProcessLogID
					
			
	
		
		FROM #TEMP_Clas As C LEFT JOIN (
			Select contract_risk_key, CPI_INCR=sum(SUM_INSURED_CHG_AMT) FROM stg.Stg_Clas_Cpi GROUP BY contract_risk_key
			) AS CPI on C.CONTRACT_RISK_KEY = CPI.CONTRACT_RISK_KEY
			, #LOAD_PARAMS P

			SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
			Print 'Loaded INFORCE_TEMP_FDA Table ' + convert(varchar(50), @InsertRowCount)

		--Update Missing CONTRACT_START_DATE from the Earliest RISK_START_DATE 
		Update T SET
			CONTRACT_START_DATE = UPD.EARLIEST_RISK_START
		From INFORCE_TEMP_FDA As T JOIN
			(Select 
				CONTRACT_RISK_KEY
				,EARLIEST_RISK_START = min(RISK_START_DATE) over (Partition by CONTRACT_KEY)
			 From INFORCE_TEMP_FDA) As UPD
			 ON T.CONTRACT_RISK_KEY = UPD.CONTRACT_RISK_KEY 
		WHERE CONTRACT_START_DATE is NULL
		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Set Missing Contract Start to Earliest Risk Start ' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE , @STEP='Set Missing Contract Start to Earliest Risk Start', @RECS=@@ROWCOUNT

		--Assign ACODES and PCODES

		EXEC usp_Assign_PCODE 'FDA','TEMP'
		--EXEC usp_Assign_PCODE 'TEMP'

		--Update Broken Out Unit Linked Contracts
		--Select I.CONTRACT_KEY, CONTRACT_RISK_KEY, SUM_INSURED_AMT, 
		
		Update I Set MIN_VAL_APPLIES = 
			Case 
				When BALANCE >= SUM_INSURED_AMT Then 'U.gt.SA'
				When BALANCE < SUM_INSURED_AMT Then 'U.lt.SA'
			End
		FROM INFORCE_TEMP_FDA As I JOIN stg.Stg_Clas_Bal As B on I.contract_key = B.CONTRACT_KEY
		WHERE I.product_code IN ('FAORD','FASUP') and I.product_opt_group_desc IN ('DTH','TPD')
		
		SET @UpdateRowCount =  @UpdateRowCount + @@ROWCOUNT
		Print 'Update Broken Out Unit Linked' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE , @STEP='Update Broken Out Unit Linked', @RECS=@@ROWCOUNT

		--Overwrite any previously broken out IL to have still broken out
		UPDATE T Set MIN_VAL_APPLIES = 'U.gt.SA'
		FROM INFORCE_TEMP_FDA As T 
			Join (Select Distinct CONTRACT_RISK_KEY from INFORCE Where product_opt_group_desc IN ('DTH','TPD') AND product_code IN ('FAORD','FASUP') and MIN_VAL_APPLIES = 'U.gt.SA') As BO
			On T.CONTRACT_RISK_KEY = BO.CONTRACT_RISK_KEY
		Where MIN_VAL_APPLIES <> 'U.gt.SA'
		
		SET @UpdateRowCount =  @UpdateRowCount + @@ROWCOUNT
		Print 'Update Previous Broken Out UL' + convert(varchar(50),@UpdateRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE , @STEP='Update Previous Broken Out UL', @RECS=@@ROWCOUNT

Commit TRAN INFORCE_TEMP_FDA_Loading

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN INFORCE_TEMP_FDA_Loading;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempFDA


		--Update the Record of Lapses
		--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
		Delete from stg.Stg_Clas_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_FDA)
		
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Unlapsed from Lapse Staging' + convert(varchar(50),@DeleteRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

		--Delete from Lapse Staging any policies that are not present in the previous month
		Delete From stg.Stg_Clas_Off
		where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='FDA')
		
		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Excluded from Lapse Staging' + convert(varchar(50),@DeleteRowCount)
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT

		--Insert the Lapsed Policies into the Lapse Table 
		--truncate table LAPSED_TEMP
		delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='FDA'

		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				/* --Useful for Testing 
				,L.PREM_EFTV_DATE
				,I.PREM_FREQ
				,Case 
					When I.PREM_FREQ=1 Then DateAdd(Year,1,PREM_EFTV_DATE)
					When I.PREM_FREQ=2 Then DateAdd(Month,6,PREM_EFTV_DATE)
					When I.PREM_FREQ=4 Then DateAdd(Month,3,PREM_EFTV_DATE)
					Else DateAdd(Month,1,PREM_EFTV_DATE) 
				End As DATE_NEXT_PREM_DUE
				,L.CONTRACT_KEY
				*/
				,dbo.intMinMax(Case
					When L.CONTRACT_KEY is NULL Then 0               --No Write-off if no record is present in the OFF books staging table as no information
					When L.OTH_EFTV_DATE >= L.PREM_EFTV_DATE Then 0  --No Writeoff if some amount (eg a claim or refund) with an effective date after last prem date
					When L.PREM_EFTV_DATE is NULL Then 0             --No Writeoff if don't have the most recent premium effective date
					Else dbo.intMinMax(DateDiff(Month,Case           --Impose a Minimum WriteOff of Zero Months and a Maximum of 3 months 
							When I.PREM_FREQ=1 Then DateAdd(Year,1,PREM_EFTV_DATE)       --Calculate Date Next Premium Due from the efective date of most recent prem payment
							When I.PREM_FREQ=2 Then DateAdd(Month,6,PREM_EFTV_DATE)
							When I.PREM_FREQ=4 Then DateAdd(Month,3,PREM_EFTV_DATE)
							Else DateAdd(Month,1,PREM_EFTV_DATE)
						End, P.CENSUS_DATE),0,3)                      --Number of month ends between Date Next Prem Due and Census Date to be written off
				End, 0, P.MONTHS_SINCE_TREATY)                        --Further limit the write-off to the number of months since the treaty started
				As MONTHS_WRITE_OFF 
				,I.Reins_Life_Identifier
			FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_FDA As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN stg.Stg_Clas_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
				,#LOAD_PARAMS As P
			WHERE T.CONTRACT_RISK_KEY is NULL
				and I.CENSUS_DATE = P.LAST_MONTH
				and I.PRODUCT_SYSTEM_CODE = 'FDA'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table ' + convert(varchar(50),@InsertRowCount)
			
		--Add lapsed benefits where the contract is not in the LAPSED list
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
		Select
			I.CENSUS_DATE
			,I.CONTRACT_KEY
			,I.CONTRACT_RISK_KEY
			,I.PRODUCT_SYSTEM_CODE
			,MONTHS_WRITE_OFF = 0
			,I.Reins_Life_Identifier
		From INFORCE As I, #LOAD_PARAMS as P
		where
			I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'FDA' --Inforce records from Last Month
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_FDA) --List of Current Records (not Lapsed)
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='FDA') --List of Lapsed Records Already Included

			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list '  + convert(varchar(50),@InsertRowCount)

		--Update the AMOUNTS in LAPSE_TEMP
		Update L Set
			QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
				From INFORCE As I 
				Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
					and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
		From
			LAPSED_TEMP As L, #LOAD_PARAMS As P
		Where MONTHS_WRITE_OFF > 0
		and L.PRODUCT_SYSTEM_CODE='FDA'

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update the AMOUNTS in LAPSE_TEMP ' + convert(varchar(50),@UpdateRowCount)

		--Update the Lapsed table
		Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='FDA'
		Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)
			Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,CURRENT_USER,Getdate()
				From LAPSED_TEMP As L, #LOAD_PARAMS As P
				where L.PRODUCT_SYSTEM_CODE='FDA'

		
		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Add to Lapse Listing ' + convert(varchar(50),@UpdateRowCount)
		
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Add to Lapse Listing', @RECS=@@ROWCOUNT

			Commit tran LapseUpdateToInforceTempFDA

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN LapseUpdateToInforceTempFDA;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


	BEGIN TRY

	BEGIN TRAN ConversionUpdateToInforceTempFDA

		--Look for Conversions from the LAPSED Table and update the CONVERTED Table
				DECLARE @CONV_RECS int
				EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'FDA', @ProcessLogID
				--EXEC @CONV_RECS = usp_Find_Conversions
		--Print @CONV_RECS

		--Delete any existing values in the CONVERTED FILE
		Delete from C From CONVERTED As C, #LOAD_PARAMS As P WHERE C.PRODUCT_SYSTEM_CODE = 'FDA' and C.CENSUS_DATE = P.CENSUS_DATE

		SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
		Print 'Delete any existing values in the CONVERTED FILE ' + convert(varchar(50),@DeleteRowCount)

		--Replace with the New Values
		Insert into CONVERTED(PRODUCT_SYSTEM_CODE,CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY
			,NEW_SUM_INSURED_AMT,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_SUM_INSURED_AMT,CONVERSION_TYPE,[Created_Date_Time],[Process_Log_ID],[Created_BY])
		Select
			'FDA'
			,CENSUS_DATE
			,PARTY_KEY
			,PRODUCT_OPT_GROUP_DESC
			,NEW_CONTRACT_KEY
			,NEW_CONTRACT_RISK_KEY
			,NEW_SUM_INSURED_AMT
			,OFF_CENSUS_DATE
			,OFF_CONTRACT_KEY
			,OFF_CONTRACT_RISK_KEY
			,OFF_SUM_INSURED_AMT
			,CONVERSION_TYPE
			,getdate()
			,@ProcessLogID
			,CURRENT_USER
		FROM CONVERTED_TEMP
		WHERE PAS='FDA'
		--Select Top 100 * FROM CONVERTED_TEMP
		
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)
		
		--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Identify Conversions', @RECS=@CONV_RECS

		COMMIT TRAN ConversionUpdateToInforceTempFDA

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	
	ROLLBACK TRAN ConversionUpdateToInforceTempFDA;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;
	
END CATCH
		----------------------------------------------------------------------------------------------------------
						----Calculate the Quota Share information
						------------------------------------------------------------------------------------------------------------
						--DECLARE @QS_RECS int = 0
						--EXEC @QS_RECS = usp_Calc_QS
						----Print @QS_RECS
						--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='QS Calculations', @RECS=@QS_RECS
						------------------------------------------------------------------------------------------------------------

						------------------------------------------------------------------------------------------------------------
						----Calculate the Surplus information
						------------------------------------------------------------------------------------------------------------
						--DECLARE @SS_RECS int = 0
						--EXEC @SS_RECS = usp_Calc_SS
						----Print @SS_RECS
						--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='SS Calculations', @RECS=@SS_RECS
						------------------------------------------------------------------------------------------------------------


						----Identify Reinstatements
						----Create #Table to contain the lapse and reinstatement information
						--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
						--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
						--Insert into #REIN
						--Select
						--	T.CONTRACT_RISK_KEY
						--	,T.CENSUS_DATE
						--	,L.LAPSE_DATE
						--	,L.QS_AMT_LAPSE_RECOVERED
						--FROM [INFORCE_TEMP_FDA] As T JOIN LAPSED As L 
						--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
						--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
						--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
						--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

						----Update Both Lapse and Inforce Temp Tables
						--BEGIN TRANSACTION;
						--Update T Set
						--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
						--FROM INFORCE_TEMP_FDA As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

						--Update L Set
						--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
						--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
						--FROM
						--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

						--COMMIT;
						--DECLARE @QS_REIN int = (Select count(*) From #REIN)
						----Print @QS_REIN
						--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Process Reinstatements', @RECS=@QS_REIN

						----Update Lapses for Conversions (Similar to Reinstatements)
						--BEGIN TRANSACTION;
						--Update T SET
						--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
						--from CONVERTED As C JOIN INFORCE_TEMP_FDA as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
						--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

						--Update L Set
						--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
						--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
						--from CONVERTED As C JOIN INFORCE_TEMP_FDA as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
						--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
						--COMMIT;

						--DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
						----Print @QS_CONV
						--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Process Conversions', @RECS=@QS_CONV

						----Update the INFORCE Table
						----DECLARE @CENSUS Date = '28-Feb-2017'
						--Delete from INFORCE where PRODUCT_SYSTEM_CODE='FDA' and CENSUS_DATE=@CENSUS_DATE
						--Insert into INFORCE Select * FROM INFORCE_TEMP_FDA
						--EXEC usp_LOG @STORED_PROC='usp_Load_CLAS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Insert New Records', @RECS=@@ROWCOUNT 

		END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_FDA_Pas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	<Loading PAS CLAS (FDA) data into IDS_Reinsurance DB from staging table>
-- =============================================

 CREATE PROCEDURE [dbo].[usp_Load_FDA_Pas]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE DateTime

AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Declare @Import_Log_ID int = (select distinct top 1 Import_Log_ID from [Stg].[Stg_Clas_Pas])
	Declare @Created_Date datetime = getdate()
	Declare @Created_by varchar(50) = current_user 

	Begin Try

	DELETE FROM [dbo].[PAS_CLAS] WHERE [CENSUS_DATE] = @EFTV_DATE

			Set @DeleteRowCount = @@ROWCOUNT
	
			-- Load data from staging table to target
			INSERT INTO [dbo].[PAS_CLAS]([CENSUS_DATE],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],[IP_SUM_INSURED],[CREATED_DATE],	[CREATED_BY],[PROCESS_LOG_ID])
				SELECT   @EFTV_DATE
                        ,RTRIM([POLICYN]) AS CONTRACT_ID
                        ,NULL AS CLIENT_ID
                        ,NULL AS BENEFIT_CODE
                        ,CAST(LEFT([IP_INS_PREM_IF],8) + '.' + RIGHT([IP_INS_PREM_IF],2) AS decimal(10,2))
	                    +CAST(LEFT([INS_PREM_IF],8) + '.' + RIGHT([INS_PREM_IF],2) AS decimal(10,2))
	                    AS ANNUAL_PREM
	                    ,CAST(LEFT([ALS_SUM_INSURED_IF],8) + '.' + RIGHT([ALS_SUM_INSURED_IF],2) AS decimal(10,2))
						+CAST(LEFT([RISK_SUM_INSURED_IF],8) + '.' + RIGHT([RISK_SUM_INSURED_IF],2) AS decimal(10,2))
						AS ANNUAL_BEN
						,CAST(LEFT([IP_SUM_INSURED_IF],8) + '.' + RIGHT([IP_SUM_INSURED_IF],2) AS decimal(10,2)) AS IP_SUM_INSURED
						,@Created_Date
						,@Created_by
						,@Import_Log_ID
                   
				   FROM [Stg].[Stg_Clas_Pas]
				  WHERE RTRIM([STATUS_IND]) = 'I'
				    AND RTRIM([POLICY_CODE]) <> 'FP2'
					AND (CAST(LEFT([IP_INS_PREM_IF],8) + '.' + RIGHT([IP_INS_PREM_IF],2) AS decimal(10,2))
	                    +CAST(LEFT([INS_PREM_IF],8) + '.' + RIGHT([INS_PREM_IF],2) AS decimal(10,2))) > 0

				Set @InsertRowCount = @@ROWCOUNT 

			Select   @InsertRowCount InsertRowCount, 
					 @UpdateRowCount UpdateRowCount, 
					 @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

 END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_FigTree_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_FigTree_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
BEGIN TRY;
BEGIN TRAN T1;
delete from [dbo].[FigTree_Claim_Listing]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
SET @DeleteRowCount = @@ROWCOUNT
insert into [dbo].[FigTree_Claim_Listing]
(      [Month_Eftv_Date]
      ,[FigTree_Life_Claim_Id]
      ,[Claim_Number]
      ,[Claim_Status]
      ,[Surname]
      ,[First_Name]
      ,[Second_Name]
      ,[Sex]
      ,[Date_of_Birth]
      ,[Date_of_Death]
      ,[Notify_Date]
      ,[Registration_Date]
      ,[Claim_Type]
      ,[Cause]
      ,[Claim_Finalised_Date]
      ,[Claim_Finalised_Reason]
      ,[Claim_Reopen_Date]
      ,[Claim_Reopen_Reason]
      ,[Policy_Number]
      ,[Product_Name]
      ,[Class_Of_Business]
      ,[Table_Extras]
      ,[Risk_Commenced_Date]
      ,[Total_Benefit_Amount]
      ,[Sum_Insured]
      ,[Reinsurer_Name]
      ,[Reinsurance_Treaty_Type]
      ,[Reinsurer_Percent]
      ,[Assessor]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Process_Log_ID])
SELECT [Month_Eftv_Date]
      ,[FigTree_Life_Claim_Id]
      ,[Claim_Number]
      ,[Claim_Status_Desc] AS [Claim_Status] --was previously [Decision] 24th Jan, 2018
      ,[Surname]
      ,[Given_Name] [First_Name]
      ,NULL [Second_Name]
      ,CASE [Sex] WHEN 'F' Then 'Female' WHEN 'M' Then 'Male' Else [Sex] END [Sex]
      ,[Date_of_Birth]
      ,[Date_of_Death]
      ,[Notify_Date]
      ,[Registration_Date]
      ,[Claim_Type]
      ,CASE WHEN [WHO_ICD10_Code] IS NOT NULL THEN [WHO_ICD10_Code] + ':' + [Cause_Of_Death] ELSE [Cause_Of_Death] END [Cause]
      ,[Claim_Finalised_Date]
      ,CASE WHEN [Claim_Finalised_Date] IS NOT NULL THEN [Decision] END [Claim_Finalised_Reason] -- was previously [Claim_Status_Desc] 24th Jan, 2018
      ,[Claim_Reopen_Date]
      ,CASE LOWER([Claim_Reopen_Reason])
	          WHEN 'c' THEN 'Complaint'
			  WHEN 'e' THEN 'Close error'
			  WHEN 'g' THEN 'Litigation'
			  WHEN 'l' THEN 'Late Payment'
			  WHEN 'r' THEN 'Recurrence'
	   Else [Claim_Reopen_Reason]
	   END [Claim_Reopen_Reason]
      ,[Policy_Number]
      ,[Product_Name]
      ,[Class_Of_Business]
      ,[Table_Extras]
      ,[Risk_Commenced_Date]
      ,[Total_Benefit_Amount]
      ,[Sum_Insured]
      ,[Reinsurer_Name]
      ,[Reinsurance_Treaty_Type]
      ,[Reinsurer_Percent]
      ,[Assessor]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID
  FROM [dbo].[Figtree_Life_Claim] trg
  where 1=1
  and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   and exclude_flag = 'N';
    --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Load_GL_Journal_Trnx]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_GL_Journal_Trnx]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @BatchLogID Int = 0
	DECLARE @MasterBatchLogID Int = 0

	BEGIN TRY;
	--SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
	--SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
	BEGIN TRAN T1;
delete from [dbo].[GL_Journal_Trnx]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
--
 SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT;
insert into [dbo].[GL_Journal_Trnx]
(      [Month_Eftv_Date]
      ,[Policy_Number]
      ,[EDW_Product_System_Code]
      ,[EDW_Policy_Number]
      ,[EDW_Contract_Id]
      ,[EDW_Contract_Key]
      ,[EDW_Product_Code]
      ,[EDW_Product_Name]
      ,[EDW_Class_of_Business]
      ,[EDW_Product_Key]
      ,[Trace_Code]
      ,[GL_Business_Unit_Id]
      ,[GL_Journal_Id]
      ,[GL_Journal_Date]
      ,[GL_Journal_Line]
      ,[GL_Ledger_Code]
      ,[GL_Account_Id]
      ,[GL_Department_Id]
      ,[GL_Product_Id]
      ,[GL_Project_Id]
      ,[GL_Affiliate_Id]
      ,[GL_Currency_Code]
      ,[GL_Monetary_Amount]
      ,[GL_Posting_Ref_1]
      ,[GL_Journal_Line_Desc]
      ,[Status_Ref_1]
      ,[Source_System_Ref_1]
      ,[Source_System_Ref_2]
      ,[GL_Posting_Ref_2]
      ,[Status_Ref_2]
      ,[GL_Posting_Date]
      ,[User_Id]
      ,[Source_System_Narrative_1]
      ,[GL_Statistic_Amount]
      ,[GL_Foreign_Currency_Code]
      ,[GL_Foreign_Amount]
      ,[GL_Date_Time]
      ,[GL_Journal_Month]
      ,[Pcode]
      ,[Paid_From_Date]
      ,[Paid_To_Date]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason])
SELECT convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date]
      ,[Policy_Number]
      ,NULL [EDW_Product_System_Code]
      ,NULL [EDW_Policy_Number]
      ,NULL [EDW_Contract_Id]
      ,NULL [EDW_Contract_Key]
      ,NULL [EDW_Product_Code]
      ,NULL [EDW_Product_Name]
      ,NULL [EDW_Class_of_Business]
      ,NULL [EDW_Product_Key]
      ,'GL:'+ [GL_Business_Unit_Id]+':'+[GL_Journal_Id]+':'+format([GL_Journal_Date],'yyyyMMdd','en-AU')+':'+CAST([GL_Journal_Line] as VARCHAR)[Trace_Code]
      ,[GL_Business_Unit_Id]
      ,[GL_Journal_Id]
      ,[GL_Journal_Date]
      ,[GL_Journal_Line]
      ,[GL_Ledger_Code]
      ,[GL_Account_Id]
      ,[GL_Department_Id]
      ,[GL_Product_Id]
      ,[GL_Project_Id]
      ,[GL_Affiliate_Id]
      ,[GL_Currency_Code]
      ,[GL_Monetary_Amount]
      ,[GL_Posting_Ref_1]
      ,[GL_Journal_Line_Desc]
      ,[Status_Ref_1]
      ,[Source_System_Ref_1]
      ,[Source_System_Ref_2]
      ,[GL_Posting_Ref_2]
      ,[Status_Ref_2]
      ,[GL_Posting_Date]
      ,[User_Id]
      ,[Source_System_Narrative_1]
      ,[GL_Statistic_Amount]
      ,[GL_Foreign_Currency_Code]
      ,[GL_Foreign_Amount]
      ,NULL [GL_Date_Time]
      ,[GL_Journal_Month]
      ,[Pcode]
      ,[Paid_From_Date]
      ,[Paid_To_Date]
      ,GETDATE()
	  ,NULL
	  ,NULL	  
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,@ProcessLogID [Process_Log_ID]
      ,NULL [Exclude_Flag]
      ,NULL [Exclude_Reason]	  
  FROM [STG].[Stg_AMPL_GL_Journal_Trnx]
  where 1=1
   --AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	  --                           from  [CTL].[ImportLog],
			--						   [CTL].[PackageLog],
			--						   [CTL].[BatchLog],
			--						   [CTL].[PackageConfig],
			--							[CTL].[FileConfig],
			--							[CTL].[FileLog]
			--				   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
			--					 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
			--					  and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
			--					 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
			--					 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   )
			--					 --
			--					 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	  --                           and [CTL].[ImportLog].[TableName] = 'Stg.Stg_AMPL_GL_Journal_Trnx')
  UNION ALL
  SELECT convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date]
      ,[Policy_Number]
      ,NULL [EDW_Product_System_Code]
      ,NULL [EDW_Policy_Number]
      ,NULL [EDW_Contract_Id]
      ,NULL [EDW_Contract_Key]
      ,NULL [EDW_Product_Code]
      ,NULL [EDW_Product_Name]
      ,NULL [EDW_Class_of_Business]
      ,NULL [EDW_Product_Key]
      ,'GL:'+ [GL_Business_Unit_Id]+':'+[GL_Journal_Id]+':'+format([GL_Journal_Date],'yyyyMMdd','en-AU')+':'+CAST([GL_Journal_Line] as VARCHAR)[Trace_Code]
      ,[GL_Business_Unit_Id]
      ,[GL_Journal_Id]
      ,[GL_Journal_Date]
      ,[GL_Journal_Line]
      ,[GL_Ledger_Code]
      ,[GL_Account_Id]
      ,[GL_Department_Id]
      ,[GL_Product_Id]
      ,[GL_Project_Id]
      ,[GL_Affiliate_Id]
      ,[GL_Currency_Code]
      ,[GL_Monetary_Amount]
      ,[GL_Posting_Ref_1]
      ,[GL_Journal_Line_Desc]
      ,[Status_Ref_1]
      ,[Source_System_Ref_1]
      ,[Source_System_Ref_2]
      ,[GL_Posting_Ref_2]
      ,[Status_Ref_2]
      ,[GL_Posting_Date]
      ,[User_Id]
      ,[Source_System_Narrative_1]
      ,[GL_Statistic_Amount]
      ,[GL_Foreign_Currency_Code]
      ,[GL_Foreign_Amount]
      ,[GL_Date_Time]
      ,[GL_Journal_Month]
      ,[Pcode]
      ,[Paid_From_Date]
      ,[Paid_To_Date]
      ,GETDATE()
	  ,NULL
	  ,NULL	  
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,@ProcessLogID [Process_Log_ID]
      ,NULL [Exclude_Flag]
      ,NULL [Exclude_Reason]	  
  FROM [STG].[Stg_AMPN_GL_Journal_Trnx]
  where 1=1
  --AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	 --                            from  [CTL].[ImportLog],
		--							   [CTL].[PackageLog],
		--							   [CTL].[BatchLog],
		--							   [CTL].[PackageConfig],
		--								[CTL].[FileConfig],
		--								[CTL].[FileLog]
		--					   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
		--						 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
		--						 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
		--						  and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
		--						 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
		--						 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
		--						 and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
		--						   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
		--						   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
		--						   )
		--						 --
		--						 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	 --                            and [CTL].[ImportLog].[TableName] = 'Stg.Stg_AMPN_GL_Journal_Trnx');
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	exec [dbo].[usp_Remove_Garbage_Characters] @ProcessLogID,'dbo','GL_Journal_Trnx'
	--
	COMMIT TRAN T1;
	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[GL_Journal_Trnx]
	--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Inforce_History]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================================================
-- Author:  MHTSIQ
-- Create date: June 2020
-- Description: Populate the Reinstatement Exception table
-- =============================================================================

CREATE
PROCEDURE [dbo].[usp_Load_Inforce_History] @CENSUS_DATE datetime,@ProcessLogId int 
  -- Add the parameters for the stored procedure here

AS
BEGIN
  SET NOCOUNT ON;
  --Treaty Variables from INI File for the Census Date
  --DECLARE
  --  @CENSUS_DATE DATE =
  --  (SELECT Top 1 CENSUS_DATE
  --  FROM INFORCE_TEMP
  --  )
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran Load_Inforce_History
   truncate table [dbo].[INFORCE_LAST_SEEN]
	

	     --Table containing when we last saw a particular risk record in the inforce table
            --This Table links the current record to the previous by  the identified columns
          
		  IF OBJECT_ID('tempdb.dbo.#LAST_SEEN', 'U') IS NOT NULL
		  DROP TABLE #LAST_SEEN
		  CREATE TABLE #LAST_SEEN
            (
              CONTRACT_RISK_KEY  INT PRIMARY KEY ,
			  LAST_SEEN_DATE    DATE
			  )
          INSERT INTO #LAST_SEEN
            (CONTRACT_RISK_KEY, 
			  LAST_SEEN_DATE  
            )
          SELECT CONTRACT_RISK_KEY,
			 MAX(I.CENSUS_DATE)
          FROM INFORCE   AS I
          
          WHERE I.CENSUS_DATE         < @CENSUS_DATE
         GROUP BY CONTRACT_RISK_KEY
			
      
	      SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT

	      Print 'Insert Records to #Last_Seen ' + convert(varchar(50), @InsertRowCount)

		  Insert into  [dbo].[INFORCE_LAST_SEEN](
		  [CONTRACT_RISK_KEY] ,
		  [LAST_SEEN_DATE])
		  SELECT 
		  [CONTRACT_RISK_KEY] ,
		  [LAST_SEEN_DATE]
		  From  #LAST_SEEN  
		  select * from #LAST_SEEN
	UPDATE [dbo].[INFORCE_LAST_SEEN]
	SET [CENSUS_DATE] = @CENSUS_DATE
          ,[CONTRACT_KEY] = I.[CONTRACT_KEY]
           ,[PARTY_KEY] = I.PARTY_KEY
           ,[CONTRACT_ID] = I.CONTRACT_ID
           ,[PAS_CLIENT_ID] = I.PAS_CLIENT_ID
           ,[PRODUCT_SYSTEM_CODE] = I.PRODUCT_SYSTEM_CODE
           ,[FIRST_NAME] = I.FIRST_NAME 
           ,[MIDDLE_NAME] = I.MIDDLE_NAME
           ,[SURNAME] = I.SURNAME
           ,[GENDER_CODE] = I.GENDER_CODE
           ,[DOB] = I.DOB
           ,[CONTRACT_START_DATE] = I.CONTRACT_START_DATE
           ,[PRODUCT_CODE] = I.PRODUCT_CODE
           ,[CLASS_OF_BUSN_CODE] = I.CLASS_OF_BUSN_CODE
           ,[PRODUCT_OPTION_CODE] = I.PRODUCT_OPTION_CODE
           ,[PRODUCT_OPT_GROUP_DESC]  = I.PRODUCT_OPT_GROUP_DESC
           ,[RISK_START_DATE] = I.RISK_START_DATE
          ,[RISK_EXPR_DATE] = I.RISK_EXPR_DATE
           ,[SMOKER_STATUS_CODE] = I.SMOKER_STATUS_CODE
           ,[SDUTY_STATE_CODE] = I.SDUTY_STATE_CODE
           ,[POST_CODE] = I.POST_CODE
           ,[OCUPTN_CLASS_CODE] = I.OCUPTN_CLASS_CODE
           ,[STEP_LVL_PREM_CODE] = I.STEP_LVL_PREM_CODE
           ,[SUM_INSURED_AMT] = I.SUM_INSURED_AMT
           ,[AT_RISK_AMT] = I.AT_RISK_AMT
           ,[SERIES_START_DATE] = I.SERIES_START_DATE
           ,[ANNUAL_POL_FEE]= I.ANNUAL_POL_FEE
           ,[PREM_AMT] = I.PREM_AMT
           ,[EXPLICIT_SDUTY_AMT] = I.EXPLICIT_SDUTY_AMT
           ,[PREM_FREQ]  = I.PREM_FREQ
           ,[ANNUAL_PREM] = I.ANNUAL_PREM
           ,[ASSESS_CODE] = I.ASSESS_CODE
           ,[SR_CODES] = I .SR_CODES
           ,[SR_RATE] = I.SR_RATE
           ,[SR_DISC_PC] = I.SR_DISC_PC
           ,[RISK_WAIT_PERIOD] = I.RISK_WAIT_PERIOD 
           ,[SICKNESS_BENEFIT_PERIOD] = I.SICKNESS_BENEFIT_PERIOD
           ,[INJURY_BENEFIT_PERIOD] = I.INJURY_BENEFIT_PERIOD
           ,[INDMNTY_OPTION_CODE] = I.INDMNTY_OPTION_CODE
           ,[AIDS_CVRG_CODE] = I.AIDS_CVRG_CODE
           ,[BENEFIT_INDEXATION] = I.BENEFIT_INDEXATION
           ,[SUM_INSRD_FREQ_CODE] = I.SUM_INSRD_FREQ_CODE
           ,[INCR_CLAIM_OPT_PCNT] = I.INCR_CLAIM_OPT_PCNT
           ,[CAMPAIGN_CODES] = I.CAMPAIGN_CODES
           ,[DIAL_DOWN_PREM_PCNT] = I.DIAL_DOWN_PREM_PCNT
           ,[ASSESS_LOAD_PCNT] = I.ASSESS_LOAD_PCNT
           ,[SUBJECT_TO_CAMPAIGN_PCNT] = I.SUBJECT_TO_CAMPAIGN_PCNT
           ,[ADJ_ENTRY_AGE] = I.ADJ_ENTRY_AGE
           ,[GRP_DISC_PCNT] = I.GRP_DISC_PCNT
           ,[DD_DISC_PCNT] = I.DD_DISC_PCNT
           ,[LSIDP_DISC_PCNT] = I.LSIDP_DISC_PCNT
           ,[LSIDA_DISC_AMT] = I.LSIDA_DISC_AMT
           ,[MPD_DISC_PCNT] = I.MPD_DISC_PCNT
           ,[VCDP_DISC_PCNT] = I.VCDP_DISC_PCNT
           ,[LD_DISC_PCNT] = I.LD_DISC_PCNT
           ,[TPD_OVERLAP_DISC] = I.TPD_OVERLAP_DISC
           ,[FULL_DAY_CVRG_CODE] = I.FULL_DAY_CVRG_CODE
           ,[SWITCH_AGE] = I.SWITCH_AGE
           ,[NUM_TRANCHES] = I.NUM_TRANCHES
           ,[CPI_INCR] = I.CPI_INCR
           ,[FREQ_LDNG_AMT] = I.FREQ_LDNG_AMT
           ,[SALESCHANNEL] = I.SALESCHANNEL
           ,[RISK_CMSN_TYPE_CODE] = I.RISK_CMSN_TYPE_CODE
           ,[TABLE_CODE] = I.TABLE_CODE
           ,[COVER_TYPE] = I.COVER_TYPE
           ,[LINKED_BENEFIT_CODE] = I.LINKED_BENEFIT_CODE
           ,[OPTION_FLAGS] = I.OPTION_FLAGS
           ,[UNDERWRITING_CATEGORY] = I.UNDERWRITING_CATEGORY
           ,[PROJECTION_GROUP] = I.PROJECTION_GROUP
           ,[MP] = I.MP
           ,[DTH_SUM_ASSD] = I.DTH_SUM_ASSD
           ,[TPD_SUM_ASSD] = I.TPD_SUM_ASSD
           ,[CC_SUM_ASSD] = I.CC_SUM_ASSD
           ,[ANN_PHI_BEN] = I.ANN_PHI_BEN
           ,[PROPHET_PREM] = I.PROPHET_PREM
           ,[MIN_VAL_APPLIES] = I.MIN_VAL_APPLIES
           ,[QS_START_DATE] = I.QS_START_DATE
           ,[QS_INCR_DATE] = I.QS_INCR_DATE
           ,[QS_CONV_DATE] = I.QS_CONV_DATE
           ,[QS_PC_BASE] = I.QS_PC_BASE
           ,[QS_PC_INCR] = I.QS_PC_INCR
           ,[QS_PC_CONV] = I.QS_PC_CONV
           ,[QS_IC_PC_BASE] = I.QS_IC_PC_BASE
           ,[QS_IC_PC_INCR] = I.QS_IC_PC_INCR
           ,[QS_IC_PC_CONV] = I.QS_IC_PC_CONV
           ,[QS_OC_PC_BASE] = I.QS_OC_PC_BASE
           ,[QS_OC_PC_INCR] = I.QS_OC_PC_INCR
           ,[QS_OC_PC_CONV] = I.QS_OC_PC_CONV
           ,[QS_OCX_PC_BASE] = I.QS_OCX_PC_BASE
           ,[QS_OCX_PC_INCR] = I.QS_OCX_PC_INCR
           ,[QS_OCX_PC_CONV] = I.QS_OCX_PC_CONV
           ,[QS_ANN_PREM_IF]  = I.QS_ANN_PREM_IF
           ,[QS_GAP_MONTHS] = I.QS_GAP_MONTHS
           ,[QS_AMT_REINP_CURR] = I.QS_AMT_REINP_BCKD
           ,[QS_AMT_REINP_BCKD] = I.QS_AMT_REINP_BCKD
           ,[QS_AMT_IC_BASE] = I.QS_AMT_IC_BASE
           ,[QS_AMT_IC_INCR] = I.QS_AMT_IC_INCR
           ,[QS_AMT_OC_CURR] = I.QS_AMT_OC_CURR
           ,[QS_AMT_OC_BCKD] = I.QS_AMT_OC_BCKD
           ,[QS_AMT_OCX_CURR] = I.QS_AMT_OCX_CURR
           ,[QS_AMT_OCX_BCKD] = I.QS_AMT_OCX_BCKD
           ,[QS_AMT_LAPSE_RVS] = I.QS_AMT_LAPSE_RVS
           ,[COMMENT] = I.COMMENT
           ,[ACODE] = I.ACODE
           ,[PCODE] = I.PCODE
           ,[CONVERTED_CONTRACT_RISK_KEY] = I.CONVERTED_CONTRACT_RISK_KEY
           ,[CONVERTED_CATEGORY] = I.CONVERTED_CATEGORY
           ,[CONVERTED_CENSUS_DATE] = I.CONVERTED_CENSUS_DATE
           ,[AGE] = I.AGE
           ,[SS_PC] = I.SS_PC
           ,[SS_OCCUPATION] = I.SS_OCCUPATION
           ,[SS_DTH_BASE] = I.SS_DTH_BASE
           ,[SS_DTH_MULT] = I.SS_DTH_MULT
           ,[SS_TPD_BASE]  =  I.SS_TPD_BASE
           ,[SS_TPD_MULT] = I.SS_TPD_MULT
           ,[SS_CC_BASE] = I.SS_CC_BASE
           ,[SS_CC_MULT] = I.SS_CC_MULT
           ,[SS_IP_BASE]= I.SS_IP_BASE
           ,[SS_IP_MULT] = I.SS_IP_MULT
           ,[SS_ANN_PREM] = I.SS_ANN_PREM
           ,[SS_PREM_CURR] = I.SS_PREM_CURR
           ,[SS_PREM_BCKD] = I.SS_PREM_BCKD
         
           ,[SS_DTH_Blended] = I.SS_DTH_Blended
           ,[SS_TPD_Blended] = I.SS_TPD_Blended
           ,[SS_CC_Blended] = I.SS_CC_Blended
           ,[SS_IP_Blended] = I.SS_IP_Blended
           ,[MDM_PARTY_KEY] = I.MDM_PARTY_KEY
           ,[Reins_Life_Identifier] = I.Reins_Life_Identifier
           ,[PREV_Reins_Life_Identifier] = I.PREV_Reins_Life_Identifier
           ,[PARTY_KEY_TYPE] = I.PARTY_KEY_TYPE 
           ,[Reins_Life_Grouping_Change] = I.Reins_Life_Grouping_Change
           ,[QS_OC_PC_BASE_Blended] = I.QS_OC_PC_BASE_Blended
           ,[QS_OC_PC_INCR_Blended] = I.QS_OC_PC_INCR_Blended
           ,[QS_OC_PC_CONV_Blended] = I.QS_OC_PC_CONV_Blended
           ,[QS_OCX_PC_BASE_Blended] = I.QS_OCX_PC_BASE_Blended
           ,[QS_OCX_PC_INCR_Blended] = I.QS_OCX_PC_INCR_Blended
           ,[QS_OCX_PC_CONV_Blended] = I.QS_OCX_PC_CONV_Blended
           ,[QS_Treaty_id] = I.QS_Treaty_id
           ,[SS_Treaty_id] = I.SS_Treaty_id
		   ,[Created_date_time] = GetDate()
		  ,[Created_by] = 	ORIGINAL_LOGIN()
	    	,[Process_Log_id] = @ProcessLogId
		   From  [dbo].[INFORCE_LAST_SEEN] as IL
		   Join INFORCE as I on I.CONTRACT_RISK_KEY  = IL.CONTRACT_RISK_KEY
		   join #LAST_SEEN as L on I.CONTRACT_RISK_KEY  = L.CONTRACT_RISK_KEY
		   and L.LAST_SEEN_DATE = I.CENSUS_DATE
	
 
		Commit TRAN Load_Inforce_History

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Load_Inforce_History;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END



GO
/****** Object:  StoredProcedure [dbo].[usp_Load_IP_CLM]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================
-- Author:		KHNNR2
-- Create date: July 2019
-- Description:	Load IP CLM data from Staging Table
-- ==============================================


CREATE PROCEDURE [dbo].[usp_Load_IP_CLM]  
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;




DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0



BEGIN TRY

Begin Tran IP_CLM_Loading
		TRUNCATE TABLE [STG].[Stg_Ip_Clm]

		Insert into [STG].[Stg_Ip_Clm]
		Select * from [STG].[Stg_Ip_Clm_PDIS1O] Union All
		Select * from [STG].[Stg_Ip_Clm_PDISSO] Union All
		Select * from [STG].[Stg_Ip_Clm_PQDS1O] Union All
		Select * from [STG].[Stg_Ip_Clm_PQDSLO] Union All
		Select * from [STG].[Stg_Ip_Clm_PQDSSO] 
		
		Insert into IP_CLAIM(CONTRACT_KEY, DB_DATE,CREATED_DATE_TIME
      ,PROCESS_LOG_ID
      ,[CREATED_BY])
	Select
		CONTRACT_KEY = S.EDW_CTRT_KEY
		,DB_DATE = dbo.DateSerial([DISABLE_DTE]/10000,[DISABLE_DTE]/100%100,[DISABLE_DTE]%100)
		,s.Created_Date_Time
		,[Import_Log_ID]
		,S.[CREATED_BY]
	FROM stg.Stg_Ip_Clm As S 
		LEFT JOIN IP_CLAIM AS I on I.CONTRACT_KEY = S.EDW_CTRT_KEY and I.DB_DATE = dbo.DateSerial(S.[DISABLE_DTE]/10000,S.[DISABLE_DTE]/100%100,S.[DISABLE_DTE]%100)
	WHERE I.CONTRACT_KEY is NULL

	Set @InsertRowCount=@@ROWCOUNT

	Select		 @InsertRowCount InsertRowCount, 
				 @UpdateRowCount UpdateRowCount, 
				 @DeleteRowCount DeleteRowCount;

	commit Tran IP_CLM_Loading
	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN IP_CLM_Loading;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Load_LS]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_LS]    Script Date: 24/08/2020 4:54:46 PM ******/

-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS
-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" to drive and insert �PREV_ Reins_Life_Identifier� 
--              values for lapsed records into Inforce_Temp (PAS) tables
-- ==============================================
-- Author:		KHNNR2
-- Create date: May 2017
-- Description:	Load OPUS (LS) data from Staging Table
-- ==============================================
-- Author:		AWJ
-- Create date: Aug 2017
-- Description:	Load OPUS DATA from Staging Table
-- ==============================================
CREATE PROCEDURE [dbo].[usp_Load_LS] @ProcessLogID int,@CENSUS_DATE datetime
	-- Add the parameters for the stored procedure here
AS
BEGIN
	SET NOCOUNT ON;


-- Log the function Call
		--DECLARE @CENSUS date
		--SELECT top 1 @CENSUS = CENSUS_DATE From stg.Stg_Opus
		DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))

		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0


		IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
		Select
			TREATY_START         = @TREATY_START
			,CENSUS_DATE         = @CENSUS_DATE
			,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
			,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
			,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
			,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
			,*
		Into #LOAD_PARAMS
		From PAS_INI 
		Where PRODUCT_SYSTEM_CODE = 'LS'


		--Select * from #LOAD_PARAMS
		--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Start'

BEGIN TRY

		Begin Tran INFORCE_TEMP_LS_Loading
		--Load the data from the Staging Table into INFORCE_TEMP_LS
		
		Truncate Table INFORCE_TEMP_LS
		    -- Create a temp table to store records only for the in-scope Product Benefit Combinations
		CREATE TABLE #Temp_Opus (CENSUS_DATE datetime2(7)
           ,CONTRACT_KEY numeric(10,0)
           ,PARTY_KEY numeric(10,0)
           ,CONTRACT_RISK_KEY numeric(10,0)
           ,CONTRACT_ID varchar(50)
           ,PRODUCT_SYSTEM_CODE varchar(3)
           ,FIRST_NAME varchar(120)
           ,MIDDLE_NAME varchar(120)
           ,SURNAME varchar(100)
           ,GENDER_CODE varchar(3)
           ,DOB datetime2(7)
           ,CONTRACT_START_DATE datetime2(7)
           ,PRODUCT_CODE varchar(20)
           ,CLASS_OF_BUSN_CODE varchar(2)
           ,PRODUCT_OPTION_CODE varchar(20)
           ,PRODUCT_OPT_GROUP_DESC varchar(50)
           ,RISK_START_DATE datetime2(7)
           ,RISK_EXPR_DATE datetime2(7)
           ,SMOKER_STATUS_CODE varchar(10)
           ,SDUTY_STATE_CODE varchar(3)
           ,POST_CODE varchar(30)
           ,OCUPTN_CLASS_CODE varchar(20)
           ,STEP_LVL_PREM_CODE varchar(2)
           ,SUM_INSURED_AMT numeric(20,3)
           ,AT_RISK_AMT numeric(20,3)
           ,ANNUAL_POL_FEE float
           ,PREM_AMT numeric(20,3)
           ,EXPLICIT_SDUTY_AMT numeric(20,2)
           ,PREM_FREQ numeric(5,2)
           ,ANNUAL_PREM float
           ,BENEFIT_INDEXATION varchar(10)
           ,SUM_INSRD_FREQ_CODE char(5)
           ,FREQ_LDNG_AMT numeric(20,3)
           ,SALESCHANNEL varchar(15)
           ,TABLE_CODE varchar(10)
           ,PROJECTION_GROUP char(15)
           ,MP char(6)
           ,DTH_SUM_ASSD float
           ,TPD_SUM_ASSD float
           ,CC_SUM_ASSD float
           ,ANN_PHI_BEN float
           ,PROPHET_PREM float
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_BY varchar(50))


		INSERT INTO #Temp_Opus 
		select distinct [CENSUS_DATE]
      ,[CONTRACT_KEY]
      ,[PARTY_KEY]
      ,[CONTRACT_RISK_KEY]
      ,[CONTRACT_ID]
      ,s.[PRODUCT_SYSTEM_CODE]
      ,[FIRST_NAME]
      ,[MIDDLE_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[CONTRACT_START_DATE]
      ,s.[PRODUCT_CODE]
      ,[CLASS_OF_BUSN_CODE]
      ,s.[PRODUCT_OPTION_CODE]
      ,[PRODUCT_OPT_GROUP_DESC]
      ,[RISK_START_DATE]
      ,[RISK_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[SDUTY_STATE_CODE]
      ,[POST_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[STEP_LVL_PREM_CODE]
      ,[SUM_INSURED_AMT]
      ,[AT_RISK_AMT]
      ,[ANNUAL_POL_FEE]
      ,[PREM_AMT]
      ,[EXPLICIT_SDUTY_AMT]
      ,[PREM_FREQ]
      ,[ANNUAL_PREM]
      ,[BENEFIT_INDEXATION]
      ,[SUM_INSRD_FREQ_CODE]
      ,[FREQ_LDNG_AMT]
      ,[SALESCHANNEL]
      ,[TABLE_CODE]
      ,[PROJECTION_GROUP]
      ,[MP]
      ,[DTH_SUM_ASSD]
      ,[TPD_SUM_ASSD]
      ,[CC_SUM_ASSD]
      ,[ANN_PHI_BEN]
      ,[PROPHET_PREM]
      ,s.[Created_Date_Time]
      ,[Import_Log_ID]
      ,s.[Created_BY]
	 from [stg].[Stg_Opus] s
	 join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
 and  p.Treaty_Id  not in (-1, -999)


		INSERT INTO [INFORCE_TEMP_LS](
				   [CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PRODUCT_SYSTEM_CODE]
				   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
				   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
				   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
				   ,[POST_CODE]
				   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[ANNUAL_POL_FEE],[PREM_AMT]
				   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[ANNUAL_PREM]
				   ,[BENEFIT_INDEXATION],[SUM_INSRD_FREQ_CODE]
				   ,[FREQ_LDNG_AMT]
				   ,[SALESCHANNEL],[TABLE_CODE]
				   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
				   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
				   ,[QS_START_DATE]
				   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]  -- New Added Field in Table
				   )
		Select
			S.CENSUS_DATE,CONTRACT_KEY,PARTY_KEY,CONTRACT_RISK_KEY,CONTRACT_ID,S.PRODUCT_SYSTEM_CODE
			,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB
			,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC
			,RISK_START_DATE,RISK_EXPR_DATE
			,SMOKER_STATUS_CODE=nullif(SMOKER_STATUS_CODE, 'NA')
			,SDUTY_STATE_CODE
			,POST_CODE = Case when SDUTY_STATE_CODE <> 'OS' Then Left(POST_CODE,4) ELSE NULL End
			,OCUPTN_CLASS_CODE,STEP_LVL_PREM_CODE,SUM_INSURED_AMT,AT_RISK_AMT,ANNUAL_POL_FEE
			,PREM_AMT = coalesce(PREM_AMT,0)
			,EXPLICIT_SDUTY_AMT,PREM_FREQ
			,ANNUAL_PREM = coalesce(ANNUAL_PREM,0)
			,BENEFIT_INDEXATION,SUM_INSRD_FREQ_CODE
			,FREQ_LDNG_AMT
			,SALESCHANNEL,TABLE_CODE
			,UNDERWRITING_CATEGORY = 'HERITAGE'
			,PROJECTION_GROUP = CASE WHEN [STEP_LVL_PREM_CODE] = 'S' Then 'AMPN_LS_STP_INF' Else 'AMPN_LS_LVL_INF' End
			,MP
			,DTH_SUM_ASSD,TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN,PROPHET_PREM
			,QS_START_DATE = P.TREATY_START --QS_START_DATE is always TREATY_START
			,getdate()    -- Default data for added fields
			,NULL
			,CURRENT_USER
			,NULL
			,@ProcessLogID
		
		FROM #Temp_Opus As S, #LOAD_PARAMS As P

		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		Print 'Loaded INFORCE_OPUS_ Table' + convert(varchar(50), @InsertRowCount)

		--Update PCODES
		EXEC usp_Assign_PCODE 'LS','TEMP'

		Commit TRAN INFORCE_TEMP_LS_Loading

		select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

		END TRY

BEGIN CATCH
	
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN INFORCE_TEMP_LS_Loading;

			select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;
		THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempOPUS
		
		--Update the Record of Lapses
		--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
		
		Delete from stg.Stg_Opus_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_LS)
		
		--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Unlapsed from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Delete from Lapse Staging any policies that are not present in the previous month
		
		Delete From stg.Stg_Opus_Off
		where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='LS')
		
		--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
		Print 'Delete Excluded from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Insert the Lapsed Policies into the Lapse Table 
		-- Select top 100 * from LAPSED_TEMP
		--Select top 100 * from STAGE_OPUS_OFF
		
		--truncate table LAPSED_TEMP
		delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='LS'

		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				,MONTHS_WRITE_OFF = dbo.intMinMax(coalesce(dbo.IntMin(DateDiff(Month,PREM_RENEW_TO_DATE,P.TOMORROW)-1,3),0),0,P.MONTHS_SINCE_TREATY)
				,I.Reins_Life_Identifier

			FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_LS As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN stg.Stg_Opus_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
				,#LOAD_PARAMS As P
			WHERE T.CONTRACT_RISK_KEY is NULL
				and I.CENSUS_DATE = P.LAST_MONTH
				and I.PRODUCT_SYSTEM_CODE = 'LS'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table' + convert(varchar(50),@InsertRowCount)	

		--Add lapsed benefits where the contract is not in the LAPSED list
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
		Select
			I.CENSUS_DATE
			,I.CONTRACT_KEY
			,I.CONTRACT_RISK_KEY
			,I.PRODUCT_SYSTEM_CODE
			,MONTHS_WRITE_OFF = 0
			,I.Reins_Life_Identifier

		From INFORCE As I, #LOAD_PARAMS as P
		where
			I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'LS' --Inforce records from Last Month
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_LS)  --List of Current Records (not Lapsed)
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='LS') --List of Lapsed Records Already Included

			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list'  + convert(varchar(50),@InsertRowCount)

		--Update the AMOUNTS in LAPSE_TEMP
		Update L Set
			QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
				From INFORCE As I 
				Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
					and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
		From
			LAPSED_TEMP As L, #LOAD_PARAMS As P
		Where MONTHS_WRITE_OFF > 0
		and L.PRODUCT_SYSTEM_CODE='LS'

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Add AMOUNTS in LAPSE_TEMP' + convert(varchar(50),@UpdateRowCount)

		--Update the Lapsed table
		Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='LS'
		Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)
			Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,Current_User,Getdate()
				From LAPSED_TEMP As L, #LOAD_PARAMS As P
				where L.PRODUCT_SYSTEM_CODE='LS'

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update Lapse Listing ' + convert(varchar(50),@UpdateRowCount)
		
		--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS_DATE, @STEP='Add to Lapse Listing', @RECS=@@ROWCOUNT

		Commit tran LapseUpdateToInforceTempOPUS

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
			IF @@TRANCOUNT > 0

				ROLLBACK TRAN LapseUpdateToInforceTempOPUS;

				select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

			THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN CnvUpdateToInforceTempOPUS

		--Look for Conversions from the LAPSED Table and update the CONVERTED Table
		
		--truncate table CONVERTED_TEMP
		if 1=(Select ALLOW_CONVERSIONS From #LOAD_PARAMS)
			BEGIN
			DECLARE @CONV_RECS int
			EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'LS', @ProcessLogID
			END
		
		
		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
		Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)
		

		COMMIT TRAN CnvUpdateToInforceTempOPUS

		SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
			IF @@TRANCOUNT > 0
				--ROLLBACK TRAN INFORCE_TEMP_LS_Loading;
				--ROLLBACK TRAN LapseUpdateToInforceTempLS;
				ROLLBACK TRAN CnvUpdateToInforceTempOPUS;

				select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

			THROW;
	
END CATCH
		
					--------------------------------------------------------------------------------------------------------------
					----Calculate the Quota Share information
					--------------------------------------------------------------------------------------------------------------
					--DECLARE @QS_RECS int = 0
					--EXEC @QS_RECS = usp_Calc_QS
					--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='QS Calculations', @RECS=@QS_RECS

					-------------------------------------------------------------------------------------------------------------
					----Calculate the Surplus Information
					-------------------------------------------------------------------------------------------------------------
					--DECLARE @SS_RECS int = 0
					--EXEC @SS_RECS = usp_Calc_SS
					----Print @SS_RECS
					--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='SS Calculations', @RECS=@SS_RECS
					--------------------------------------------------------------------------------------------------------------

					----Identify Reinstatements
					----Create #Table to contain the lapse and reinstatement information
					--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
					--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
					--Insert into #REIN
					--Select
					--	T.CONTRACT_RISK_KEY
					--	,T.CENSUS_DATE
					--	,L.LAPSE_DATE
					--	,L.QS_AMT_LAPSE_RECOVERED
					--FROM [INFORCE_TEMP] As T JOIN LAPSED As L 
					--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
					--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
					--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
					--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

					----Update Both Lapse and Inforce Temp Tables
					--BEGIN TRANSACTION;
					--Update T Set
					--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
					--FROM INFORCE_TEMP As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

					--Update L Set
					--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
					--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
					--FROM
					--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

					--COMMIT;
					--DECLARE @QS_REIN int = (Select count(*) From #REIN)
					----Print @QS_REIN
					--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='Process Reinstatements', @RECS=@QS_REIN

					----Update Lapses for Conversions (Similar to Reinstatements)
					--If 1 = (Select ALLOW_CONVERSIONS FROM #LOAD_PARAMS)
					--	BEGIN
					--	BEGIN TRANSACTION;
					--	Update T SET
					--		QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
					--	from CONVERTED As C JOIN INFORCE_TEMP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
					--		JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

					--	Update L Set
					--		L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
					--		,L.REINSTATEMENT_DATE = T.CENSUS_DATE
					--	from CONVERTED As C JOIN INFORCE_TEMP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
					--		JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
					--	COMMIT;

					--	DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
					--	--Print @QS_CONV
					--	EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='Process Conversions', @RECS=@QS_CONV
					--	END

					----Update the INFORCE Table
					----DECLARE @CENSUS Date = '28-Feb-2017'
					--Delete from INFORCE where PRODUCT_SYSTEM_CODE='LS' and CENSUS_DATE=@CENSUS
					--Insert into INFORCE Select * FROM INFORCE_TEMP
					--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='Insert New Records', @RECS=@@ROWCOUNT 


		END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Mercury_Transactions]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- RRNAA2
-- Opus Claims Payment Enhancement Change
-- RGU-575 - 23/06/2020
-- The change involves identification of Opus records in the columns [Product_System_Code] and Policy_Number


CREATE PROCEDURE [dbo].[usp_Load_Mercury_Transactions]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @BatchLogID Int = 0
	--DECLARE @MasterBatchLogID Int = 0
 --
 BEGIN TRY;
 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
 BEGIN TRAN T1;
 delete from dbo.mercury_trnx
 where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear);
--
 SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT;
 insert into dbo.mercury_trnx
(	   [Month_Effective_Date]
      ,[Product_System_Code]
      ,[Policy_Number]
      ,[Trace_Code]
      ,[Admin_System_File_Id]
      ,[Admin_System_Id]
      ,[File_Record_Number]
      ,[GL_Posting_Date]
      ,[Stat_Fund]
      ,[Sequence_Number]
      ,[Primary_Secondary_Ind]
      ,[Client_Ref_Id_1]
      ,[Client_Ref_Id_2]
      ,[Client_Ref_Id_3]
      ,[Client_Ref_Id_4]
      ,[Trans_Ref_Key_2]
      ,[Trans_Ref_Key_3]
      ,[Trans_Ref_Key_4]
      ,[Trans_Ref_Key_5]
      ,[Trans_Ref_Key_6]
      ,[GL_Business_Unit_Id]
      ,[GL_Account_Id]
      ,[GL_Department_Id]
      ,[GL_Product_Code]
      ,[GL_Project_Id]
      ,[GL_Affiliate_Id]
      ,[GL_Posting_Ref_Text]
      ,[Ledger_Movement_Amount]
      ,[GL_Posting_File_Id]
      ,[Trans_Ref_Key_1]
      ,[Client_Ref_Id_5]
      ,[Product_Ref_Key_1]
      ,[Product_Ref_Key_2]
      ,[Product_Ref_Key_3]
      ,[Bus_Line_Ref_Key_1]
      ,[Bus_Line_Ref_Key_2]
      ,[Bus_Line_Ref_Key_3]
      ,[Business_Line_Location]
      ,[Business_Line_Planner_Id]
      ,[Business_Tax_Classn]
      ,[Stat_Fund_Code]
      ,[Investment_Pool_Id]
      ,[Off_Investment_Pool_Id]
      ,[Transaction_Amount]
      ,[Transaction_Process_Date]
      ,[Investment_Effective_Date]
      ,[Movement_Effective_Date]
      ,[GL_Currency_Code]
      ,[Trans_Ref_Key_7]
      ,[Trans_Ref_Key_8]
      ,[Trans_Ref_Key_9]
      ,[Trans_Ref_Key_10]
      ,[Trans_Ref_Key_11]
      ,[Business_Product_Line_Code]
      ,[Business_Product_Owner_Code]
      ,[Business_Product_Code]
      ,[Business_Line_Code]
      ,[Business_Trans_Type]
      ,[Source_Sys_Reference_1]
      ,[Source_Sys_Narrative_1]
      ,[Source_Sys_Reference_2]
      ,[Source_Sys_Narrative_2]
      ,[Admin_File_Ref_Text]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason])
SELECT  convert(datetime,@ProcessingMonthYear) eftv_date,       
       case [Admin_System_Id] when 'CLAS' then 'FDA' when 'INCOM' then 'OR' when 'ULTIMATE' then 'CP' when 'ULTIMAAS' then 'U2' when 'PBSS' then 'LS' end Product_System_code,
	   case when [Admin_System_Id] = 'ULTIMAAS' and [Client_Ref_Id_4] is null and client_ref_id_2 = 'FLSPLAN' 
	   then client_ref_id_1
	   else 
	   case [Admin_System_Id] when 'CLAS' then [Client_Ref_Id_2] when 'INCOM' then [Client_Ref_Id_1] when 'ULTIMATE' then [Client_Ref_Id_1] 
	   when 'ULTIMAAS' then [Client_Ref_Id_4] when 'PBSS' then [Client_Ref_Id_1] end 
	   end Policy_Number,
	   'MR:'+CAST([Admin_System_File_Id] as varchar)+':'+CAST([Admin_System_Id] as varchar) +':'+CAST([File_Record_Number] as varchar) +':'
	   +LEFT(CONVERT(VARCHAR, [GL_Posting_Date], 120), 10)+':'+CAST(ISNULL([Stat_Fund],'-') as varchar) +':'+CAST(ISNULL([Sequence_Number],'-') as varchar) +':'+ CAST(ISNULL([Primary_Secondary_Ind],'-') as varchar)  trace_code,
	   --'MR:'+CAST([Admin_System_File_Id] as varchar)+':'+CAST([Admin_System_Id]as varchar) +':'+CAST([File_Record_Number]as varchar) +':'
	   --+LEFT(CONVERT(VARCHAR, [GL_Posting_Date], 120), 10)+':'+CAST([Stat_Fund]as varchar) +':'+CAST([Sequence_Number]as varchar) +':'+ CAST([Primary_Secondary_Ind] as varchar)  trace_code,
	   [Admin_System_File_Id]
      ,[Admin_System_Id]
      ,[File_Record_Number]
	  ,[GL_Posting_Date]
      ,ISNULL([Stat_Fund],'-') as [Stat_Fund]
      ,ISNULL([Sequence_Number],'-') as [Sequence_Number]
      ,ISNULL([Primary_Secondary_Ind],'-') as [Primary_Secondary_Ind]
      ,[Client_Ref_Id_1]
      ,[Client_Ref_Id_2]
      ,[Client_Ref_Id_3]
      ,[Client_Ref_Id_4]
      ,[Trans_Ref_Key_2]
      ,[Trans_Ref_Key_3]
      ,[Trans_Ref_Key_4]
      ,[Trans_Ref_Key_5]
      ,[Trans_Ref_Key_6]
      ,[GL_Business_Unit_Id]
      ,[GL_Account_Id]
      ,[GL_Department_Id]
      ,[GL_Product_Code]
      ,[GL_Project_Id]
      ,[GL_Affiliate_Id]
      ,[GL_Posting_Ref_Text]
      ,[Ledger_Movement_Amount]
      ,[GL_Posting_File_Id]
      ,[Trans_Ref_Key_1]
      ,[Client_Ref_Id_5]
      ,[Product_Ref_Key_1]
      ,[Product_Ref_Key_2]
      ,[Product_Ref_Key_3]
      ,[Bus_Line_Ref_Key_1]
      ,[Bus_Line_Ref_Key_2]
      ,[Bus_Line_Ref_Key_3]
      ,[Business_Line_Location]
      ,[Business_Line_Planner_Id]
      ,[Business_Tax_Classn]
      ,[Stat_Fund_Code]
      ,[Investment_Pool_Id]
      ,[Off_Investment_Pool_Id]
      ,[Transaction_Amount]
      ,[Transaction_Process_Date]
      ,[Investment_Effective_Date]
      ,[Movement_Effective_Date]
      ,[GL_Currency_Code]
      ,[Trans_Ref_Key_7]
      ,[Trans_Ref_Key_8]
      ,[Trans_Ref_Key_9]
      ,[Trans_Ref_Key_10]
      ,[Trans_Ref_Key_11]
      ,[Business_Product_Line_Code]
      ,[Business_Product_Owner_Code]
      ,[Business_Product_Code]
      ,[Business_Line_Code]
      ,[Business_Trans_Type]
      ,[Source_Sys_Reference_1]
      ,[Source_Sys_Narrative_1]
      ,[Source_Sys_Reference_2]
      ,[Source_Sys_Narrative_2]
      ,[Admin_File_Ref_Text]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,[Import_Log_ID]
	  ,[Import_File_Name]
	  ,@ProcessLogID [Process_Log_ID]
      ,NULL
	  ,NULL
  FROM [STG].[Stg_Mercury_Trnx]
   where 1=1
   --AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	  --                           from  [CTL].[ImportLog],
			--						   [CTL].[PackageLog],
			--						   [CTL].[BatchLog],
			--						   [CTL].[PackageConfig],
			--							[CTL].[FileConfig],
			--							[CTL].[FileLog]
			--				   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
			--					 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
			--					 and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
			--					 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
			--					 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   )

			--					 --
			--					 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	  --                           and [CTL].[ImportLog].[TableName] = 'Stg.Stg_Mercury_Trnx')
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	--
	exec [dbo].[usp_Remove_Garbage_Characters] @ProcessLogID,'dbo','Mercury_Trnx'
	--
	COMMIT TRAN T1;
	--
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].Mercury_Trnx
	--where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear)
	--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH

SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Monthly_Snapshots]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_Monthly_Snapshots]
   @ProcessLogID Int
  ,@ProcessingMonthYear VARCHAR(100)
  ,@SourceTableSchema VARCHAR(10)
  ,@SourceTableName VARCHAR(100)
  ,@TargetTableSchema VARCHAR(10)
  ,@TargetTableName VARCHAR(100)
  ,@Reload VARCHAR(1) = 0
AS
---------
-- Delete Existing Data in the Target Table
--
---------
-- Delete Existing Data in the Target Table
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @column_string VARCHAR(MAX)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @BatchLogID Int = 0
	--DECLARE @MasterBatchLogID Int = 0
	BEGIN TRY;
	--SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
	--SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
	BEGIN TRAN T1;
	If @Reload = 1 
	BEGIN
	SET @SQL = 'DELETE FROM '+@TargetTableSchema+'.'+@TargetTableName+' WHERE [Month_Eftv_Date] = Convert(Datetime,'''+@ProcessingMonthYear+''')'
	EXEC(@SQL)
	SET @DeleteRowCount = @@ROWCOUNT
	end
	--
	-- Automate generation of Insert script to Target table
	SET @SQL = 'INSERT INTO '+@TargetTableSchema+'.'+@TargetTableName+'('

	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	Select CASE WHEN ORDINAL_POSITION = 1 THEN '['+column_name+']' ELSE ',['+column_name+']' END column_string
	from INFORMATION_SCHEMA.COLUMNS
	WHERE      upper(table_schema) = upper(@SourceTableSchema)
	AND upper(table_name) = upper(@SourceTableName)
	order by ORDINAL_POSITION
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@column_string

	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		SET @SQL = @SQL + @column_string
		FETCH NEXT FROM Columns_Lists into 
		@column_string
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	SET @SQL = @SQL + ',[Month_Eftv_Date], [Process_Log_ID] ) SELECT '
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	select CASE WHEN ORDINAL_POSITION = 1 
	            THEN 
				    CASE WHEN LOWER(Data_Type) = 'varchar' THEN ' CASE WHEN charindex(char(13),['+column_name+']) > 0 OR charindex(char(10),['+column_name+']) > 0 THEN replace(replace(['+column_name+'],char(13),''''),char(10),'''') 
					                                                   WHEN RTRIM(LTRIM(['+column_name+'])) = '''' THEN NULL ELSE RTRIM(LTRIM(['+column_name+'])) 
																	   END ['+column_name+']'
						-- WHEN LOWER(Data_Type) like 'date%' THEN ' CASE WHEN ['+column_name+'] <= CONVERT('+Data_Type+',''01/jan/1753'') THEN NULL ELSE ['+column_name+'] END ['+column_name+']'
				    ELSE '['+column_name+']'
				    END 
	            WHEN Upper(column_name) = 'CREATED_DATE_TIME' THEN ', GETDATE() AS ['+column_name+']'
				WHEN LOWER(Data_Type) = 'varchar' THEN ', CASE WHEN charindex(char(13),['+column_name+']) > 0 OR charindex(char(10),['+column_name+']) > 0 THEN replace(replace(['+column_name+'],char(13),''''),char(10),'''') 
					                                                   WHEN RTRIM(LTRIM(['+column_name+'])) = '''' THEN NULL ELSE RTRIM(LTRIM(['+column_name+'])) 
																	   END ['+column_name+']'
				--WHEN LOWER(Data_Type) like 'date%' THEN ', CASE WHEN ['+column_name+'] <= CONVERT('+Data_Type+',''01/jan/1753'') THEN NULL ELSE ['+column_name+'] END ['+column_name+']'
		   ELSE ',['+column_name+']' END column_string
	from INFORMATION_SCHEMA.COLUMNS
	WHERE      upper(table_schema) = upper(@SourceTableSchema)
	AND upper(table_name) = upper(@SourceTableName)
	order by ORDINAL_POSITION
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@column_string
	WHILE @@FETCH_STATUS = 0  

	BEGIN 
		SET @SQL = @SQL + @column_string
		FETCH NEXT FROM Columns_Lists into 
		@column_string
	END
	CLOSE Columns_Lists
	Deallocate Columns_Lists

	SET @SQL = @SQL + ', convert(datetime,'''+@ProcessingMonthYear+''',120) AS [Month_Eftv_Date] , '+CAST(@ProcessLogID AS VARCHAR)+' AS [Process_Log_ID] FROM '+@SourceTableSchema+'.'+@SourceTableName

	--
	--SET @SQL = @SQL + ', convert(datetime,'''+@ProcessingMonthYear+''',120) AS [Month_Eftv_Date] , '+CAST(@ProcessLogID AS VARCHAR)+' AS [Process_Log_ID] FROM '+@SourceTableSchema+'.'+@SourceTableName
	--+' WHERE Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	--                             from  [CTL].[ImportLog],
	--								   [CTL].[PackageLog],
	--								   [CTL].[BatchLog],
	--								   [CTL].[PackageConfig],
	--									[CTL].[FileConfig],
	--									[CTL].[FileLog]
	--						   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
	--							 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
	--							 and [CTL].[PackageConfig].TaskName = ''ProcessingMonthYear''
	--							  and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
	--							 and [CTL].[BatchLog].MasterBatchLogID = '+CAST(@MasterBatchLogID AS VARCHAR)+'
	--							 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
	--							 and ( REPLACE([CTL].[FileConfig].[FileName],''yyyy-mm-dd'',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,''yyyy-MM-dd'',''en-AU'') ) = [CTL].[FileLog].[FileName]
	--							   OR REPLACE([CTL].[FileConfig].[FileName],''yyyymmdd'',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,''yyyyMMdd'',''en-AU'') ) = [CTL].[FileLog].[FileName]
	--							   OR REPLACE([CTL].[FileConfig].[FileName],''yyyymm'',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),''yyyyMM'',''en-AU'') ) = [CTL].[FileLog].[FileName]
	--							   )
	--							 --
	--							 and [CTL].[PackageConfig].TaskValue = '''+@ProcessingMonthYear+'''
	--                             and [CTL].[ImportLog].[TableName] = '''+@SourceTableSchema+'.'+@SourceTableName+''')'
	--
	EXEC(@SQL)
	SET @InsertRowCount = @@ROWCOUNT
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
SET ANSI_NULLS ON




GO
/****** Object:  StoredProcedure [dbo].[usp_Load_MR_IP_Claim_Bdx]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		RRNAA2
-- Create date: 17/06/2021
-- Description:	Proc for Loading temporary work table with Munich Re bdx for Claims IP and updating the same with conversion data from Claims Listing and Expense details for the month.
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Create date: 29/09/2021
-- Description:	updating the Munich Re records with CMS data from Claims Listing and Expense details for the month.
-- =============================================

CREATE PROCEDURE [dbo].[usp_Load_MR_IP_Claim_Bdx]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear Datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 DECLARE @MonthDate Date 

	 --set @MonthDate = convert(Date,@ProcessingMonthYear)
	 --print @MonthDate
	 print @ProcessingMonthYear
	 --print SYSTEM_USER
	 --print ORIGINAL_LOGIN()


BEGIN TRY

    -- Insert statements for procedure here
	delete from [M_WEBXL_AMP_IP_Claims_Bdx_Temp]

BEGIN TRAN Tran1;

	-- Insert the Munich Re Bdx records for the month into the work table

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAID_FROM_DATE]
           ,[PAID_TO_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[OFFSET_IND]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAID_FROM_DATE]
      ,[PAID_TO_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[OFFSET_IND]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
	  ,'MR' as [Source_Type]
	  ,'IP' as Reins_Benefit_Type
      ,getdate() as [Created_Date_Time]
      ,SYSTEM_USER as [Created_By]
      ,NULL as [Updated_Date]
      ,NULL as [Updated_By]
  FROM [stg].[stg_M_WEBXL_AMP_IP_Claims_Bordereau]
  where Month_Effective_Date = @ProcessingMonthYear


 Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount


 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		-- Insert Conversions records taken from Reins_Listing and mapped in the required way for the month

	INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAID_FROM_DATE]
           ,[PAID_TO_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[OFFSET_IND]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
	SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		T.Pay_Date_From [PAID_FROM_DATE],
		T.Pay_Date_To [PAID_TO_DATE],
		(CASE WHEN L.Reins_Benefit_Type = 'IP' AND T.Source_trnx_Id not like 'AB%' then T.Transaction_Amount ELSE 0 END) AS [PAY_AMT],
		(CASE WHEN L.Reins_Benefit_Type = 'IP' AND T.Source_trnx_Id not like 'AB%' then T.[Layer_1_Reins_Claim_Amount] ELSE 0 END) as [REINS_RECOVERY_AMT],
		(CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
					THEN pd.[Description]
					ELSE
					Case when T.Reins_benefit_Category = 'IP' and T.Transaction_type != 'WOP' then 'Monthly Benefit'
					When T.Reins_benefit_Category = 'IP' and T.Transaction_type = 'WOP' then 'Waiver of Premium'
					when T.Reins_benefit_Category = 'LS' then 'Sum Insured'
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Non-Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  then T.Transaction_type
					Else 'Unknown'	END END) AS [PAY_DESC],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		(case when L.Benefit_Type = 'Income Protection' then 'IP'
		when L.Benefit_Type = 'Business Expenses' then 'BE'
		else L.Benefit_Type
		end  ) as [BENEFIT_TYPE_DESC],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [ACC_BENEFIT_PERIOD],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [SICK_BENEFIT_PERIOD],
		L.Waiting_Period as [WAIT_PERIOD],
		L.Incurred_Date as [INCURRED_DATE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		I.OCUPTN_CLASS_CODE as  [OCUPTN_CLASS_CODE],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		'' as [OFFSET_IND],
		L.Escalation_Ind as [ESC_IND],
		(Case when L.Ind_Value = 'Indemnity' then 'Y' 
		when L.Ind_Value = 'Agreed' then 'N' end ) as [INDMNTY_AGRD_VALUE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		T.Transaction_Process_Date as [PAY_RELEASE_DATE],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'IDS' as [Source_Type],
		'IP' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	join ConvIdentification C
	on L.EDW_Contract_Id = C.On_Contract_id
		and L.EDW_Product_Code = C.On_Product_Code
		and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = C.On_Census_Date
		and I.CONTRACT_RISK_KEY = C.On_Contract_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	join Reins_Claim_Expense_Trnx T
	on L.Claim_Source_Id = T.Claim_Source_Id
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = T.Ref_Payment_Description_Id
	where C.IDS_Census_Date = @ProcessingMonthYear
		and I.QS_Treaty_id = -3
		and I.SS_Treaty_id <> -4
		and T.Progress_to_Recovery = 'Y'
		and C.Valid_Conversion_Indicator = 'YES'
		and T.Reins_Benefit_Category = 'IP'


		 Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

Commit TRAN Tran2;


BEGIN TRAN Tran3;

		-- Insert CMS records taken from Reins_Listing and mapped in the required way for the month

	INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAID_FROM_DATE]
           ,[PAID_TO_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[OFFSET_IND]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
	SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		T.Pay_Date_From [PAID_FROM_DATE],
		T.Pay_Date_To [PAID_TO_DATE],
		(CASE WHEN L.Reins_Benefit_Type = 'IP' AND T.Source_trnx_Id not like 'AB%' then T.Transaction_Amount ELSE 0 END) AS [PAY_AMT],
		(CASE WHEN L.Reins_Benefit_Type = 'IP' AND T.Source_trnx_Id not like 'AB%' then T.[Layer_1_Reins_Claim_Amount] ELSE 0 END) as [REINS_RECOVERY_AMT],
		(CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
					THEN pd.[Description]
					ELSE
					Case when T.Reins_benefit_Category = 'IP' and T.Transaction_type != 'WOP' then 'Monthly Benefit'
					When T.Reins_benefit_Category = 'IP' and T.Transaction_type = 'WOP' then 'Waiver of Premium'
					when T.Reins_benefit_Category = 'LS' then 'Sum Insured'
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Non-Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  then T.Transaction_type
					Else 'Unknown'	END END) AS [PAY_DESC],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		(case when L.Benefit_Type = 'Income Protection' then 'IP'
		when L.Benefit_Type = 'Business Expenses' then 'BE'
		else L.Benefit_Type
		end  ) as [BENEFIT_TYPE_DESC],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [ACC_BENEFIT_PERIOD],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [SICK_BENEFIT_PERIOD],
		L.Waiting_Period as [WAIT_PERIOD],
		L.Incurred_Date as [INCURRED_DATE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		I.OCUPTN_CLASS_CODE as  [OCUPTN_CLASS_CODE],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		'' as [OFFSET_IND],
		L.Escalation_Ind as [ESC_IND],
		(Case when L.Ind_Value = 'Indemnity' then 'Y' 
		when L.Ind_Value = 'Agreed' then 'N' end ) as [INDMNTY_AGRD_VALUE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		T.Transaction_Process_Date as [PAY_RELEASE_DATE],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'CMS' as [Source_Type],
		'IP' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	From Reins_Claim_Expense_Trnx T
	Join Reins_Claim_Listing L
	on L.Claim_Source_Id = T.Claim_Source_Id
	and L.Layer_1_Treaty_Id = T.Layer_1_Treaty_Id
	--join ConvIdentification C
	--on L.EDW_Contract_Id = C.On_Contract_id
	--	and L.EDW_Product_Code = C.On_Product_Code
	--	and L.EDW_Product_Option_Code = C.On_Product_Option_Code
	--	and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE =DATEADD(MONTH, DATEDIFF(MONTH, -1, L.Incurred_Date)-1, -1)
		and I.CONTRACT_RISK_KEY = L.EDW_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = T.Ref_Payment_Description_Id
	where T.Month_Effective_Date = @ProcessingMonthYear
		and T.Progress_to_Recovery = 'Y'
		and T.Reins_Benefit_Category = 'IP'
		and L.Claim_Source = 'CMS'


		 Set @InsertRowCount = @@ROWCOUNT + @InsertRowCount

Commit TRAN Tran3;


 
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0 
	ROLLBack Transaction;

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_MR_IP_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 22/06/2021
-- Description:	Proc for Loading temporary work table with Munich Re Listing for Claims IP and updating the same with conversion data from Claims Listing and Expense details for the month.
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Create date: 29/09/2021
-- Description:	updating the Munich Re records with CMS data from Claims Listing and Expense details for the month.
-- =============================================

CREATE PROCEDURE [dbo].[usp_Load_MR_IP_Claim_Listing]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here
	Truncate Table [M_WEBXL_AMP_IP_Claims_Listing_Temp]

BEGIN TRAN Tran1;

	-- Insert the Munich Re Listing records for the month into the work table

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[SEX]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[CRNT_SUM_INSURED_AMT]
           ,[CRNT_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[SEX]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[CRNT_SUM_INSURED_AMT]
      ,[CRNT_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
	  ,'MR' as [Source_Type]
	  ,'IP' as Reins_Benefit_Type
      ,getdate() as [Created_Date_Time]
      ,SYSTEM_USER as [Created_By]
      ,NULL as [Updated_Date]
      ,NULL as [Updated_By]
  FROM [stg].[Stg_M_WEBXL_AMP_IP_Claims_Listing]
  where Month_Effective_Date = @ProcessingMonthYear


 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		-- Insert Conversions records taken from Reins_Listing and mapped in the required way for the month

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[SEX]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[CRNT_SUM_INSURED_AMT]
           ,[CRNT_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],		
		L.Sex as  [SEX],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		(case when L.Benefit_Type = 'Income Protection' then 'IP'
		when L.Benefit_Type = 'Business Expenses' then 'BE'
		else L.Benefit_Type
		end  ) as [BENEFIT_TYPE_DESC],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [ACC_BENEFIT_PERIOD],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [SICK_BENEFIT_PERIOD],
		L.Waiting_Period as [WAIT_PERIOD],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		L.Sum_Insured_on_Reporting_Date as [CRNT_SUM_INSURED_AMT],
		L.Layer_1_Curr_Reins_Exposure as [CRNT_SUM_REINS_AMT],
		L.Incurred_Date as [INCURRED_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		L.Escalation_Ind as [ESC_IND],
		(Case when L.Ind_Value = 'Indemnity' then 'Y' 
		when L.Ind_Value = 'Agreed' then 'N' end ) as [INDMNTY_AGRD_VALUE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'IDS' as [Source_Type],
		'IP' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	join ConvIdentification C
	on L.EDW_Contract_Id = C.On_Contract_id
		and L.EDW_Product_Code = C.On_Product_Code
		and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = C.On_Census_Date
		and I.CONTRACT_RISK_KEY = C.On_Contract_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key	
	where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		and I.QS_Treaty_id = -3
		and I.SS_Treaty_id <> -4
		and C.Valid_Conversion_Indicator = 'YES'
		and L.Reins_Benefit_Type = 'IP'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran2;

 BEGIN TRAN Tran3;

		-- Insert CMS records taken from Reins_Listing and mapped in the required way for the month

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[SEX]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[CRNT_SUM_INSURED_AMT]
           ,[CRNT_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],		
		L.Sex as  [SEX],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		(case when L.Benefit_Type = 'Income Protection' then 'IP'
		when L.Benefit_Type = 'Business Expenses' then 'BE'
		else L.Benefit_Type
		end  ) as [BENEFIT_TYPE_DESC],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [ACC_BENEFIT_PERIOD],
		(Case when L.Benefit_Period = 'Lifetime' then '99 Lifetime'
				when L.Benefit_Period like '%Month(s)' then convert(varchar,SUBSTRING(L.Benefit_Period,1,2)/12) + ' Year(s)' 
				else L.Benefit_period end) as [SICK_BENEFIT_PERIOD],
		L.Waiting_Period as [WAIT_PERIOD],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		L.Sum_Insured_on_Reporting_Date as [CRNT_SUM_INSURED_AMT],
		L.Layer_1_Curr_Reins_Exposure as [CRNT_SUM_REINS_AMT],
		L.Incurred_Date as [INCURRED_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		L.Escalation_Ind as [ESC_IND],
		(Case when L.Ind_Value = 'Indemnity' then 'Y' 
		when L.Ind_Value = 'Agreed' then 'N' end ) as [INDMNTY_AGRD_VALUE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'CMS' as [Source_Type],
		'IP' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	--join ConvIdentification C
	--on L.EDW_Contract_Id = C.On_Contract_id
	--	and L.EDW_Product_Code = C.On_Product_Code
	--	and L.EDW_Product_Option_Code = C.On_Product_Option_Code
	--	and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, L.Incurred_Date)-1, -1)
		and I.CONTRACT_RISK_KEY = L.EDW_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key	
	where convert(datetime,@ProcessingMonthYear) between L.Row_Eftv_Date  and L.Row_End_Date
		and L.Claim_Source = 'CMS'
		and L.Reins_Benefit_Type = 'IP'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran3;

 
 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBack Transaction;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_MR_LS_Claim_Bdx]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		RRNAA2
-- Create date: 17/06/2020
-- Description:	Proc for Loading temporary work table with Munich Re bdx for Claims LS and updating the same with conversion data from Claims Listing and Expense details for the month.
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Create date: 29/09/2021
-- Description:	updating the Munich Re records with CMS data from Claims Listing and Expense details for the month.
-- =============================================


CREATE PROCEDURE [dbo].[usp_Load_MR_LS_Claim_Bdx]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here
	Truncate Table [M_WEBXL_AMP_LS_Claims_Bdx_Temp]

BEGIN TRAN Tran1;

	-- Insert the Munich Re Bdx records for the month into the work table

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAY_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAY_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
	  ,'MR' as [Source_Type]
	  ,'LS' as Reins_Benefit_Type
      ,getdate() as [Created_Date_Time]
      ,SYSTEM_USER as [Created_By]
      ,NULL as [Updated_Date]
      ,NULL as [Updated_By]
  FROM [stg].[stg_M_WEBXL_AMP_LS_Claims_Bordereau]
  where Month_Effective_Date = @ProcessingMonthYear


 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		-- Insert Conversions records taken from Reins_Listing and mapped in the required way for the month

	INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_Temp]
            ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAY_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		T.Transaction_Process_Date as [PAY_DATE],
		(CASE WHEN L.Reins_Benefit_Type = 'LS' AND T.Source_trnx_Id not like 'AB%' then T.Transaction_Amount ELSE 0 END) AS [PAY_AMT],
		(CASE WHEN L.Reins_Benefit_Type = 'LS' AND T.Source_trnx_Id not like 'AB%' then T.[Layer_1_Reins_Claim_Amount] ELSE 0 END) as [REINS_RECOVERY_AMT],
		(CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
					THEN pd.[Description]
					ELSE
					Case when T.Reins_benefit_Category = 'IP' and T.Transaction_type != 'WOP' then 'Monthly Benefit'
					When T.Reins_benefit_Category = 'IP' and T.Transaction_type = 'WOP' then 'Waiver of Premium'
					when T.Reins_benefit_Category = 'LS' then 'Sum Insured'
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Non-Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  then T.Transaction_type
					Else 'Unknown'	END END) AS [PAY_DESC],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		(CASE WHEN L.Benefit_Type = 'DEATH'  THEN 'DEATH (TERMINAL ILLNESS)' ELSE COALESCE(L.BENEFIT_TYPE, L.CLAIM_TYPE) END ) as [BENEFIT_TYPE_DESC],
		L.Incurred_Date as [INCURRED_DATE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		I.OCUPTN_CLASS_CODE as  [OCUPTN_CLASS_CODE],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		T.Transaction_Process_Date as [PAY_RELEASE_DATE],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'IDS' as [Source_Type],
		'LS' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	join ConvIdentification C
	on L.EDW_Contract_Id = C.On_Contract_id
		and L.EDW_Product_Code = C.On_Product_Code
		and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = C.On_Census_Date
		and I.CONTRACT_RISK_KEY = C.On_Contract_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	join Reins_Claim_Expense_Trnx T
	on L.Claim_Source_Id = T.Claim_Source_Id
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = T.Ref_Payment_Description_Id
	where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		and I.QS_Treaty_id = -3
		and I.SS_Treaty_id <> -4
		and T.Progress_to_Recovery = 'Y'
		and C.Valid_Conversion_Indicator = 'YES'
		and T.Reins_Benefit_Category = 'LS'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran2;

BEGIN TRAN Tran3;

		-- Insert CMS records taken from Reins_Listing and mapped in the required way for the month

	INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_Temp]
            ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAY_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		T.Transaction_Process_Date as [PAY_DATE],
		(CASE WHEN L.Reins_Benefit_Type = 'LS' AND T.Source_trnx_Id not like 'AB%' then T.Transaction_Amount ELSE 0 END) AS [PAY_AMT],
		(CASE WHEN L.Reins_Benefit_Type = 'LS' AND T.Source_trnx_Id not like 'AB%' then T.[Layer_1_Reins_Claim_Amount] ELSE 0 END) as [REINS_RECOVERY_AMT],
		(CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
					THEN pd.[Description]
					ELSE
					Case when T.Reins_benefit_Category = 'IP' and T.Transaction_type != 'WOP' then 'Monthly Benefit'
					When T.Reins_benefit_Category = 'IP' and T.Transaction_type = 'WOP' then 'Waiver of Premium'
					when T.Reins_benefit_Category = 'LS' then 'Sum Insured'
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  and T.Transaction_type like 'Non-Medical' then 'Medical Expense' 
					When Source_trnx_Id like 'AB%'  then T.Transaction_type
					Else 'Unknown'	END END) AS [PAY_DESC],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		(CASE WHEN L.Benefit_Type = 'DEATH'  THEN 'DEATH (TERMINAL ILLNESS)' ELSE COALESCE(L.BENEFIT_TYPE, L.CLAIM_TYPE) END ) as [BENEFIT_TYPE_DESC],
		L.Incurred_Date as [INCURRED_DATE],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		I.OCUPTN_CLASS_CODE as  [OCUPTN_CLASS_CODE],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		T.Transaction_Process_Date as [PAY_RELEASE_DATE],
		60 as [REINS_PCNT],
		@ProcessingMonthYear as [Month_Effective_Date],
		'CMS' as [Source_Type],
		'LS' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Expense_Trnx T
	Join Reins_Claim_Listing L
	on L.Claim_Source_Id = T.Claim_Source_Id
	and L.Layer_1_Treaty_Id = T.Layer_1_Treaty_Id
	--join ConvIdentification C
	--on L.EDW_Contract_Id = C.On_Contract_id
	--	and L.EDW_Product_Code = C.On_Product_Code
	--	and L.EDW_Product_Option_Code = C.On_Product_Option_Code
	--	and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, L.Incurred_Date)-1, -1)
		and I.CONTRACT_RISK_KEY = L.EDW_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = T.Ref_Payment_Description_Id
	where T.Month_Effective_Date = @ProcessingMonthYear
		and T.Progress_to_Recovery = 'Y'
		and T.Reins_Benefit_Category = 'LS'
		and L.Claim_Source = 'CMS'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran3;

 
 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBack Transaction;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_MR_LS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: 17/06/2020
-- Description:	Proc for Loading temporary work table with Munich Re Listing for Claims LS and updating the same with conversion data from Claims Listing and Expense details for the month.
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Create date: 29/09/2021
-- Description:	updating the Munich Re records with CMS data from Claims Listing and Expense details for the month.
-- =============================================


CREATE PROCEDURE [dbo].[usp_Load_MR_LS_Claim_Listing]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here
	Truncate Table [M_WEBXL_AMP_LS_Claims_Listing_Temp]

BEGIN TRAN Tran1;

	-- Insert the Munich Re Bdx records for the month into the work table

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]  
	  ,'MR' as [Source_Type]
	  ,'LS' as Reins_Benefit_Type
      ,getdate() as [Created_Date_Time]
      ,SYSTEM_USER as [Created_By]
      ,NULL as [Updated_Date]
      ,NULL as [Updated_By]
  FROM [stg].[Stg_M_WEBXL_AMP_LS_Claims_Listing]
  where Month_Effective_Date = @ProcessingMonthYear


 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		-- Insert Conversions records taken from Reins_Listing and mapped in the required way for the month

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		(CASE WHEN L.Benefit_Type = 'DEATH'  THEN 'DEATH (TERMINAL ILLNESS)' ELSE COALESCE(L.BENEFIT_TYPE, L.CLAIM_TYPE) END ) as [BENEFIT_TYPE_DESC],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		L.Incurred_Date as [INCURRED_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		60 as [REINS_PCNT],
    	@ProcessingMonthYear as [Month_Effective_Date],
		'IDS' as [Source_Type],
		'LS' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	join ConvIdentification C
	on L.EDW_Contract_Id = C.On_Contract_id
		and L.EDW_Product_Code = C.On_Product_Code
		and L.EDW_Product_Option_Code = C.On_Product_Option_Code
		and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = C.On_Census_Date
		and I.CONTRACT_RISK_KEY = C.On_Contract_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	where C.IDS_Census_Date = convert(datetime,@ProcessingMonthYear)
		and I.QS_Treaty_id = -3
		and I.SS_Treaty_id <> -4
		and C.Valid_Conversion_Indicator = 'YES'
		and L.Reins_Benefit_Type = 'LS'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran2;

 BEGIN TRAN Tran3;

		-- Insert CMS records taken from Reins_Listing and mapped in the required way for the month

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Listing_Temp]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT 
		L.Claim_Number as [CLAIM_NUM],
		L.Policy_Number as [POLICY_NUM],
		L.EDW_Product_System_Code + '-' + L.Policy_Number + '-' + L.EDW_Product_Option_Code + '-NA-0' as [WEBXL_POLICY_NUM],
		L.Surname as [SURNAME],
		L.First_Name as [FIRST_NAME],
		(case when L.Sex = 'MALE' then 'M' 
		when L.Sex = 'FEMALE' then 'F' end )  [GENDER_CODE],
		L.Date_of_Birth [DOB],
		L.Policy_Commencement_Date [POLICY_COMM_DATE],
		L.EDW_Product_Code [PRODUCT_CODE],
		L.EDW_Product_Option_Code as [BENEFIT_CODE],
		(CASE WHEN L.Benefit_Type = 'DEATH'  THEN 'DEATH (TERMINAL ILLNESS)' ELSE COALESCE(L.BENEFIT_TYPE, L.CLAIM_TYPE) END ) as [BENEFIT_TYPE_DESC],
		L.Sum_Insured_on_Incurred_Date as [ORIG_SUM_INSURED_AMT],
		L.Layer_1_Init_Reins_Exposure as [ORIG_SUM_REINS_AMT],
		L.Incurred_Date as [INCURRED_DATE],
		L.Cause as [CLAIM_CAUSE],
		(SUBSTRING(L.occupation,CHARINDEX(':',L.Occupation)+ 1,len(L.occupation))) as [CLAIMANT_OCPTN],
		COALESCE(L.BENEFIT_STATUS, L.CLAIM_STATUS) as [CLAIM_STATUS],
		L.Claim_Notify_Date as [CLAIM_NTFCTN_DATE],
		COALESCE(L.BENEFIT_FINALISED_DATE , L.CLAIM_FINALISED_DATE) as [CLAIM_FINALISED_DATE],
		COALESCE(L.BENEFIT_FINALISED_REASON , L.CLAIM_FINALISED_REASON) as [CLAIM_FINALISED_REASON],
		COALESCE(L.BENEFIT_REOPEN_DATE ,L.CLAIM_REOPEN_DATE) as [CLAIM_REOPEN_DATE],
		COALESCE(L.BENEFIT_REOPEN_REASON ,L.CLAIM_REOPEN_REASON) as [CLAIM_REOPEN_REASON],
		L.Claim_Event_Type as [CLAIM_CTGRY_DESC],
		S.Scv_Customer_Id as [SCVID],
		60 as [REINS_PCNT],
    	@ProcessingMonthYear as [Month_Effective_Date],
		'CMS' as [Source_Type],
		'LS' as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL as [Updated_Date],
		NULL as [Updated_By]
	from Reins_Claim_Listing L
	--join ConvIdentification C
	--on L.EDW_Contract_Id = C.On_Contract_id
	--	and L.EDW_Product_Code = C.On_Product_Code
	--	and L.EDW_Product_Option_Code = C.On_Product_Option_Code
	--	and  C.IDS_Census_Date between L.Row_Eftv_Date  and L.Row_End_Date
	join INFORCE I
	on I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, L.Incurred_Date)-1, -1)
		and I.CONTRACT_RISK_KEY = L.EDW_Contract_Risk_Key
	Join [IDS_Core].[dbo].EDW_Party_Summary S
	on S.Party_Key = I.Party_Key
	where convert(datetime,@ProcessingMonthYear) between L.Row_Eftv_Date  and L.Row_End_Date
		and L.Claim_Source = 'CMS'
		and L.Reins_Benefit_Type = 'LS'


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran3;

 
 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBack Transaction;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_MR_Premium_Bdx_T1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		RRNAA2
-- Create date: 16/06/2020
-- Description:	Proc for Loading temporary work table with Munich Re bdx for Premium and updating the same with conversion data from Inforce for the month.
-- =============================================
CREATE PROCEDURE [dbo].[usp_Load_MR_Premium_Bdx_T1]
	-- Add the parameters for the stored procedure here
	@ProcessingMonthYear datetime,@ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0


BEGIN TRY

    -- Insert statements for procedure here
	truncate table [dbo].[P_BORDEREAU_AMPL_MR_T1_Temp]

BEGIN TRAN Tran1;

	-- Insert the Munich Re Bdx records for the month into the work table

INSERT INTO [dbo].[P_BORDEREAU_AMPL_MR_T1_Temp]
           ([CENSUS_DATE]
           ,[SCV_ID]
           ,[FIRST_NAME]
           ,[SECOND_NAME]
           ,[SURNAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[JOINT_LIFE_IND]
           ,[POST_CODE]
           ,[STATE_CODE]
           ,[POLICY_NUM]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[PRODUCT_NAME]
           ,[CLASS_OF_BUSN_CODE]
           ,[STATUS_CODE]
           ,[REPLACE_POLICY_NUM]
           ,[BENEFIT_CODE]
           ,[BENEFIT_DESC]
           ,[BENEFIT_STATUS_CODE]
           ,[BENEFIT_TYPE]
           ,[BENEFIT_COMM_DATE]
           ,[BENEFIT_EXPR_DATE]
           ,[SMOKER_STATUS_CODE]
           ,[OCUPTN_CLASS_CODE]
           ,[PREM_TYPE_CODE]
           ,[PREM_FREQ_CODE]
           ,[LINKED_BENEFIT_CODE]
           ,[DISABL_DEFTN_CODE]
           ,[CMSN_TYPE_CODE]
           ,[REINSTATE_IND]
           ,[PREM_TERM]
           ,[POLICY_FEE_AMT]
           ,[STAMP_DUTY_AMT]
           ,[ASSESS_CODE]
           ,[OCUPTN_LOADING_PCNT]
           ,[ASSESS_LOAD_PCNT]
           ,[POLICY_SIZE_DISC_PCNT]
           ,[PERM_DISC_PCNT]
           ,[TEMP_DISC_PCNT]
           ,[TEMP_DISC_EXP]
           ,[DIAL_DOWN_CMSN_PCNT]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[CLAIM_ESC_IND]
           ,[CPI_IND]
           ,[PREM_RATE_GUAR_IND]
           ,[DAY_1_OPTION_IND]
           ,[PREM_WAIVER_IND]
           ,[BUYBACK_IND]
           ,[AIDS_COVER_IND]
           ,[CHRONIC_OPTION_IND]
           ,[SUPER_CONTRB_OPTION_IND]
           ,[ON_HOLD_OPTION_IND]
           ,[INDMNTY_OPTION_IND]
           ,[TRAUMA_BUYBACK_IND]
           ,[TRAUMA_PARTIALS_IND]
           ,[TRAUMA_PARTIALS_PLUS_IND]
           ,[TRAUMA_REINST_IND]
           ,[TPD_OWN_OCC_IND]
           ,[TPD_PLUS_IND]
           ,[SPECIAL_RISK_CODE]
           ,[SPECIAL_RISK_RATE]
           ,[REINS_TYPE_CODE]
           ,[WEBXL_POLICY_NUM]
           ,[TRANCHE_EFTV_DATE]
           ,[TRANCHE_PROCESS_DATE]
           ,[TRANCHE_LAYER_NUM]
           ,[TRANCHE_REASON_CODE]
           ,[UWRITE_CATEGORY_CODE]
           ,[SUM_INSURED_AMT]
           ,[TOTAL_SUM_INSURED_AMT]
           ,[EXTRNL_SUM_INSURED_AMT]
           ,[TOTAL_EXTRNL_SUM_INSURED_AMT]
           ,[RETAINED_SUM_INSURED_AMT]
           ,[TOTAL_RETAINED_SUM_INSURED_AMT]
           ,[CUST_ANNUAL_PREM_AMT]
           ,[TOTAL_CUST_ANNUAL_PREM_AMT]
           ,[APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_APLCBLE_ANNUAL_PREM_AMT]
           ,[RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[MNTHLY_REINS_PREM_AMT]
           ,[TOTAL_MNTHLY_REINS_PREM_AMT]
           ,[REINS_CMSN_INF_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_INF_INITIAL_AMT]
           ,[REINS_CMSN_INF_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_INF_ONGOING_AMT]
           ,[REINS_CMSN_NB_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_NB_INITIAL_AMT]
           ,[REINS_CMSN_NB_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_NB_ONGOING_AMT]
           ,[PAS_CLIENT_ID]
           ,[PRODUCT_SYSTEM_CODE]
           ,[AT_RISK_AMT]
           ,[INCR_CLAIM_OPT_PCNT]
           ,[SERIES_START_DATE]
           ,[CAMPAIGN_CODES]
           ,[DIAL_DOWN_PREM_PCNT]
           ,[SUBJECT_TO_CAMPAIGN_PCNT]
           ,[ADJ_ENTRY_AGE]
           ,[SWITCH_AGE]
           ,[TPD_OVERLAP_DISC]
           ,[FULL_DAY_CVRG_CODE]
           ,[FREQ_LDNG_AMT]
           ,[SALES_CHANNEL]
           ,[TABLE_CODE]
           ,[COVER_TYPE]
           ,[SUM_INSRD_FREQ_CODE]
           ,[GRP_DISC_PCNT]
           ,[DD_DISC_PCNT]
           ,[LSIDP_DISC_PCNT]
           ,[LSIDA_DISC_AMT]
           ,[MPD_DISC_PCNT]
           ,[VCDP_DISC_PCNT]
           ,[LD_DISC_PCNT]
           ,[PERIOD_FROM_TO_DATE]
           ,[REINSURANCE_PCNT]
           ,[SOURCE_OF_BUSN_CODE]
           ,[MYSUPER_CODE]
           ,[RISK_MODULE_CODE]
           ,[Source_Type]
		   ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CENSUS_DATE]
      ,[SCV_ID]
      ,[FIRST_NAME]
      ,[SECOND_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[JOINT_LIFE_IND]
      ,[POST_CODE]
      ,[STATE_CODE]
      ,[POLICY_NUM]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[PRODUCT_NAME]
      ,[CLASS_OF_BUSN_CODE]
      ,[STATUS_CODE]
      ,[REPLACE_POLICY_NUM]
      ,[BENEFIT_CODE]
      ,[BENEFIT_DESC]
      ,[BENEFIT_STATUS_CODE]
      ,[BENEFIT_TYPE]
      ,[BENEFIT_COMM_DATE]
      ,[BENEFIT_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[PREM_TYPE_CODE]
      ,[PREM_FREQ_CODE]
      ,[LINKED_BENEFIT_CODE]
      ,[DISABL_DEFTN_CODE]
      ,[CMSN_TYPE_CODE]
      ,[REINSTATE_IND]
      ,[PREM_TERM]
      ,[POLICY_FEE_AMT]
      ,[STAMP_DUTY_AMT]
      ,[ASSESS_CODE]
      ,[OCUPTN_LOADING_PCNT]
      ,[ASSESS_LOAD_PCNT]
      ,[POLICY_SIZE_DISC_PCNT]
      ,[PERM_DISC_PCNT]
      ,[TEMP_DISC_PCNT]
      ,[TEMP_DISC_EXP]
      ,[DIAL_DOWN_CMSN_PCNT]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[CLAIM_ESC_IND]
      ,[CPI_IND]
      ,[PREM_RATE_GUAR_IND]
      ,[DAY_1_OPTION_IND]
      ,[PREM_WAIVER_IND]
      ,[BUYBACK_IND]
      ,[AIDS_COVER_IND]
      ,[CHRONIC_OPTION_IND]
      ,[SUPER_CONTRB_OPTION_IND]
      ,[ON_HOLD_OPTION_IND]
      ,[INDMNTY_OPTION_IND]
      ,[TRAUMA_BUYBACK_IND]
      ,[TRAUMA_PARTIALS_IND]
      ,[TRAUMA_PARTIALS_PLUS_IND]
      ,[TRAUMA_REINST_IND]
      ,[TPD_OWN_OCC_IND]
      ,[TPD_PLUS_IND]
      ,[SPECIAL_RISK_CODE]
      ,[SPECIAL_RISK_RATE]
      ,[REINS_TYPE_CODE]
      ,[WEBXL_POLICY_NUM]
      ,[TRANCHE_EFTV_DATE]
      ,[TRANCHE_PROCESS_DATE]
      ,[TRANCHE_LAYER_NUM]
      ,[TRANCHE_REASON_CODE]
      ,[UWRITE_CATEGORY_CODE]
      ,[SUM_INSURED_AMT]
      ,[TOTAL_SUM_INSURED_AMT]
      ,[EXTRNL_SUM_INSURED_AMT]
      ,[TOTAL_EXTRNL_SUM_INSURED_AMT]
      ,[RETAINED_SUM_INSURED_AMT]
      ,[TOTAL_RETAINED_SUM_INSURED_AMT]
      ,[CUST_ANNUAL_PREM_AMT]
      ,[TOTAL_CUST_ANNUAL_PREM_AMT]
      ,[APLCBLE_ANNUAL_PREM_AMT]
      ,[TOTAL_APLCBLE_ANNUAL_PREM_AMT]
      ,[RETAINED_APLCBLE_ANNUAL_PREM_AMT]
      ,[TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT]
      ,[MNTHLY_REINS_PREM_AMT]
      ,[TOTAL_MNTHLY_REINS_PREM_AMT]
      ,[REINS_CMSN_INF_INITIAL_AMT]
      ,[TOTAL_REINS_CMSN_INF_INITIAL_AMT]
      ,[REINS_CMSN_INF_ONGOING_AMT]
      ,[TOTAL_REINS_CMSN_INF_ONGOING_AMT]
      ,[REINS_CMSN_NB_INITIAL_AMT]
      ,[TOTAL_REINS_CMSN_NB_INITIAL_AMT]
      ,[REINS_CMSN_NB_ONGOING_AMT]
      ,[TOTAL_REINS_CMSN_NB_ONGOING_AMT]
      ,[PAS_CLIENT_ID]
      ,[PRODUCT_SYSTEM_CODE]
      ,[AT_RISK_AMT]
      ,[INCR_CLAIM_OPT_PCNT]
      ,[SERIES_START_DATE]
      ,[CAMPAIGN_CODES]
      ,[DIAL_DOWN_PREM_PCNT]
      ,[SUBJECT_TO_CAMPAIGN_PCNT]
      ,[ADJ_ENTRY_AGE]
      ,[SWITCH_AGE]
      ,[TPD_OVERLAP_DISC]
      ,[FULL_DAY_CVRG_CODE]
      ,[FREQ_LDNG_AMT]
      ,[SALES_CHANNEL]
      ,[TABLE_CODE]
      ,[COVER_TYPE]
      ,[SUM_INSRD_FREQ_CODE]
      ,[GRP_DISC_PCNT]
      ,[DD_DISC_PCNT]
      ,[LSIDP_DISC_PCNT]
      ,[LSIDA_DISC_AMT]
      ,[MPD_DISC_PCNT]
      ,[VCDP_DISC_PCNT]
      ,[LD_DISC_PCNT]
      ,[PERIOD_FROM_TO_DATE]
      ,[REINSURANCE_PCNT]
      ,[SOURCE_OF_BUSN_CODE]
      ,[MYSUPER_CODE]
      ,[RISK_MODULE_CODE]
	  ,'MR' as [Source_Type]
	  ,NULL as Reins_Benefit_Type
      ,getdate() as [Created_Date_Time]
      ,SYSTEM_USER as [Created_By]
      ,NULL as [Updated_Date]
      ,NULL as [Updated_By]
  FROM [stg].[Stg_P_BORDEREAU_AMPL_MR_T1]
  where CENSUS_DATE = @ProcessingMonthYear



 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


 COMMIT TRAN Tran1;

 BEGIN TRAN Tran2;

		-- Insert Conversions records taken from Inforce and mapped in the required way for the month
INSERT INTO [dbo].[P_BORDEREAU_AMPL_MR_T1_Temp]
           ([CENSUS_DATE]
           ,[SCV_ID]
           ,[FIRST_NAME]
           ,[SECOND_NAME]
           ,[SURNAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[JOINT_LIFE_IND]
           ,[POST_CODE]
           ,[STATE_CODE]
           ,[POLICY_NUM]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[PRODUCT_NAME]
           ,[CLASS_OF_BUSN_CODE]
           ,[STATUS_CODE]
           ,[REPLACE_POLICY_NUM]
           ,[BENEFIT_CODE]
           ,[BENEFIT_DESC]
           ,[BENEFIT_STATUS_CODE]
           ,[BENEFIT_TYPE]
           ,[BENEFIT_COMM_DATE]
           ,[BENEFIT_EXPR_DATE]
           ,[SMOKER_STATUS_CODE]
           ,[OCUPTN_CLASS_CODE]
           ,[PREM_TYPE_CODE]
           ,[PREM_FREQ_CODE]
           ,[LINKED_BENEFIT_CODE]
           ,[DISABL_DEFTN_CODE]
           ,[CMSN_TYPE_CODE]
           ,[REINSTATE_IND]
           ,[PREM_TERM]
           ,[POLICY_FEE_AMT]
           ,[STAMP_DUTY_AMT]
           ,[ASSESS_CODE]
           ,[OCUPTN_LOADING_PCNT]
           ,[ASSESS_LOAD_PCNT]
           ,[POLICY_SIZE_DISC_PCNT]
           ,[PERM_DISC_PCNT]
           ,[TEMP_DISC_PCNT]
           ,[TEMP_DISC_EXP]
           ,[DIAL_DOWN_CMSN_PCNT]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[CLAIM_ESC_IND]
           ,[CPI_IND]
           ,[PREM_RATE_GUAR_IND]
           ,[DAY_1_OPTION_IND]
           ,[PREM_WAIVER_IND]
           ,[BUYBACK_IND]
           ,[AIDS_COVER_IND]
           ,[CHRONIC_OPTION_IND]
           ,[SUPER_CONTRB_OPTION_IND]
           ,[ON_HOLD_OPTION_IND]
           ,[INDMNTY_OPTION_IND]
           ,[TRAUMA_BUYBACK_IND]
           ,[TRAUMA_PARTIALS_IND]
           ,[TRAUMA_PARTIALS_PLUS_IND]
           ,[TRAUMA_REINST_IND]
           ,[TPD_OWN_OCC_IND]
           ,[TPD_PLUS_IND]
           ,[SPECIAL_RISK_CODE]
           ,[SPECIAL_RISK_RATE]
           ,[REINS_TYPE_CODE]
           ,[WEBXL_POLICY_NUM]
           ,[TRANCHE_EFTV_DATE]
           ,[TRANCHE_PROCESS_DATE]
           ,[TRANCHE_LAYER_NUM]
           ,[TRANCHE_REASON_CODE]
           ,[UWRITE_CATEGORY_CODE]
           ,[SUM_INSURED_AMT]
           ,[TOTAL_SUM_INSURED_AMT]
           ,[EXTRNL_SUM_INSURED_AMT]
           ,[TOTAL_EXTRNL_SUM_INSURED_AMT]
           ,[RETAINED_SUM_INSURED_AMT]
           ,[TOTAL_RETAINED_SUM_INSURED_AMT]
           ,[CUST_ANNUAL_PREM_AMT]
           ,[TOTAL_CUST_ANNUAL_PREM_AMT]
           ,[APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_APLCBLE_ANNUAL_PREM_AMT]
           ,[RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[MNTHLY_REINS_PREM_AMT]
           ,[TOTAL_MNTHLY_REINS_PREM_AMT]
           ,[REINS_CMSN_INF_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_INF_INITIAL_AMT]
           ,[REINS_CMSN_INF_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_INF_ONGOING_AMT]
           ,[REINS_CMSN_NB_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_NB_INITIAL_AMT]
           ,[REINS_CMSN_NB_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_NB_ONGOING_AMT]
           ,[PAS_CLIENT_ID]
           ,[PRODUCT_SYSTEM_CODE]
           ,[AT_RISK_AMT]
           ,[INCR_CLAIM_OPT_PCNT]
           ,[SERIES_START_DATE]
           ,[CAMPAIGN_CODES]
           ,[DIAL_DOWN_PREM_PCNT]
           ,[SUBJECT_TO_CAMPAIGN_PCNT]
           ,[ADJ_ENTRY_AGE]
           ,[SWITCH_AGE]
           ,[TPD_OVERLAP_DISC]
           ,[FULL_DAY_CVRG_CODE]
           ,[FREQ_LDNG_AMT]
           ,[SALES_CHANNEL]
           ,[TABLE_CODE]
           ,[COVER_TYPE]
           ,[SUM_INSRD_FREQ_CODE]
           ,[GRP_DISC_PCNT]
           ,[DD_DISC_PCNT]
           ,[LSIDP_DISC_PCNT]
           ,[LSIDA_DISC_AMT]
           ,[MPD_DISC_PCNT]
           ,[VCDP_DISC_PCNT]
           ,[LD_DISC_PCNT]
           ,[PERIOD_FROM_TO_DATE]
           ,[REINSURANCE_PCNT]
           ,[SOURCE_OF_BUSN_CODE]
           ,[MYSUPER_CODE]
           ,[RISK_MODULE_CODE]
           ,[Source_Type]
		   ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
		select 
		I.census_date as Census_Date,
		S.Scv_Customer_Id [SCV_ID],
		I.FIRST_NAME as [FIRST_NAME],
		I.[MIDDLE_NAME] as [SECOND_NAME],
		I.SURNAME as  [SURNAME],
		I.GENDER_CODE as [GENDER_CODE],
		I.DOB as [DOB],
		 'N' as [JOINT_LIFE_IND],
		I.POST_CODE as [POST_CODE],
		I.SDUTY_STATE_CODE as [STATE_CODE],
		I.CONTRACT_ID as [POLICY_NUM],
		I.CONTRACT_START_DATE as [POLICY_COMM_DATE],
		I.PRODUCT_CODE as [PRODUCT_CODE],
		P.Product_Desc as [PRODUCT_NAME],
		I.CLASS_OF_BUSN_CODE as [CLASS_OF_BUSN_CODE],
		'A' as [STATUS_CODE],
		'' as [REPLACE_POLICY_NUM],
		I.PRODUCT_OPTION_CODE as [BENEFIT_CODE],
		P.Product_Option_Desc as [BENEFIT_DESC],
		'A' as [BENEFIT_STATUS_CODE],
		(Case When I.PRODUCT_OPT_GROUP_DESC = 'BS' Then 'Business Safeguard Benefit'
		When I.PRODUCT_OPT_GROUP_DESC = 'DTH' Then 'Death'
		When I.PRODUCT_OPT_GROUP_DESC = 'DTH/TRAUMA' Then 'Death/Trauma'
		When I.PRODUCT_OPT_GROUP_DESC = 'DTH/TPD' Then 'Death/TPD'
		When I.PRODUCT_OPT_GROUP_DESC = 'TRAUMA' Then 'Trauma'
		When I.PRODUCT_OPT_GROUP_DESC = 'WP' Then 'Waiver Benefit'
		When I.PRODUCT_OPT_GROUP_DESC = 'WB' Then 'Waiver Benefit'
		Else I.PRODUCT_OPT_GROUP_DESC end) as [BENEFIT_TYPE],
		I.RISK_START_DATE as [BENEFIT_COMM_DATE],
		I.RISK_EXPR_DATE as [BENEFIT_EXPR_DATE],
		I.SMOKER_STATUS_CODE as [SMOKER_STATUS_CODE],
		I.OCUPTN_CLASS_CODE as [OCUPTN_CLASS_CODE],
		I.STEP_LVL_PREM_CODE as [PREM_TYPE_CODE],
		( case when I.PREM_FREQ = 1 then 'YEAR'
		 when I.PREM_FREQ = 2 then 'HALF'
		 when I.PREM_FREQ = 4 then 'QUAR'
		 when I.PREM_FREQ = 12 then 'MNTH'
		 when I.PREM_FREQ = 28 then 'FTNLY'
		 when I.PREM_FREQ = 52 then 'WKL' end ) as [PREM_FREQ_CODE],
		 I.LINKED_BENEFIT_CODE as [LINKED_BENEFIT_CODE],
		 NULL [DISABL_DEFTN_CODE],
		 I.RISK_CMSN_TYPE_CODE as [CMSN_TYPE_CODE],
		 'N' as [REINSTATE_IND],
		convert(varchar,convert(decimal(18,2),(DATEDIFF(day,I.RISK_START_DATE,I.RISK_EXPR_DATE)/365.25))) as [PREM_TERM],
		I.ANNUAL_POL_FEE as [POLICY_FEE_AMT],
		I.EXPLICIT_SDUTY_AMT as [STAMP_DUTY_AMT],
		I.ASSESS_CODE as [ASSESS_CODE],
		NULL [OCUPTN_LOADING_PCNT],
		I.ASSESS_LOAD_PCNT as [ASSESS_LOAD_PCNT],
		NULL [POLICY_SIZE_DISC_PCNT],
		NULL [PERM_DISC_PCNT],
		NULL [TEMP_DISC_PCNT],
		NULL [TEMP_DISC_EXP],
		(100.00 - I.DIAL_DOWN_PREM_PCNT) as [DIAL_DOWN_CMSN_PCNT],
		(Case when I.INJURY_BENEFIT_PERIOD = 'AL' then '99 Lifetime'
		when I.INJURY_BENEFIT_PERIOD like 'A%' then 'Age ' + SUBSTRING(I.INJURY_BENEFIT_PERIOD,2,3)
		when I.INJURY_BENEFIT_PERIOD like 'M%' then convert(varchar,SUBSTRING(I.INJURY_BENEFIT_PERIOD,2,3)/12) + ' Year(s)' end) as  [ACC_BENEFIT_PERIOD],
		(Case when I.SICKNESS_BENEFIT_PERIOD = 'AL' then '99 Lifetime'
		when I.SICKNESS_BENEFIT_PERIOD like 'A%' then 'Age ' + SUBSTRING(I.SICKNESS_BENEFIT_PERIOD,2,3)
		when I.SICKNESS_BENEFIT_PERIOD like 'M%' then convert(varchar,SUBSTRING(I.SICKNESS_BENEFIT_PERIOD,2,3)/12) + ' Year(s)' end) as [SICK_BENEFIT_PERIOD],
		(case when I.RISK_WAIT_PERIOD like '%D' then convert(varchar,(cast(SUBSTRING(I.risk_Wait_Period,1,3) as int))) + ' Day(s)' 
		else I.RISK_WAIT_PERIOD
		end) as [WAIT_PERIOD],
		NULL [CLAIM_ESC_IND],
		I.BENEFIT_INDEXATION as [CPI_IND],
		NULL [PREM_RATE_GUAR_IND],
		NULL [DAY_1_OPTION_IND],
		NULL [PREM_WAIVER_IND],
		NULL [BUYBACK_IND],
		(CASE when I.AIDS_CVRG_CODE = 'YI'  then 'Y' 
		      when I.AIDS_CVRG_CODE = '' then 'N'
			  when I.AIDS_CVRG_CODE = 'Y' then I.AIDS_CVRG_CODE
			  else ISNULL(I.AIDS_CVRG_CODE,'N') end ) as [AIDS_COVER_IND],
		NULL [CHRONIC_OPTION_IND],
		NULL [SUPER_CONTRB_OPTION_IND],
		NULL [ON_HOLD_OPTION_IND],
		I.INDMNTY_OPTION_CODE as [INDMNTY_OPTION_IND],
		NULL [TRAUMA_BUYBACK_IND],
		NULL [TRAUMA_PARTIALS_IND],
		NULL [TRAUMA_PARTIALS_PLUS_IND],
		NULL [TRAUMA_REINST_IND],
		NULL [TPD_OWN_OCC_IND],
		NULL [TPD_PLUS_IND],
		I.SR_CODES as [SPECIAL_RISK_CODE],
		(case when I.SR_RATE > 0 then I.SR_RATE
		when I.SR_RATE =0 and I.SR_DISC_PC > 0 then I.SR_DISC_PC
		when I.SR_RATE = 0 and I.SR_DISC_PC = 0 then 0
		end ) as [SPECIAL_RISK_RATE],
		NULL [REINS_TYPE_CODE],
		(I.PRODUCT_SYSTEM_CODE + '-' + I.CONTRACT_ID + '-' + I.PRODUCT_OPTION_CODE + '-NA-0') as [WEBXL_POLICY_NUM],
		I.RISK_START_DATE [TRANCHE_EFTV_DATE],
		(case when cast(convert(varchar,year(I.CENSUS_DATE)) + '-' + convert(varchar, Month(I.RISK_START_DATE)) + '-' + convert(varchar, day(I.RISK_START_DATE)) as Date) < I.census_Date then 
		cast(convert(varchar,year(I.CENSUS_DATE)) + '-' + convert(varchar, Month(I.RISK_START_DATE)) + '-' + convert(varchar, day(I.RISK_START_DATE)) as Date)
		else
		cast(convert(varchar,year(I.CENSUS_DATE)-1) + '-' + convert(varchar, Month(I.RISK_START_DATE)) + '-' + convert(varchar, day(I.RISK_START_DATE)) as Date)
		end ) [TRANCHE_PROCESS_DATE],
		0 as [TRANCHE_LAYER_NUM],
		'NB' as [TRANCHE_REASON_CODE],
		(case when P.Reins_Benefit_Type = 'LS' then  'B-R'
		when P.Reins_Benefit_Type = 'IP' then 'C-R' end ) as [UWRITE_CATEGORY_CODE],
		I.SUM_INSURED_AMT as [SUM_INSURED_AMT],
		I.SUM_INSURED_AMT as [TOTAL_SUM_INSURED_AMT],
		0 as [EXTRNL_SUM_INSURED_AMT],
		0 as [TOTAL_EXTRNL_SUM_INSURED_AMT],
		I.SUM_INSURED_AMT as [RETAINED_SUM_INSURED_AMT],
		I.SUM_INSURED_AMT as [TOTAL_RETAINED_SUM_INSURED_AMT],
		I.ANNUAL_PREM [CUST_ANNUAL_PREM_AMT],
		I.ANNUAL_PREM [TOTAL_CUST_ANNUAL_PREM_AMT],
		(I.ANNUAL_PREM / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [APLCBLE_ANNUAL_PREM_AMT],
		(I.ANNUAL_PREM / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [TOTAL_APLCBLE_ANNUAL_PREM_AMT],
		(I.ANNUAL_PREM / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [RETAINED_APLCBLE_ANNUAL_PREM_AMT],
		(I.ANNUAL_PREM / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT],
		(I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [MNTHLY_REINS_PREM_AMT],
		(I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) as [TOTAL_MNTHLY_REINS_PREM_AMT],
		0 as [REINS_CMSN_INF_INITIAL_AMT],
		0 as [TOTAL_REINS_CMSN_INF_INITIAL_AMT],
		0 [REINS_CMSN_INF_ONGOING_AMT],
		0 [TOTAL_REINS_CMSN_INF_ONGOING_AMT],
		convert(money,((I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) * I.QS_PC_INCR * C.IC_PC)) as REINS_CMSN_NB_INITIAL_AMT,
		convert(money,((I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) * I.QS_PC_INCR * C.IC_PC)) as [TOTAL_REINS_CMSN_NB_INITIAL_AMT],
		convert(money,((I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) * C.OC_PC * C.ADJ_OC_PC)) as REINS_CMSN_NB_ONGOING_AMT,
		convert(money,((I.QS_AMT_REINP_CURR / (isnull(I.DIAL_DOWN_PREM_PCNT,100) /100)) * C.OC_PC * C.ADJ_OC_PC)) as [TOTAL_REINS_CMSN_NB_ONGOING_AMT],
		I.PAS_CLIENT_ID as [PAS_CLIENT_ID],
		I.PRODUCT_SYSTEM_CODE as  [PRODUCT_SYSTEM_CODE],
		I.AT_RISK_AMT as [AT_RISK_AMT],
		I.INCR_CLAIM_OPT_PCNT as [INCR_CLAIM_OPT_PCNT],
		I.SERIES_START_DATE as [SERIES_START_DATE],
		I.CAMPAIGN_CODES as [CAMPAIGN_CODES],
		NULL as [DIAL_DOWN_PREM_PCNT],
		I.SUBJECT_TO_CAMPAIGN_PCNT as [SUBJECT_TO_CAMPAIGN_PCNT],
		I.ADJ_ENTRY_AGE as [ADJ_ENTRY_AGE],
		I.SWITCH_AGE as [SWITCH_AGE],
		I.TPD_OVERLAP_DISC as [TPD_OVERLAP_DISC],
		I.FULL_DAY_CVRG_CODE as [FULL_DAY_CVRG_CODE],
		I.FREQ_LDNG_AMT as [FREQ_LDNG_AMT],
		I.SALESCHANNEL as [SALES_CHANNEL],
		I.TABLE_CODE as [TABLE_CODE],
		I.COVER_TYPE as [COVER_TYPE],
		I.SUM_INSRD_FREQ_CODE as [SUM_INSRD_FREQ_CODE],
		I.GRP_DISC_PCNT as [GRP_DISC_PCNT],
		I.DD_DISC_PCNT as [DD_DISC_PCNT],
		I.LSIDP_DISC_PCNT as [LSIDP_DISC_PCNT],
		I.LSIDA_DISC_AMT as [LSIDA_DISC_AMT],
		I.MPD_DISC_PCNT as [MPD_DISC_PCNT],
		I.VCDP_DISC_PCNT as [VCDP_DISC_PCNT],
		I.LD_DISC_PCNT as [LD_DISC_PCNT],
		(convert(varchar,format(DATEADD(MONTH, DATEDIFF(MONTH, 0, I.CENSUS_DATE), 0),'dd/MM/yyyy')) + '-' + convert(varchar,format(EOMONTH(I.CENSUS_DATE),'dd/MM/yyyy'))) as [PERIOD_FROM_TO_DATE],
		60 as [REINSURANCE_PCNT],
		'' as [SOURCE_OF_BUSN_CODE],
		'N' as [MYSUPER_CODE],
		'' as [RISK_MODULE_CODE],
		'IDS' as [Source_Type],
		P.Reins_Benefit_Type as Reins_Benefit_Type,
		getdate() as [Created_Date_Time],
		SYSTEM_USER as [Created_By],
		NULL [Updated_Date],
		NULL [Updated_By]
		from INFORCE I
		Join Reins_Treaty_Product P
		on I.PRODUCT_CODE = P.Product_Code
		and I.PRODUCT_OPTION_CODE = P.Product_Option_Code
		Join [IDS_Core].[dbo].EDW_Party_Summary S
		on S.Party_Key = I.Party_Key
		join COMMISSION_MunichRe C
		on P.Reins_Benefit_Type = C.Reins_Benefit_Type
		and I.CENSUS_DATE between C.Effective_Start_Date and C.Effective_End_Date
		where I.CENSUS_DATE = @ProcessingMonthYear
		and I.QS_Treaty_id = -3
		and I.SS_Treaty_id <> -4
		and P.Treaty_Id = 3
		and C.Current_Record_Indicator = 1
		and S.Current_Record_Indicator = 1


		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran2;

 BEGIN TRAN Tran3;

		-- Update conversion records with the commission details calculated

		 Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit TRAN Tran3;

 Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBack Transaction;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_ODB_Layer_0_Policies]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_ODB_Layer_0_Policies]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @BatchLogID Int = 0
	DECLARE @MasterBatchLogID Int = 0
	--
	BEGIN TRY;
	 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
	 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
	BEGIN TRAN T1;
delete from [dbo].[ODB_Layer_0_Policies]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--
SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
--
INSERT INTO  [dbo].[ODB_Layer_0_Policies]
(
	   [Month_Eftv_Date]
      ,[Census_Date]
      ,[Client_Id]
      ,[Policy_Number]
      ,[Contract_Id]
      ,[Product_System_Code]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,[Product_Code]
      ,[Product_Option_Code]
      ,[Product_Opt_Group_Desc]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
	  ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason]
)
SELECT convert(datetime,@ProcessingMonthYear) eftv_date
      ,[Census_Date]
      ,[Client_Id]
      ,[Policy_Number]
      ,NULL [Contract_Id]
      ,[Product_System_Code]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,NULL [Product_Code]
      ,[Product_Option_Code]
      ,NULL [Product_Opt_Group_Desc]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,ty.[Treaty_Id]
      ,ISNULL(stg.[Reinsurer_Code],ty.[Reinsurer_Code]) [Reinsurer_Code]
	  ,ty.[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,[Import_Log_ID]
	  ,[Import_File_Name]
	  ,@ProcessLogID [Process_Log_ID]
      ,NULL
	  ,NULL
  FROM [STG].[Stg_ODB_Layer_0_Policies] stg
  LEFT OUTER JOIN [dbo].[Reins_Layer_0_Treaty] ty
  ON  stg.Treaty_Id = ty.Treaty_Id
   where 1=1  
   AND (ty.[Treaty_Id] IS NOT NULL OR stg.[Reinsurer_Code] IS NOT NULL) 
   --AND stg.Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	  --                           from  [CTL].[ImportLog],
			--						   [CTL].[PackageLog],
			--						   [CTL].[BatchLog],
			--						   [CTL].[PackageConfig],
			--							[CTL].[FileConfig],
			--							[CTL].[FileLog]
			--				   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
			--					 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
			--					 and [CTL].[FileLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
			--					 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
			--					 and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   )
			--					 --
			--					 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	  --                           and [CTL].[ImportLog].[TableName] = 'Stg.Stg_ODB_Layer_0_Policies')
    --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	--
	exec [dbo].[usp_Remove_Garbage_Characters] @ProcessLogID,'dbo','ODB_Layer_0_Policies'
	COMMIT TRAN T1;
	--
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[ODB_Layer_0_Policies]
	--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
	--
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Load_OR]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS

-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" to drive and insert ?PREV_ Reins_Life_Identifier? 
--              values for lapsed records into Inforce_Temp (PAS) tables
-- ==============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	Load INCOM (OR) data from Staging Table
-- ================================================
-- Author:		AWJ
-- Create date: September 2017
-- Description:	Load INCOM data from Staging Tables
-- ================================================
--EXEC usp_Load_INCOM

CREATE PROCEDURE [dbo].[usp_Load_OR] @ProcessLogID int,@CENSUS_DATE datetime

	-- Add the parameters for the stored procedure here
AS
BEGIN 
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


--Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
--DECLARE @CENSUS date = (SELECT top 1 CENSUS_DATE From STAGE_INCOM_TERM)


	DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))
	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0		
			
		IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
			Select
				TREATY_START         = @TREATY_START
				,CENSUS_DATE         = @CENSUS_DATE
				,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
				,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
				,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
				,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
				,PRODUCT_SYSTEM_CODE = 'OR'
		Into #LOAD_PARAMS

			--Select * from #LOAD_PARAMS

			--Log the Function Call
			--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Start'

BEGIN TRY

Begin Tran INFORCE_TEMP_OR_Loading

			--Load the data from the INCOM_TERM Staging Table into INFORCE_TEMP_OR

			truncate TABLE INFORCE_TEMP_OR
			    -- Create a temp table to store records only for the in-scope Product Benefit Combinations

		
			--Update the SUM_INSURED_AMT for WP to be the contract annual premium
		
			CREATE TABLE #TEMP_Incom_term(
			CENSUS_DATE datetime2(7)
           ,CONTRACT_KEY numeric(10,0)
           ,PARTY_KEY numeric(10,0)
           ,CONTRACT_RISK_KEY numeric(10,0)
           ,CONTRACT_ID varchar(50)
           ,PAS_CLIENT_ID varchar(20)
           ,PRODUCT_SYSTEM_CODE varchar(3)
           ,FIRST_NAME varchar(120)
           ,MIDDLE_NAME varchar(120)
           ,SURNAME varchar(100)
           ,GENDER_CODE varchar(3)
           ,DOB datetime2(7)
           ,CONTRACT_START_DATE datetime2(7)
           ,PRODUCT_CODE varchar(20)
           ,PRODUCT_OPTION_CODE varchar(20)
           ,PRODUCT_OPT_GROUP_DESC varchar(50)
           ,RISK_START_DATE datetime2(7)
           ,RISK_EXPR_DATE datetime2(7)
           ,SMOKER_STATUS_CODE varchar(10)
           ,SDUTY_STATE_CODE varchar(3)
           ,POST_CODE varchar(30)
           ,OCUPTN_CLASS_CODE varchar(20)
           ,CLASS_OF_BUSN_CODE varchar(2)
           ,STEP_LVL_PREM_CODE varchar(2)
           ,PREM_FREQ numeric(5,2)
           ,LINKED_BENEFIT_CODE char(1)
           ,RISK_CMSN_TYPE_CODE varchar(10)
           ,SUM_INSURED_AMT float
           ,PREM_AMT numeric(20,3)
           ,EXPLICIT_SDUTY_AMT numeric(20,2)
           ,ANNUAL_PREM float
           ,ASSESS_CODE varchar(10)
           ,BENEFIT_INDEXATION char(1)
           ,SALESCHANNEL varchar(15)
           ,DTH_SUM_ASSD float
           ,TPD_SUM_ASSD float
           ,CC_SUM_ASSD float
           ,ANN_PHI_BEN float
           ,MP char(6)
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_BY varchar(50)

			)
			INSERT INTO #TEMP_Incom_term 
			select distinct [CENSUS_DATE]
      ,[CONTRACT_KEY]
      ,[PARTY_KEY]
      ,[CONTRACT_RISK_KEY]
      ,[CONTRACT_ID]
      ,[PAS_CLIENT_ID]
      ,s.[PRODUCT_SYSTEM_CODE]
      ,[FIRST_NAME]
      ,[MIDDLE_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[CONTRACT_START_DATE]
      ,s.[PRODUCT_CODE]
      ,s.[PRODUCT_OPTION_CODE]
      ,[PRODUCT_OPT_GROUP_DESC]
      ,[RISK_START_DATE]
      ,[RISK_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[SDUTY_STATE_CODE]
      ,[POST_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[CLASS_OF_BUSN_CODE]
      ,[STEP_LVL_PREM_CODE]
      ,[PREM_FREQ]
      ,[LINKED_BENEFIT_CODE]
      ,[RISK_CMSN_TYPE_CODE]
      ,[SUM_INSURED_AMT]
      ,[PREM_AMT]
      ,[EXPLICIT_SDUTY_AMT]
      ,[ANNUAL_PREM]
      ,[ASSESS_CODE]
      ,[BENEFIT_INDEXATION]
      ,[SALESCHANNEL]
      ,[DTH_SUM_ASSD]
      ,[TPD_SUM_ASSD]
      ,[CC_SUM_ASSD]
      ,[ANN_PHI_BEN]
      ,[MP]
      ,s.[Created_Date_Time]
      ,[Import_Log_ID]
      ,s.[Created_BY]
	 from [stg].[Stg_Incom_Term]s
	 join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
	 and  p.Treaty_Id  not in (-1, -999)
	-- and p.Product_Desc not like 'Investment Linked%'
			
			INSERT INTO [INFORCE_TEMP_OR] (
						[CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PAS_CLIENT_ID],[PRODUCT_SYSTEM_CODE]
					   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
					   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
					   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
					   ,[POST_CODE]
					   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[SERIES_START_DATE],[ANNUAL_POL_FEE],[PREM_AMT]
					   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[ANNUAL_PREM],[ASSESS_CODE]
					   ,[RISK_WAIT_PERIOD],[SICKNESS_BENEFIT_PERIOD],[INJURY_BENEFIT_PERIOD]
					   ,[INDMNTY_OPTION_CODE]
					   ,[AIDS_CVRG_CODE]
					   ,[BENEFIT_INDEXATION]
					   ,[SUM_INSRD_FREQ_CODE],[INCR_CLAIM_OPT_PCNT]
					   ,[SALESCHANNEL]
					   ,[LINKED_BENEFIT_CODE]
					   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
					   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
					   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]
					   )
			SELECT distinct
				C.CENSUS_DATE,C.CONTRACT_KEY,C.PARTY_KEY,C.CONTRACT_RISK_KEY,C.CONTRACT_ID,C.PAS_CLIENT_ID,C.PRODUCT_SYSTEM_CODE
				,C.FIRST_NAME,C.MIDDLE_NAME,C.SURNAME,C.GENDER_CODE,C.DOB
				,C.CONTRACT_START_DATE,C.PRODUCT_CODE,C.CLASS_OF_BUSN_CODE,C.PRODUCT_OPTION_CODE,C.PRODUCT_OPT_GROUP_DESC
				,coalesce(C.RISK_START_DATE,C.CONTRACT_START_DATE),C.RISK_EXPR_DATE,nullif(C.SMOKER_STATUS_CODE,'NA'),C.SDUTY_STATE_CODE
				,POST_CODE=Case when C.SDUTY_STATE_CODE <> 'OS' Then Left(C.POST_CODE,4) ELSE NULL End
				,C.OCUPTN_CLASS_CODE,nullif(C.STEP_LVL_PREM_CODE,'NA'),C.SUM_INSURED_AMT
				,AT_RISK_AMT = C.SUM_INSURED_AMT
				,SERIES_START_DATE = NULL,ANNUAL_POL_FEE=0,C.PREM_AMT
				,C.EXPLICIT_SDUTY_AMT,C.PREM_FREQ,C.ANNUAL_PREM,C.ASSESS_CODE
				,RISK_WAIT_PERIOD = NULL,SICKNESS_BENEFIT_PERIOD=NULL,INJURY_BENEFIT_PERIOD=Null
				,INDMNTY_OPTION_CODE=NULL
				,AIDS_CVRG_CODE=null
				,BENEFIT_INDEXATION = nullif(C.BENEFIT_INDEXATION, 'NA')
				,SUM_INSRD_FREQ_CODE = 'ADHOC'
				,INCR_CLAIM_OPT_PCNT = NULL
				,C.SALESCHANNEL
				,C.LINKED_BENEFIT_CODE
				,UNDERWRITING_CATEGORY='HERITAGE'
				,PROJECTION_GROUP = 'AMPL_LS_UW_???'
				,C.MP
				,C.DTH_SUM_ASSD,C.TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN
				,C.ANNUAL_PREM As PROPHET_PREM
				,getdate()
				,NULL
				,CURRENT_USER
				,NULL
				,@ProcessLogID

			FROM #TEMP_Incom_term As C 
			, #LOAD_PARAMS As P 
	
			SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
			Print 'Loaded INFORCE_TEMP_OR Table ' + convert(varchar(50), @InsertRowCount)	

			
			UPDATE T SET
				SUM_INSURED_AMT = UPD.AP
			FROM INFORCE_TEMP_OR As T JOIN (
				Select contract_key, sum(ANNUAL_PREM) AS AP FROM INFORCE_TEMP_OR group by contract_key) As UPD
				on T.contract_key = UPD.contract_key
			WHERE
				T.product_opt_group_desc = 'WP'

			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			 Print 'Updtae T Records' + convert(varchar(50),@UpdateRowCount)
			
			--Assign PCODES and ACODES
			--EXEC usp_Assign_PCODE 'TEMP'

			EXEC usp_Assign_PCODE 'OR','TEMP'

			--Linked Benefit Code
			Update T
			Set LINKED_BENEFIT_CODE = Case 
				when T.PRODUCT_OPT_GROUP_DESC = 'DTH/TPD' Then 'SA'
				When T.PRODUCT_OPT_GROUP_DESC = 'TPD' Then 'D'
				When T.PRODUCT_OPT_GROUP_DESC = 'DTH' Then 
					Case When coalesce(TPD.SUM_INSURED_AMT,0) > 0 Then 'T' Else 'SA' End
				End
			from INFORCE_TEMP_OR As T Left Join INFORCE_TEMP_OR As TPD on T.contract_key = TPD.contract_key and T.PRODUCT_OPT_GROUP_DESC = 'DTH' and TPD.PRODUCT_OPT_GROUP_DESC = 'TPD'
			
			
			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			 Print 'Updtae Linked Benefit Code' + convert(varchar(50),@UpdateRowCount)
			--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Update Linked Benefits', @RECS=@@ROWCOUNT


			--Update STEP_LVL_PREM_CODE on WP to the same as the death benefit
			UPDATE T SET
				STEP_LVL_PREM_CODE = UPD.STEP_LVL_PREM_CODE
			From INFORCE_TEMP_OR As T Join
				(Select 
					CONTRACT_KEY
					,STEP_LVL_PREM_CODE
					,ROW_NUMBER() Over (Partition by contract_key order by DTH_SUM_ASSD Desc, TPD_SUM_ASSD Desc, CC_SUM_ASSD Desc) as Ranking
					FROM INFORCE_TEMP_OR
				) As UPD
				On T.contract_key = UPD.contract_key
			Where UPD.Ranking = 1 and T.product_opt_group_desc = 'WP'

			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			 Print 'Updtae STEP_LVL_PREM_CODE' + convert(varchar(50),@UpdateRowCount)
			
			--Change any remaining to stepped
			UPDATE INFORCE_TEMP_OR SET STEP_LVL_PREM_CODE = 'S' where STEP_LVL_PREM_CODE is NULL

	Commit TRAN INFORCE_TEMP_OR_Loading
	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN INFORCE_TEMP_OR_Loading;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempOR

			--Update the Record of Lapses
			--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
			Delete from stg.Stg_Incom_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_OR)
			
			--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

			SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
			Print 'Delete Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

			--Delete from Lapse Staging any policies that are not present in the previous month
			Delete From stg.Stg_Incom_Off
			where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='OR')
			--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT

			SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
			Print 'Delete Excluded from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

			--Insert the Lapsed Policies into the Lapse Table 
			--truncate table LAPSED_TEMP
			delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='OR'
			insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
				Select
					I.CENSUS_DATE
					,I.CONTRACT_KEY
					,I.CONTRACT_RISK_KEY
					,I.PRODUCT_SYSTEM_CODE
					,MONTHS_WRITE_OFF = dbo.IntMinMax(coalesce(dbo.IntMin(DateDiff(Month,PREM_RENEW_TO_DATE,P.TOMORROW)-1,3),0),0,P.MONTHS_SINCE_TREATY)
					,I.Reins_Life_Identifier
				FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_OR As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN stg.Stg_Incom_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
					,#LOAD_PARAMS As P
				WHERE T.CONTRACT_RISK_KEY is NULL
					and I.CENSUS_DATE = P.LAST_MONTH
					and I.PRODUCT_SYSTEM_CODE = 'OR'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table ' + convert(varchar(50),@InsertRowCount)

			--Add lapsed benefits where the contract is not in the LAPSED list
			insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				,MONTHS_WRITE_OFF = 0
				,I.Reins_Life_Identifier
			From INFORCE As I, #LOAD_PARAMS as P
			where
				I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'OR' --Inforce records from Last Month
				and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_OR) --List of Current Records (not Lapsed)
				and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='OR') --List of Lapsed Records Already Included

			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list '  + convert(varchar(50),@InsertRowCount)

			--Update the AMOUNTS in LAPSE_TEMP
			Update L Set
				QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
					From INFORCE As I 
					Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
						and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
			From
				LAPSED_TEMP As L, #LOAD_PARAMS As P
			Where MONTHS_WRITE_OFF > 0
			and L.PRODUCT_SYSTEM_CODE='OR'

			SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Update the AMOUNTS in LAPSE_TEMP ' + convert(varchar(50),@UpdateRowCount)

			--Update the Lapsed table
			Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='OR'
			Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)
				Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,Current_User,Getdate()
					From LAPSED_TEMP As L, #LOAD_PARAMS As P
					where L.PRODUCT_SYSTEM_CODE='OR'
			--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Add to Lapse Listing', @RECS=@@ROWCOUNT

			SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Add to Lapse Listing ' + convert(varchar(50),@UpdateRowCount)

	Commit tran LapseUpdateToInforceTempOR

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN LapseUpdateToInforceTempOR;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


	BEGIN TRY

	BEGIN TRAN ConversionUpdateToInforceTempOR


			--Look for Conversions from the LAPSED Table and update the CONVERTED Table
			--Truncate Table CONVERTED_TEMP
			
			DECLARE @CONV_RECS int = 0
			if 1=(Select ALLOW_CONVERSIONS from PAS_INI As INI, #LOAD_PARAMS As P where INI.PRODUCT_SYSTEM_CODE = P.PRODUCT_SYSTEM_CODE)
				BEGIN
	
				EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'OR', @ProcessLogID
				--EXEC @CONV_RECS = usp_Find_Conversions
				--Print @CONV_RECS

				--Delete any existing values in the CONVERTED FILE
				Delete from C From CONVERTED As C, #LOAD_PARAMS As P WHERE C.PRODUCT_SYSTEM_CODE = 'OR' and C.CENSUS_DATE = P.CENSUS_DATE

				SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
				Print 'Delete any existing values in the CONVERTED FILE ' + convert(varchar(50),@DeleteRowCount)

				--Replace with the New Values
				Insert into CONVERTED(PRODUCT_SYSTEM_CODE,CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY
					,NEW_SUM_INSURED_AMT,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_SUM_INSURED_AMT,CONVERSION_TYPE,[Created_Date_Time],[Process_Log_ID],[Created_BY])
				Select
					'OR'
					,CENSUS_DATE
					,PARTY_KEY
					,PRODUCT_OPT_GROUP_DESC
					,NEW_CONTRACT_KEY
					,NEW_CONTRACT_RISK_KEY
					,NEW_SUM_INSURED_AMT
					,OFF_CENSUS_DATE
					,OFF_CONTRACT_KEY
					,OFF_CONTRACT_RISK_KEY
					,OFF_SUM_INSURED_AMT
					,CONVERSION_TYPE
					,getdate()
					,@ProcessLogID
					,CURRENT_USER
				FROM CONVERTED_TEMP
				WHERE PAS='OR'									--Adding the fiter for Specific Pas
				END
				SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
			--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Identify Conversions', @RECS=@CONV_RECS

	 Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)

	COMMIT TRAN ConversionUpdateToInforceTempOR

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	--ROLLBACK TRAN INFORCE_TEMP_U2_Loading;
	--ROLLBACK TRAN LapseUpdateToInforceTempU2;
	ROLLBACK TRAN ConversionUpdateToInforceTempOR;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;
	
END CATCH
				
				--Select Top 100 * FROM CONVERTED_TEMP
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS_DATE, @STEP='Identify Conversions', @RECS=@CONV_RECS
				--END

				------------------------------------------------------------------------------------------------------------
				----Calculate the Quota Share information
				------------------------------------------------------------------------------------------------------------
				--DECLARE @QS_RECS int = 0
				--EXEC @QS_RECS = usp_Calc_QS
				----Print @QS_RECS
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS, @STEP='QS Calculations', @RECS=@QS_RECS
				------------------------------------------------------------------------------------------------------------

				-------------------------------------------------------------------------------------------------------------
				----Calculate the Surplus Information
				-------------------------------------------------------------------------------------------------------------
				--DECLARE @SS_RECS int = 0
				--EXEC @SS_RECS = usp_Calc_SS
				----Print @SS_RECS
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS, @STEP='SS Calculations', @RECS=@SS_RECS
				--------------------------------------------------------------------------------------------------------------

				----Identify Reinstatements
				----Create #Table to contain the lapse and reinstatement information
				--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
				--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
				--Insert into #REIN
				--Select
				--	T.CONTRACT_RISK_KEY
				--	,T.CENSUS_DATE
				--	,L.LAPSE_DATE
				--	,L.QS_AMT_LAPSE_RECOVERED
				--FROM [INFORCE_TEMP_OR] As T JOIN LAPSED As L 
				--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
				--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
				--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
				--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

				----Update Both Lapse and Inforce Temp Tables
				--BEGIN TRANSACTION;
				--Update T Set
				--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
				--FROM INFORCE_TEMP_OR As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

				--Update L Set
				--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
				--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
				--FROM
				--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

				--COMMIT;
				--DECLARE @QS_REIN int = (Select count(*) From #REIN)
				----Print @QS_REIN
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS, @STEP='Process Reinstatements', @RECS=@QS_REIN

				----Update Lapses for Conversions (Similar to Reinstatements)
				--BEGIN TRANSACTION;
				--Update T SET
				--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
				--from CONVERTED As C JOIN INFORCE_TEMP_OR as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

				--Update L Set
				--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
				--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
				--from CONVERTED As C JOIN INFORCE_TEMP_OR as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
				--COMMIT;

				--DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
				----Print @QS_CONV
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS, @STEP='Process Conversions', @RECS=@QS_CONV

				----Update the INFORCE Table
				----DECLARE @CENSUS Date = '31-Dec-2016'

				--Delete from INFORCE where PRODUCT_SYSTEM_CODE='OR' and CENSUS_DATE=@CENSUS
				--Insert into INFORCE Select * FROM INFORCE_TEMP_OR
				--EXEC usp_LOG @STORED_PROC='usp_Load_INCOM', @CENSUS_DATE=@CENSUS, @STEP='Insert New Records', @RECS=@@ROWCOUNT 

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_Reins_Layer_0_Policies]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_Reins_Layer_0_Policies]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @MonthsIP Int = 12
	DECLARE @MonthsOthers Int = 3
	--
	BEGIN TRY;
	BEGIN TRAN T1;
delete from [dbo].[Reins_Layer_0_Policies]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--
SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT
--
;with w_layer_0
as
(
select CASE WHEN Reinsurer_Code = 'V' 
              AND product_opt_group_desc in ('IP','TSC','BOI')
			  THEN  'IP'
	   ELSE 'Others' END category,
       [Month_Eftv_Date]
      ,[Census_Date]
      ,[Client_Id]
      ,[Policy_Number]
      ,[Contract_Id]
      ,[Product_System_Code]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,[Product_Code]
      ,ISNULL(edw_product_option_code,product_option_code) [Product_Option_Code]
      ,[Product_Opt_Group_Desc]
      ,[Actrl_Corral_Group_Code]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
      ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason]
	   from [dbo].[ODB_Layer_0_Policies] a
where 1=1
and exclude_flag = 'N'
and Product_System_Code IN ('U2','DS','CP','OR')
),
w_min_max_census
as
(
select contract_key,contract_risk_key, ISNULL(edw_product_option_code,product_option_code) product_option_code, min(census_date) min_census_date,max(Census_date) max_Census_date
 from [dbo].[ODB_Layer_0_Policies]
 where 1=1
 and exclude_flag = 'N'
and Product_System_Code IN ('U2','DS','CP','OR')
group by contract_key,contract_risk_key,ISNULL(edw_product_option_code,product_option_code)
),
w_claim_listing
as
(
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				edw_product_option_code product_option_code,
				Incurred_Date
FROM dbo.able_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
UNION ALL
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				EDW_Product_Option_Code product_option_code,
				Date_of_Death Incurred_Date
FROM dbo.figtree_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
UNION ALL
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				EDW_Product_Option_Code product_option_code,
				DOD_Incident Incurred_Date
FROM dbo.wms_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
),
w_scenario_1
as
(
select  ls.edw_contract_key,
        ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date,
		max(ip.census_date) reins_census_date
 from	w_claim_listing ls
inner join w_min_max_census min_ip
		on ls.EDW_Contract_Key = min_ip.contract_key
		and ls.EDW_Contract_Risk_Key = min_ip.Contract_Risk_Key
		and ls.Product_Option_Code = min_ip.product_option_code
		and ls.Incurred_Date >= min_ip.min_census_date
inner join w_layer_0 ip
		on ls.EDW_Contract_Key = ip.contract_key
		and ls.EDW_Contract_Risk_Key = ip.Contract_Risk_Key
		and ls.Product_Option_Code = ip.product_option_code
		and ip.census_date between DATEADD(month,-CASE category WHEN 'IP' Then  @MonthsIP ELSE @MonthsOthers END,ls.Incurred_Date) and ls.Incurred_Date
where 1=1
group by 
ls.edw_contract_key,
ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date
),
w_scenario_2
as
(
select  ls.edw_contract_key,
ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date,
		min(ip.census_date) reins_census_date
 from	w_claim_listing ls
inner join w_min_max_census max_ip
		on ls.EDW_Contract_Key = max_ip.contract_key
		and ls.EDW_Contract_Risk_Key = max_ip.Contract_Risk_Key
		and ls.Product_Option_Code = max_ip.product_option_code
		and ls.Incurred_Date < max_ip.max_census_date
left outer join w_min_max_census min_ip
		on ls.EDW_Contract_Key = min_ip.contract_key
		and ls.EDW_Contract_Risk_Key = min_ip.Contract_Risk_Key
		and ls.Product_Option_Code = min_ip.product_option_code
		and ls.Incurred_Date >= min_ip.min_census_date
inner join w_layer_0 ip
		on ls.EDW_Contract_Key = ip.contract_key
		and ls.EDW_Contract_Risk_Key = ip.Contract_Risk_Key
		and ls.Product_Option_Code = ip.product_option_code
		and ip.census_date between  ls.Incurred_Date and DATEADD(month,CASE category WHEN 'IP' Then  @MonthsIP ELSE @MonthsOthers END,ls.Incurred_Date)
where 1=1
and min_ip.contract_key IS NULL
group by 
ls.edw_contract_key,
ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date
) ,
w_scenario_3
as
(
select  ls.edw_contract_key,
		ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date,
		max(ip.census_date) reins_census_date
 from	w_claim_listing ls
inner join w_min_max_census max_ip
		on ls.EDW_Contract_Key = max_ip.contract_key
		and ls.EDW_Contract_Risk_Key = max_ip.Contract_Risk_Key
		and ls.Product_Option_Code = max_ip.product_option_code
inner join w_min_max_census min_ip
		on ls.EDW_Contract_Key = min_ip.contract_key
		and ls.EDW_Contract_Risk_Key = min_ip.Contract_Risk_Key
		and ls.Product_Option_Code = min_ip.product_option_code
		and ls.Incurred_Date >= min_ip.min_census_date
left outer join w_scenario_1 scen_1
		on ls.EDW_Contract_Key = scen_1.EDW_contract_key
		and ls.EDW_Contract_Risk_Key = scen_1.EDW_Contract_Risk_Key
		and ls.Product_Option_Code = scen_1.product_option_code
		and ls.Incurred_Date = scen_1.Incurred_Date
inner join w_layer_0 ip
		on ls.EDW_Contract_Key = ip.contract_key
		and ls.EDW_Contract_Risk_Key = ip.Contract_Risk_Key
		and ls.Product_Option_Code = ip.product_option_code
		and ip.census_date between  ls.Incurred_Date and DATEADD(month,CASE category WHEN 'IP' Then  @MonthsIP ELSE @MonthsOthers END,ls.Incurred_Date)
where 1=1
and scen_1.EDW_contract_key IS NULL
group by 
ls.edw_contract_key,
ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date
) ,
w_final_list 
as
(
select * from w_scenario_1
union all
select * from w_scenario_2
union all
select * from w_scenario_3       

)
insert into [dbo].[Reins_Layer_0_Policies]
(      [Month_Eftv_Date]
      ,[Census_Date]
      ,[Incurred_Date]
      ,[Policy_Number]
      ,[Product_System_Code]
      ,[Contract_Id]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,[Product_Option_Code]
      ,[Product_Opt_Group_Desc]
	  ,[Actrl_Corral_Group_Code]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
	  ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Process_Log_ID])
select convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date]
      ,[Census_Date]
	  ,Incurred_Date
	  ,[Policy_Number]
      ,[Product_System_Code]
	  ,[Contract_Id]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,ISNULL(lp.edw_product_option_code,lp.product_option_code) [Product_Option_Code]
      ,[Product_Opt_Group_Desc]
	  ,[Actrl_Corral_Group_Code]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
	  ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]/100
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
	  ,GETDATE()
	  ,SYSTEM_USER
	  ,@ProcessLogID
from [dbo].[ODB_Layer_0_Policies] lp
 inner join w_final_list list
 on lp.contract_key = list.edw_contract_key
 and lp.contract_risk_key = list.edw_contract_risk_key
 and ISNULL(lp.edw_product_option_code,lp.product_option_code) = list.Product_Option_Code
 and lp.Census_Date = list.reins_census_date;
    --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	--
;with w_layer_0
as
(
select CASE WHEN [Actrl_Corral_Group_Code] IS NULL or [Actrl_Corral_Group_Code] = 'IP'
			  THEN  'IP'
	   ELSE 'Others' END category,
       [Month_Eftv_Date]
      ,[Census_Date]
      ,[Client_Id]
      ,[Policy_Number]
      ,[Contract_Id]
      ,[Product_System_Code]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,[Product_Code]
      ,ISNULL(edw_product_option_code,product_option_code) [Product_Option_Code]
      ,[Product_Opt_Group_Desc]
      ,[Actrl_Corral_Group_Code]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
      ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason]
	  from [dbo].[ODB_Layer_0_Policies] a
where 1=1
and exclude_flag = 'N'
and Product_System_Code IN ('FDA','LS')
),
w_claim_listing
as
(
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				EDW_Product_Option_Code product_option_code,
				Incurred_Date
FROM dbo.able_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
UNION ALL
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				EDW_Product_Option_Code product_option_code,
				Date_of_Death Incurred_Date
FROM dbo.figtree_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
UNION ALL
SELECT DISTINCT edw_contract_key,
                edw_contract_risk_key,
				EDW_Product_Option_Code product_option_code,
				DOD_Incident Incurred_Date
FROM dbo.wms_claim_listing
WHERE month_eftv_date = convert(datetime,@ProcessingMonthYear)
and are_details_inadequate = 'N'
),
w_final_list
as
(
select  ls.edw_contract_key,
        ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date,
		max(ip.census_date) reins_census_date
 from	w_claim_listing ls
inner join w_layer_0 ip
		on ls.EDW_Contract_Key = ip.contract_key
		and ls.EDW_Contract_Risk_Key = ip.Contract_Risk_Key
		and ls.Product_Option_Code = ip.product_option_code
		and ip.census_date <= ls.Incurred_Date
where 1=1
group by 
ls.edw_contract_key,
ls.edw_contract_risk_key,
        ls.product_option_code,
		ls.Incurred_Date
)
insert into [dbo].[Reins_Layer_0_Policies]
(      [Month_Eftv_Date]
      ,[Census_Date]
      ,[Incurred_Date]
      ,[Policy_Number]
      ,[Product_System_Code]
      ,[Contract_Id]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,[Product_Option_Code]
      ,[Product_Opt_Group_Desc]
	  ,[Actrl_Corral_Group_Code]
      ,[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
	  ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Process_Log_ID])
select convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date]
      ,[Census_Date]
	  ,Incurred_Date
	  ,[Policy_Number]
      ,[Product_System_Code]
	  ,[Contract_Id]
      ,[Contract_Key]
      ,[Contract_Risk_Key]
      ,ISNULL(lp.edw_product_option_code,lp.product_option_code) [Product_Option_Code]
      ,[Product_Opt_Group_Desc]
	  ,[Actrl_Corral_Group_Code]
      ,lp.[Tranche_Num]
      ,[Sum_Insured_Amt]
      ,[Treaty_Id]
      ,[Reinsurer_Code]
	  ,[Reinsurer_Name]
      ,[Reins_Start_Date]
      ,[Reins_Agrmnt_Type_Code]
      ,[Reins_Percent]/100
      ,[Reins_Census_Prem_Amt]
      ,[Reins_Sum_Insured_Amt]
	  ,GETDATE()
	  ,SYSTEM_USER
	  ,@ProcessLogID
from [dbo].[ODB_Layer_0_Policies] lp
 inner join w_final_list list
 on lp.contract_key = list.edw_contract_key
 and lp.contract_risk_key = list.edw_contract_risk_key
 and ISNULL(lp.edw_product_option_code,lp.product_option_code) = list.Product_Option_Code
 and lp.Census_Date = list.reins_census_date;
    --
 SET @InsertRowCount =@InsertRowCount + @@ROWCOUNT
 COMMIT TRAN T1;
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Load_SS_Party_Agg_Publish]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- =============================================
-- Author:		Nimesh Shah 
-- Create date: 15/01/2021
-- Description:	This proc Aggreagtes the data at Party and Cover level, updates the eligibility check from temp_party table, calculates the ss_pc and amounts
-- and then publishes into the Final table
-- Source Tables - SS_Party_Smry_Temp
-- Target Table - #Tmp_Party_Smry_Mth, SS_Party_Smry_Mth
-- Version - Initial Version (0.1)
-- =============================================


-- Version   Date				Modified By                      Description    
-- 0.2		 21-01-2021			Nimesh S						Applying changes to Fix RGU-1201, 1202,1203

CREATE PROCEDURE [dbo].[usp_Load_SS_Party_Agg_Publish] 
	-- Add the parameters for the stored procedure here
	@Census_Date Datetime,
	@ProcessLogID Int,
	@ForceLoad VARCHAR(1) = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 DECLARE @NumberOfRecs Int = 0


BEGIN TRY

    -- Insert statements for procedure here

	SET @NumberOfRecs = (Select count(*) from [dbo].[SS_Party_Smry_Mth] where Census_Date = @Census_Date)

	Print @NumberOfRecs

	if @NumberOfRecs > 0 and @ForceLoad = 0 
		Begin  

			Print ' Data exists in Surplus Summary Table for the Census Date ' + convert(varchar(50), @CENSUS_DATE) 
			RAISERROR ('Data exists in Surplus Summary Table for the Census Date ', 16,  1);
		End
  
	 
	if @NumberOfRecs > 0 and @ForceLoad = 1
		Begin
			Begin TRAN DeleteTran;

			DELETE from SS_Party_Smry_Mth where Census_Date = @Census_Date
			SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

			Commit TRAN DeleteTran;
  		
			Print 'Delete Records from Surplus Summary for the Census Date ' + convert(varchar(50), @DeleteRowCount)
		End
	
	  BEGIN TRAN Tran1;
		-- Insert into SS_Party_Smry_Mth based on Agrregation

		--Truncate table [SS_Party_Smry_Mth]

		 Create table #Tmp_Party_Smry_Mth 
		(Census_Date datetime,
		Reins_Life_Identifier int,
		Party_Key_Type varchar(3),
		Cover varchar (10),
		Agg_Sum_Insured_Amt money,
		Agg_QS_Residual money,
		SS_PC real,
		SS_Recalc_Ref_ID int,
		SS_Recalc_Flag varchar(1),
		Created_Date_Time datetime,
		Created_By varchar(30),
		Updated_Date_Time datetime,
		Updated_By varchar(30),
		ProcessLogId int
		)
		 
		 Insert into #Tmp_Party_Smry_Mth
		 (Census_Date,
		Reins_Life_Identifier,
		Party_Key_Type,
		Cover,
		Agg_Sum_Insured_Amt,
		Agg_QS_Residual,
		SS_PC,
		SS_Recalc_Ref_ID,
		SS_Recalc_Flag,
		Created_Date_Time,
		Created_By,
		Updated_Date_Time,
		Updated_By,
		ProcessLogId )

		 SELECT Census_Date,
		 Reins_Life_Identifier,
		 Party_Key_Type,
		 Cover,
		 (Case when Cover in ('IPA','IP1','IPN') THEN sum(ANN_PHI_BEN)
		 WHEN COVER = 'TPD' THEN SUM(TPD_SUM_ASSD)
		 WHEN COVER = 'CC' THEN SUM(CC_SUM_ASSD)
		 WHEN COVER = 'DTH' THEN  SUM(DTH_SUM_ASSD) END) AS Agg_Sum_Insured_Amt,
		 cast (NULL as money) as [Agg_QS_Residual],
		 cast(NULL as real) as SS_PC,
		 cast(NULL as int) As [SS_Recalc_Ref_ID],
		 cast(NULL as varchar(1)) As [SS_Recalc_Flag],
		 getdate() as Created_Date_Time,
		 SYSTEM_USER as Created_By,
		 NULL as Updated_Date_Time,
		 NULL as Updated_By,
		 @ProcessLogID as ProcessLogId
		 from SS_Party_Smry_Temp
		 Group by Census_Date,Reins_life_Identifier,Party_Key_Type,Cover 
		  

		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		COMMIT TRAN Tran1;

		Print 'Inserted Records in tmp Surplus Summary for the Census Date ' + convert(varchar(50), @InsertRowCount)



		-- Update Agg_QS_Residual column
		Begin Tran T2
			update #Tmp_Party_Smry_Mth 
			set Agg_QS_Residual = Agg_Sum_Insured_Amt * 0.4
			--where Census_Date = @Census_Date --(1005217 rows affected) --1 sec

			SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Commit Tran T2
		
		Print 'Updates Records in tmp Surplus Summary for Agg_QS_Residual ' + convert(varchar(50), @UpdateRowCount)

		-- Update the recalc eligibility in the summary temp table
		--Fix RGU-1202 - Changed the order of priority of the Order BY columns in the ROW_Number clause below

		Select *  into #UpdRecalc
		from
		(
		Select Census_date, Reins_Life_identifier, cover, party_key_type, tmp.[SS_Recalc_Ref_ID], tmp.ss_recalc_flag, ref.SS_Priority_Indicator,
		ROW_NUMBER() OVER (PARTITION BY  Census_date, Reins_Life_identifier, cover, party_key_type order by  tmp.ss_recalc_flag desc, ref.SS_Priority_Indicator asc) Rnk
		from SS_Party_Smry_Temp tmp 
		inner join SS_Recalc_Reference ref
		on tmp.[SS_Recalc_Ref_ID] = ref.[SS_Recalc_Ref_ID]
 
		) a
		where a.Rnk = 1 
		
		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		Print 'Inserted Records in tmp update recalc ' + convert(varchar(50), @@rowcount)

		Begin Tran T3
		Update smry 
		set [SS_Recalc_Ref_ID] = ref.[SS_Recalc_Ref_ID],
		SS_Recalc_Flag = ref.ss_recalc_flag,
		updated_by = system_user,
		Updated_Date_Time = getdate()
		from  #Tmp_Party_Smry_Mth smry inner join #UpdRecalc ref
		on smry.Census_Date = ref.Census_Date
		and smry.Reins_Life_Identifier = ref.Reins_Life_Identifier
		and smry.Cover = ref.Cover
		and smry.Party_Key_Type = ref.Party_Key_Type

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
		Commit Tran T3
		
		
		Print 'Updates Records in tmp Surplus Summary for Recalc eligilibility ' + convert(varchar(50), @@ROWCOUNT)


	-- Calculate SS_PC
		-- Get Retention Limits for Covers
		Begin Tran T4
		SELECT
			DTH_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'DTH' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
			,TPD_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'TPD' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
			,CC_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'CC'  and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
			,IP1_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IP1' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
			,IPN_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPN' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
			,IPA_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPA' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
		INTO #SS_PARAMS

		-- Calculation for Surplus Rate by Cover
		-- Update Calculated SS_PC for records that allow recalc for the Month
						
		update #Tmp_Party_Smry_Mth
		Set SS_PC =
		Case 
		When S.Cover = 'IPA' then (Case When S.Agg_QS_Residual > P.IPA_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IPA_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		When S.Cover = 'IP1' then (Case when S.Agg_QS_Residual > P.IP1_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IP1_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		When S.Cover = 'IPN' then (Case when S.Agg_QS_Residual > P.IPN_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IPN_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		When S.Cover = 'CC' then (Case when S.Agg_QS_Residual > P.CC_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4)- P.CC_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		When S.Cover = 'TPD' then (Case when S.Agg_QS_Residual > P.TPD_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.TPD_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		When S.Cover = 'DTH' then (Case when S.Agg_QS_Residual > P.DTH_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.DTH_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
		--when S.Cover = 'Excluded' then 0
		END
		from #Tmp_Party_Smry_Mth S,#SS_PARAMS as P
		where S.Census_Date = @Census_Date
		and S.[SS_Recalc_Flag] = 'Y' and S.SS_PC is NULL

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
		
		Commit Tran T4
		
		Print 'Calculated SS_PC for Census Date  ' + convert(varchar(50), @UpdateRowCount)

	--Update Previous SS_PC Value in Reins_Party_Sumry table for Recalc is N
	--Fix RGU-1201, 1203 - Changed the actual table to # table in the where sub query, as the # table contains data for the current census date
		Begin Tran T5
			create table #MaxDate (Census_Date DATE,
						Cover varchar(10),
						  Reins_Life_Identifier INT)

			insert into #MaxDate(Census_Date,Cover,Reins_Life_Identifier)
						 select Max(census_date) as Census_Date,cover,Reins_Life_Identifier 
						 from SS_Party_Smry_Mth
						 where Census_Date < @Census_Date
						 and reins_Life_Identifier in (Select distinct Reins_Life_Identifier from #Tmp_Party_Smry_Mth where Census_Date = @Census_Date and SS_Recalc_Flag = 'N' )
						 group by cover,Reins_Life_Identifier

			select * into #LastSeenSSPC 
			from (  select S.SS_PC,S.cover,S.Reins_Life_Identifier,S.Census_Date 
					from SS_Party_Smry_Mth S
					join #MaxDate M
					on S.Census_Date = M.Census_Date
					and S.Cover = M.Cover 
					and S.Reins_Life_Identifier = M.Reins_Life_Identifier
					)a

			update #Tmp_Party_Smry_Mth
			SET SS_PC = C.SS_PC
			from
			#Tmp_Party_Smry_Mth S
			join #LastSeenSSPC as C
			on S.Reins_Life_Identifier = C.Reins_Life_Identifier
			and S.Cover = C.Cover
			and S.Census_Date = @Census_Date
			and S.[SS_Recalc_Flag] = 'N'  
			and S.SS_PC is NULL

			SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
		
		Commit Tran T5
		
		Print 'Updating Prevuous SS_PC Value ' + convert(varchar(50), @UpdateRowCount)


	-- Catch All update for N flag records Mostly for IPN IPA changing covers
	-- Update Previous SS_PC Value in Reins_Party_Sumry table for Recalc is N
	/********************** Validate this *************************************/
	Begin Tran T6
		update #Tmp_Party_Smry_Mth
		SET SS_PC = C.SS_PC
		from #Tmp_Party_Smry_Mth S, SS_Party_Smry_Temp C
		where S.Reins_Life_Identifier = C.Reins_Life_Identifier
		and S.Cover = C.Cover
		and S.[SS_Recalc_Flag] = 'N'  
		and S.SS_PC is NULL
		and C.Cover != 'Excluded'
		--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Commit Tran T6
		
		Print 'Updating Prevuous SS_PC Value from CatchAll ' + convert(varchar(50), @UpdateRowCount)



	Begin Tran FinalPub
	Insert into SS_Party_Smry_Mth
	(Census_Date,
		Reins_Life_Identifier,
		Party_Key_Type,
		Cover,
		Agg_Sum_Insured_Amt,
		Agg_QS_Residual,
		SS_PC,
		SS_Recalc_Ref_ID,
		SS_Recalc_Flag,
		Created_Date_Time,
		Created_By,
		Updated_Date_Time,
		Updated_By,
		ProcessLogId
		)
	Select 
	Census_Date,
	Reins_Life_Identifier,
	Party_Key_Type,
	Cover,
	Agg_Sum_Insured_Amt,
	Agg_QS_Residual,
	SS_PC,
	SS_Recalc_Ref_ID,
	SS_Recalc_Flag,
	Created_Date_Time,
	Created_By,
	Updated_Date_Time,
	Updated_By,
	ProcessLogId 
	from #Tmp_Party_Smry_Mth

	SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT

	Commit Tran FinalPub

	Print 'Publish to Final SS_Party_Smry_Mth table  ' + convert(varchar(50), @InsertRowCount)
	
	Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
    End Try


BEGIN CATCH
	DECLARE @ErrorMessage VARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT 
        @ErrorMessage = ERROR_MESSAGE(),
        @ErrorSeverity = ERROR_SEVERITY(),
        @ErrorState = ERROR_STATE();

    -- Use RAISERROR inside the CATCH block to return error
    -- information about the original error that caused
    -- execution to jump to the CATCH block.
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               );
	IF @@TRANCOUNT > 0
	ROLLBACK;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_SS_Party_Smry]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		RRNAA2
-- Create date: 14/11/2019
-- Description:	This proc is to Load the Party details in the Summary table, 
-- to identify the eligibility of Recalculating Surplus Rate,
-- to calculate the surplus rates.
-- =============================================


-- Version   Date          CreatedBy                     Description    
-- 0.2       2019-12-05    Nimesh S			         Fixed bug related to excluded and expired/ILUL benefits to exclude them from any ss calcs 
-- 0.3		 2020-07-03	   Anija					Fixed bug RGU-388, Changed the logic to pick up SS_PC value from SS_Party_Smry table instead of from Inforce for recalc N records. 


CREATE PROCEDURE [dbo].[usp_Load_SS_Party_Smry] 
	-- Add the parameters for the stored procedure here
	@Census_Date Datetime,@ProcessLogID Int,
	@ForceLoad VARCHAR(1) = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 DECLARE @NumberOfRecs Int = 0


BEGIN TRY

    -- Insert statements for procedure here

SET @NumberOfRecs = (Select count(*) from [dbo].[SS_Party_Smry_Mth] where Census_Date = @Census_Date)

Print @NumberOfRecs

if @NumberOfRecs > 0 and @ForceLoad = 0 
  BEGIN

  Print ' Data exists in Surplus Summary Table for the Census Date ' + convert(varchar(50), @CENSUS_DATE) 
  Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
  Return -1

  END

  Begin TRAN DeleteTran;

	  DELETE from SS_Party_Smry_Mth where Census_Date = @Census_Date
	  SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

  Commit TRAN DeleteTran;
  	Print 'Delete Records from Surplus Summary for the Census Date ' + convert(varchar(50), @DeleteRowCount)

	
-- Insert records into SS_Party_Smry_Mth

CREATE TABLE ##Temp_SSPartySumry
(
	[Census_Date] [date] NOT NULL,
	[Reins_Life_Identifier] [int] NOT NULL,
	[Party_Key_Type] [varchar](3) NOT NULL,
	[Cover] [varchar](10) NOT NULL,
	[ANN_PHI_BEN] [money] NULL,
	[TPD_SUM_ASSD] [money] NULL,
	[CC_SUM_ASSD] [money] NULL,
	[DTH_SUM_ASSD] [money] NULL,
	[CONTRACT_KEY] [int] NULL,
	[CONTRACT_RISK_KEY] [int] NULL,
	[COMMENT] [nvarchar] (50) NULL,
	[SS_PC] [real] NULL,
	[Reins_Life_Grouping_Change] [varchar](1) NULL,
	[PREV_Reins_Life_Identifier] [int] NULL,
	[QS_GAP_MONTHS] [int] NULL
)

-- Temp Table created for aggregation
 -- Insert U2 to Temp
 insert into ##Temp_SSPartySumry
 select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	else 'Excluded'
 End )  as Cover, 
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
 CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_U2
  where CENSUS_DATE = @CENSUS_DATE 
  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

  -- Insert CP Pas Data
  insert into ##Temp_SSPartySumry
 select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	else 'Excluded'
 End )  as Cover, 
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
  CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_CP
  where CENSUS_DATE = @CENSUS_DATE  
 and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA','The Benefit has expired'))
 
   -- DS Pas Data
  insert into ##Temp_SSPartySumry
  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	 else 'Excluded'
 End )  as Cover,
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
  CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_DS
  where CENSUS_DATE = @CENSUS_DATE
 and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))
 
   -- FDA Pas Data
  insert into ##Temp_SSPartySumry
  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	else 'Excluded'
 End )  as Cover,
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
  CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_FDA
  where CENSUS_DATE = @CENSUS_DATE
  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

     -- LS Pas Data
   insert into ##Temp_SSPartySumry
  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	 else 'Excluded'
 End )  as Cover,
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
  CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_LS
  where CENSUS_DATE = @CENSUS_DATE
  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

     -- OR Pas Data
   insert into ##Temp_SSPartySumry
  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
  (Case 
	when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	 else 'Excluded'
 End )  as Cover,
 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
  CONTRACT_KEY,
 CONTRACT_RISK_KEY,
 COMMENT,
 SS_PC,
 Reins_Life_Grouping_Change,
 PREV_Reins_Life_Identifier,
 QS_GAP_MONTHS
  from INFORCE_TEMP_OR
  where CENSUS_DATE = @CENSUS_DATE
  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))
 
  ---

  --Put a step to delete expired benefits instead of filtering it in all the below queries (to be done)

  -----------------------------------------------------------------
-- Adding CLUSTERED INDEX ON [###Temp_SSPartySumry] table

CREATE CLUSTERED INDEX [CIX_Temp_SSPartySumry]
	ON [##Temp_SSPartySumry] 
	(
		[Reins_Life_Identifier],
		[Cover]	
	)	

-----------------------------------------------------------------

  	BEGIN TRAN Tran1;
  -- Insert into SS_Party_Smry_Mth based on Agrregation

 INSERT INTO [dbo].[SS_Party_Smry_Mth]
           ([Census_Date]
           ,[Reins_Life_Identifier]
           ,[Party_Key_Type]
           ,[Cover]
           ,[Agg_Sum_Insured_Amt]
           ,[Agg_QS_Residual]
           ,[SS_PC]
           ,[SS_Recalc_Ref_ID]
           ,[SS_Recalc_Flag]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[ProcessLogId])
  SELECT Census_Date,Reins_Life_Identifier,Party_Key_Type,Cover,
 (Case when Cover in ('IPA','IP1','IPN') THEN sum(ANN_PHI_BEN)
 WHEN COVER = 'TPD' THEN SUM(TPD_SUM_ASSD)
 WHEN COVER = 'CC' THEN SUM(CC_SUM_ASSD)
 WHEN COVER = 'DTH' THEN  SUM(DTH_SUM_ASSD) END) AS Agg_Sum_Insured_Amt,
 NULL,
 NULL,
 NULL,
 NULL,
 getdate(),
 SYSTEM_USER,
 NULL,
 NULL,
 @ProcessLogID
 from ##Temp_SSPartySumry
 where Cover != 'Excluded'
 --and (COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or Comment != 'The Benefit has expired')
 Group by Census_Date,Reins_life_Identifier,Party_Key_Type,Cover
 order by Census_Date,Reins_life_Identifier,Party_Key_Type,Cover

COMMIT TRAN Tran1;

SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT

Print 'Inserted Records in Surplus Summary for the Census Date ' + convert(varchar(50), @InsertRowCount)


-- Update Agg_QS_Residual column

update SS_Party_Smry_Mth 
set Agg_QS_Residual = Agg_Sum_Insured_Amt * 0.4
where Census_Date = @Census_Date

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

-- Identify Eligibility of Recalc
-- Updating All the Recalc as Y criteria first

-- Recalc Reason as NEW BUSINESS IN CURRENT MONTH, Recalc Flag set as Y

 update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
 and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
 and R.[SS_Priority_Indicator] = 1

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for NEW BUSINESS IN CURRENT MONTH ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as REINSTATED INTO TREATY AT START, Recalc Flag set as Y

 update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
 and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
 --and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
 and R.[SS_Priority_Indicator] = 2


SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for REINSTATED INTO TREATY AT START ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as VOLUNTARY INCREASE, Recalc Flag set as Y

 update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
-- and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
 and R.[SS_Priority_Indicator] = 3

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for VOLUNTARY INCREASE ' + convert(varchar(50), @UpdateRowCount)


-- Recalc Reason as CONVERSION WITH INCR, Recalc Flag set as Y

 update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
 and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
-- and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
 and R.[SS_Priority_Indicator] = 4

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for CONVERSION WITH INCR ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as RESTRUCTURE WITH INCR, Recalc Flag set as Y

 update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
 and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
-- and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
 and R.[SS_Priority_Indicator] = 5

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for RESTRUCTURE WITH INCR ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as MERGE INTO PARTY, Recalc Flag set as Y
-- Any record in inforce with Reins_life_grouping_Change as Y is identified as a merge into party for Recalc to be set as Y

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = 'MERGE INTO PARTY'
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and C.Cover != 'Excluded'
and C.Reins_Life_Grouping_Change = 'Y' 
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 6

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for MERGE INTO PARTY ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as DEMERGE FROM PARTY, Recalc Flag set as Y
-- We use the Merge into Party records and identify the Prev_Reins_life_identifier
-- for the Prev_Reins_life_identifier records in SS_Party_Smry_Mth for current month set as Demerge from Party and recalc as N

select * 
into #IdentifyDemergeList
from	(
select distinct S.Reins_Life_Identifier,S.Cover,C.PREV_Reins_Life_Identifier from  SS_Party_Smry_Mth S
join ##Temp_SSPartySumry C
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover
where S.Census_Date = @Census_Date
and C.Reins_Life_Grouping_Change = 'Y'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
) a
update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from #IdentifyDemergeList I
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = I.PREV_Reins_Life_Identifier
and S.Cover = I.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason =  'DEMERGE FROM PARTY'
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'Y'
and R.[SS_Priority_Indicator] = 7

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for DEMERGE FROM PARTY ' + convert(varchar(50), @UpdateRowCount)

-- Updating All the Recalc as N criteria first

-- Recalc Reason as CONVERSION, Recalc Flag set as N

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 1

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for CONVERSION ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as RESTRUCTURE, Recalc Flag set as N

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 2

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for RESTRUCTURE ' + convert(varchar(50), @UpdateRowCount)
-- Recalc Reason as REINSTATEMENT, Recalc Flag set as N
-- QS_Gap_months column is used to identify Reinstatements

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = 'REINSTATEMENT'
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and ISNULL(C.QS_GAP_MONTHS,0) > 1
and R.[SS_Priority_Indicator] = 3

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for REINSTATEMENT ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as LAPSE, Recalc Flag set as N
-- Get the current month Lapsed dataset and identify its reins_life_Identifier and Cover details from Inforce
-- update the recalc to be N for the Party Cover combination that has a lapse and is not yet marked as no recalc

select * 
into #IdentifyLapsedList 
from (
select distinct L.Reins_Life_Identifier,
  (Case 
	when ((isnull(I.SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(I.INJURY_BENEFIT_PERIOD,'') like 'A%')) 
		and I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
	when I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and I.SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
		and I.INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or I.PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
	when I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
    when I.PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
	when I.PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
	when I.PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
	else 'Excluded'
 End )  as Cover
from  LAPSED L
join INFORCE I
on L.CENSUS_DATE = I.CENSUS_DATE 
and L.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY
where L.LAPSE_DATE = @Census_Date
and (I.COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA','The Benefit has expired'))
) a
update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from #IdentifyLapsedList C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = 'LAPSE'
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
and R.[SS_Priority_Indicator] = 4

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for LAPSE' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as REDUCTION, Recalc Flag set as N

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 5

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for REDUCTION ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as AUTOMATIC INCREASE, Recalc Flag set as N

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 6

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for AUTOMATIC INCREASE ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as ONGOING, Recalc Flag set as N

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = C.COMMENT
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 7

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for ONGOING ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as ONGOING, Recalc Flag set as N for All others that cannot be Mapped as NULL 
-- We set all remaining Null recalc Flags in the month to be N with reaon as UNMAPPED

update SS_Party_Smry_Mth
Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
SS_Recalc_Flag = R.SS_Recalc_Flag 
from ##Temp_SSPartySumry C
Join SS_Party_Smry_Mth S
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover 
join SS_Recalc_Reference R
on R.SS_Recalc_Reason = 'UNMAPPED'
where S.Census_Date = @Census_Date
and S.SS_Recalc_Flag is NULL
and R.SS_Recalc_Flag = 'N'
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
and R.[SS_Priority_Indicator] = 8

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Eligibilty for recalc Flag Updated for Catch All as ONGOING ' + convert(varchar(50), @UpdateRowCount)


-- Calculate SS_PC
-- Get Retention Limits for Covers

SELECT
	DTH_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'DTH' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
	,TPD_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'TPD' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
	,CC_LIMIT =  (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'CC'  and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
	,IP1_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IP1' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
	,IPN_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPN' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
	,IPA_LIMIT = (Select LIMIT From RETENTION_LIMIT WHERE COVER = 'IPA' and @CENSUS_DATE between FROM_DATE and coalesce(TO_DATE, @CENSUS_DATE))
INTO #SS_PARAMS

-- Calculation for Surplus Rate by Cover
-- Update Calculated SS_PC for records that allow recalc for the Month
						
update SS_Party_Smry_Mth
Set SS_PC =
Case 
When S.Cover = 'IPA' then (Case When S.Agg_QS_Residual > P.IPA_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IPA_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
When S.Cover = 'IP1' then (Case when S.Agg_QS_Residual > P.IP1_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IP1_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
When S.Cover = 'IPN' then (Case when S.Agg_QS_Residual > P.IPN_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.IPN_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
When S.Cover = 'CC' then (Case when S.Agg_QS_Residual > P.CC_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4)- P.CC_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
When S.Cover = 'TPD' then (Case when S.Agg_QS_Residual > P.TPD_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.TPD_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
When S.Cover = 'DTH' then (Case when S.Agg_QS_Residual > P.DTH_LIMIT Then CAST(100 * ((S.Agg_Sum_Insured_Amt * 0.4) - P.DTH_LIMIT) / S.Agg_Sum_Insured_Amt as real) Else 0 End)
--when S.Cover = 'Excluded' then 0
END
from SS_Party_Smry_Mth S,#SS_PARAMS as P
where S.Census_Date = @Census_Date
and S.[SS_Recalc_Flag] = 'Y' and S.SS_PC is NULL

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Calculated SS_PC for Census Date  ' + convert(varchar(50), @UpdateRowCount)

-- Update Previous SS_PC Value in Reins_Party_Sumry table for Recalc is N

--update SS_Party_Smry_Mth
--SET SS_PC = C.SS_PC
--from SS_Party_Smry_Mth S, ##Temp_SSPartySumry C
--where S.Reins_Life_Identifier = C.Reins_Life_Identifier
--and S.Cover = C.Cover
--and S.[SS_Recalc_Flag] = 'N'  
--and S.SS_PC is NULL
--and C.Cover != 'Excluded'
----and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')

create table #MaxDate (Census_Date DATE,
			Cover varchar(10),
              Reins_Life_Identifier INT)

insert into #MaxDate(Census_Date,Cover,Reins_Life_Identifier)
		     select Max(census_date) as Census_Date,cover,Reins_Life_Identifier 
			 from SS_Party_Smry_Mth
			 where Census_Date < @Census_Date
			 and reins_Life_Identifier in (Select distinct Reins_Life_Identifier from SS_Party_Smry_Mth where Census_Date = @Census_Date and SS_Recalc_Flag = 'N' )
			 group by cover,Reins_Life_Identifier

select * into #LastSeenSSPC 
from (  select S.SS_PC,S.cover,S.Reins_Life_Identifier,S.Census_Date 
		from SS_Party_Smry_Mth S
		join #MaxDate M
		on S.Census_Date = M.Census_Date
		and S.Cover = M.Cover 
		and S.Reins_Life_Identifier = M.Reins_Life_Identifier
		)a
update SS_Party_Smry_Mth
SET SS_PC = C.SS_PC
from
SS_Party_Smry_Mth S
join #LastSeenSSPC as C
on S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover
and S.Census_Date = @Census_Date
and S.[SS_Recalc_Flag] = 'N'  
and S.SS_PC is NULL

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Updating Prevuous SS_PC Value ' + convert(varchar(50), @UpdateRowCount)


-- Catch All update for N flag records Mostly for IPN IPA changing covers
-- Update Previous SS_PC Value in Reins_Party_Sumry table for Recalc is N

update SS_Party_Smry_Mth
SET SS_PC = C.SS_PC
from SS_Party_Smry_Mth S, ##Temp_SSPartySumry C
where S.Reins_Life_Identifier = C.Reins_Life_Identifier
and S.Cover = C.Cover
and S.[SS_Recalc_Flag] = 'N'  
and S.SS_PC is NULL
and C.Cover != 'Excluded'
--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')

SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

Print 'Updating Prevuous SS_PC Value from CatchAll ' + convert(varchar(50), @UpdateRowCount)


	DROP Table ##Temp_SSPartySumry
	DROP Table #IdentifyDemergeList
	DROP Table #IdentifyLapsedList
	Drop TABLE #SS_PARAMS
	DROP TABLE #MaxDate
	DROP TABLE #LastSeenSSPC

	Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
    END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Tran1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_SS_Party_Temp]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- =============================================
-- Author:		Nimesh Shah 
-- Create date: 14/01/2021
-- Description:	This proc prepares the data for Surplus calc based on Party (Client) and to identify the eligibility of Recalculating Surplus Rate
-- The eligibility check is done at the detailed level. The summary proc (separate proc) will then summarise the result to calculate the ss_pc and amount
-- Source Tables - Inforce_Temp_<<PAS>> (x6)
-- Target Table - SS_Party_Smry_Temp
-- Version - Initial Version
-- =============================================


-- Version   Date          CreatedBy                     Description    
-- 

CREATE PROCEDURE [dbo].[usp_Load_SS_Party_Temp] 
	-- Add the parameters for the stored procedure here
	@Census_Date Datetime,
	@ProcessLogID Int,
	@ForceLoad VARCHAR(1) = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 DECLARE @NumberOfRecs Int = 0


BEGIN TRY

    -- Insert statements for procedure here

	SET @NumberOfRecs = (Select count(*) from [dbo].[SS_Party_Smry_Mth] where Census_Date = @Census_Date)

	Print @NumberOfRecs

	if @NumberOfRecs > 0 and @ForceLoad = 0 
		Begin  

			Print ' Data exists in Surplus Summary Table for the Census Date ' + convert(varchar(50), @CENSUS_DATE) 
			RAISERROR ('Data exists in Surplus Summary Table for the Census Date ', 16,  1);
		End
  
  

	--Clear the temp table
	Begin Tran T1
	Truncate table dbo.SS_Party_Smry_Temp
	Commit Tran T1

-- Insert records into dbo.SS_Party_Smry_Temp
	Begin Tran T2
-- Insert U2 to Temp
	 insert into dbo.SS_Party_Smry_Temp
	 select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		else 'Excluded'
	 End )  as Cover, 
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	 CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_U2
	  where CENSUS_DATE = @CENSUS_DATE 
	  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

	  SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT

	  -- Insert CP Pas Data
	  insert into dbo.SS_Party_Smry_Temp
	 select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		else 'Excluded'
	 End )  as Cover, 
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	  CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_CP
	  where CENSUS_DATE = @CENSUS_DATE  
	 and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA','The Benefit has expired'))
	 
	 SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	
	
	   -- DS Pas Data
	  insert into dbo.SS_Party_Smry_Temp
	  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		 else 'Excluded'
	 End )  as Cover,
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	  CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_DS
	  where CENSUS_DATE = @CENSUS_DATE
	 and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))
	 
	 SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	 
	   -- FDA Pas Data
	  insert into dbo.SS_Party_Smry_Temp
	  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		else 'Excluded'
	 End )  as Cover,
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	  CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_FDA
	  where CENSUS_DATE = @CENSUS_DATE
	  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

	SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	
	Print 'Data inserted into party_temp table'
	
	
	
		 -- LS Pas Data
	   insert into dbo.SS_Party_Smry_Temp
	  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		 else 'Excluded'
	 End )  as Cover,
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	  CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_LS
	  where CENSUS_DATE = @CENSUS_DATE
	  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))

	SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	
	
		 -- OR Pas Data
	   insert into dbo.SS_Party_Smry_Temp
	  select @Census_Date,Reins_Life_Identifier,Party_Key_Type,
	  (Case 
		when ((isnull(SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(INJURY_BENEFIT_PERIOD,'') like 'A%')) 
			and PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
			and INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
		when PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
		when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
		when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
		when PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
		 else 'Excluded'
	 End )  as Cover,
	 ANN_PHI_BEN,TPD_SUM_ASSD,CC_SUM_ASSD,DTH_SUM_ASSD,
	  CONTRACT_KEY,
	 CONTRACT_RISK_KEY,
	 COMMENT,
	 SS_PC,
	 Reins_Life_Grouping_Change,
	 PREV_Reins_Life_Identifier,
	QS_GAP_MONTHS, NULL, NULL
	  from INFORCE_TEMP_OR
	  where CENSUS_DATE = @CENSUS_DATE
	  and (COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA', 'The Benefit has expired'))
	 
	 SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	Commit Tran T2

	 --Delete Expired Benefits as they are not used in any calculations
	  --*** Step Added by NS
	Begin Tran T3
	  Delete from dbo.SS_Party_Smry_Temp
	  where Cover = 'Excluded' --(67364 rows affected)
	
	  SET @DeleteRowCount  = @DeleteRowCount + @@ROWCOUNT
	Commit Tran T3

	  Print 'Excluded over type deleted from party_temp table'

	Begin Tran UpdateRecalcTran
-- Identify Eligibility of Recalc
-- Updating All the Recalc as Y criteria first

-- Recalc Reason as NEW BUSINESS IN CURRENT MONTH, Recalc Flag set as Y

	update dbo.SS_Party_Smry_Temp
	Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
	SS_Recalc_Flag = R.SS_Recalc_Flag 
	from dbo.SS_Party_Smry_Temp S
	join SS_Recalc_Reference R
	on R.SS_Recalc_Reason = S.COMMENT
	where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 1 
 
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	
	Print 'Eligibilty for recalc Flag Updated for NEW BUSINESS IN CURRENT MONTH ' + convert(varchar(50), @UpdateRowCount)
	

	-- Recalc Reason as REINSTATED INTO TREATY AT START, Recalc Flag set as Y

	update dbo.SS_Party_Smry_Temp
	Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
	SS_Recalc_Flag = R.SS_Recalc_Flag 
	from dbo.SS_Party_Smry_Temp S
	join SS_Recalc_Reference R
	on R.SS_Recalc_Reason = S.COMMENT
	where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
	 	and R.[SS_Priority_Indicator] = 2 


	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	Print 'Eligibilty for recalc Flag Updated for REINSTATED INTO TREATY AT START ' + convert(varchar(50), @UpdateRowCount)

-- Recalc Reason as VOLUNTARY INCREASE, Recalc Flag set as Y

	update dbo.SS_Party_Smry_Temp
	Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
	SS_Recalc_Flag = R.SS_Recalc_Flag 
	from dbo.SS_Party_Smry_Temp S
	join SS_Recalc_Reference R
	on R.SS_Recalc_Reason = S.COMMENT
	where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 3
 
	SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

	Print 'Eligibilty for recalc Flag Updated for VOLUNTARY INCREASE ' + convert(varchar(50), @UpdateRowCount)

	-- Recalc Reason as CONVERSION WITH INCR, Recalc Flag set as Y

		 update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		 and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
		-- and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
		 and R.[SS_Priority_Indicator] = 4 --(21 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for CONVERSION WITH INCR ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as RESTRUCTURE WITH INCR, Recalc Flag set as Y

		 update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from  dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		 and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
		-- and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
		 and R.[SS_Priority_Indicator] = 5 --(25 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for RESTRUCTURE WITH INCR ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as MERGE INTO PARTY, Recalc Flag set as Y
		-- Any record in inforce with Reins_life_grouping_Change as Y is identified as a merge into party for Recalc to be set as Y

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = 'MERGE INTO PARTY'
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and S.Cover != 'Excluded'
		and S.Reins_Life_Grouping_Change = 'Y' 
		--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
		and R.[SS_Priority_Indicator] = 6 --(44 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for MERGE INTO PARTY ' + convert(varchar(50), @UpdateRowCount)
	
			-- Recalc Reason as DEMERGE FROM PARTY, Recalc Flag set as Y
		-- We use the Merge into Party records and identify the Prev_Reins_life_identifier
		-- for the Prev_Reins_life_identifier records in SS_Party_Smry_Temp for current month set as Demerge from Party and recalc as N
		

		select * 
		into #IdentifyDemergeList
		from	(
		select distinct Reins_Life_Identifier, Cover, PREV_Reins_Life_Identifier 
		from dbo.SS_Party_Smry_Temp C
		where C.Census_Date = @Census_Date
		and C.Reins_Life_Grouping_Change = 'Y'
		and C.Cover != 'Excluded'
		) a

		Update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from #IdentifyDemergeList I
		Join dbo.SS_Party_Smry_Temp S
		on S.Reins_Life_Identifier = I.PREV_Reins_Life_Identifier
		and S.Cover = I.Cover 
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason =  'DEMERGE FROM PARTY'
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'Y'
		and R.[SS_Priority_Indicator] = 7 --0 rows

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for DEMERGE FROM PARTY ' + convert(varchar(50), @UpdateRowCount)

		-- Updating All the Recalc as N criteria first

		-- Recalc Reason as CONVERSION, Recalc Flag set as N

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 1 --(53 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for CONVERSION ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as RESTRUCTURE, Recalc Flag set as N

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from  dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 2 -- (37 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for RESTRUCTURE ' + convert(varchar(50), @UpdateRowCount)
		-- Recalc Reason as REINSTATEMENT, Recalc Flag set as N
		-- QS_Gap_months column is used to identify Reinstatements

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = 'REINSTATEMENT'
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		--and (C.COMMENT ! = 'EXCLUDED AS UNIT LINKED BAL>SA' or C.Comment != 'The Benefit has expired')
		and ISNULL(S.QS_GAP_MONTHS,0) > 1
		and R.[SS_Priority_Indicator] = 3 --(228 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for REINSTATEMENT ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as LAPSE, Recalc Flag set as N
		-- Get the current month Lapsed dataset and identify its reins_life_Identifier and Cover details from Inforce
		-- update the recalc to be N for the Party Cover combination that has a lapse and is not yet marked as no recalc
	
		select * 
		into #IdentifyLapsedList 
		from (
		select distinct L.Reins_Life_Identifier,
		  (Case 
			when ((isnull(I.SICKNESS_BENEFIT_PERIOD,'') like 'A%' or isnull(I.INJURY_BENEFIT_PERIOD,'') like 'A%')) 
				and I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') Then 'IPA' 
			when I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') and I.SICKNESS_BENEFIT_PERIOD in ('M0','M6','M12') 
				and I.INJURY_BENEFIT_PERIOD in ('M0','M6','M12') or I.PRODUCT_OPT_GROUP_DESC = 'BE' then 'IP1' 
			when I.PRODUCT_OPT_GROUP_DESC in ('IP','TSC') then 'IPN'
			when I.PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') then 'TPD'
			when I.PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then 'CC'
			when I.PRODUCT_OPT_GROUP_DESC in ('DTH') then 'DTH'
			else 'Excluded'
		 End )  as Cover
		from  LAPSED L
		join INFORCE I
		on L.CENSUS_DATE = I.CENSUS_DATE 
		and L.CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY
		where L.LAPSE_DATE = @Census_Date
		and (I.COMMENT not in ('EXCLUDED AS UNIT LINKED BAL>SA','The Benefit has expired'))
		) a --(14276 rows affected)
		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from #IdentifyLapsedList C
		Join dbo.SS_Party_Smry_Temp S
		on S.Reins_Life_Identifier = C.Reins_Life_Identifier
		and S.Cover = C.Cover 
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = 'LAPSE'
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and C.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 4 --(174 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for LAPSE' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as REDUCTION, Recalc Flag set as N

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 5 --(2242 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for REDUCTION ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as AUTOMATIC INCREASE, Recalc Flag set as N

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 6 --(19877 rows affected

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for AUTOMATIC INCREASE ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as ONGOING, Recalc Flag set as N

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = S.COMMENT
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 7 --(988123 rows affected) 11 secs

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for ONGOING ' + convert(varchar(50), @UpdateRowCount)

		-- Recalc Reason as ONGOING, Recalc Flag set as N for All others that cannot be Mapped as NULL 
		-- We set all remaining Null recalc Flags in the month to be N with reaon as UNMAPPED

		update dbo.SS_Party_Smry_Temp
		Set SS_Recalc_Ref_ID = R.SS_Recalc_Ref_ID,
		SS_Recalc_Flag = R.SS_Recalc_Flag 
		from  dbo.SS_Party_Smry_Temp S
		join SS_Recalc_Reference R
		on R.SS_Recalc_Reason = 'UNMAPPED'
		where S.Census_Date = @Census_Date
		and S.SS_Recalc_Flag is NULL
		and R.SS_Recalc_Flag = 'N'
		and S.Cover != 'Excluded'
		and R.[SS_Priority_Indicator] = 8 --(0 rows affected)

		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		Print 'Eligibilty for recalc Flag Updated for Catch All as ONGOING ' + convert(varchar(50), @UpdateRowCount)	



	Commit Tran UpdateRecalcTran
	

	Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
   
    End Try

BEGIN CATCH
	DECLARE @ErrorMessage VARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT 
        @ErrorMessage = ERROR_MESSAGE(),
        @ErrorSeverity = ERROR_SEVERITY(),
        @ErrorState = ERROR_STATE();

    -- Use RAISERROR inside the CATCH block to return error
    -- information about the original error that caused
    -- execution to jump to the CATCH block.
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               );
	IF @@TRANCOUNT > 0
	ROLLBACK;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_U2]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Object:  StoredProcedure [dbo].[usp_Load_U2]    Script Date: 24/08/2020 4:59:41 PM ******/

-- ==============================================
-- Modification:
-- Author - MHTSIQ
-- Date - July 2020
-- Description - Filter the in-scope list of Product and Benefit combinations in this PAS
-- ==============================================
-- Author:		KHNNR2
-- Create date: Dec 2019
-- Description:	Added column "Reins_Life_Identifier" to drive and insert �PREV_ Reins_Life_Identifier� 
--              values for lapsed records into Inforce and Inforce_Temp (PAS) tables
-- ==============================================
-- Author:		RRNAA2
-- Create date: May 2019
-- Description:	Load U2 data from Staging Table
-- ==============================================
-- Change Log
-- Oct 2018 - AWJ - Fix Bug in CPI increase calculation where most Jul 2018 increases were treated as voluntary rather than CPI
-- ==============================================
--
-- EXEC usp_Load_U2

CREATE PROCEDURE [dbo].[usp_Load_U2]  @ProcessLogID int,@CENSUS_DATE datetime
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


--Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
--DECLARE @CENSUS date = (SELECT top 1 CENSUS_DATE From STG.Stg_U2_Benefit)
DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))

DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0

IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
Select
	TREATY_START         = @TREATY_START
	,CENSUS_DATE         = @CENSUS_DATE
	,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
	,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
	,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
	,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
	,LAST_CPI            = IIF(month(@CENSUS_DATE)<=6,dbo.DateSerial(Year(@CENSUS_DATE)-1,6,30),dbo.DateSerial(Year(@CENSUS_DATE),6,30))
	,PRODUCT_SYSTEM_CODE = 'U2'
Into #LOAD_PARAMS

--Select * from #LOAD_PARAMS

--Log the Function Call
--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Start'

BEGIN TRY

Begin Tran INFORCE_TEMP_U2_Loading
		--Load the data from the Staging Table into INFORCE_TEMP_U2
		truncate TABLE INFORCE_TEMP_U2
		   -- Create a temp table to store records only for the in-scope Product Benefit Combinations

		CREATE TABLE #TEMP_U2_BENEFIT(
		CENSUS_DATE datetime2(7)
           ,CONTRACT_KEY numeric(10,0)
           ,PARTY_KEY float
           ,PARTY_PAS varchar(3)
           ,CONTRACT_PARTY numeric(10,0)
           ,CONTRACT_RISK_KEY numeric(10,0)
           ,CONTRACT_ID varchar(50)
           ,PRODUCT_SYSTEM_CODE varchar(3)
           ,FIRST_NAME varchar(120)
           ,MIDDLE_NAME varchar(120)
           ,SURNAME varchar(100)
           ,GENDER_CODE varchar(3)
           ,DOB datetime2(7)
           ,CONTRACT_START_DATE datetime2(7)
           ,PRODUCT_CODE varchar(20)
           ,CLASS_OF_BUSN_CODE varchar(2)
           ,PRODUCT_OPTION_CODE varchar(20)
           ,PRODUCT_OPT_GROUP_DESC varchar(50)
           ,RISK_START_DATE datetime2(7)
           ,RISK_EXPR_DATE datetime2(7)
           ,SMOKER_STATUS_CODE varchar(10)
           ,SDUTY_STATE_CODE varchar(3)
           ,POST_CODE varchar(30)
           ,OCUPTN_CLASS_CODE varchar(20)
           ,SUM_INSURED_AMT numeric(20,3)
           ,PREM_AMT numeric(20,3)
           ,EXPLICIT_SDUTY_AMT numeric(20,2)
           ,PREM_FREQ numeric(5,2)
           ,RISK_WAIT_PERIOD_TYPE varchar(4000)
           ,RISK_WAIT_PERIOD_VAL varchar(4000)
           ,BENEFIT_PERIOD varchar(10)
           ,BENEFIT_INDEXATION varchar(10)
           ,EXPRY_AGE varchar(4)
           ,SALESCHANNEL varchar(15)
           ,RISK_CMSN_TYPE_CODE varchar(10)
           ,CLAIM_IND varchar(1)
           ,LINKED_BENEFIT_CODE varchar(2)
           ,ANNUAL_PREM float
           ,ASSESS_CODE varchar(10)
           ,DAY_1_ACCIDENT_IND varchar(1)
           ,SUPER_CONTRB_OPT_CODE varchar(10)
           ,MYSUPER_IND varchar(1)
           ,RISK_MODULE_CODE varchar(10)
           ,SOURCE_OF_BUSN_CODE varchar(10)
           ,Created_Date_Time datetime
           ,Import_Log_ID int
           ,Created_BY varchar(50)
		)
		INSERT INTO #TEMP_U2_BENEFIT
		select distinct [CENSUS_DATE]
      ,[CONTRACT_KEY]
      ,[PARTY_KEY]
      ,[PARTY_PAS]
      ,[CONTRACT_PARTY]
      ,[CONTRACT_RISK_KEY]
      ,[CONTRACT_ID]
      ,s.[PRODUCT_SYSTEM_CODE]
      ,[FIRST_NAME]
      ,[MIDDLE_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[CONTRACT_START_DATE]
      ,s.[PRODUCT_CODE]
      ,[CLASS_OF_BUSN_CODE]
      ,s.[PRODUCT_OPTION_CODE]
      ,[PRODUCT_OPT_GROUP_DESC]
      ,[RISK_START_DATE]
      ,[RISK_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[SDUTY_STATE_CODE]
      ,[POST_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[SUM_INSURED_AMT]
      ,[PREM_AMT]
      ,[EXPLICIT_SDUTY_AMT]
      ,[PREM_FREQ]
      ,[RISK_WAIT_PERIOD_TYPE]
      ,[RISK_WAIT_PERIOD_VAL]
      ,[BENEFIT_PERIOD]
      ,[BENEFIT_INDEXATION]
      ,[EXPRY_AGE]
      ,[SALESCHANNEL]
      ,[RISK_CMSN_TYPE_CODE]
      ,[CLAIM_IND]
      ,[LINKED_BENEFIT_CODE]
      ,[ANNUAL_PREM]
      ,[ASSESS_CODE]
      ,[DAY_1_ACCIDENT_IND]
      ,[SUPER_CONTRB_OPT_CODE]
      ,[MYSUPER_IND]
      ,[RISK_MODULE_CODE]
      ,[SOURCE_OF_BUSN_CODE]
      ,s.[Created_Date_Time]
      ,[Import_Log_ID]
      ,s.[Created_BY]
	 from [stg].[Stg_U2_Benefit]s
	 join [dbo].[Reins_Treaty_Product] p
	 on p.product_system_code = s.PRODUCT_SYSTEM_CODE
	 and p.Product_Code = s.PRODUCT_CODE
	 and p.Product_Option_Code = s.PRODUCT_OPTION_CODE
	 and  p.Treaty_Id  not in (-1, -999)

		INSERT INTO [INFORCE_TEMP_U2] (
					[CENSUS_DATE],[CONTRACT_KEY],[PARTY_KEY],[CONTRACT_RISK_KEY],[CONTRACT_ID],[PRODUCT_SYSTEM_CODE]
				   ,[FIRST_NAME],[MIDDLE_NAME],[SURNAME],[GENDER_CODE],[DOB]
				   ,[CONTRACT_START_DATE],[PRODUCT_CODE],[CLASS_OF_BUSN_CODE],[PRODUCT_OPTION_CODE],[PRODUCT_OPT_GROUP_DESC]
				   ,[RISK_START_DATE],[RISK_EXPR_DATE],[SMOKER_STATUS_CODE],[SDUTY_STATE_CODE]
				   ,[POST_CODE]
				   ,[OCUPTN_CLASS_CODE],[STEP_LVL_PREM_CODE],[SUM_INSURED_AMT],[AT_RISK_AMT],[ANNUAL_POL_FEE],[PREM_AMT]
				   ,[EXPLICIT_SDUTY_AMT],[PREM_FREQ],[ANNUAL_PREM],[ASSESS_CODE]
				   ,[RISK_WAIT_PERIOD],[SICKNESS_BENEFIT_PERIOD],[INJURY_BENEFIT_PERIOD]
				   ,[INDMNTY_OPTION_CODE]
				   ,[BENEFIT_INDEXATION]
				   ,[SUM_INSRD_FREQ_CODE],[INCR_CLAIM_OPT_PCNT]
				   ,[CPI_INCR]
				   ,[SALESCHANNEL],[RISK_CMSN_TYPE_CODE]
				   ,[OPTION_FLAGS]
				   ,[UNDERWRITING_CATEGORY],[PROJECTION_GROUP],[MP]
				   ,[DTH_SUM_ASSD],[TPD_SUM_ASSD],[CC_SUM_ASSD],[ANN_PHI_BEN],[PROPHET_PREM]
				   ,[Created_Date_Time],[Updated_Date_Time],[Created_By],[Updated_By],[Process_Log_ID]
				   )

		SELECT
			C.CENSUS_DATE,CONTRACT_KEY,PARTY_KEY=coalesce(PARTY_KEY,CONTRACT_PARTY),C.CONTRACT_RISK_KEY,CONTRACT_ID,C.PRODUCT_SYSTEM_CODE
			,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB
			,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC
			,RISK_START_DATE,RISK_EXPR_DATE
			,SMOKER_STATUS_CODE=nullif(SMOKER_STATUS_CODE,'NA')
			,SDUTY_STATE_CODE
			,POST_CODE=Case when SDUTY_STATE_CODE <> 'OS' Then Left(POST_CODE,4) ELSE NULL End
			,OCUPTN_CLASS_CODE
			,STEP_LVL_PREM_CODE='S'
			,SUM_INSURED_AMT,AT_RISK_AMT=SUM_INSURED_AMT
			,ANNUAL_POL_FEE=0
			,PREM_AMT,EXPLICIT_SDUTY_AMT,PREM_FREQ,ANNUAL_PREM,ASSESS_CODE
			,RISK_WAIT_PERIOD =  Case When PRODUCT_OPT_GROUP_DESC = 'TSC' Then
				left('000',3-len(RISK_WAIT_PERIOD_VAL))+RISK_WAIT_PERIOD_VAL+RISK_WAIT_PERIOD_TYPE
			 End
			,SICKNESS_BENEFIT_PERIOD = Case
				When PRODUCT_OPT_GROUP_DESC <> 'TSC' Then NULL
				When BENEFIT_PERIOD = 'NA' Then Case When left(PRODUCT_OPTION_CODE,1) = 'T' Then 'M24' Else 'A65' End --Default TSC and SCI cover
				When BENEFIT_PERIOD <= 20 Then 'M' + convert(nvarchar,BENEFIT_PERIOD*12)
				When BENEFIT_PERIOD = 99 Then 'AL'
				ELSE 'A' + convert(nvarchar,BENEFIT_PERIOD)
				End
			,INJURY_BENEFIT_PERIOD = Case
				When PRODUCT_OPT_GROUP_DESC <> 'TSC' Then NULL
				When BENEFIT_PERIOD = 'NA' Then Case When left(PRODUCT_OPTION_CODE,1) = 'T' Then 'M24' Else 'A65' End --Default TSC and SCI cover
				When BENEFIT_PERIOD <= 20 Then 'M' + convert(nvarchar,BENEFIT_PERIOD*12)
				When BENEFIT_PERIOD = 99 Then 'AL'
				ELSE 'A' + convert(nvarchar,BENEFIT_PERIOD)
				End
			,INDMNTY_OPTION_CODE = Case when PRODUCT_OPT_GROUP_DESC = 'TSC' Then 'Y' End
			,BENEFIT_INDEXATION = nullif(BENEFIT_INDEXATION, 'NA')
			,SUM_INSRD_FREQ_CODE=Case When PRODUCT_OPT_GROUP_DESC ='TSC' Then 'MNTH' ELSE 'ADHOC' End
			,INCR_CLAIM_OPT_PCNT=CASE WHEN PRODUCT_OPT_GROUP_DESC = 'TSC' Then Case When BENEFIT_INDEXATION = 'Y' Then 99 Else 0 End End
			,CPI_INCR = -99
			,SALESCHANNEL,RISK_CMSN_TYPE_CODE
			,OPTION_FLAGS = Case when [SUPER_CONTRB_OPT_CODE] = 'Y' Then 'S' Else '' End
			,UNDERWRITING_CATEGORY= CASE  
				WHEN product_code = 'FL' AND source_of_busn_code IN ('CSU','CGU','SGR') THEN 'DELINKS'
				WHEN MYSUPER_IND ='Y' AND product_opt_group_desc = 'TPD' 
					AND sum_insured_amt < 10001 * power(1.05, year(C.CENSUS_DATE) - year(RISK_START_DATE) + CASE WHEN Month(C.CENSUS_DATE) > 6 THEN 1 ELSE 0 END + CASE WHEN Month(RISK_START_DATE) > 6 THEN -1 ELSE 0 END)
					THEN 'MYSUPER'
				WHEN MYSUPER_IND='Y'  AND product_opt_group_desc = 'DTH'
					AND sum_insured_amt < 50001 * power(1.05, year(C.CENSUS_DATE) - year(risk_start_date) + CASE WHEN month(C.CENSUS_DATE) > 6 THEN 1 ELSE 0 END + CASE WHEN month(risk_start_date) > 6 THEN -1 ELSE 0 END)
					THEN 'MYSUPER'
				WHEN product_code = 'FL' AND  smoker_status_code = 'H' THEN 'INSTANT_COVER'
				WHEN RISK_MODULE_CODE in ('PRTEMPFLX','PRTEMPESS') Then 'EMPLOYER'
				ELSE 'PERSONAL' 
			END 
			,PROJECTION_GROUP = NULL
			,MP = Case PRODUCT_CODE
				WHEN 'FL' Then 
					Case PRODUCT_OPT_GROUP_DESC 
						WHEN 'TSC' Then CASE 
							When source_of_busn_code IN ('CSU','CGU','SGR') Then 'PDISSD' 
							Else 'PDISST' 
						End
						Else Case When source_of_busn_code IN ('CSU','CGU','SGR') Then 'FSNP2D' Else 'FSNP2F' End
					End
				When 'FLL' Then
					Case PRODUCT_OPT_GROUP_DESC
						When 'TSC' Then 
							Case When RISK_MODULE_CODE in ('PRTEMPFLX','PRTEMPESS') Then 'PDISSE' Else 'PDISSP' End
						Else Case [RISK_MODULE_CODE]
							When 'PRTFLX' Then 'FSNP2A'
							When 'PRTESS' Then 'FSNP2E'
							When 'PRTEMPFLX' Then 'FSNP2S'
							When 'PRTEMPESS' Then 'FSNP2Y'
							Else 'FSNP2A'
						End
					End
				End
			,DTH_SUM_ASSD = Case product_opt_group_desc when 'DTH' Then SUM_INSURED_AMT Else 0 End
			,TPD_SUM_ASSD = Case product_opt_group_desc when 'TPD' Then SUM_INSURED_AMT Else 0 End
			,CC_SUM_ASSD = 0
			,ANN_PHI_BEN = Case product_opt_group_desc when 'TSC' Then 12 * SUM_INSURED_AMT Else 0 End
			,PROPHET_PREM = ANNUAL_PREM
			 ,getdate()
			 ,NULL
			 ,CURRENT_USER
			 ,NULL
			 ,@ProcessLogID
		FROM #TEMP_U2_BENEFIT As C ,#LOAD_PARAMS P

		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT

			Print 'Loaded INFORCE_TEMP_U2 Table ' + convert(varchar(50), @InsertRowCount)

			--Update Missing CONTRACT_START_DATE from the Earliest RISK_START_DATE 
		Update T SET
			CONTRACT_START_DATE = UPD.EARLIEST_RISK_START
		From INFORCE_TEMP_U2 As T JOIN
			(Select 
				CONTRACT_RISK_KEY
				,EARLIEST_RISK_START = min(RISK_START_DATE) over (Partition by CONTRACT_KEY)
			 From INFORCE_TEMP_U2) As UPD
			 ON T.CONTRACT_RISK_KEY = UPD.CONTRACT_RISK_KEY 
		WHERE CONTRACT_START_DATE is NULL

		 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Set Missing Contract Start to Earliest Risk Start', @RECS=@@ROWCOUNT

		Print 'Set Missing Contract Start to Earliest Risk Start ' + convert(varchar(50),@UpdateRowCount)

		--Add in some more fields

		--LINKED BENEFIT CODE
		Update T Set
			LINKED_BENEFIT_CODE = Case 
				When Product_opt_group_desc = 'DTH' and UPD.TPD>0 Then 'T'
				When Product_opt_group_desc = 'TPD' and UPD.DTH>0 Then 'D'
				Else 'SA'
				End
		FROM
			INFORCE_TEMP_U2 as T JOIN (
			Select
				contract_key
				,sum(case PRODUCT_OPT_GROUP_DESC when 'DTH' Then SUM_INSURED_AMT Else 0 End) As DTH
				,sum(case PRODUCT_OPT_GROUP_DESC when 'TPD' Then SUM_INSURED_AMT Else 0 End) As TPD
			FROM INFORCE_TEMP_U2
			WHERE PRODUCT_OPT_GROUP_DESC in ('DTH','TPD')
			GROUP BY contract_key
			) As UPD
			ON T.contract_key = upd.contract_key
		WHERE
			T.PRODUCT_OPT_GROUP_DESC in ('DTH','TPD')
				
			 SET @UpdateRowCount =  @UpdateRowCount + @@ROWCOUNT
			 Print 'LINKED BENEFIT CODE ' + convert(varchar(50),@UpdateRowCount)


		--PROJECTION_GROUP
		Update INFORCE_TEMP_U2 Set 
			PROJECTION_GROUP = Case When PRODUCT_OPT_GROUP_DESC = 'TSC' Then 'AMPL_IP_???' 
				Else Case WHEN UNDERWRITING_CATEGORY in ('DELINKS','MYSUPER','INSTANT_COVER','EMPLOYER') Then 'AMPL_LS_NUW_???' Else 'AMPL_LS_UW_???' End
				End
		FROM INFORCE_TEMP_U2

		 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		 Print 'PROJECTION_GROUP ' + convert(varchar(50),@UpdateRowCount)

		--Num Tranches (lots of missing tranches on U2!)
		Update T Set 
			NUM_TRANCHES = tranche.NUM_TRANCHES
		FROM INFORCE_TEMP_U2 As  T JOIN STG.Stg_U2_TRANCHE As tranche on T.contract_risk_key = tranche.contract_risk_key

		 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Num Tranches ' + convert(varchar(50),@UpdateRowCount)

		--Insert Last CPI Increase 
		--Update INFORCE_TEMP_U2 SET CPI_INCR = NULL
		Select * from #LOAD_PARAMS
		Update T Set 
			CPI_INCR = CPI.CPI_INCR
		FROM INFORCE_TEMP_U2 As T 
			JOIN  STG.Stg_U2_Cpi As CPI On T.contract_risk_key = CPI.contract_risk_key 
			JOIN #LOAD_PARAMS as P on CPI.CPI_DATE = P.LAST_CPI

			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			Print 'Update INFORCE_TEMP_U2 SET CPI_INCR = NULL ' + convert(varchar(50),@UpdateRowCount)
	
		--Update the Dial Down Discount for Premium
		Update T Set
			DIAL_DOWN_PREM_PCNT = UPD.DD_DISCOUNT
		FROM
			(Select 
				DD.contract_risk_key
				,DD_DISCOUNT = 100 * (1-sum(DD.SUM_INSURED_AMT/B.SUM_INSURED_AMT * (1.-DD.PREM_MODIFIER)))
			from STG.Stg_U2_Disc As DD
				JOIN STG.Stg_U2_Benefit As B on DD.contract_risk_key = B.contract_risk_key
			group by DD.CONTRACT_RISK_KEY) As UPD
			JOIN INFORCE_TEMP_U2 As T on T.contract_risk_key = UPD.contract_risk_key 

			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Populate Dial Down Discounts', @RECS=@@ROWCOUNT


			Print 'Populate Dial Down Discounts ' + convert(varchar(50),@UpdateRowCount)


		--Update the ACODE for cases where the PCODE matches the Lookup Table PCODES
		EXEC usp_Assign_PCODE 'U2','TEMP'
			--Print '--usp_Assign_PCODE '

	Commit TRAN INFORCE_TEMP_U2_Loading

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN INFORCE_TEMP_U2_Loading;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

BEGIN TRY

	BEGIN TRAN LapseUpdateToInforceTempU2


		--Update the Record of Lapses
		--Delete from Lapse Staging any policies that are still present in the INFORCE as Policies - they can't have lapsed
		Delete from STG.Stg_U2_Off where CONTRACT_KEY in (Select Distinct contract_key from INFORCE_TEMP_U2)
		--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Delete Unlapsed from Lapse Staging', @RECS=@@ROWCOUNT

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete Unlapsed from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Delete from Lapse Staging any policies that are not present in the previous month
		Delete From STG.Stg_U2_Off
		where CONTRACT_KEY Not in (Select Distinct contract_key from INFORCE As I,#LOAD_PARAMS As P where I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE='U2')
		--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Delete Excluded from Lapse Staging', @RECS=@@ROWCOUNT
		--Select count(*) from STG.Stg_U2_Off

		SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT

		Print 'Delete Excluded from Lapse Staging ' + convert(varchar(50),@DeleteRowCount)

		--Insert the Lapsed Policies into the Lapse Table 
		--truncate table LAPSED_TEMP
		delete from LAPSED_TEMP where PRODUCT_SYSTEM_CODE='U2'

		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
			Select
				I.CENSUS_DATE
				,I.CONTRACT_KEY
				,I.CONTRACT_RISK_KEY
				,I.PRODUCT_SYSTEM_CODE
				/* --Useful for Testing 
				,L.PREM_EFTV_DATE
				,I.PREM_FREQ
				,Case 
					When I.PREM_FREQ=1 Then DateAdd(Year,1,PREM_EFTV_DATE)
					When I.PREM_FREQ=2 Then DateAdd(Month,6,PREM_EFTV_DATE)
					When I.PREM_FREQ=4 Then DateAdd(Month,3,PREM_EFTV_DATE)
					Else DateAdd(Month,1,PREM_EFTV_DATE) 
				End As DATE_NEXT_PREM_DUE
				,L.CONTRACT_KEY
				*/
				,MONTHS_WRITE_OFF = 0 --Not avialable on U2 and not used anyway
				,I.Reins_Life_Identifier

			FROM (INFORCE As I LEFT JOIN INFORCE_TEMP_U2 As T ON I.CONTRACT_RISK_KEY = T.CONTRACT_RISK_KEY) LEFT JOIN STG.Stg_U2_Off As L on I.CONTRACT_KEY = L.CONTRACT_KEY
				,#LOAD_PARAMS As P
			WHERE T.CONTRACT_RISK_KEY is NULL
				and I.CENSUS_DATE = P.LAST_MONTH
				and I.PRODUCT_SYSTEM_CODE = 'U2'

			SET @InsertRowCount = @InsertRowCount +  @@ROWCOUNT
			Print 'Insert the Lapsed Policies into the Lapse Table ' + convert(varchar(50),@InsertRowCount)

		--Add lapsed benefits where the contract is not in the LAPSED list
		insert into LAPSED_TEMP(CENSUS_DATE, CONTRACT_KEY, CONTRACT_RISK_KEY, PRODUCT_SYSTEM_CODE, MONTHS_WRITE_OFF,Reins_Life_Identifier)
		Select
			I.CENSUS_DATE
			,I.CONTRACT_KEY
			,I.CONTRACT_RISK_KEY
			,I.PRODUCT_SYSTEM_CODE
			,MONTHS_WRITE_OFF = 0
			,I.Reins_Life_Identifier
		From INFORCE As I, #LOAD_PARAMS as P
		where
			I.CENSUS_DATE = P.LAST_MONTH and I.PRODUCT_SYSTEM_CODE = 'U2' --Inforce records from Last Month
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From INFORCE_TEMP_U2) --List of Current Records (not Lapsed)
			and I.CONTRACT_RISK_KEY not in (Select Distinct CONTRACT_RISK_KEY From LAPSED_TEMP LI where LI. PRODUCT_SYSTEM_CODE='U2') --List of Lapsed Records Already Included

			SET @InsertRowCount = @InsertRowCount + @@Rowcount
			Print 'Add lapsed benefits where the contract is not in the LAPSED list '  + convert(varchar(50),@InsertRowCount)


		--Update the AMOUNTS in LAPSE_TEMP
		Update L Set
			QS_AMT_LAPSE_RECOVERED = (Select sum(QS_AMT_REINP_CURR + QS_AMT_REINP_BCKD - QS_AMT_OC_CURR - QS_AMT_OC_BCKD - QS_AMT_OCX_CURR - QS_AMT_OCX_BCKD) 
				From INFORCE As I 
				Where I.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY
					and I.CENSUS_DATE >= dbo.DateSerial(Year(P.CENSUS_DATE),Month(P.CENSUS_DATE) - L.MONTHS_WRITE_OFF + 1, 0))
		From
			LAPSED_TEMP As L, #LOAD_PARAMS As P
		Where MONTHS_WRITE_OFF > 0
		and L.PRODUCT_SYSTEM_CODE='U2'

		SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		Print 'Update the AMOUNTS in LAPSE_TEMP ' + convert(varchar(50),@UpdateRowCount)

		--Update the Lapsed table
		Delete from L From LAPSED As L, #LOAD_PARAMS as P  where L.CENSUS_DATE=P.LAST_MONTH and L.PRODUCT_SYSTEM_CODE='U2'
		Insert into LAPSED(CENSUS_DATE, LAPSE_DATE, CONTRACT_KEY,CONTRACT_RISK_KEY,PRODUCT_SYSTEM_CODE,MONTHS_WRITE_OFF,QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,PROCESS_LOG_ID,CREATED_BY,CREATED_DATE)
			Select L.CENSUS_DATE, P.CENSUS_DATE, L.CONTRACT_KEY, L.CONTRACT_RISK_KEY, L.PRODUCT_SYSTEM_CODE, L.MONTHS_WRITE_OFF, L.QS_AMT_LAPSE_RECOVERED,Reins_Life_Identifier,@ProcessLogID,Current_User,Getdate()
				From LAPSED_TEMP As L, #LOAD_PARAMS As P
				where L.PRODUCT_SYSTEM_CODE='U2'
				SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
		--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Add to Lapse Listing', @RECS=@@ROWCOUNT
		Print 'Add to Lapse Listing ' + convert(varchar(50),@UpdateRowCount)

	Commit tran LapseUpdateToInforceTempU2

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN LapseUpdateToInforceTempU2;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


	BEGIN TRY

	BEGIN TRAN ConversionUpdateToInforceTempU2

			--Look for Conversions from the LAPSED Table and update the CONVERTED Table; Delete from Converted_Temp for U2 Pas
			
			--DELETE FROM  CONVERTED_TEMP WHERE Pas='U2'									
			DECLARE @CONV_RECS int
			EXEC @CONV_RECS = usp_Find_Conversions @CENSUS_DATE,'U2',  @ProcessLogID
 
			 --Print ' Look for conversions'

			 --Delete any existing values in the CONVERTED FILE
			Delete from C From CONVERTED As C, #LOAD_PARAMS As P WHERE C.PRODUCT_SYSTEM_CODE = 'U2' and C.CENSUS_DATE = P.CENSUS_DATE

			SET @DeleteRowCount = @DeleteRowCount + @@Rowcount

			Print 'Delete any existing values in the CONVERTED FILE ' + convert(varchar(50),@DeleteRowCount)

			--Replace with the New Values
			Insert into CONVERTED(PRODUCT_SYSTEM_CODE,CENSUS_DATE,PARTY_KEY,PRODUCT_OPT_GROUP_DESC,NEW_CONTRACT_KEY,NEW_CONTRACT_RISK_KEY
				,NEW_SUM_INSURED_AMT,OFF_CENSUS_DATE,OFF_CONTRACT_KEY,OFF_CONTRACT_RISK_KEY,OFF_SUM_INSURED_AMT,CONVERSION_TYPE,[Created_Date_Time],[Process_Log_ID],[Created_BY])
			Select
				'U2'
				,CENSUS_DATE
				,PARTY_KEY
				,PRODUCT_OPT_GROUP_DESC
				,NEW_CONTRACT_KEY
				,NEW_CONTRACT_RISK_KEY
				,NEW_SUM_INSURED_AMT
				,OFF_CENSUS_DATE
				,OFF_CONTRACT_KEY
				,OFF_CONTRACT_RISK_KEY
				,OFF_SUM_INSURED_AMT
				,CONVERSION_TYPE
				,getdate()
				,@ProcessLogID
				,CURRENT_USER
			FROM CONVERTED_TEMP
			WHERE PAS='U2'																--Adding Where Clause filter for specific Pas
			--Select Top 100 * FROM CONVERTED_TEMP

			SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
			--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Identify Conversions', @RECS=@CONV_RECS

	 Print 'Identify Conversions ' + convert(varchar(50),@InsertRowCount)

	COMMIT TRAN ConversionUpdateToInforceTempU2

	SELECT @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	--ROLLBACK TRAN INFORCE_TEMP_U2_Loading;
	--ROLLBACK TRAN LapseUpdateToInforceTempU2;
	ROLLBACK TRAN ConversionUpdateToInforceTempU2;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;
	
END CATCH

------------------------------------------------------------------------------------------------------------
----Calculate the Quota Share information
------------------------------------------------------------------------------------------------------------
--DECLARE @QS_RECS int = 0
--EXEC @QS_RECS = usp_Calc_QS @CENSUS,'U2'
----Print @QS_RECS
--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='QS Calculations', @RECS=@QS_RECS
------------------------------------------------------------------------------------------------------------
--	--Print '--Calculate the Quota Share information'

-------------------------------------------------------------------------------------------------------------
----Calculate the Surplus Information
-------------------------------------------------------------------------------------------------------------
--DECLARE @SS_RECS int = 0
--EXEC @SS_RECS = usp_Calc_SS  @CENSUS,'U2'
----Print @SS_RECS
--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='SS Calculations', @RECS=@SS_RECS
--------------------------------------------------------------------------------------------------------------

	--Print '---Calculate the Surplus Information'

----Identify Reinstatements
----Create #Table to contain the lapse and reinstatement information
--IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
--CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
--Insert into #REIN
--Select
--	T.CONTRACT_RISK_KEY
--	,T.CENSUS_DATE
--	,L.LAPSE_DATE
--	,L.QS_AMT_LAPSE_RECOVERED
--FROM INFORCE_TEMP_U2 As T JOIN LAPSED As L 
--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

----Update Both Lapse and Inforce Temp Tables
--BEGIN TRANSACTION;
--Update T Set
--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
--FROM INFORCE_TEMP_U2 As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 

--Update L Set
--	[QS_AMT_LAPSE_RECOVERED] = R.AMT
--	,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
--FROM
--	LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE

--COMMIT;
--DECLARE @QS_REIN int = (Select count(*) From #REIN)
----Print @QS_REIN
--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Process Reinstatements', @RECS=@QS_REIN

----Update Lapses for Conversions (Similar to Reinstatements)
--BEGIN TRANSACTION;
--Update T SET
--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
--from CONVERTED As C JOIN INFORCE_TEMP_U2 as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

--Update L Set
--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
--from CONVERTED As C JOIN INFORCE_TEMP_U2 as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
--COMMIT;

--DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
----Print @QS_CONV
--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Process Conversions', @RECS=@QS_CONV

------Update the INFORCE Table
------DECLARE @CENSUS Date = '28-Feb-2017'
----Delete from INFORCE where PRODUCT_SYSTEM_CODE='U2' and CENSUS_DATE=@CENSUS
----Insert into INFORCE Select * FROM INFORCE_TEMP_U2
----EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Insert New Records', @RECS=@@ROWCOUNT 


----Publish into the INFORCE Table by calling Stored Proc
--DECLARE @Publish_recs int = 0
-- EXEC @Publish_recs = usp_publish_U2 'U2', @CENSUS

--EXEC usp_LOG @STORED_PROC='usp_Load_U2', @CENSUS_DATE=@CENSUS, @STEP='Insert New Records', @RECS=@Publish_recs 


END

GO
/****** Object:  StoredProcedure [dbo].[usp_Load_U2_Pas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		KHNNR2
-- Create date: May 2019
-- Description:	<Loading PAS U2 data into IDS_Reinsurance DB from staging table>
-- =============================================

 CREATE PROCEDURE [dbo].[usp_Load_U2_Pas]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE DateTime

AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Declare @Import_Log_ID int = (select distinct top 1 Import_Log_ID from [Stg].[Stg_U2_PAS])
	Declare @Created_Date datetime = getdate()
	Declare @Created_by varchar(50) = current_user 

	Begin Try	
	
	
			DELETE FROM [dbo].[PAS_U2] WHERE [CENSUS_DATE] = @EFTV_DATE
			Set @DeleteRowCount = @@ROWCOUNT 

			-- Load data from staging table to target
			INSERT INTO [dbo].[PAS_U2]([CENSUS_DATE],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],[CREATED_DATE],	[CREATED_BY],[PROCESS_LOG_ID])
				SELECT   @EFTV_DATE
				        ,LEFT([EDWETP], 1) + LTRIM(STR([EDWEID])) AS CONTRACT_ID
						,NULL AS CLIENT_ID
						,[INSTP] AS BENEFIT_CODE
						,12 * ([INSPRM]) AS ANNUAL_PREM
						,[INSSVL] As ANNUAL_BEN
						,@Created_Date
						,@Created_by
						,@Import_Log_ID

				FROM      [Stg].[Stg_U2_PAS] a
				WHERE     [MBRINC] = 'C'
				AND       [PRDID] = 'FL'
				AND       NOT([INSSVL] = 0 AND [INSPRM] = 0)
				AND       [INSTP] NOT IN ('DBE', 'DBN', 'DBX', 'SCN', 'SCX', 'TPE', 'TPN', 'TPX', 'TSN', 'TSX')	

				Set @InsertRowCount = @@ROWCOUNT

			Select   @InsertRowCount InsertRowCount, 
					 @UpdateRowCount UpdateRowCount, 
					 @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Load_WMS_Banner_DeathOnly]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_WMS_Banner_DeathOnly]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @BatchLogID Int = 0
	--DECLARE @MasterBatchLogID Int = 0
 --
 BEGIN TRY;
 --SELECT @BatchLogID = BatchLogID FROM [CTL].[ProcessLog] WHERE ProcessLogID = @ProcessLogID
 --SELECT @MasterBatchLogID = MasterBatchLogID FROM [CTL].[BatchLog] WHERE BatchLogID = @BatchLogID
 BEGIN TRAN T1;
 delete from dbo.WMS_Banner_DeathOnly
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
--
 SET @DeleteRowCount = @DeleteRowCount + @@ROWCOUNT;

 insert into dbo.WMS_Banner_DeathOnly
(	   [Month_Eftv_Date]
      ,[Rep_Run_Date]
      ,[Document_TS]
      ,Policy_Number
      ,[WMS_Document_Type]
      ,[Insured_Member]
      ,[Agent_ID]
      ,[Adviser]
      ,[True_Registered_Date]
      ,[New_Claims_For_The_Week]
      ,[Duration_Open]
      ,[Greater_Than_One_Year]
      ,[DOD_Incident_To_Banner_Open]
      ,[Month_Open]
      ,[Year_Banner_Opened]
      ,[YTD_Filter_Opened]
      ,[Current_Year]
      ,[Effective_Date]
      ,[Status_Date]
      ,[Status]
      ,[Dept_Code]
      ,[Team_Code_Mod]
      ,[WMS_Initials]
      ,[Name]
      ,[AXA_Staff_Member]
      ,[Updated_By_Initials]
      ,[Created_By_Initials]
      ,[Banr_Type]
      ,[Claim_Type]
      ,[Claim_Cause]
      ,[Occupation]
      ,[Non_Disclosure]
      ,[Reinsurance]
      ,[Commence_Date]
      ,[DOD_Incident]
      ,[Conc_Clm]
      ,[Conc_Clm_Type]
      ,[No_Of_Con_Clms]
      ,[Ben_Period]
      ,[Sex]
      ,[Level]
      ,[Prem_Waiver]
      ,[Product]
      ,[Reopen]
      ,[Reregistered]
      ,[Fund_Name]
      ,[Swann]
      ,[Close_Reason]
      ,[Error_Trap]
      ,[System]
      ,[Benefit_Amount]
      ,[Accumulation_Amount]
      ,[Final_Payment]
      ,[Worksite]
      ,[Fund_Interm]
      ,[Original_Banner_Product]
      ,[Declined]
      ,[Banner_Change]
      ,[Benefit_Period_Mod]
      ,[Prod_Type_and_Team_Mod]
      ,[Claim_Type_Code_Mod]
      ,[Claim_Type_Mod]
      ,[Fund_Intermediary_Mod]
      ,[Claim_Grouping_Mnth_Pack]
      ,[Under_50k]
      ,[Top_20]
      ,[whoicd]
      ,[Vol]
      ,[Grp_Ins_Claim_Type]
      ,[Name_Init]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Import_Log_ID]
      ,[Import_File_Name]
      ,[Process_Log_ID]
      ,[Exclude_Flag]
      ,[Exclude_Reason])
SELECT  convert(datetime,@ProcessingMonthYear) [Month_Eftv_Date],    
      [Rep_Run_Date]
      ,swd.[Document_TS]
      ,swd.[Policy]
      ,[WMS_Document_Type]
      ,[Insured_Member]
      ,[Agent_ID]
      ,[Adviser]
      ,[True_Registered_Date]
      ,[New_Claims_For_The_Week]
      ,[Duration_Open]
      ,[Greater_Than_One_Year]
      ,[DOD_Incident_To_Banner_Open]
      ,[Month_Open]
      ,[Year_Banner_Opened]
      ,[YTD_Filter_Opened]
      ,[Current_Year]
      ,[Effective_Date]
      ,[Status_Date]
     ,case when [Status] = 'AC' then 'Active'
	        when [Status] = 'PE' then 'Pending'
			when [Status] = 'CL' then 'Closed'
			else [Status] end as [Status]
      ,[Dept_Code]
      ,[Team_Code_Mod]
      ,[WMS_Initials]
      ,[Name]
      ,[AXA_Staff_Member]
      ,[Updated_By_Initials]
      ,[Created_By_Initials]
      ,[Banr_Type]
      ,[Claim_Type]
      ,ISNULL((select WMS_Desc from [dbo].[WMS_Field_Mapping]
	    where WMS_Field = 'Claim_Cause' and WMS_Code = swd.[Claim_Cause]),swd.[Claim_Cause]) as [Claim_Cause]
      ,ISNULL((select WMS_Desc from [dbo].[WMS_Field_Mapping]
	    where WMS_Field = 'Occupation' and WMS_Code = swd.[Occupation]),swd.[Occupation]) as [Occupation]
      ,[Non_Disclosure]
      ,[Reinsurance]
      ,[Commence_Date]
      ,[DOD_Incident]
      ,[Conc_Clm]
      ,[Conc_Clm_Type]
      ,[No_Of_Con_Clms]
      ,[Ben_Period]
      ,[Sex]
      ,[Level]
      ,[Prem_Waiver]
      ,[Product]
      ,[Reopen]
      ,[Reregistered]
      ,[Fund_Name]
      ,[Swann]
      ,ISNULL((select WMS_Desc from [dbo].[WMS_Field_Mapping]
	    where WMS_Field = 'Close_Reason' and WMS_Code = swd.[Close_Reason]),swd.[Close_Reason]) as [Close_Reason]
      ,[Error_Trap]
      ,[System]
      ,[Benefit_Amount]
      ,[Accumulation_Amount]
      ,[Final_Payment]
      ,[Worksite]
      ,[Fund_Interm]
      ,[Original_Banner_Product]
      ,[Declined]
      ,[Banner_Change]
      ,[Benefit_Period_Mod]
      ,[Prod_Type_and_Team_Mod]
      ,ISNULL((select WMS_Desc from [dbo].[WMS_Field_Mapping]
	    where WMS_Field = 'Claim_Type' and WMS_Code = swd.[Claim_Type_Code_Mod]),swd.[Claim_Type_Code_Mod]) as [Claim_Type_Code_Mod]
      ,[Claim_Type_Mod]
      ,[Fund_Intermediary_Mod]
      ,[Claim_Grouping_Mnth_Pack]
      ,[Under_50k]
      ,[Top_20]
      ,[whoicd]
      ,[Vol]
      ,[Grp_Ins_Claim_Type]
      ,[Name_Init]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,[Import_Log_ID]
	  ,[Import_File_Name]
	  ,@ProcessLogID [Process_Log_ID]
      ,NULL
	  ,NULL
  FROM [STG].[Stg_WMS_Banner_DeathOnly] swd
  where 1=1
   --AND Import_Log_ID IN (SELECT MAX([CTL].[ImportLog].[ImportLogID]) 
	  --                           from  [CTL].[ImportLog],
			--						   [CTL].[PackageLog],
			--						   [CTL].[BatchLog],
			--						   [CTL].[PackageConfig],
			--							[CTL].[FileConfig],
			--							[CTL].[FileLog]
			--				   where [CTL].[ImportLog].PackageLogID = [CTL].[PackageLog].PackageLogID
			--					 and [CTL].[PackageConfig].PackageName = [CTL].[PackageLog].PackageName
			--					 and [CTL].[PackageConfig].TaskName = 'ProcessingMonthYear'
			--					 and [CTL].[PackageLog].BatchLogID = [CTL].[BatchLog].BatchLogID
			--					 and [CTL].[BatchLog].MasterBatchLogID = @MasterBatchLogID
			--					and ( REPLACE([CTL].[FileConfig].[FileName],'yyyy-mm-dd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyy-MM-dd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymmdd',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue)+1,'yyyyMMdd','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   OR REPLACE([CTL].[FileConfig].[FileName],'yyyymm',format(Convert(datetime,[CTL].[PackageConfig].Taskvalue),'yyyyMM','en-AU') ) = [CTL].[FileLog].[FileName]
			--					   )
			--					 --
			--					 and [CTL].[PackageConfig].TaskValue = @ProcessingMonthYear
	  --                           and [CTL].[ImportLog].[TableName] = 'Stg.Stg_WMS_Banner_DeathOnly')
 ;
  --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
 -- 
    --14th June,2018
	-- Insert new claim numbers into [dbo].[WMS_Claim_Numbers] on [IDS_CLAIMS_DAILY]
	;WITH wms_claims
	AS
	(
	  SELECT Banner.[Document_TS],
			 Banner.[Policy_Number]
	  FROM dbo.WMS_Banner_DeathOnly Banner
	  WHERE 1=1
	  AND Banner.month_Eftv_date = convert(datetime,@ProcessingMonthYear)
	  GROUP BY Banner.[Document_TS],
			   Banner.[Policy_Number]
	)
	INSERT INTO [IDS_CLAIMS_DAILY].[dbo].[WMS_Claim_Numbers]
	(
	 [Claim_Number]
	,[Document_TS]
	,[Policy_Number]
	,[Created_Date_Time]
	,[Created_By]
	,[Process_Log_ID]
	)
	SELECT 'WMS' + right('00000000'+cast(NEXT VALUE FOR [IDS_CLAIMS_DAILY].[dbo].[WMS_Banner_Seq] as varchar),8) [Claim_Number],
		Banner.[Document_TS],
		Banner.[Policy_Number],
		GETDATE() [Created_Date_Time],
		SYSTEM_USER [Created_By],
		@ProcessLogId [Process_Log_ID]
	FROM wms_claims Banner
	LEFT OUTER JOIN [IDS_CLAIMS_DAILY].dbo.WMS_Claim_Numbers CNM
	ON Banner.[Document_TS] = CNM.[Document_TS]
	AND Banner.[Policy_Number] = CNM.[Policy_Number]
	WHERE 1=1
	AND CNM.Claim_Number IS NULL; 

	SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	-- Update claim number from the reference table on [IDS_CLAIMS_DAILY]
	UPDATE dbo.WMS_Banner_DeathOnly
	SET dbo.WMS_Banner_DeathOnly.Claim_Number = src.Claim_Number
	FROM dbo.WMS_Banner_DeathOnly trg,[IDS_CLAIMS_DAILY].dbo.WMS_Claim_Numbers src
	where trg.month_Eftv_date = convert(datetime,@ProcessingMonthYear)
	and trg.[Document_TS] = src.[Document_TS]
	and trg.[Policy_Number] = src.[Policy_Number]

	SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
	--
	--
	exec [dbo].[usp_Remove_Garbage_Characters] @ProcessLogID,'dbo','WMS_Banner_DeathOnly'
	COMMIT TRAN T1;
	--
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[WMS_Banner_DeathOnly]
	--where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--and updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Load_WMS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Load_WMS_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
BEGIN TRY;
BEGIN TRAN T1;
delete from [dbo].[WMS_Claim_Listing]
where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
SET @DeleteRowCount = @@ROWCOUNT
insert into [dbo].[WMS_Claim_Listing]
(      [Month_Eftv_Date]
      ,[WMS_Banner_DeathOnly_Id]
      ,[Rep_Run_Date]
      ,[Claim_Number]
      ,[Claim_Status]
	  ,[Claim_Type]
	  ,[Claim_Type_Code_Mod]
      ,[Claim_Type_Mod]
      ,[Grp_Ins_Claim_Type]
      ,[Surname]
      ,[First_Name]
      ,[Second_Name]
      ,[Sex]
      ,[Occupation]
	  ,[Dept_Code]
      ,[True_Registered_Date]
      ,[Reregistered]
      ,[Effective_Date]
      ,[Commence_Date]
      ,[DOD_Incident]
      ,[WHO_ICD10_Code]
      ,[Claim_Cause]
      ,[Claim_Finalised_Date]
      ,[Claim_Finalised_Reason]
      ,[Reopen]
      ,[Conc_Clm]
      ,[Conc_Clm_Type]
      ,[No_Of_Con_Clms]
      ,[Document_TS]
      ,Policy_Number
      ,[WMS_Document_Type]
      ,[Fund_Name]
      ,[Benefit_Period_Mod]
      ,[Benefit_Amount]
      ,[Accumulation_Amount]
      ,[Final_Payment]
      ,[Created_Date_Time]
      ,[Updated_Date_Time]
      ,[Updated_By]
      ,[Process_Log_ID])
SELECT [Month_Eftv_Date]
      ,[WMS_Banner_DeathOnly_Id]
      ,[Rep_Run_Date]
      ,[Claim_Number]
      ,Status [Claim_Status]
      ,[Claim_Type]
	  ,[Claim_Type_Code_Mod]
      ,[Claim_Type_Mod]
      ,[Grp_Ins_Claim_Type]
      ,Insured_Member [Surname]
      ,NULL [First_Name] -- Originally Left(replace(Name_Init,Insured_Member+',',''),1) , Ignore the mapping as there are many patterns 29th Jan,2018
      ,NULL [Second_Name] -- Right(replace(Name_Init,Insured_Member+',',''),1)  , Ignore the mapping as there are many patterns 29th Jan,2018
      ,CASE Sex WHEN 'F' Then 'Female' When 'M' then 'Male' END [Sex]
      ,[Occupation]
	  ,[Dept_Code]
      ,[True_Registered_Date]
      ,[Reregistered]
      ,[Effective_Date]
      ,[Commence_Date]
      ,[DOD_Incident]
      ,WHOICD [WHO_ICD10_Code]
      ,[Claim_Cause]
      ,CASE WHEN Status = 'Closed' THEN Status_Date END Claim_Finalised_Date
	  ,CASE WHEN Status = 'Closed' and error_trap = 'NoError' THEN Close_Reason END Claim_Finalised_Reason
      ,[Reopen]
      ,[Conc_Clm]
      ,[Conc_Clm_Type]
      ,[No_Of_Con_Clms]
      ,[Document_TS]
      ,Policy_Number
      ,[WMS_Document_Type]
      ,[Fund_Name]
      ,[Benefit_Period_Mod]
      ,[Benefit_Amount]
      ,[Accumulation_Amount]
      ,[Final_Payment]
      ,GETDATE()
	  ,NULL
	  ,NULL
	  ,@ProcessLogID
  FROM [dbo].[WMS_Banner_DeathOnly] trg
  where 1=1
  and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   and exclude_flag = 'N';
    --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH

SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Merge_Reins_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Change date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================

CREATE PROCEDURE [dbo].[usp_Merge_Reins_Claim_Listing]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--
	DECLARE @AbleListingCount Int = 0
	DECLARE @WMSListingCount Int = 0
	DECLARE @FigtreeListingCount Int = 0
	DECLARE @CMSListingCount int =0
 --
 BEGIN TRY;
 --
 SELECT @AbleListingCount = count(*)
 from [dbo].[Able_Claim_Listing] nolock
   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   --
    SELECT @FigtreeListingCount = count(*)
 from [dbo].[Figtree_Claim_Listing] nolock
   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
   --
    SELECT @WMSListingCount = count(*)
 from [dbo].[WMS_Claim_Listing] nolock
   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  --
      SELECT @CMSListingCount = count(*)
 from [dbo].[CMS_Claim_Listing] nolock
   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  --

begin tran t1;
IF (@AbleListingCount > 0 AND @FigtreeListingCount > 0 AND @WMSListingCount > 0 and @CMSListingCount > 0)
BEGIN
		;with w_target
		as (
		select 'Able' Claim_Source, 
				'AB'+CAST([Claim_Benefit_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				Policy_Number,
				EDW_Contract_Id,		
				Product_System_Code EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				Claim_Event_Type,
				 Benefit_Period,
				 Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[First_Contact_Date] AS Claim_Notify_Date,
				Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				Surname Surname,
				[First_Name] First_Name,
				[Second_Name] Second_Name,
				 [Sex],
				[Date_Of_Birth] Date_of_Birth,
				[Date_of_Death],
				Primary_Cause Cause,
				 Occupation,
				Claim_Type ,		 		
				Escalation_Ind,
				[EDW_Country_Code],
				 [EDW_Sum_Insured_On_ID] [Orig_Modal_Sum_Insured] --Originally Sum_Insured , changed to EDW Sum Insured 25th Jan,2018
				,[EDW_Sum_Insured_Freq_Code] [Orig_Modal]
				,[EDW_Sum_Insured_On_FD] [Curr_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Curr_Modal],
				CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE [EDW_Sum_Insured_On_ID] END AS [Sum_Insured_on_Incurred_Date]  --Originally Sum_Insured , changed to EDW Sum Insured 25th Jan,2018
				 ,CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_On_FD] END AS [Sum_Insured_on_Reporting_Date]		     
				, Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  --
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]

			  -- New columns added based on base level listing table for Surplus per life change
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[Able_Claim_Listing] nolock
		   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  UNION ALL
		  --
		  select 'WMS' Claim_Source, 
				'WMS'+CAST([WMS_Banner_DeathOnly_ID] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				EDW_Policy_Number Policy_Number,
				EDW_Contract_Id,		
				EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				NULL Claim_Event_Type,
				  Benefit_Period_Mod  Benefit_Period,
				 NULL Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				CASE WHEN reregistered = 'Y' Then Effective_date Else True_Registered_Date END AS Claim_Notify_Date,
				DOD_Incident,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				EDW_Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				EDW_Surname Surname,
				[EDW_First_Name] First_Name,
				[EDW_Second_Name] Second_Name,
				 CASE [EDW_Sex] WHEN 'M' Then 'Male' WHEN 'F' Then 'Female' Else 'Unknown' END Sex,
				EDW_Date_of_Birth  Date_of_Birth,
				DOD_Incident [Date_of_Death],
				CASE WHEN RTRIM(LTRIM(who_icd10_code)) IS NOT NULL OR RTRIM(LTRIM(who_icd10_code)) <> '' THEN RTRIM(LTRIM(who_icd10_code)) +':'+claim_cause Else  claim_cause END Cause,
				 Occupation,
				Claim_Type_Code_Mod Claim_Type ,		 		
				'N' Escalation_Ind,
				EDW_Country_Code
				,EDW_Sum_Insured_On_ID [Orig_Modal_Sum_Insured] --Originally [Final_Payment], changed to EDW Sum Insured 25th Jan,2018
				,NULL [Orig_Modal]
				,[EDW_Sum_Insured_On_FD] [Curr_Modal_Sum_Insured]
				,NULL [Curr_Modal],
				EDW_Sum_Insured_On_ID AS [Sum_Insured_on_Incurred_Date]  --Originally [Final_Payment], changed to EDW Sum Insured 25th Jan,2018
				 ,[EDW_Sum_Insured_On_FD] AS [Sum_Insured_on_Reporting_Date]		     
				, NULL Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				NULL Claim_Reopen_Date,
				Reopen Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,NULL [Benefit_Type]
			  ,NULL [Benefit_Number]
			  ,NULL [Benefit_Status]
			  ,NULL [Benefit_Finalised_Date]
			  ,NULL [Benefit_Finalised_Reason]
			  ,NULL [Benefit_Reopen_Date]
			  ,NULL [Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[WMS_Claim_Listing] nolock
		   where 1=1
		  and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  UNION ALL
		  --
		  select 'FigTree' Claim_Source, 
				'FT'+CAST([FigTree_Life_Claim_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,
				EDW_Contract_Key,
				EDW_Policy_Number Policy_Number,
				EDW_Contract_Id,		
				EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				NULL Claim_Event_Type,
				 NULL Benefit_Period,
				 NULL Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[Notify_Date] AS Claim_Notify_Date,
				[Date_of_Death] Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				EDW_Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				EDW_Surname Surname,
				[EDW_First_Name] First_Name,
				[EDW_Second_Name] Second_Name,
				 CASE [EDW_Sex] WHEN 'M' Then 'Male' WHEN 'F' Then 'Female' Else 'Unknown' END Sex,
				EDW_Date_of_Birth  Date_of_Birth,
				[Date_of_Death],
				 Cause,
				 NULL Occupation,
				Claim_Type ,		 		
				'N' Escalation_Ind,
				EDW_Country_Code
				,[EDW_Sum_Insured_On_ID] [Orig_Modal_Sum_Insured] -- Originally [Sum_Insured], changed to EDW Sum Insured 25th Jan,2018
				,NULL [Orig_Modal]
				,[EDW_Sum_Insured_On_FD] [Curr_Modal_Sum_Insured]
				,NULL [Curr_Modal],
				[EDW_Sum_Insured_On_ID] AS [Sum_Insured_on_Incurred_Date]  -- Originally [Sum_Insured], changed to EDW Sum Insured 25th Jan,2018
				 ,[EDW_Sum_Insured_On_FD] AS [Sum_Insured_on_Reporting_Date]		     
				, NULL Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,NULL [Benefit_Type]
			  ,NULL [Benefit_Number]
			  ,NULL [Benefit_Status]
			  ,NULL [Benefit_Finalised_Date]
			  ,NULL [Benefit_Finalised_Reason]
			  ,NULL [Benefit_Reopen_Date]
			  ,NULL [Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[FigTree_Claim_Listing] nolock
		   where 1=1
		   and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  	  UNION ALL
		  --
		  select 'CMS' Claim_Source, 
				'CMS'+CAST([Claim_Benefit_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				Policy_Number,
				EDW_Contract_Id,		
				Product_System_Code EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				Claim_Event_Type,
				 Benefit_Period,
				 Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[First_Contact_Date] AS Claim_Notify_Date,
				Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				Surname Surname,
				[First_Name] First_Name,
				[Second_Name] Second_Name,
				 [Sex],
				[Date_Of_Birth] Date_of_Birth,
				[Date_of_Death],
				Primary_Cause Cause,
				 Occupation,
				Claim_Type ,		 		
				Escalation_Ind,
				[EDW_Country_Code],
				 [EDW_Sum_Insured_On_ID] [Orig_Modal_Sum_Insured] --Originally Sum_Insured , changed to EDW Sum Insured 25th Jan,2018
				,[EDW_Sum_Insured_Freq_Code] [Orig_Modal]
				,[EDW_Sum_Insured_On_FD] [Curr_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Curr_Modal],
				CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE [EDW_Sum_Insured_On_ID] END AS [Sum_Insured_on_Incurred_Date]  --Originally Sum_Insured , changed to EDW Sum Insured 25th Jan,2018
				 ,CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_On_FD] END AS [Sum_Insured_on_Reporting_Date]		     
				, Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  --
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]

			  -- New columns added based on base level listing table for Surplus per life change
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[CMS_Claim_Listing] nolock
		   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		)
		MERGE INTO [dbo].[Reins_Claim_Listing] as trg
		USING
		(
		select [Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,BINARY_CHECKSUM([Claim_Source]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]) DimensionCheckSum     
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
			  ,GETDATE() [Created_Date_Time]
			  ,NULL [Updated_Date_Time]
			  ,NULL [Updated_By]
			  ,@ProcessLogID [Process_Log_ID]
		from w_target
		) AS src
		ON
		(      ISNULL(trg.[Claim_Source],'ooNVLoo') = ISNULL(src.[Claim_Source],'ooNVLoo')
		   AND ISNULL(trg.[Claim_Number],'ooNVLoo') = ISNULL(src.[Claim_Number],'ooNVLoo')
			AND CASE WHEN trg.[Benefit_Number] IS NOT NULL AND src.[Benefit_Number] IS NOT NULL
					  THEN ISNULL(trg.[Benefit_Number],'ooNVLoo')
				 ELSE ISNULL(src.[Benefit_Number],'ooNVLoo')
				 END = ISNULL(src.[Benefit_Number],'ooNVLoo')
			AND ISNULL(trg.[EDW_Contract_Risk_Key],-99999) = ISNULL(src.[EDW_Contract_Risk_Key],-99999)
			AND ISNULL(trg.[Policy_Number],'ooNVLoo') = ISNULL(src.[Policy_Number],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_System_Code] ,'ooNVLoo')= ISNULL(src.[EDW_Product_System_Code],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_Code],'ooNVLoo') = ISNULL(src.[EDW_Product_Code],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_Option_Code] ,'ooNVLoo')= ISNULL(src.[EDW_Product_Option_Code],'ooNVLoo')
			 AND ISNULL(trg.[Benefit_Type],'ooNVLoo') = ISNULL(src.[Benefit_Type],'ooNVLoo') 
			-- AND ISNULL(trg.[Claim_Event_Type],'ooNVLoo') = ISNULL(src.[Claim_Event_Type],'ooNVLoo') 
			 AND CASE WHEN trg.[Benefit_Period] IS NOT NULL AND src.[Benefit_Period] IS NOT NULL
					  THEN ISNULL(trg.[Benefit_Period],'ooNVLoo')
				 ELSE ISNULL(src.[Benefit_Period],'ooNVLoo')
				 END = ISNULL(src.[Benefit_Period],'ooNVLoo') 
			  AND CASE WHEN trg.[Waiting_Period] IS NOT NULL AND src.[Waiting_Period] IS NOT NULL
					  THEN ISNULL(trg.[Waiting_Period],'ooNVLoo')
				 ELSE ISNULL(src.[Waiting_Period],'ooNVLoo')
				 END = ISNULL(src.[Waiting_Period],'ooNVLoo')  )
		WHEN NOT MATCHED BY SOURCE AND trg.row_end_date = convert(datetime,'31/DEC/3000')
		THEN 
		UPDATE
		SET
		trg.row_end_date = DATEADD(ss,-1,DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0)),
		[Updated_Date_Time] = GETDATE(),
		Updated_By = system_user

		;with w_target
		as (
		select 'Able' Claim_Source, 
				'AB'+CAST([Claim_Benefit_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				Policy_Number,
				EDW_Contract_Id,		
				Product_System_Code EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				Claim_Event_Type,
				 Benefit_Period,
				 Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[First_Contact_Date] AS Claim_Notify_Date,
				Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				Surname Surname,
				[First_Name] First_Name,
				[Second_Name] Second_Name,
				 [Sex],
				[Date_Of_Birth] Date_of_Birth,
				[Date_of_Death],
				Primary_Cause Cause,
				 Occupation,
				Claim_Type ,		 		
				Escalation_Ind,
				[EDW_Country_Code],
				 [EDW_Sum_Insured_On_ID] [Orig_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Orig_Modal]
				,[EDW_Sum_Insured_On_FD]  [Curr_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Curr_Modal],
				CASE WHEN Reins_Benefit_Type = 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE [EDW_Sum_Insured_On_ID] END AS [Sum_Insured_on_Incurred_Date]  
				 ,CASE WHEN Reins_Benefit_Type = 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_On_FD] END AS [Sum_Insured_on_Reporting_Date]	     
				, Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  --
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
  			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[Able_Claim_Listing] nolock
		   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  UNION ALL
		  --
		  select 'WMS' Claim_Source, 
				'WMS'+CAST([WMS_Banner_DeathOnly_ID] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				EDW_Policy_Number Policy_Number,
				EDW_Contract_Id,		
				EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				NULL Claim_Event_Type,
				  Benefit_Period_Mod  Benefit_Period,
				 NULL Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				CASE WHEN reregistered = 'Y' Then Effective_date Else True_Registered_Date END AS Claim_Notify_Date,
				DOD_Incident,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				EDW_Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				EDW_Surname Surname,
				[EDW_First_Name] First_Name,
				[EDW_Second_Name] Second_Name,
				 CASE [EDW_Sex] WHEN 'M' Then 'Male' WHEN 'F' Then 'Female' Else 'Unknown' END Sex,
				EDW_Date_of_Birth  Date_of_Birth,
				DOD_Incident [Date_of_Death],
				CASE WHEN RTRIM(LTRIM(who_icd10_code)) IS NOT NULL OR RTRIM(LTRIM(who_icd10_code)) <> '' THEN RTRIM(LTRIM(who_icd10_code)) +':'+claim_cause Else  claim_cause END Cause,
				 Occupation,
				Claim_Type_Mod Claim_Type ,		 		
				'N' Escalation_Ind,
				EDW_Country_Code
				,EDW_Sum_Insured_On_ID [Orig_Modal_Sum_Insured]
				,NULL [Orig_Modal]
				,[EDW_Sum_Insured_On_FD]  [Curr_Modal_Sum_Insured]
				,NULL [Curr_Modal],
				EDW_Sum_Insured_On_ID  AS [Sum_Insured_on_Incurred_Date]  
				 ,[EDW_Sum_Insured_On_FD]  AS [Sum_Insured_on_Reporting_Date]		     
				, NULL Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				NULL Claim_Reopen_Date,
				Reopen Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,NULL [Benefit_Type]
			  ,NULL [Benefit_Number]
			  ,NULL [Benefit_Status]
			  ,NULL [Benefit_Finalised_Date]
			  ,NULL [Benefit_Finalised_Reason]
			  ,NULL [Benefit_Reopen_Date]
			  ,NULL [Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[WMS_Claim_Listing] nolock
		   where 1=1
		  and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  UNION ALL
		  --
		  select 'FigTree' Claim_Source, 
				'FT'+CAST([FigTree_Life_Claim_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,
				EDW_Contract_Key,
				EDW_Policy_Number Policy_Number,
				EDW_Contract_Id,		
				EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				NULL Claim_Event_Type,
				 NULL Benefit_Period,
				 NULL Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[Notify_Date] AS Claim_Notify_Date,
				[Date_of_Death] Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				EDW_Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				EDW_Surname Surname,
				[EDW_First_Name] First_Name,
				[EDW_Second_Name] Second_Name,
				 CASE [EDW_Sex] WHEN 'M' Then 'Male' WHEN 'F' Then 'Female' Else 'Unknown' END Sex,
				EDW_Date_of_Birth  Date_of_Birth,
				[Date_of_Death],
				 Cause,
				 NULL Occupation,
				Claim_Type ,		 		
				'N' Escalation_Ind,
				EDW_Country_Code
				,[EDW_Sum_Insured_On_ID]  [Orig_Modal_Sum_Insured]
				,NULL [Orig_Modal]
				, [EDW_Sum_Insured_On_FD]  [Curr_Modal_Sum_Insured]
				,NULL [Curr_Modal],
				[EDW_Sum_Insured_On_ID]  AS [Sum_Insured_on_Incurred_Date]  
				 ,[EDW_Sum_Insured_On_FD]  AS [Sum_Insured_on_Reporting_Date]		     
				, NULL Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,NULL [Benefit_Type]
			  ,NULL [Benefit_Number]
			  ,NULL [Benefit_Status]
			  ,NULL [Benefit_Finalised_Date]
			  ,NULL [Benefit_Finalised_Reason]
			  ,NULL [Benefit_Reopen_Date]
			  ,NULL [Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[FigTree_Claim_Listing] nolock
		   where 1=1
		   and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		  UNION ALL
		  --
		  select 'CMS' Claim_Source, 
				'CMS'+CAST([Claim_Benefit_Id] AS VARCHAR) Claim_Source_Id,
				Reins_Benefit_Type, 
				Claim_Number,	
				EDW_Contract_Key,
				Policy_Number,
				EDW_Contract_Id,		
				Product_System_Code EDW_Product_System_Code,
				[EDW_Product_Key],
				[EDW_Product_Code],
				[EDW_Class_of_Business],
				[EDW_Contract_Risk_Key]
				,[EDW_Product_Option_Key]
				,EDW_Product_Option_Code,
				Claim_Event_Type,
				 Benefit_Period,
				 Waiting_Period,
				DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0) Row_Eftv_Date,
				convert(datetime,'31/DEC/3000') Row_End_Date,
				Claim_Status, 
				[First_Contact_Date] AS Claim_Notify_Date,
				Incurred_Date,
				EDW_Contract_Start_Date as Policy_Commencement_Date,		
				Risk_Commenced_Date AS Benefit_Commencement_Date,
				EDW_Party_Key,
				Surname Surname,
				[First_Name] First_Name,
				[Second_Name] Second_Name,
				 [Sex],
				[Date_Of_Birth] Date_of_Birth,
				[Date_of_Death],
				Primary_Cause Cause,
				 Occupation,
				Claim_Type ,		 		
				Escalation_Ind,
				[EDW_Country_Code],
				 [EDW_Sum_Insured_On_ID] [Orig_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Orig_Modal]
				,[EDW_Sum_Insured_On_FD]  [Curr_Modal_Sum_Insured]
				,[EDW_Sum_Insured_Freq_Code] [Curr_Modal],
				CASE WHEN Reins_Benefit_Type = 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE [EDW_Sum_Insured_On_ID] END AS [Sum_Insured_on_Incurred_Date]  
				 ,CASE WHEN Reins_Benefit_Type = 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_On_FD] END AS [Sum_Insured_on_Reporting_Date]	     
				, Ind_Value,		
				Claim_Finalised_Date,
				Claim_Finalised_Reason,
				Claim_Reopen_Date,
				Claim_Reopen_Reason
				,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  --
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
  			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		from [dbo].[CMS_Claim_Listing] nolock
		   where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
		  and [Are_Details_Inadequate] ='N'
		  --
		)
		Insert into [dbo].[Reins_Claim_Listing]
		(
		[Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,[DimensionCheckSum]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Created_Date_Time]
			  ,[Updated_Date_Time]
			  ,[Updated_By]
			  ,[Process_Log_ID]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		)
		SELECT [Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,[DimensionCheckSum]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Created_Date_Time]
			  ,[Updated_Date_Time]
			  ,[Updated_By]
			  ,[Process_Log_ID]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		FROM (
		MERGE INTO [dbo].[Reins_Claim_Listing] as trg
		USING
		(
		select [Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,BINARY_CHECKSUM([Claim_Source]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
 			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]) DimensionCheckSum     
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
 			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
			  ,GETDATE() [Created_Date_Time]
			  ,NULL [Updated_Date_Time]
			  ,NULL [Updated_By]
			  ,@ProcessLogID [Process_Log_ID]
		from w_target
		) AS src
		ON
		(      ISNULL(trg.[Claim_Source],'ooNVLoo') = ISNULL(src.[Claim_Source],'ooNVLoo')
		   AND ISNULL(trg.[Claim_Number],'ooNVLoo') = ISNULL(src.[Claim_Number],'ooNVLoo')
			AND CASE WHEN trg.[Benefit_Number] IS NOT NULL AND src.[Benefit_Number] IS NOT NULL
					  THEN ISNULL(trg.[Benefit_Number],'ooNVLoo')
				 ELSE ISNULL(src.[Benefit_Number],'ooNVLoo')
				 END = ISNULL(src.[Benefit_Number],'ooNVLoo')
			AND ISNULL(trg.[EDW_Contract_Risk_Key],-99999) = ISNULL(src.[EDW_Contract_Risk_Key],-99999)
			AND ISNULL(trg.[Policy_Number],'ooNVLoo') = ISNULL(src.[Policy_Number],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_System_Code] ,'ooNVLoo')= ISNULL(src.[EDW_Product_System_Code],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_Code],'ooNVLoo') = ISNULL(src.[EDW_Product_Code],'ooNVLoo')
			 AND ISNULL(trg.[EDW_Product_Option_Code] ,'ooNVLoo')= ISNULL(src.[EDW_Product_Option_Code],'ooNVLoo')
			 AND ISNULL(trg.[Benefit_Type],'ooNVLoo') = ISNULL(src.[Benefit_Type],'ooNVLoo') 
			-- AND ISNULL(trg.[Claim_Event_Type],'ooNVLoo') = ISNULL(src.[Claim_Event_Type],'ooNVLoo') 
			 AND CASE WHEN trg.[Benefit_Period] IS NOT NULL AND src.[Benefit_Period] IS NOT NULL
					  THEN ISNULL(trg.[Benefit_Period],'ooNVLoo')
				 ELSE ISNULL(src.[Benefit_Period],'ooNVLoo')
				 END = ISNULL(src.[Benefit_Period],'ooNVLoo') 
			  AND CASE WHEN trg.[Waiting_Period] IS NOT NULL AND src.[Waiting_Period] IS NOT NULL
					  THEN ISNULL(trg.[Waiting_Period],'ooNVLoo')
				 ELSE ISNULL(src.[Waiting_Period],'ooNVLoo')
				 END = ISNULL(src.[Waiting_Period],'ooNVLoo')  )
		WHEN MATCHED AND trg.DimensionCheckSum <> src.DimensionCheckSum AND trg.row_end_date = convert(datetime,'31/DEC/3000')
		THEN 
		UPDATE
		SET
		trg.row_end_date = DATEADD(ss,-1,DATEADD(month, DATEDIFF(month, 0, convert(datetime,@ProcessingMonthYear)), 0)),
		[Updated_Date_Time] = GETDATE(),
		Updated_By = system_user
		WHEN NOT MATCHED BY TARGET
		THEN
		INSERT (
			   [Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,[DimensionCheckSum]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Created_Date_Time]
			  ,[Updated_Date_Time]
			  ,[Updated_By]
			  ,[Process_Log_ID]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
 			  ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		)
		VALUES
		(
			   src.[Claim_Source]
			  ,src.[Claim_Source_Id]
			  ,src.[Reins_Benefit_Type]
			  ,src.[Claim_Number]
			  ,src.[EDW_Contract_Key]
			  ,src.[Policy_Number]
			  ,src.[EDW_Contract_Id]
			  ,src.[EDW_Product_System_Code]
			  ,src.[EDW_Product_Key]
			  ,src.[EDW_Product_Code]
			  ,src.[EDW_Class_of_Business]
			  ,src.[EDW_Contract_Risk_Key]
			  ,src.[EDW_Product_Option_Key]
			  ,src.[EDW_Product_Option_Code]
			  ,src.[Claim_Event_Type]
			  ,src.[Benefit_Period]
			  ,src.[Waiting_Period]
			  ,src.[Row_Eftv_Date]
			  ,src.[Row_End_Date]
			  ,src.[DimensionCheckSum]
			  ,src.[Claim_Status]
			  ,src.[Claim_Notify_Date]
			  ,src.[Incurred_Date]
			  ,src.[Policy_Commencement_Date]
			  ,src.[Benefit_Commencement_Date]
			  ,src.[EDW_Party_Key]
			  ,src.[Surname]
			  ,src.[First_Name]
			  ,src.[Second_Name]
			  ,src.[Sex]
			  ,src.[Date_of_Birth]
			  ,src.[Date_of_Death]
			  ,src.[Cause]
			  ,src.[Occupation]
			  ,src.[Claim_Type]
			  ,src.[Escalation_Ind]
			  ,src.[EDW_Country_Code]
			  ,src.[Orig_Modal_Sum_Insured]
			  ,src.[Orig_Modal]
			  ,src.[Curr_Modal_Sum_Insured]
			  ,src.[Curr_Modal]
			  ,src.[Sum_Insured_on_Incurred_Date]
			  ,src.[Sum_Insured_on_Reporting_Date]
			  ,src.[Ind_Value]
			  ,src.[Claim_Finalised_Date]
			  ,src.[Claim_Finalised_Reason]
			  ,src.[Claim_Reopen_Date]
			  ,src.[Claim_Reopen_Reason]
			  ,src.[Reins_Benefit_Period]
			  ,src.[Reins_Benefit_Category]
			  ,src.[Reins_Benefit_Category_Group]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,src.[Is_Layer_0_Covered]
			  ,src.[Layer_0_Reins_Code]
			  ,src.[Layer_0_Reins_Percent]
			  ,src.[Layer_0_Init_Reins_Exposure]
			  ,src.[Layer_0_Curr_Reins_Exposure]
			  ,src.[Layer_0_Rule]
			  ,src.[Is_Layer_1_Covered]
			  ,src.[Layer_1_Treaty_Id]
			  ,src.[Layer_1_Treaty_Percent]
			  ,src.[Layer_1_Reins_Percent]
			  ,src.[Layer_1_Init_Reins_Exposure]
			  ,src.[Layer_1_Curr_Reins_Exposure]
			  ,src.[Layer_1_Init_Residual_Exposure]
			  ,src.[Layer_1_Curr_Residual_Exposure]
			  ,src.[Layer_1_Treaty_Rule]
			  ,src.[Is_Layer_2_Covered]
			  ,src.[Layer_2_Treaty_Id]
			  ,src.[Layer_2_Reins_Percent]
			  ,src.[Layer_2_Init_Reins_Exposure]
			  ,src.[Layer_2_Curr_Reins_Exposure]
			  ,src.[Layer_2_Init_Residual_Exposure]
			  ,src.[Layer_2_Curr_Residual_Exposure]
			  ,src.[Layer_2_Treaty_Rule]
			  ,src.[Created_Date_Time]
			  ,src.[Updated_Date_Time]
			  ,src.[Updated_By]
			  ,src.[Process_Log_ID]
			  ,src.[Benefit_Type]
			  ,src.[Benefit_Number]
			  ,src.[Benefit_Status]
			  ,src.[Benefit_Finalised_Date]
			  ,src.[Benefit_Finalised_Reason]
			  ,src.[Benefit_Reopen_Date]
			  ,src.[Benefit_Reopen_Reason]
 			  ,src.[Reins_Life_Identifier]
			  ,src.[Premium_Census_Date]
		)
		OUTPUT $action
			  ,src.[Claim_Source]
			  ,src.[Claim_Source_Id]
			  ,src.[Reins_Benefit_Type]
			  ,src.[Claim_Number]
			  ,src.[EDW_Contract_Key]
			  ,src.[Policy_Number]
			  ,src.[EDW_Contract_Id]
			  ,src.[EDW_Product_System_Code]
			  ,src.[EDW_Product_Key]
			  ,src.[EDW_Product_Code]
			  ,src.[EDW_Class_of_Business]
			  ,src.[EDW_Contract_Risk_Key]
			  ,src.[EDW_Product_Option_Key]
			  ,src.[EDW_Product_Option_Code]
			  ,src.[Claim_Event_Type]
			  ,src.[Benefit_Period]
			  ,src.[Waiting_Period]
			  ,src.[Row_Eftv_Date]
			  ,src.[Row_End_Date]
			  ,src.[DimensionCheckSum]
			  ,src.[Claim_Status]
			  ,src.[Claim_Notify_Date]
			  ,src.[Incurred_Date]
			  ,src.[Policy_Commencement_Date]
			  ,src.[Benefit_Commencement_Date]
			  ,src.[EDW_Party_Key]
			  ,src.[Surname]
			  ,src.[First_Name]
			  ,src.[Second_Name]
			  ,src.[Sex]
			  ,src.[Date_of_Birth]
			  ,src.[Date_of_Death]
			  ,src.[Cause]
			  ,src.[Occupation]
			  ,src.[Claim_Type]
			  ,src.[Escalation_Ind]
			  ,src.[EDW_Country_Code]
			  ,src.[Orig_Modal_Sum_Insured]
			  ,src.[Orig_Modal]
			  ,src.[Curr_Modal_Sum_Insured]
			  ,src.[Curr_Modal]
			  ,src.[Sum_Insured_on_Incurred_Date]
			  ,src.[Sum_Insured_on_Reporting_Date]
			  ,src.[Ind_Value]
			  ,src.[Claim_Finalised_Date]
			  ,src.[Claim_Finalised_Reason]
			  ,src.[Claim_Reopen_Date]
			  ,src.[Claim_Reopen_Reason]
			  ,src.[Reins_Benefit_Period]
			  ,src.[Reins_Benefit_Category]
			  ,src.[Reins_Benefit_Category_Group]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,src.[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,src.[Is_Layer_0_Covered]
			  ,src.[Layer_0_Reins_Code]
			  ,src.[Layer_0_Reins_Percent]
			  ,src.[Layer_0_Init_Reins_Exposure]
			  ,src.[Layer_0_Curr_Reins_Exposure]
			  ,src.[Layer_0_Rule]
			  ,src.[Is_Layer_1_Covered]
			  ,src.[Layer_1_Treaty_Id]
			  ,src.[Layer_1_Treaty_Percent]
			  ,src.[Layer_1_Reins_Percent]
			  ,src.[Layer_1_Init_Reins_Exposure]
			  ,src.[Layer_1_Curr_Reins_Exposure]
			  ,src.[Layer_1_Init_Residual_Exposure]
			  ,src.[Layer_1_Curr_Residual_Exposure]
			  ,src.[Layer_1_Treaty_Rule]
			  ,src.[Is_Layer_2_Covered]
			  ,src.[Layer_2_Treaty_Id]
			  ,src.[Layer_2_Reins_Percent]
			  ,src.[Layer_2_Init_Reins_Exposure]
			  ,src.[Layer_2_Curr_Reins_Exposure]
			  ,src.[Layer_2_Init_Residual_Exposure]
			  ,src.[Layer_2_Curr_Residual_Exposure]
			  ,src.[Layer_2_Treaty_Rule]
			  ,src.[Created_Date_Time]
			  ,src.[Updated_Date_Time]
			  ,src.[Updated_By]
			  ,src.[Process_Log_ID]
			  ,src.[Benefit_Type]
			  ,src.[Benefit_Number]
			  ,src.[Benefit_Status]
			  ,src.[Benefit_Finalised_Date]
			  ,src.[Benefit_Finalised_Reason]
			  ,src.[Benefit_Reopen_Date]
			  ,src.[Benefit_Reopen_Reason]
			  ,src.[Reins_Life_Identifier]
			  ,src.[Premium_Census_Date]
		) as changes
		(
		  [action]
			  ,[Claim_Source]
			  ,[Claim_Source_Id]
			  ,[Reins_Benefit_Type]
			  ,[Claim_Number]
			  ,[EDW_Contract_Key]
			  ,[Policy_Number]
			  ,[EDW_Contract_Id]
			  ,[EDW_Product_System_Code]
			  ,[EDW_Product_Key]
			  ,[EDW_Product_Code]
			  ,[EDW_Class_of_Business]
			  ,[EDW_Contract_Risk_Key]
			  ,[EDW_Product_Option_Key]
			  ,[EDW_Product_Option_Code]
			  ,[Claim_Event_Type]
			  ,[Benefit_Period]
			  ,[Waiting_Period]
			  ,[Row_Eftv_Date]
			  ,[Row_End_Date]
			  ,[DimensionCheckSum]
			  ,[Claim_Status]
			  ,[Claim_Notify_Date]
			  ,[Incurred_Date]
			  ,[Policy_Commencement_Date]
			  ,[Benefit_Commencement_Date]
			  ,[EDW_Party_Key]
			  ,[Surname]
			  ,[First_Name]
			  ,[Second_Name]
			  ,[Sex]
			  ,[Date_of_Birth]
			  ,[Date_of_Death]
			  ,[Cause]
			  ,[Occupation]
			  ,[Claim_Type]
			  ,[Escalation_Ind]
			  ,[EDW_Country_Code]
			  ,[Orig_Modal_Sum_Insured]
			  ,[Orig_Modal]
			  ,[Curr_Modal_Sum_Insured]
			  ,[Curr_Modal]
			  ,[Sum_Insured_on_Incurred_Date]
			  ,[Sum_Insured_on_Reporting_Date]
			  ,[Ind_Value]
			  ,[Claim_Finalised_Date]
			  ,[Claim_Finalised_Reason]
			  ,[Claim_Reopen_Date]
			  ,[Claim_Reopen_Reason]
			  ,[Reins_Benefit_Period]
			  ,[Reins_Benefit_Category]
			  ,[Reins_Benefit_Category_Group]
			  ,[IL_UL_Policy_Val_Exceeds_SI]
			  ,[IL_UL_Policy_Val_Exceeds_SI_date]
			  ,[IL_UL_Policy_Val_Exceeds_SI_rule]
			  ,[Is_Layer_0_Covered]
			  ,[Layer_0_Reins_Code]
			  ,[Layer_0_Reins_Percent]
			  ,[Layer_0_Init_Reins_Exposure]
			  ,[Layer_0_Curr_Reins_Exposure]
			  ,[Layer_0_Rule]
			  ,[Is_Layer_1_Covered]
			  ,[Layer_1_Treaty_Id]
			  ,[Layer_1_Treaty_Percent]
			  ,[Layer_1_Reins_Percent]
			  ,[Layer_1_Init_Reins_Exposure]
			  ,[Layer_1_Curr_Reins_Exposure]
			  ,[Layer_1_Init_Residual_Exposure]
			  ,[Layer_1_Curr_Residual_Exposure]
			  ,[Layer_1_Treaty_Rule]
			  ,[Is_Layer_2_Covered]
			  ,[Layer_2_Treaty_Id]
			  ,[Layer_2_Reins_Percent]
			  ,[Layer_2_Init_Reins_Exposure]
			  ,[Layer_2_Curr_Reins_Exposure]
			  ,[Layer_2_Init_Residual_Exposure]
			  ,[Layer_2_Curr_Residual_Exposure]
			  ,[Layer_2_Treaty_Rule]
			  ,[Created_Date_Time]
			  ,[Updated_Date_Time]
			  ,[Updated_By]
			  ,[Process_Log_ID]
			  ,[Benefit_Type]
			  ,[Benefit_Number]
			  ,[Benefit_Status]
			  ,[Benefit_Finalised_Date]
			  ,[Benefit_Finalised_Reason]
			  ,[Benefit_Reopen_Date]
			  ,[Benefit_Reopen_Reason]
		      ,[Reins_Life_Identifier]
			  ,[Premium_Census_Date]
		)
		WHERE [action] = 'UPDATE'
		;
END

SET @UpdateRowCount = @UpdateRowCount + @@RowCount
commit tran t1;
 --   SELECT @InsertRowCount = count(*)
	--FROM [dbo].Reins_Claim_Listing
	--where Created_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
 --  SELECT @UpdateRowCount = count(*)
	--FROM [dbo].Reins_Claim_Listing
	--where updated_date_time > ( SELECT startTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)	
	--
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON

GO
/****** Object:  StoredProcedure [dbo].[usp_Merge_Stg_U2_CPI]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		NK
-- Create date: 09 May 2019
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Merge_Stg_U2_CPI]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE date,
	@ProcessLogId int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

		Begin Try
		
		Declare @LAST_CPI date
			if month(@EFTV_DATE) < 7 
				SET @LAST_CPI = dbo.DateSerial(year(@EFTV_DATE)-1,6,30)
			Else
				SET @LAST_CPI = dbo.DateSerial(year(@EFTV_DATE),6,30)


		--Check not done already and exit

		DECLARE @CR int
		If object_id('STAGE_U2_CPI') is not NULL 
			Select top 1 @CR = CONTRACT_RISK_KEY from STAGE_U2_CPI where CPI_DATE = @LAST_CPI
			
			If @CR is not NULL
			BEGIN
		--	if @RUN_ONLY is not NULL Print 'Already run for ' + @JUNE
			RETURN -1
			END

		
		--Get the maximum CPI Rate
		DECLARE @MAX_CPI real
		SELECT @MAX_CPI = convert(real,VALUE) FROM INI where PARAMETER = 'U2 MAX CPI RATE PC' and @EFTV_DATE between FROM_DATE and coalesce(TO_DATE,@EFTV_DATE)
		IF @MAX_CPI is NULL RETURN -1

		--Calculate the CPI Increases
		--IF object_ID('STAGE_U2_CPI') is NULL 
		--	CREATE TABLE dbo.STAGE_U2_CPI(CPI_DATE date not null, CONTRACT_RISK_KEY int not null, CPI_INCR money not NULL)

		--Clear Existing Records
		Delete FROM Stg.Stg_U2_Cpi where CPI_DATE = @EFTV_DATE 
		Set @DeleteRowCount = @@ROWCOUNT
		
		--Insert new calcs
		Begin Tran T1
			INSERT INTO [STG].[Stg_U2_Cpi]
			Select CPI_DATE, CONTRACT_RISK_KEY, CPI_INCR, GetDate() as Created_Date_time,
			@ProcessLogId as Process_Log_Id, system_user as Created_BY
			From (
				Select 
					convert(date,JUN.CPI_DATE) As CPI_DATE
					,JUN.CONTRACT_RISK_KEY
					,CPI_INCR = round(jul_sa - jun_sa,2)
					,row_number() over (Partition by jun.contract_risk_key order by jul.row_start_date) As Ranking
				From STG.Stg_U2_Cpi_June as JUN 
					JOIN STG.Stg_U2_Cpi_July As JUL ON JUN.contract_risk_key = JUL.contract_risk_key and JUL.jul_sa > jun.JUN_SA
						and jul.jul_sa < (1 + @MAX_CPI) * jun.jun_sa
				Where jun.jun_sa > 0) As UPD
			Where Ranking = 1
		Commit Tran T1
		Set @InsertRowCount = @@ROWCOUNT

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Process_ACE_Data_into_Reins]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Process_ACE_Data_into_Reins] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


-- Load data into Reins ACE Trnx

INSERT INTO [dbo].[Reins_Able_Claim_Expense_Trnx]
           ([Month_Effective_Date]
           ,[Able_Claim_Expense_Trnx_Id]
           ,[Claim_Number]
           ,[Policy_Number]
           ,[Transaction_Type]
           ,[Transaction_Amount]
           ,[Transaction_Effective_Date]
           ,[Transaction_Process_Date]
           ,[Claim_Expense_Id]
           ,[Business_Unit_Id]
           ,[Account_Id]
           ,[Department_Id]
           ,[Payee]
           ,[Invoice_Type]
           ,[Invoice_Number]
           ,[Amount_inc_GST]
           ,[GST]
           ,[Payment_Method]
           ,[Vendor_Id]
           ,[Admin_Initials]
           ,[Payment_Creation_Date]
           ,[Payment_Reference]
           ,[Authorised_By]
           ,[Authorisation_Date]
           ,[GUID]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_flag]
           ,[Exclude_Reason])
    SELECT 
	  A.Month_Eftv_Date,
	  'AB'+cast(A.[Able_Claim_Expense_Trnx_Id] as varchar(18)) as [Able_Claim_Expense_Trnx_Id],
	  A.Claim_Number,
	  NULL as Policy_Number,
	  NULL as Transaction_Type,
	  A.Amount_inc_GST as Transaction_Amount,
	  A.Payment_Creation_Date as Transaction_Effective_Date,
	  A.Authorisation_Date as Transaction_Process_Date,
	  NULL as Claim_Expense_Id,
	  NULL as Business_Unit_Id,
	  NULL as Account_Id,
	  NULL as Department_Id,
	  A.Payee,
	  A.Invoice_Type,
	  A.Invoice_Number,
	  A.Amount_Inc_GST,
	  A.GST,
	  A.Payment_Method,
	  A.Vendor_Id,
	  A.Admin_Initials,
	  A.Payment_Creation_Date,
	  A.Payment_Reference,
	  A.Authorised_By,
	  A.Authorisation_Date,
	  A.[GUID],
	  getdate(),
	  SYSTEM_USER,
	  NULL,
	  NULL,
	  @ProcessLogID,
	  NULL,
	  NULL
FROM [dbo].[Able_Claim_Expense_Trnx] A
  Where NOT EXISTS (Select *  from dbo.Reins_Able_Claim_Expense_Trnx B 
                              Where B.[Able_Claim_Expense_Trnx_Id] = 'AB'+cast(A.[Able_Claim_Expense_Trnx_Id] as varchar) )
AND Exclude_Flag = 'N'

set @insertRowCount = @insertRowCount + @@Rowcount
--print 'Insert into [Reins_Able_Claim_Expense_Trnx] transactions frm [Able_Claim_Expense_Trnx]'

-- Update Trnx type, acct dept BU

Update Reins_Able_Claim_Expense_Trnx
SET Transaction_Type = Case when Invoice_Type = 'Medical' then 'Medical' else 'Non-Medical' END,
Business_Unit_Id = 'A023',
Account_Id = Case when Invoice_Type = 'Medical' then '725373' Else '731981' END,
Department_Id = 'FC141'
Where Transaction_type is null

set @UpdateRowCount = @UpdateRowCount + @@Rowcount

-- Update exclude flag

Update Reins_Able_Claim_Expense_Trnx
Set Exclude_Flag = 'Y',
Exclude_Reason = 'Product or Product_system out of scope'
from Reins_Able_Claim_Expense_Trnx A
where not exists (Select * from dbo.Reins_Claim_Listing B, dbo.Reins_Treaty_Product C
     Where B.EDW_Product_System_Code = C.Product_System_Code
     and B.EDW_Product_Code = C.Product_Code
     AND B.EDW_Class_Of_Business = C.Class_Of_Business
     and A.Claim_Number = B.Claim_Number
     )
and exclude_flag is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

Update Reins_Able_Claim_Expense_Trnx
Set Exclude_Flag = 'N'
where exclude_flag is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Update Policy_Number from Reins Claim listing
SET @return_value = 0
exec @return_value = [dbo].[usp_Reins_ACE_Policy_LKP] 

set @UpdateRowCount = @UpdateRowCount + @return_value


Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Process_GL_Data_into_Reins]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Process_GL_Data_into_Reins] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


-- Load data into Reins GL JNL Trnx
INSERT INTO [dbo].[Reins_GL_Journal_Trnx]
           ([GL_Journal_Trnx_Id]
           ,[Month_Effective_Date]
           ,[Policy_Number]
           ,[EDW_Product_System_Code]
           ,[EDW_Contract_Key]
           ,[EDW_Product_Code]
           ,[EDW_Product_Key]
           ,[EDW_Product_Option_Code]
           ,[EDW_Product_Option_Key]
           ,[EDW_Contract_Id]
           ,[EDW_Policy_Number]
           ,[EDW_Product_Name]
           ,[EDW_Class_of_Business]
           ,[Claim_Number]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_id]
           ,[Implicit_Benefit_Type_Code]
           ,[Reins_Benefit_Category]
           ,[Source_Claim_Number]
           ,[Trace_Code]
           ,[GL_Business_Unit_Id]
           ,[GL_Journal_Id]
           ,[GL_Journal_Date]
           ,[GL_Journal_Line]
           ,[GL_Ledger_Code]
           ,[GL_Account_Id]
           ,[GL_Department_Id]
           ,[GL_Product_Id]
           ,[GL_Project_Id]
           ,[GL_Affiliate_Id]
           ,[GL_Currency_Code]
           ,[GL_Monetary_Amount]
           ,[GL_Posting_Ref_1]
           ,[GL_Journal_Line_Desc]
           ,[Status_Ref_1]
           ,[Source_System_Ref_1]
           ,[Source_System_Ref_2]
           ,[GL_Posting_Ref_2]
           ,[Status_Ref_2]
           ,[GL_Posting_Date]
           ,[User_Id]
           ,[Source_System_Narrative_1]
           ,[GL_Statistic_Amount]
           ,[GL_Foreign_Currency_Code]
           ,[GL_Foreign_Amount]
           ,[GL_Journal_Month]
           ,[Pcode]
           ,[Paid_From_Date]
           ,[Paid_To_Date]
           ,[Created_By]
           ,[Created_Date_Time]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_Id]
           ,[Exclude_Flag]
           ,[Exclude_Reason]
           ,[Policy_Number_Updated_Flg]
           ,[Old_Policy_Number])
     SELECT
	  'GL'+ cast(A.GL_Journal_trnx_id as varchar (18)) as GL_Journal_Trnx_Id,
	   A.Month_Eftv_Date,
       A.Policy_Number,
       A.EDW_Product_System_Code,
	   A.EDW_Contract_Key,
	   A.EDW_Product_Code,
	   A.EDW_Product_Key,
	   NULL as Product_Option_Code,
       NULL as Product_Option_Key,
	   A.EDW_Contract_Id,
	   A.EDW_Policy_Number,
	   A.EDW_Product_Name,
	   A.EDW_Class_of_Business,
	   NULL as Claim_Number,
	   A.GL_Journal_Date as Transaction_Effective_date,
	   A.GL_Posting_Date as Transaction_Process_Date,
	   A.GL_Monetary_Amount as Transaction_Amount,
	   NULL as Transaction_Type,
	   NULL as Claim_Expense_id,
	   NULL as Implicit_Benefit_Type_Code,
	   NULL as Reins_Benefit_Category,
	   NULL as Source_Claim_Number,
	   A.Trace_Code,
	   A.GL_Business_Unit_Id,
	   A.GL_Journal_Id,
	   A.GL_Journal_Date,
	   A.GL_Journal_Line,
	   A.GL_Ledger_Code,
	   A.GL_Account_Id,
	   A.GL_Department_Id,
	   A.GL_Product_Id,
	   A.GL_Project_Id,
	   A.GL_Affiliate_Id,
	   A.GL_Currency_Code,
	   A.GL_Monetary_Amount,
	   A.GL_Posting_Ref_1,
	   A.GL_Journal_Line_Desc,
	   A.Status_Ref_1,
	   A.Source_System_Ref_1,
	   A.Source_System_Ref_2,
	   A.GL_Posting_Ref_2,
	   A.Status_Ref_2,
	   A.GL_Posting_Date,
	   A.[User_Id],
	   A.Source_System_Narrative_1,
	   A.GL_Statistic_Amount,
	   A.GL_Foreign_Currency_Code,
	   A.GL_Foreign_Amount,
	   A.GL_Journal_Month,
	   A.Pcode,
	   A.Paid_From_Date,
	   A.Paid_To_Date,
	   SYSTEM_USER,
	   Getdate(),
	   NULL,
	   NULL,
	   @ProcessLogID,
	   NULL,
	   NULL,
	   NULL,
	   NULL
  FROM [dbo].[GL_Journal_Trnx] A
  Where NOT EXISTS (Select *  from dbo.Reins_GL_Journal_Trnx B 
                              Where 'GL'+ cast(A.GL_Journal_trnx_id as varchar (18)) = B.GL_journal_Trnx_id
)
and ISNULL(Source_System_Ref_2, 'NA') != 'MER'
and ISNULL(Source_System_Ref_2, 'NA') != '151'  

set @insertRowCount = @insertRowCount + @@Rowcount

-- Update Payment Item Type Lt 0
UPDATE 
     [dbo].[Reins_GL_Journal_Trnx] 
SET
   Transaction_Type = [Trnx_Type_LT_0],
   Updated_By = System_User,
   Updated_date_time = getdate()
FROM 
    dbo.[Reins_Claim_Expense_Trnx_Type] ,
    [dbo].[Reins_GL_Journal_Trnx] 
WHERE
    dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_GL_Journal_Trnx] .GL_ACCOUNT_ID
AND     ((([dbo].[Reins_GL_Journal_Trnx] .GL_Monetary_Amount)<0))
AND     [dbo].[Reins_GL_Journal_Trnx] .[Transaction_Type] IS NULL 
--AND     [dbo].[Reins_GL_Journal_Trnx] .[Product_System_code] = 'DS'

set @UpdateRowCount = @UpdateRowCount + @@Rowcount

-- Update Payment Item Type Gt 0
UPDATE 
      [dbo].[Reins_GL_Journal_Trnx] 
SET
   Transaction_Type = [Trnx_Type_GT_0],
   Updated_By = System_User,
   Updated_date_time = getdate()
FROM 
    dbo.[Reins_Claim_Expense_Trnx_Type] ,
    [dbo].[Reins_GL_Journal_Trnx] 
WHERE
   dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_GL_Journal_Trnx] .GL_ACCOUNT_ID
AND      ((([dbo].[Reins_GL_Journal_Trnx] .GL_Monetary_Amount)>=0))
AND     [dbo].[Reins_GL_Journal_Trnx] .[Transaction_Type] IS NULL 
--AND     [dbo].[Reins_GL_Journal_Trnx] .[Product_System_code] = 'DS'

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Exclude Out of Scope Prods
SET @return_value = 0
exec @return_value = [dbo].[usp_Reins_Exclude_Out_Of_Scope_Trnx_GL]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Update Journal and processing dates where they are null

UPDATE dbo.Reins_GL_Journal_Trnx 
SET dbo.Reins_GL_Journal_Trnx.GL_Posting_Date = GL_Journal_Date
,Transaction_Process_date = GL_Journal_date
WHERE dbo.Reins_GL_Journal_Trnx.GL_Posting_Date Is Null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Update Reins Benefit Cat from GL Prod Mapping
Update Reins_GL_Journal_Trnx
set [Reins_Benefit_Category] = B.[Reins_Benefit_Type]
from Reins_GL_Journal_Trnx A, [dbo].[Reins_GL_Product] B
where A.GL_Product_Id = B.GL_Product_Code
and [Reins_Benefit_Category] is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Update correct Trnx Type sql

Update Reins_GL_journal_Trnx
set Transaction_type = 'Expense'
where Source_System_Narrative_1 like 'ABLE Claim accrual%'
and Transaction_type = 'Expense reversal'
and Transaction_amount < 0
and GL_journal_trnx_id not like '%REV'

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT


Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END



GO
/****** Object:  StoredProcedure [dbo].[usp_Process_Merc_Data_into_Reins]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Process_Merc_Data_into_Reins] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1

-- Load U2 Data into Reins Merc Trnx

INSERT INTO [dbo].[Reins_Mercury_Trnx]
           ([Month_Effective_Date]
           ,[Mercury_Trnx_Id]
           ,[Product_System_Code]
           ,[Policy_Number]
           ,[EDW_Contract_Key]
           ,[EDW_Policy_Number]
           ,[EDW_Contract_Id]
           ,[EDW_Product_Key]
           ,[EDW_Product_Code]
           ,[EDW_Class_Of_Business]
           ,[Reins_Benefit_Category]
           ,[Implicit_Benefit_Type_Code]
           ,[Claim_Reference_Id]
           ,[Source_Claim_Number]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_Id]
           ,[Trace_Code]
           ,[Admin_System_File_Id]
           ,[Admin_System_Id]
           ,[File_Record_Number]
           ,[GL_Posting_Date]
           ,[Stat_Fund]
           ,[Sequence_Number]
           ,[Primary_Secondary_Ind]
           ,[Client_Ref_Id_1]
           ,[Client_Ref_Id_2]
           ,[Client_Ref_Id_3]
           ,[Client_Ref_Id_4]
           ,[Trans_Ref_Key_2]
           ,[Trans_Ref_Key_3]
           ,[Trans_Ref_Key_4]
           ,[Trans_Ref_Key_5]
           ,[Trans_Ref_Key_6]
           ,[GL_Business_Unit_Id]
           ,[GL_Account_Id]
           ,[GL_Department_Id]
           ,[GL_Product_Code]
           ,[GL_Project_Id]
           ,[GL_Affiliate_Id]
           ,[GL_Posting_Ref_Text]
           ,[Ledger_Movement_Amount]
           ,[GL_Posting_File_Id]
           ,[Trans_Ref_Key_1]
           ,[Client_Ref_Id_5]
           ,[Product_Ref_Key_1]
           ,[Product_Ref_Key_2]
           ,[Product_Ref_Key_3]
           ,[Bus_Line_Ref_Key_1]
           ,[Bus_Line_Ref_Key_2]
           ,[Bus_Line_Ref_Key_3]
           ,[Business_Line_Location]
           ,[Business_Line_Planner_Id]
           ,[Business_Tax_Classn]
           ,[Stat_Fund_Code]
           ,[Investment_Pool_Id]
           ,[Off_Investment_Pool_Id]
           ,[Investment_Effective_Date]
           ,[Movement_Effective_Date]
           ,[GL_Currency_Code]
           ,[Trans_Ref_Key_7]
           ,[Trans_Ref_Key_8]
           ,[Trans_Ref_Key_9]
           ,[Trans_Ref_Key_10]
           ,[Trans_Ref_Key_11]
           ,[Business_Product_Line_Code]
           ,[Business_Product_Owner_Code]
           ,[Business_Product_Code]
           ,[Business_Line_Code]
           ,[Business_Trans_Type]
           ,[Source_Sys_Reference_1]
           ,[Source_Sys_Narrative_1]
           ,[Source_Sys_Reference_2]
           ,[Source_Sys_Narrative_2]
           ,[Admin_File_Ref_Text]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_Flag]
           ,[Exclude_Reason])
    select 
		A.Month_Effective_Date,
		cast(('MR' + cast(A.Mercury_Trnx_Id as varchar(18))) as varchar(20)) as Mercury_Trnx_Id,
		A.Product_System_Code,
		A.Policy_Number,
		A.EDW_Contract_Key,
		A.EDW_Policy_Number,
		A.EDW_Contract_Id,
		A.EDW_Product_Key,
		A.EDW_Product_Code,
		A.EDW_Class_Of_Business,
		NULL,
		(CAST((case when A.Trans_Ref_Key_2 = 'JNM' then A.Trans_Ref_Key_4 else
		  (case when A.Trans_Ref_Key_2 = 'CLM' then A.Trans_Ref_Key_5 else 'Unknown' end) end) as varchar(20))) as Implicit_Benefit_Type_Code,
		  cast (A.Client_Ref_Id_5 as varchar(15)) as Claim_Reference_Id,
		  NUll,
		  A.Movement_Effective_Date,
		  A.Transaction_Process_Date,
		  A.Transaction_Amount,
		  NULL,
		  NULL,
		  A.Trace_Code,
		  A.Admin_System_File_Id,
		  A.Admin_System_Id,
		  A.File_Record_number,
		  A.GL_Posting_Date,
		  A.Stat_Fund,
		  A.Sequence_Number,
		  A.Primary_Secondary_Ind,
		  A.Client_Ref_id_1,
		  A.Client_Ref_Id_2,
		  A.Client_Ref_Id_3,
		  A.Client_Ref_Id_4,
		  A.Trans_Ref_Key_2,
		  A.Trans_Ref_Key_3,
		  A.Trans_Ref_Key_4,
		  A.Trans_Ref_Key_5,
		  A.Trans_Ref_Key_6,
		  A.GL_Business_Unit_Id,
		  A.GL_Account_Id,
		  A.GL_Department_Id,
		  A.GL_Product_Code,
		  A.gl_Project_id,
		  A.GL_Affiliate_Id,
		  A.GL_Posting_Ref_Text,
		  A.Ledger_Movement_Amount,
		  A.GL_Posting_File_Id,
		  A.Trans_Ref_Key_1,
		  A.Client_Ref_Id_5,
		  A.Product_Ref_Key_1,
		  A.Product_Ref_Key_2,
		  A.Product_Ref_Key_3,
		  A.Bus_Line_Ref_Key_1,
		  A.Bus_Line_Ref_Key_2,
		  A.Bus_Line_Ref_Key_3,
		  A.business_Line_location,
		  A.Business_Line_Planner_Id,
		  A.Business_Tax_Classn,
		  A.Stat_Fund_Code,
		  A.Investment_Pool_Id,
		  A.Off_Investment_Pool_Id,
		  A.Investment_Effective_Date,
		  A.Movement_Effective_Date,
		  A.GL_Currency_Code,
		  A.Trans_Ref_Key_7,
		  A.Trans_Ref_Key_8,
		  A.Trans_Ref_Key_9,
		  A.Trans_Ref_Key_10,
		  A.Trans_Ref_Key_11,
		  A.Business_Product_Line_Code,
		  A.Business_Product_Owner_Code,
		  A.business_product_code,
		  A.Business_Line_Code,
		  A.Business_Trans_Type,
		  A.Source_Sys_Reference_1,
		  A.Source_Sys_Narrative_1,
		  A.Source_Sys_Reference_2,
		  A.Source_Sys_Narrative_2,
		  A.Admin_File_Ref_Text,
		  getdate(),
		  SYSTEM_USER,
		  NULL,
		  NULL,
		  @ProcessLogID,
		 NULL,
		 NULL
	from [dbo].[Mercury_Trnx] A
  where Product_System_Code = 'U2'
   and Policy_number is Not NULL
AND
  NOT EXISTS (Select *  from dbo.Reins_Mercury_Trnx B 
				Where 'MR'+ cast(A.Mercury_trnx_id as varchar (18)) = B.Mercury_Trnx_id)

set @insertRowCount = @insertRowCount + @@Rowcount


-- Load FDA Data into Reins Merc Trnx

INSERT INTO [dbo].[Reins_Mercury_Trnx]
           ([Month_Effective_Date]
           ,[Mercury_Trnx_Id]
           ,[Product_System_Code]
           ,[Policy_Number]
           ,[EDW_Contract_Key]
           ,[EDW_Policy_Number]
           ,[EDW_Contract_Id]
           ,[EDW_Product_Key]
           ,[EDW_Product_Code]
           ,[EDW_Class_Of_Business]
           ,[Reins_Benefit_Category]
           ,[Implicit_Benefit_Type_Code]
           ,[Claim_Reference_Id]
           ,[Source_Claim_Number]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_Id]
           ,[Trace_Code]
           ,[Admin_System_File_Id]
           ,[Admin_System_Id]
           ,[File_Record_Number]
           ,[GL_Posting_Date]
           ,[Stat_Fund]
           ,[Sequence_Number]
           ,[Primary_Secondary_Ind]
           ,[Client_Ref_Id_1]
           ,[Client_Ref_Id_2]
           ,[Client_Ref_Id_3]
           ,[Client_Ref_Id_4]
           ,[Trans_Ref_Key_2]
           ,[Trans_Ref_Key_3]
           ,[Trans_Ref_Key_4]
           ,[Trans_Ref_Key_5]
           ,[Trans_Ref_Key_6]
           ,[GL_Business_Unit_Id]
           ,[GL_Account_Id]
           ,[GL_Department_Id]
           ,[GL_Product_Code]
           ,[GL_Project_Id]
           ,[GL_Affiliate_Id]
           ,[GL_Posting_Ref_Text]
           ,[Ledger_Movement_Amount]
           ,[GL_Posting_File_Id]
           ,[Trans_Ref_Key_1]
           ,[Client_Ref_Id_5]
           ,[Product_Ref_Key_1]
           ,[Product_Ref_Key_2]
           ,[Product_Ref_Key_3]
           ,[Bus_Line_Ref_Key_1]
           ,[Bus_Line_Ref_Key_2]
           ,[Bus_Line_Ref_Key_3]
           ,[Business_Line_Location]
           ,[Business_Line_Planner_Id]
           ,[Business_Tax_Classn]
           ,[Stat_Fund_Code]
           ,[Investment_Pool_Id]
           ,[Off_Investment_Pool_Id]
           ,[Investment_Effective_Date]
           ,[Movement_Effective_Date]
           ,[GL_Currency_Code]
           ,[Trans_Ref_Key_7]
           ,[Trans_Ref_Key_8]
           ,[Trans_Ref_Key_9]
           ,[Trans_Ref_Key_10]
           ,[Trans_Ref_Key_11]
           ,[Business_Product_Line_Code]
           ,[Business_Product_Owner_Code]
           ,[Business_Product_Code]
           ,[Business_Line_Code]
           ,[Business_Trans_Type]
           ,[Source_Sys_Reference_1]
           ,[Source_Sys_Narrative_1]
           ,[Source_Sys_Reference_2]
           ,[Source_Sys_Narrative_2]
           ,[Admin_File_Ref_Text]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_Flag]
           ,[Exclude_Reason])
    select 
		A.Month_Effective_Date,
		cast(('MR' + cast(A.Mercury_Trnx_Id as varchar(10))) as varchar(20)) as Mercury_Trnx_Id,
		A.Product_System_Code,
		A.Policy_Number,
		A.EDW_Contract_Key,
		A.EDW_Policy_Number,
		A.EDW_Contract_Id,
		A.EDW_Product_Key,
		A.EDW_Product_Code,
		A.EDW_Class_Of_Business,
		NULL,
		NUll as Implicit_Benefit_Type_Code,
		  cast (A.Client_Ref_Id_1 as varchar(15)) as Claim_Reference_Id,
		  cast (LEFT(A.Client_Ref_Id_1,8) as varchar(20)) AS Source_Claim_Number,
		  A.Movement_Effective_Date,
		  A.Transaction_Process_Date,
		  A.Transaction_Amount,
		  NULL,
		  NULL,
		  A.Trace_Code,
		  A.Admin_System_File_Id,
		  A.Admin_System_Id,
		  A.File_Record_number,
		  A.GL_Posting_Date,
		  A.Stat_Fund,
		  A.Sequence_Number,
		  A.Primary_Secondary_Ind,
		  A.Client_Ref_id_1,
		  A.Client_Ref_Id_2,
		  A.Client_Ref_Id_3,
		  A.Client_Ref_Id_4,
		  A.Trans_Ref_Key_2,
		  A.Trans_Ref_Key_3,
		  A.Trans_Ref_Key_4,
		  A.Trans_Ref_Key_5,
		  A.Trans_Ref_Key_6,
		  A.GL_Business_Unit_Id,
		  A.GL_Account_Id,
		  A.GL_Department_Id,
		  A.GL_Product_Code,
		  A.gl_Project_id,
		  A.GL_Affiliate_Id,
		  A.GL_Posting_Ref_Text,
		  A.Ledger_Movement_Amount,
		  A.GL_Posting_File_Id,
		  A.Trans_Ref_Key_1,
		  A.Client_Ref_Id_5,
		  A.Product_Ref_Key_1,
		  A.Product_Ref_Key_2,
		  A.Product_Ref_Key_3,
		  A.Bus_Line_Ref_Key_1,
		  A.Bus_Line_Ref_Key_2,
		  A.Bus_Line_Ref_Key_3,
		  A.business_Line_location,
		  A.Business_Line_Planner_Id,
		  A.Business_Tax_Classn,
		  A.Stat_Fund_Code,
		  A.Investment_Pool_Id,
		  A.Off_Investment_Pool_Id,
		  A.Investment_Effective_Date,
		  A.Movement_Effective_Date,
		  A.GL_Currency_Code,
		  A.Trans_Ref_Key_7,
		  A.Trans_Ref_Key_8,
		  A.Trans_Ref_Key_9,
		  A.Trans_Ref_Key_10,
		  A.Trans_Ref_Key_11,
		  A.Business_Product_Line_Code,
		  A.Business_Product_Owner_Code,
		  A.business_product_code,
		  A.Business_Line_Code,
		  A.Business_Trans_Type,
		  A.Source_Sys_Reference_1,
		  A.Source_Sys_Narrative_1,
		  A.Source_Sys_Reference_2,
		  A.Source_Sys_Narrative_2,
		  A.Admin_File_Ref_Text,
		  getdate(),
		  SYSTEM_USER,
		  NULL,
		  NULL,
		  @ProcessLogID,
		 NULL,
		 NULL
	from [dbo].[Mercury_Trnx] A
  where Product_System_Code = 'FDA'
AND
  NOT EXISTS (Select *  from dbo.Reins_Mercury_Trnx B 
				Where 'MR'+ cast(A.Mercury_trnx_id as varchar (18)) = B.Mercury_Trnx_id)

set @InsertRowCount = @InsertRowCount + @@Rowcount


-- Load Incom Data into Reins Merc Trnx


INSERT INTO [dbo].[Reins_Mercury_Trnx]
           ([Month_Effective_Date]
           ,[Mercury_Trnx_Id]
           ,[Product_System_Code]
           ,[Policy_Number]
           ,[EDW_Contract_Key]
           ,[EDW_Policy_Number]
           ,[EDW_Contract_Id]
           ,[EDW_Product_Key]
           ,[EDW_Product_Code]
           ,[EDW_Class_Of_Business]
           ,[Reins_Benefit_Category]
           ,[Implicit_Benefit_Type_Code]
           ,[Claim_Reference_Id]
           ,[Source_Claim_Number]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_Id]
           ,[Trace_Code]
           ,[Admin_System_File_Id]
           ,[Admin_System_Id]
           ,[File_Record_Number]
           ,[GL_Posting_Date]
           ,[Stat_Fund]
           ,[Sequence_Number]
           ,[Primary_Secondary_Ind]
           ,[Client_Ref_Id_1]
           ,[Client_Ref_Id_2]
           ,[Client_Ref_Id_3]
           ,[Client_Ref_Id_4]
           ,[Trans_Ref_Key_2]
           ,[Trans_Ref_Key_3]
           ,[Trans_Ref_Key_4]
           ,[Trans_Ref_Key_5]
           ,[Trans_Ref_Key_6]
           ,[GL_Business_Unit_Id]
           ,[GL_Account_Id]
           ,[GL_Department_Id]
           ,[GL_Product_Code]
           ,[GL_Project_Id]
           ,[GL_Affiliate_Id]
           ,[GL_Posting_Ref_Text]
           ,[Ledger_Movement_Amount]
           ,[GL_Posting_File_Id]
           ,[Trans_Ref_Key_1]
           ,[Client_Ref_Id_5]
           ,[Product_Ref_Key_1]
           ,[Product_Ref_Key_2]
           ,[Product_Ref_Key_3]
           ,[Bus_Line_Ref_Key_1]
           ,[Bus_Line_Ref_Key_2]
           ,[Bus_Line_Ref_Key_3]
           ,[Business_Line_Location]
           ,[Business_Line_Planner_Id]
           ,[Business_Tax_Classn]
           ,[Stat_Fund_Code]
           ,[Investment_Pool_Id]
           ,[Off_Investment_Pool_Id]
           ,[Investment_Effective_Date]
           ,[Movement_Effective_Date]
           ,[GL_Currency_Code]
           ,[Trans_Ref_Key_7]
           ,[Trans_Ref_Key_8]
           ,[Trans_Ref_Key_9]
           ,[Trans_Ref_Key_10]
           ,[Trans_Ref_Key_11]
           ,[Business_Product_Line_Code]
           ,[Business_Product_Owner_Code]
           ,[Business_Product_Code]
           ,[Business_Line_Code]
           ,[Business_Trans_Type]
           ,[Source_Sys_Reference_1]
           ,[Source_Sys_Narrative_1]
           ,[Source_Sys_Reference_2]
           ,[Source_Sys_Narrative_2]
           ,[Admin_File_Ref_Text]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_Flag]
           ,[Exclude_Reason])
    select 
		A.Month_Effective_Date,
		cast(('MR' + cast(A.Mercury_Trnx_Id as varchar(10))) as varchar(20)) as Mercury_Trnx_Id,
		A.Product_System_Code,
		A.Policy_Number,
		A.EDW_Contract_Key,
		A.EDW_Policy_Number,
		A.EDW_Contract_Id,
		A.EDW_Product_Key,
		A.EDW_Product_Code,
		A.EDW_Class_Of_Business,
		NULL,
		NUll as Implicit_Benefit_Type_Code,
		  NULL Claim_Reference_Id,
		  NULL AS Source_Claim_Number,
		  A.Movement_Effective_Date,
		  A.Transaction_Process_Date,
		  A.Transaction_Amount,
		  NULL,
		  NULL,
		  A.Trace_Code,
		  A.Admin_System_File_Id,
		  A.Admin_System_Id,
		  A.File_Record_number,
		  A.GL_Posting_Date,
		  A.Stat_Fund,
		  A.Sequence_Number,
		  A.Primary_Secondary_Ind,
		  A.Client_Ref_id_1,
		  A.Client_Ref_Id_2,
		  A.Client_Ref_Id_3,
		  A.Client_Ref_Id_4,
		  A.Trans_Ref_Key_2,
		  A.Trans_Ref_Key_3,
		  A.Trans_Ref_Key_4,
		  A.Trans_Ref_Key_5,
		  A.Trans_Ref_Key_6,
		  A.GL_Business_Unit_Id,
		  A.GL_Account_Id,
		  A.GL_Department_Id,
		  A.GL_Product_Code,
		  A.gl_Project_id,
		  A.GL_Affiliate_Id,
		  A.GL_Posting_Ref_Text,
		  A.Ledger_Movement_Amount,
		  A.GL_Posting_File_Id,
		  A.Trans_Ref_Key_1,
		  A.Client_Ref_Id_5,
		  A.Product_Ref_Key_1,
		  A.Product_Ref_Key_2,
		  A.Product_Ref_Key_3,
		  A.Bus_Line_Ref_Key_1,
		  A.Bus_Line_Ref_Key_2,
		  A.Bus_Line_Ref_Key_3,
		  A.business_Line_location,
		  A.Business_Line_Planner_Id,
		  A.Business_Tax_Classn,
		  A.Stat_Fund_Code,
		  A.Investment_Pool_Id,
		  A.Off_Investment_Pool_Id,
		  A.Investment_Effective_Date,
		  A.Movement_Effective_Date,
		  A.GL_Currency_Code,
		  A.Trans_Ref_Key_7,
		  A.Trans_Ref_Key_8,
		  A.Trans_Ref_Key_9,
		  A.Trans_Ref_Key_10,
		  A.Trans_Ref_Key_11,
		  A.Business_Product_Line_Code,
		  A.Business_Product_Owner_Code,
		  A.business_product_code,
		  A.Business_Line_Code,
		  A.Business_Trans_Type,
		  A.Source_Sys_Reference_1,
		  A.Source_Sys_Narrative_1,
		  A.Source_Sys_Reference_2,
		  A.Source_Sys_Narrative_2,
		  A.Admin_File_Ref_Text,
		  getdate(),
		  SYSTEM_USER,
		  NULL,
		  NULL,
		  @ProcessLogID,
		 NULL,
		 NULL
	from [dbo].[Mercury_Trnx] A
  where Product_System_Code = 'OR'
AND
  NOT EXISTS (Select *  from dbo.Reins_Mercury_Trnx B 
				Where 'MR'+ cast(A.Mercury_trnx_id as varchar (18)) = B.Mercury_Trnx_id)

set @InsertRowCount = @InsertRowCount + @@Rowcount


-- Load Ultimate Data into Reins Merc Trnx



INSERT INTO [dbo].[Reins_Mercury_Trnx]
           ([Month_Effective_Date]
           ,[Mercury_Trnx_Id]
           ,[Product_System_Code]
           ,[Policy_Number]
           ,[EDW_Contract_Key]
           ,[EDW_Policy_Number]
           ,[EDW_Contract_Id]
           ,[EDW_Product_Key]
           ,[EDW_Product_Code]
           ,[EDW_Class_Of_Business]
           ,[Reins_Benefit_Category]
           ,[Implicit_Benefit_Type_Code]
           ,[Claim_Reference_Id]
           ,[Source_Claim_Number]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_Id]
           ,[Trace_Code]
           ,[Admin_System_File_Id]
           ,[Admin_System_Id]
           ,[File_Record_Number]
           ,[GL_Posting_Date]
           ,[Stat_Fund]
           ,[Sequence_Number]
           ,[Primary_Secondary_Ind]
           ,[Client_Ref_Id_1]
           ,[Client_Ref_Id_2]
           ,[Client_Ref_Id_3]
           ,[Client_Ref_Id_4]
           ,[Trans_Ref_Key_2]
           ,[Trans_Ref_Key_3]
           ,[Trans_Ref_Key_4]
           ,[Trans_Ref_Key_5]
           ,[Trans_Ref_Key_6]
           ,[GL_Business_Unit_Id]
           ,[GL_Account_Id]
           ,[GL_Department_Id]
           ,[GL_Product_Code]
           ,[GL_Project_Id]
           ,[GL_Affiliate_Id]
           ,[GL_Posting_Ref_Text]
           ,[Ledger_Movement_Amount]
           ,[GL_Posting_File_Id]
           ,[Trans_Ref_Key_1]
           ,[Client_Ref_Id_5]
           ,[Product_Ref_Key_1]
           ,[Product_Ref_Key_2]
           ,[Product_Ref_Key_3]
           ,[Bus_Line_Ref_Key_1]
           ,[Bus_Line_Ref_Key_2]
           ,[Bus_Line_Ref_Key_3]
           ,[Business_Line_Location]
           ,[Business_Line_Planner_Id]
           ,[Business_Tax_Classn]
           ,[Stat_Fund_Code]
           ,[Investment_Pool_Id]
           ,[Off_Investment_Pool_Id]
           ,[Investment_Effective_Date]
           ,[Movement_Effective_Date]
           ,[GL_Currency_Code]
           ,[Trans_Ref_Key_7]
           ,[Trans_Ref_Key_8]
           ,[Trans_Ref_Key_9]
           ,[Trans_Ref_Key_10]
           ,[Trans_Ref_Key_11]
           ,[Business_Product_Line_Code]
           ,[Business_Product_Owner_Code]
           ,[Business_Product_Code]
           ,[Business_Line_Code]
           ,[Business_Trans_Type]
           ,[Source_Sys_Reference_1]
           ,[Source_Sys_Narrative_1]
           ,[Source_Sys_Reference_2]
           ,[Source_Sys_Narrative_2]
           ,[Admin_File_Ref_Text]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_Flag]
           ,[Exclude_Reason])
    select 
		A.Month_Effective_Date,
		cast(('MR' + cast(A.Mercury_Trnx_Id as varchar(10))) as varchar(20)) as Mercury_Trnx_Id,
		A.Product_System_Code,
		A.Policy_Number,
		A.EDW_Contract_Key,
		A.EDW_Policy_Number,
		A.EDW_Contract_Id,
		A.EDW_Product_Key,
		A.EDW_Product_Code,
		A.EDW_Class_Of_Business,
		NULL,
		NUll as Implicit_Benefit_Type_Code,
		  NULL Claim_Reference_Id,
		  NULL AS Source_Claim_Number,
		  A.Movement_Effective_Date,
		  A.Transaction_Process_Date,
		  A.Transaction_Amount,
		  NULL,
		  NULL,
		  A.Trace_Code,
		  A.Admin_System_File_Id,
		  A.Admin_System_Id,
		  A.File_Record_number,
		  A.GL_Posting_Date,
		  A.Stat_Fund,
		  A.Sequence_Number,
		  A.Primary_Secondary_Ind,
		  A.Client_Ref_id_1,
		  A.Client_Ref_Id_2,
		  A.Client_Ref_Id_3,
		  A.Client_Ref_Id_4,
		  A.Trans_Ref_Key_2,
		  A.Trans_Ref_Key_3,
		  A.Trans_Ref_Key_4,
		  A.Trans_Ref_Key_5,
		  A.Trans_Ref_Key_6,
		  A.GL_Business_Unit_Id,
		  A.GL_Account_Id,
		  A.GL_Department_Id,
		  A.GL_Product_Code,
		  A.gl_Project_id,
		  A.GL_Affiliate_Id,
		  A.GL_Posting_Ref_Text,
		  A.Ledger_Movement_Amount,
		  A.GL_Posting_File_Id,
		  A.Trans_Ref_Key_1,
		  A.Client_Ref_Id_5,
		  A.Product_Ref_Key_1,
		  A.Product_Ref_Key_2,
		  A.Product_Ref_Key_3,
		  A.Bus_Line_Ref_Key_1,
		  A.Bus_Line_Ref_Key_2,
		  A.Bus_Line_Ref_Key_3,
		  A.business_Line_location,
		  A.Business_Line_Planner_Id,
		  A.Business_Tax_Classn,
		  A.Stat_Fund_Code,
		  A.Investment_Pool_Id,
		  A.Off_Investment_Pool_Id,
		  A.Investment_Effective_Date,
		  A.Movement_Effective_Date,
		  A.GL_Currency_Code,
		  A.Trans_Ref_Key_7,
		  A.Trans_Ref_Key_8,
		  A.Trans_Ref_Key_9,
		  A.Trans_Ref_Key_10,
		  A.Trans_Ref_Key_11,
		  A.Business_Product_Line_Code,
		  A.Business_Product_Owner_Code,
		  A.business_product_code,
		  A.Business_Line_Code,
		  A.Business_Trans_Type,
		  A.Source_Sys_Reference_1,
		  A.Source_Sys_Narrative_1,
		  A.Source_Sys_Reference_2,
		  A.Source_Sys_Narrative_2,
		  A.Admin_File_Ref_Text,
		  getdate(),
		  SYSTEM_USER,
		  NULL,
		  NULL,
		  @ProcessLogID,
		 NULL,
		 NULL
	from [dbo].[Mercury_Trnx] A
  where Product_System_Code = 'CP'
AND
  NOT EXISTS (Select *  from dbo.Reins_Mercury_Trnx B 
				Where 'MR'+ cast(A.Mercury_trnx_id as varchar (18)) = B.Mercury_Trnx_id)

set @InsertRowCount = @InsertRowCount + @@Rowcount

INSERT INTO [dbo].[Reins_Claims_Error_Log]
           ([Process_log_Id]
           ,[ProcedureName]
           ,[Error_Column_Identifier]
           ,[Error_Reason]
           ,[CreatedDate])     
Select 
@ProcessLogID as [Process_log_Id],
'usp_Process_Merc_Data_into_Reins' as [ProcedureName],
  A.Mercury_Trnx_Id as [Error_Column_Identifier],
 'Policy_Number is Null in Source. Cannot insert Null policy number in Reins table' as [Error_Reason],
 getdate() as [CreatedDate] 
 from [dbo].[Mercury_Trnx] A
where Product_System_Code in ('U2','FDA','CP','OR')
AND
NOT EXISTS (Select *  from dbo.Reins_Mercury_Trnx B 
			Where 'MR'+ cast(A.Mercury_trnx_id as varchar (18)) = B.Mercury_Trnx_id)

set @InsertRowCount = @InsertRowCount + @@Rowcount


--Update Payment Item Type Lt 0

UPDATE 
    [dbo].[Reins_Mercury_Trnx]
SET
   Transaction_Type = [Trnx_Type_LT_0],
Updated_by = System_user,
Updated_date_time = getdate()
FROM 
    dbo.[Reins_Claim_Expense_Trnx_Type] ,
    [dbo].[Reins_Mercury_Trnx]
WHERE
    dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_Mercury_Trnx].GL_ACCOUNT_ID
AND     ((([dbo].[Reins_Mercury_Trnx].[Ledger_Movement_Amount])<0))
AND     [dbo].[Reins_Mercury_Trnx].[Transaction_Type] IS NULL 
--AND     [dbo].[Reins_Mercury_Trnx].[Product_System_code] = 'U2'


set @UpdateRowCount = @UpdateRowCount + @@Rowcount

--Update Payment Item Type Gt 0

UPDATE 
     [dbo].[Reins_Mercury_Trnx]
SET
   Transaction_Type = [Trnx_Type_GT_0]
FROM 
     dbo.[Reins_Claim_Expense_Trnx_Type] ,
    [dbo].[Reins_Mercury_Trnx]
WHERE
    dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_Mercury_Trnx].GL_ACCOUNT_ID
AND     ((([dbo].[Reins_Mercury_Trnx].[Ledger_Movement_Amount])>=0))
AND     [dbo].[Reins_Mercury_Trnx].[Transaction_Type] IS NULL
--AND     [dbo].[Reins_Mercury_Trnx].[Product_System_code] = 'U2'
 

set @UpdateRowCount = @UpdateRowCount + @@Rowcount

--Mark out of scope products as Ignore

Exec dbo.[usp_Reins_Exclude_Out_Of_Scope_Trnx_MR]

set @UpdateRowCount = @UpdateRowCount + @@Rowcount

--Update Reins benefit Cat based on GL Product Mapping

Update Reins_Mercury_Trnx
set [Reins_Benefit_Category] = B.[Reins_Benefit_Type]
from Reins_Mercury_Trnx A, [dbo].[Reins_GL_Product] B
where A.GL_Product_Code = B.GL_Product_Code
and [Reins_Benefit_Category] is null
--and Transaction_Type not like 'Pay%'

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT


Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Process_Merc_Data_into_Reins_Opus]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Process_Merc_Data_into_Reins_Opus] @ProcessLogID int,@ProcessingMonthYear NVARCHAR(100)
AS
BEGIN

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	BEGIN TRY;
 
	BEGIN TRAN T1;
	
	-- Insert records into Reins_opus_trnx from Mercury_trnx table.

	INSERT INTO [dbo].[Reins_Opus_Trnx]
           ([Month_Effective_Date]
           ,[Reins_Opus_Trnx_Id]
           ,[Product_System_Code]
           ,[Policy_Number]
           ,[EDW_Contract_Key]
           ,[EDW_Contract_Id]
           ,[EDW_Product_Key]
           ,[EDW_Product_Code]
           ,[EDW_Product_Desc]
           ,[EDW_Class_Of_Business]
           ,[Reins_Benefit_Category]
           ,[Transaction_Effective_date]
           ,[Transaction_Process_Date]
           ,[Transaction_Amount]
           ,[Transaction_Type]
           ,[Claim_Expense_Id]
           ,[EDW_Event_Status_Code]
           ,[EDW_Event_Type_Code]
           ,[EDW_Event_Type_Desc]
           ,[EDW_Event_Number]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date_Time]
           ,[Updated_By]
           ,[Process_Log_ID]
           ,[Exclude_Flag]
           ,[Exclude_Reason]
           ,[Account_Id]
           ,[GL_Product_Code]
           ,[EDW_Policy_Number]
           ,[Client_Ref_Id_2]
           ,[Trans_Ref_Key_1]
           ,[Ledger_Movement_Amount]
           ,[GL_Posting_Date])
     select
			Month_Effective_Date,
			'MR' + cast(Mercury_trnx_id as varchar (18)),
			Product_System_Code,
			Policy_Number,
			EDW_Contract_Key,
			EDW_Contract_Id,
			EDW_Product_Key,
			EDW_Product_Code,
			EDW_Product_Name,
			EDW_Class_Of_Business,
			NULL as Reins_Benefit_Category,
			Month_Effective_Date AS [Transaction_Effective_date],
			GL_Posting_Date AS Transaction_Process_Date,
			Ledger_Movement_Amount as Transaction_Amount,
			NULL as Transaction_Type,
			NULL as Claim_Expense_Id,
			NULL as EDW_Event_Status_Code,
			NULL as EDW_Event_Type_Code,
			NULL as EDW_Event_Type_Desc,
			NULL as EDW_Event_Number,
			getdate() as Created_Date_Time,
			SYSTEM_USER,
			NULL as Updated_Date_Time,
			NULL as Updated_By,
			@ProcessLogID as Process_Log_ID,
			'N' as Exclude_Flag,
			NULL as Exclude_Reason,
			GL_Account_Id,
			GL_Product_Code,
			EDW_Policy_Number,
			Client_Ref_Id_2,
			Trans_Ref_Key_1,
			Ledger_Movement_Amount,
			GL_Posting_Date
	  from
	  dbo.Mercury_Trnx
	  where Product_System_Code = 'LS'
	  and Exclude_Flag = 'N'
	  and Month_Effective_Date = @ProcessingMonthYear

	SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT

	COMMIT TRAN T1;
	PRINT ' Inserted records into Reins_opus_trax table' + convert(varchar(50), @InsertRowCount)
	
	--Update Payment Item Type Lt 0

	Begin Transaction
	UPDATE 
		[dbo].[Reins_Opus_Trnx]
	SET
		Transaction_Type = [Trnx_Type_LT_0],
		Updated_by = System_user,
		Updated_date_time = getdate()
	FROM 
		dbo.[Reins_Claim_Expense_Trnx_Type] ,
		[dbo].[Reins_Opus_Trnx]
	WHERE
		dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_Opus_Trnx].ACCOUNT_ID
		AND ((([dbo].[Reins_Opus_Trnx].[Ledger_Movement_Amount])<0))
		AND [dbo].[Reins_Opus_Trnx].[Transaction_Type] IS NULL 
		and Month_Effective_Date = @ProcessingMonthYear
	
	set @UpdateRowCount = @UpdateRowCount + @@Rowcount
    COMMIT

	--Update Payment Item Type Gt 0

	Begin Transaction
	UPDATE 
		 [dbo].[Reins_Opus_Trnx]
	SET
	   Transaction_Type = [Trnx_Type_GT_0]
	FROM 
		 dbo.[Reins_Claim_Expense_Trnx_Type] ,
		[dbo].[Reins_Opus_Trnx]
	WHERE
		dbo.[Reins_Claim_Expense_Trnx_Type].GL_ACCOUNT_ID = [dbo].[Reins_Opus_Trnx].ACCOUNT_ID
	AND     ((([dbo].[Reins_Opus_Trnx].[Ledger_Movement_Amount])>=0))
	AND     [dbo].[Reins_Opus_Trnx].[Transaction_Type] IS NULL
	and Month_Effective_Date = @ProcessingMonthYear
 
	set @UpdateRowCount = @UpdateRowCount + @@Rowcount
	COMMIT

	PRINT ' Updated records for Transaction_Type in Reins_opus_trax table' + convert(varchar(50), @UpdateRowCount)

	--Update Reins benefit Cat based on GL Product Mapping

	Begin Transaction
	Update [Reins_Opus_Trnx]
	set [Reins_Benefit_Category] = B.[Reins_Benefit_Type]
	from [Reins_Opus_Trnx] A, [dbo].[Reins_GL_Product] B
	where A.GL_Product_Code = B.GL_Product_Code
	and [Reins_Benefit_Category] is null
	and Month_Effective_Date = @ProcessingMonthYear

	set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
    COMMIT

	PRINT ' Updated records for Reins_Benefit_Category in Reins_opus_trax table' + convert(varchar(50), @UpdateRowCount)


	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN T1;
		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
		THROW;
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_publishToInforce]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:          MHTSIQ
-- Create date:  25/01/2021,
-- Description:     Raise Error if data exists in the Inforce table for that date and if force load is 0
-- =============================================
-- =============================================
-- Author:          MHTSIQ
-- Create date: July 2020,
-- Description:     Add columns QS treaty_id and SS_treaty_id to Inforce
-- =============================================
-- Author:          KHNNR2
-- Create date:     05/05/2020
-- Description:     Added New Columns for Blended Rate (Commission Rate - QS Cal.)
-- =============================================
-- Author:          KHNNR2
-- Create date: 18/08/2019,
-- Description:     Added check for the current census date records deletion
-- =============================================
-- =============================================
-- Author:          RRNAA2
-- Create date: 9/5/2019,
-- Description:     The procedure is to publish the data from U2 temp table to INFORCE table>
-- =============================================
CREATE PROCEDURE [dbo].[usp_publishToInforce]
       -- Add the parameters for the stored procedure here
       @Pas nvarchar(3),
       @CENSUS_DATE datetime,
    @ForceLoad VARCHAR(1) = 0

AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;
       
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0
DECLARE @DeleteRowCount int = 0

DECLARE @NumberOfRecs Int = 0

DECLARE @SQLDELETE nvarchar(MAx) = ''
DECLARE @NumberOfTempRecs Int = 0
DECLARE @INFORCE_TEMP_TABLE varchar(50)

       
BEGIN TRY


SET @NumberOfRecs = (Select Count(*) from INFORCE where PRODUCT_SYSTEM_CODE= @Pas and CENSUS_DATE=@CENSUS_DATE)

Print @NumberOfRecs


  if @NumberOfRecs > 0 and @ForceLoad = 0 
		Begin  

			Print '  Data exists in Inforce Table for the Census Dat' + convert(varchar(50), @CENSUS_DATE) 
			RAISERROR (' Data exists in Inforce Table for the Census Dat', 16,  1);
		End
  
  	if @NumberOfRecs > 0 and @ForceLoad = 1
		Begin
			Begin TRAN DeleteTran;
			   SET @SQLDELETE = 'If Exists (Select 1 from INFORCE_TEMP_@PAS@ 
             where PRODUCT_SYSTEM_CODE=''@Pas@'' and CENSUS_DATE=''@CENSUS_DATE@'')
             Begin 
             Delete from INFORCE where PRODUCT_SYSTEM_CODE=''@Pas@'' and CENSUS_DATE=''@CENSUS_DATE@''
             END 
             '

             SET @SQLDELETE = Replace(@SQLDELETE, '@Pas@', @Pas)
             SET @SQLDELETE = Replace(@SQLDELETE, '@CENSUS_DATE@', @CENSUS_DATE)

       --Print @SQLDELETE
       
             EXECUTE sp_executesql @SQLDELETE
             
             SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
             Print 'Delete Records from Inforce for the Census Date for Pas ' + @Pas + convert(varchar(50), @DeleteRowCount)

			Commit TRAN DeleteTran;
  		
			Print 'Delete Records from  Inforce for the Census Date ' + convert(varchar(50), @DeleteRowCount)
		End
	




     
       Begin Tran InsertToInforce
       
       --This dynamic code almost reaching to maximum limit ? (4000 char) 
DECLARE @SQL nvarchar(max) = N'Insert into INFORCE (CENSUS_DATE,CONTRACT_KEY ,PARTY_KEY,CONTRACT_RISK_KEY,CONTRACT_ID,PAS_CLIENT_ID,PRODUCT_SYSTEM_CODE,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC,RISK_START_DATE,RISK_EXPR_DATE,SMOKER_STATUS_CODE,SDUTY_STATE_CODE,POST_CODE,OCUPTN_CLASS_CODE,STEP_LVL_PREM_CODE,SUM_INSURED_AMT,AT_RISK_AMT,SERIES_START_DATE,ANNUAL_POL_FEE,PREM_AMT,EXPLICIT_SDUTY_AMT,PREM_FREQ,ANNUAL_PREM,ASSESS_CODE,SR_CODES,SR_RATE,SR_DISC_PC,RISK_WAIT_PERIOD,SICKNESS_BENEFIT_PERIOD
,INJURY_BENEFIT_PERIOD,INDMNTY_OPTION_CODE,AIDS_CVRG_CODE,BENEFIT_INDEXATION,SUM_INSRD_FREQ_CODE,INCR_CLAIM_OPT_PCNT,CAMPAIGN_CODES,DIAL_DOWN_PREM_PCNT,ASSESS_LOAD_PCNT,SUBJECT_TO_CAMPAIGN_PCNT,ADJ_ENTRY_AGE,GRP_DISC_PCNT,DD_DISC_PCNT,LSIDP_DISC_PCNT,LSIDA_DISC_AMT,MPD_DISC_PCNT,VCDP_DISC_PCNT,LD_DISC_PCNT,TPD_OVERLAP_DISC,FULL_DAY_CVRG_CODE,SWITCH_AGE,NUM_TRANCHES,CPI_INCR,FREQ_LDNG_AMT,SALESCHANNEL,RISK_CMSN_TYPE_CODE,TABLE_CODE,COVER_TYPE,LINKED_BENEFIT_CODE,OPTION_FLAGS,UNDERWRITING_CATEGORY,PROJECTION_GROUP,MP,DTH_SUM_ASSD
,TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN,PROPHET_PREM,MIN_VAL_APPLIES,QS_START_DATE,QS_INCR_DATE,QS_CONV_DATE,QS_PC_BASE,QS_PC_INCR,QS_PC_CONV,QS_IC_PC_BASE,QS_IC_PC_INCR,QS_IC_PC_CONV,QS_OC_PC_BASE,QS_OC_PC_INCR,QS_OC_PC_CONV,QS_OCX_PC_BASE,QS_OCX_PC_INCR,QS_OCX_PC_CONV,QS_ANN_PREM_IF,QS_GAP_MONTHS,QS_AMT_REINP_CURR,QS_AMT_REINP_BCKD,QS_AMT_IC_BASE,QS_AMT_IC_INCR,QS_AMT_OC_CURR,QS_AMT_OC_BCKD,QS_AMT_OCX_CURR,QS_AMT_OCX_BCKD,QS_AMT_LAPSE_RVS,COMMENT,ACODE,PCODE,CONVERTED_CONTRACT_RISK_KEY,CONVERTED_CATEGORY,CONVERTED_CENSUS_DATE,AGE,SS_PC
,SS_OCCUPATION,SS_DTH_BASE,SS_DTH_MULT,SS_TPD_BASE,SS_TPD_MULT,SS_CC_BASE,SS_CC_MULT,SS_IP_BASE,SS_IP_MULT,SS_ANN_PREM,SS_PREM_CURR,SS_PREM_BCKD,Process_Log_Id,SS_DTH_Blended,SS_TPD_Blended,SS_CC_Blended,SS_IP_Blended,MDM_PARTY_KEY,Reins_Life_Identifier,PREV_Reins_Life_Identifier,PARTY_KEY_TYPE,Reins_Life_Grouping_Change,Created_By,Created_Date_Time,QS_OC_PC_Base_Blended,QS_OC_PC_INCR_Blended,QS_OC_PC_CONV_Blended,QS_OCX_PC_Base_Blended,QS_OCX_PC_INCR_Blended,QS_OCX_PC_CONV_Blended , QS_Treaty_id, SS_Treaty_id)  
  Select CENSUS_DATE,CONTRACT_KEY,PARTY_KEY,CONTRACT_RISK_KEY,CONTRACT_ID,PAS_CLIENT_ID,PRODUCT_SYSTEM_CODE,FIRST_NAME,MIDDLE_NAME,SURNAME,GENDER_CODE,DOB,CONTRACT_START_DATE,PRODUCT_CODE,CLASS_OF_BUSN_CODE,PRODUCT_OPTION_CODE,PRODUCT_OPT_GROUP_DESC,RISK_START_DATE,RISK_EXPR_DATE,SMOKER_STATUS_CODE,SDUTY_STATE_CODE,POST_CODE,OCUPTN_CLASS_CODE,STEP_LVL_PREM_CODE,SUM_INSURED_AMT,AT_RISK_AMT,SERIES_START_DATE,ANNUAL_POL_FEE,PREM_AMT,EXPLICIT_SDUTY_AMT,PREM_FREQ,ANNUAL_PREM,ASSESS_CODE,SR_CODES,SR_RATE,SR_DISC_PC,RISK_WAIT_PERIOD,SICKNESS_BENEFIT_PERIOD,INJURY_BENEFIT_PERIOD
,INDMNTY_OPTION_CODE,AIDS_CVRG_CODE,BENEFIT_INDEXATION,SUM_INSRD_FREQ_CODE,INCR_CLAIM_OPT_PCNT,CAMPAIGN_CODES,DIAL_DOWN_PREM_PCNT,ASSESS_LOAD_PCNT,SUBJECT_TO_CAMPAIGN_PCNT,ADJ_ENTRY_AGE,GRP_DISC_PCNT,DD_DISC_PCNT,LSIDP_DISC_PCNT,LSIDA_DISC_AMT,MPD_DISC_PCNT,VCDP_DISC_PCNT,LD_DISC_PCNT,TPD_OVERLAP_DISC,FULL_DAY_CVRG_CODE,SWITCH_AGE,NUM_TRANCHES,CPI_INCR,FREQ_LDNG_AMT,SALESCHANNEL,RISK_CMSN_TYPE_CODE,TABLE_CODE,COVER_TYPE,LINKED_BENEFIT_CODE,OPTION_FLAGS,UNDERWRITING_CATEGORY,PROJECTION_GROUP,MP,DTH_SUM_ASSD,TPD_SUM_ASSD,CC_SUM_ASSD,ANN_PHI_BEN,PROPHET_PREM,MIN_VAL_APPLIES,QS_START_DATE
,QS_INCR_DATE,QS_CONV_DATE,QS_PC_BASE,QS_PC_INCR,QS_PC_CONV,QS_IC_PC_BASE,QS_IC_PC_INCR,QS_IC_PC_CONV,QS_OC_PC_BASE,QS_OC_PC_INCR,QS_OC_PC_CONV,QS_OCX_PC_BASE,QS_OCX_PC_INCR,QS_OCX_PC_CONV,QS_ANN_PREM_IF,QS_GAP_MONTHS,QS_AMT_REINP_CURR,QS_AMT_REINP_BCKD,QS_AMT_IC_BASE,QS_AMT_IC_INCR,QS_AMT_OC_CURR,Isnull(QS_AMT_OC_BCKD,0) as QS_AMT_OC_BCKD ,QS_AMT_OCX_CURR,Isnull(QS_AMT_OCX_BCKD,0) as QS_AMT_OCX_BCKD,QS_AMT_LAPSE_RVS,COMMENT,ACODE,PCODE,CONVERTED_CONTRACT_RISK_KEY,CONVERTED_CATEGORY,CONVERTED_CENSUS_DATE,AGE,SS_PC,SS_OCCUPATION,SS_DTH_BASE,SS_DTH_MULT,SS_TPD_BASE,SS_TPD_MULT,SS_CC_BASE,SS_CC_MULT,SS_IP_BASE,SS_IP_MULT,SS_ANN_PREM,SS_PREM_CURR
,SS_PREM_BCKD,Process_Log_ID,SS_DTH_Blended,SS_TPD_Blended,SS_CC_Blended,SS_IP_Blended,MDM_PARTY_KEY,Reins_Life_Identifier,PREV_Reins_Life_Identifier,PARTY_KEY_TYPE,Reins_Life_Grouping_Change,Created_By,Created_Date_Time,QS_OC_PC_Base_Blended,QS_OC_PC_INCR_Blended,QS_OC_PC_CONV_Blended,QS_OCX_PC_Base_Blended,QS_OCX_PC_INCR_Blended,QS_OCX_PC_CONV_Blended , QS_Treaty_id, SS_Treaty_id FROM INFORCE_TEMP_' + @Pas 
	  

--Print len(@SQL)

       
EXECUTE sp_executesql @SQL
             SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
             Print 'Records Inserted into Inforce for the Census Date for Pas ' + @Pas + convert(varchar(50), @InsertRowCount)
       

       Commit TRAN InsertToInforce

Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage VARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT 
        @ErrorMessage = ERROR_MESSAGE(),
        @ErrorSeverity = ERROR_SEVERITY(),
        @ErrorState = ERROR_STATE();

    -- Use RAISERROR inside the CATCH block to return error
    -- information about the original error that caused
    -- execution to jump to the CATCH block.
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               );
	IF @@TRANCOUNT > 0
	ROLLBACK;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END




GO
/****** Object:  StoredProcedure [dbo].[usp_publishToMR_Claim_Bdx_IP]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 29/06/2020
-- Description:	Proc for Loading from temporary work table with Munich Re bdx for Claim IP and conversion data from Inforce to the Final table for Munich Re Prem Bdx
-- =============================================

CREATE PROCEDURE [dbo].[usp_publishToMR_Claim_Bdx_IP]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	delete from [dbo].M_WEBXL_AMP_IP_Claims_Bdx
	where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'

	 SET @DeleteRowCount = @@ROWCOUNT;

	BEGIN TRAN T1;
--

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Bdx]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAID_FROM_DATE]
           ,[PAID_TO_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[OFFSET_IND]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAID_FROM_DATE]
      ,[PAID_TO_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[OFFSET_IND]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
      ,[Source_Type]
      ,[Reins_Benefit_Type]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Updated_Date]
      ,[Updated_By]
  FROM [dbo].[M_WEBXL_AMP_IP_Claims_Bdx_Temp]

  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

	EXEC [dbo].[usp_GUI_Load_MunichRe_IPClmFinalView] @ProcessingMonthYear

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_publishToMR_Claim_Bdx_LS]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: 29/06/2020
-- Description:	Proc for Loading from temporary work table with Munich Re bdx for Claim LS and conversion data from Inforce to the Final table for Munich Re Claim IP Bdx
-- =============================================

CREATE PROCEDURE [dbo].[usp_publishToMR_Claim_Bdx_LS]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	delete from [dbo].M_WEBXL_AMP_LS_Claims_Bdx
	where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'

	 SET @DeleteRowCount = @@ROWCOUNT;

	BEGIN TRAN T1;
--


INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Bdx]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[PAY_DATE]
           ,[PAY_AMT]
           ,[REINS_RECOVERY_AMT]
           ,[PAY_DESC]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[BENEFIT_TYPE_DESC]
           ,[INCURRED_DATE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[OCUPTN_CLASS_CODE]
           ,[CLAIM_STATUS]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[PAY_RELEASE_DATE]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[PAY_DATE]
      ,[PAY_AMT]
      ,[REINS_RECOVERY_AMT]
      ,[PAY_DESC]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[BENEFIT_TYPE_DESC]
      ,[INCURRED_DATE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[OCUPTN_CLASS_CODE]
      ,[CLAIM_STATUS]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[PAY_RELEASE_DATE]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
      ,[Source_Type]
      ,[Reins_Benefit_Type]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Updated_Date]
      ,[Updated_By]
  FROM [dbo].[M_WEBXL_AMP_LS_Claims_Bdx_Temp]


  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

		EXEC [dbo].usp_GUI_Load_MunichRe_LSClmFinalView @ProcessingMonthYear	

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_publishToMR_Claim_Listing_IP]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: 29/06/2020
-- Description:	Proc for Loading from temporary work table with Munich Re Listing for Claim IP and conversion data from Inforce to the Final table for Munich Re Claim Listing IP
-- =============================================

CREATE PROCEDURE [dbo].[usp_publishToMR_Claim_Listing_IP]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	delete from [dbo].M_WEBXL_AMP_IP_Claims_Listing
	where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'

	 SET @DeleteRowCount = @@ROWCOUNT;

	BEGIN TRAN T1;
--

INSERT INTO [dbo].[M_WEBXL_AMP_IP_Claims_Listing]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[SEX]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[CRNT_SUM_INSURED_AMT]
           ,[CRNT_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[ESC_IND]
           ,[INDMNTY_AGRD_VALUE]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[SEX]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[CRNT_SUM_INSURED_AMT]
      ,[CRNT_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[ESC_IND]
      ,[INDMNTY_AGRD_VALUE]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
      ,[Source_Type]
      ,[Reins_Benefit_Type]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Updated_Date]
      ,[Updated_By]
  FROM [dbo].[M_WEBXL_AMP_IP_Claims_Listing_Temp]

  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

		EXEC [dbo].[usp_GUI_Load_MunichRe_IPClmFinalView] @ProcessingMonthYear

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_publishToMR_Claim_Listing_LS]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		RRNAA2
-- Create date: 29/06/2020
-- Description:	Proc for Loading from temporary work table with Munich Re Listing for Claim LS and conversion data from Inforce to the Final table for Munich Re Claim Listing LS
-- =============================================

CREATE PROCEDURE [dbo].[usp_publishToMR_Claim_Listing_LS]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	delete from [dbo].M_WEBXL_AMP_LS_Claims_Listing
	where [Month_Effective_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'

	 SET @DeleteRowCount = @@ROWCOUNT;

	BEGIN TRAN T1;
--

INSERT INTO [dbo].[M_WEBXL_AMP_LS_Claims_Listing]
           ([CLAIM_NUM]
           ,[POLICY_NUM]
           ,[WEBXL_POLICY_NUM]
           ,[SURNAME]
           ,[FIRST_NAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[BENEFIT_CODE]
           ,[BENEFIT_TYPE_DESC]
           ,[ORIG_SUM_INSURED_AMT]
           ,[ORIG_SUM_REINS_AMT]
           ,[INCURRED_DATE]
           ,[CLAIM_CAUSE]
           ,[CLAIMANT_OCPTN]
           ,[CLAIM_STATUS]
           ,[CLAIM_NTFCTN_DATE]
           ,[CLAIM_FINALISED_DATE]
           ,[CLAIM_FINALISED_REASON]
           ,[CLAIM_REOPEN_DATE]
           ,[CLAIM_REOPEN_REASON]
           ,[CLAIM_CTGRY_DESC]
           ,[SCVID]
           ,[REINS_PCNT]
           ,[Month_Effective_Date]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT [CLAIM_NUM]
      ,[POLICY_NUM]
      ,[WEBXL_POLICY_NUM]
      ,[SURNAME]
      ,[FIRST_NAME]
      ,[GENDER_CODE]
      ,[DOB]
      ,[POLICY_COMM_DATE]
      ,[PRODUCT_CODE]
      ,[BENEFIT_CODE]
      ,[BENEFIT_TYPE_DESC]
      ,[ORIG_SUM_INSURED_AMT]
      ,[ORIG_SUM_REINS_AMT]
      ,[INCURRED_DATE]
      ,[CLAIM_CAUSE]
      ,[CLAIMANT_OCPTN]
      ,[CLAIM_STATUS]
      ,[CLAIM_NTFCTN_DATE]
      ,[CLAIM_FINALISED_DATE]
      ,[CLAIM_FINALISED_REASON]
      ,[CLAIM_REOPEN_DATE]
      ,[CLAIM_REOPEN_REASON]
      ,[CLAIM_CTGRY_DESC]
      ,[SCVID]
      ,[REINS_PCNT]
      ,[Month_Effective_Date]
      ,[Source_Type]
      ,[Reins_Benefit_Type]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Updated_Date]
      ,[Updated_By]
  FROM [dbo].[M_WEBXL_AMP_LS_Claims_Listing_Temp]

  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

	EXEC [dbo].usp_GUI_Load_MunichRe_LSClmFinalView @ProcessingMonthYear	


	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON





GO
/****** Object:  StoredProcedure [dbo].[usp_publishToMR_Premium_Bdx_T1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 25/06/2020
-- Description:	Proc for Loading from temporary work table with Munich Re bdx for Premium and conversion data from Inforce to the Final table for Munich Re Prem Bdx
-- =============================================

CREATE PROCEDURE [dbo].[usp_publishToMR_Premium_Bdx_T1]
  @ProcessLogID Int
  ,@ProcessingMonthYear NVARCHAR(100)
AS

BEGIN

SET NOCOUNT ON;

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
	BEGIN TRY;

	delete from [dbo].[P_BORDEREAU_AMPL_MR_T1]
	where [Census_Date] = convert(datetime,@ProcessingMonthYear);
	PRINT 'Table deleted for the census date'

	 SET @DeleteRowCount = @@ROWCOUNT;

	BEGIN TRAN T1;
--

INSERT INTO [dbo].[P_BORDEREAU_AMPL_MR_T1]
           ([PBdxRowCount]
		   ,[CENSUS_DATE_AsDate]
		   ,[CENSUS_DATE]
           ,[SCV_ID]
           ,[FIRST_NAME]
           ,[SECOND_NAME]
           ,[SURNAME]
           ,[GENDER_CODE]
           ,[DOB]
           ,[JOINT_LIFE_IND]
           ,[POST_CODE]
           ,[STATE_CODE]
           ,[POLICY_NUM]
           ,[POLICY_COMM_DATE]
           ,[PRODUCT_CODE]
           ,[PRODUCT_NAME]
           ,[CLASS_OF_BUSN_CODE]
           ,[STATUS_CODE]
           ,[REPLACE_POLICY_NUM]
           ,[BENEFIT_CODE]
           ,[BENEFIT_DESC]
           ,[BENEFIT_STATUS_CODE]
           ,[BENEFIT_TYPE]
           ,[BENEFIT_COMM_DATE]
           ,[BENEFIT_EXPR_DATE]
           ,[SMOKER_STATUS_CODE]
           ,[OCUPTN_CLASS_CODE]
           ,[PREM_TYPE_CODE]
           ,[PREM_FREQ_CODE]
           ,[LINKED_BENEFIT_CODE]
           ,[DISABL_DEFTN_CODE]
           ,[CMSN_TYPE_CODE]
           ,[REINSTATE_IND]
           ,[PREM_TERM]
           ,[POLICY_FEE_AMT]
           ,[STAMP_DUTY_AMT]
           ,[ASSESS_CODE]
           ,[OCUPTN_LOADING_PCNT]
           ,[ASSESS_LOAD_PCNT]
           ,[POLICY_SIZE_DISC_PCNT]
           ,[PERM_DISC_PCNT]
           ,[TEMP_DISC_PCNT]
           ,[TEMP_DISC_EXP]
           ,[DIAL_DOWN_CMSN_PCNT]
           ,[ACC_BENEFIT_PERIOD]
           ,[SICK_BENEFIT_PERIOD]
           ,[WAIT_PERIOD]
           ,[CLAIM_ESC_IND]
           ,[CPI_IND]
           ,[PREM_RATE_GUAR_IND]
           ,[DAY_1_OPTION_IND]
           ,[PREM_WAIVER_IND]
           ,[BUYBACK_IND]
           ,[AIDS_COVER_IND]
           ,[CHRONIC_OPTION_IND]
           ,[SUPER_CONTRB_OPTION_IND]
           ,[ON_HOLD_OPTION_IND]
           ,[INDMNTY_OPTION_IND]
           ,[TRAUMA_BUYBACK_IND]
           ,[TRAUMA_PARTIALS_IND]
           ,[TRAUMA_PARTIALS_PLUS_IND]
           ,[TRAUMA_REINST_IND]
           ,[TPD_OWN_OCC_IND]
           ,[TPD_PLUS_IND]
           ,[SPECIAL_RISK_CODE]
           ,[SPECIAL_RISK_RATE]
           ,[REINS_TYPE_CODE]
           ,[WEBXL_POLICY_NUM]
           ,[TRANCHE_EFTV_DATE]
           ,[TRANCHE_PROCESS_DATE]
           ,[TRANCHE_LAYER_NUM]
           ,[TRANCHE_REASON_CODE]
           ,[UWRITE_CATEGORY_CODE]
           ,[SUM_INSURED_AMT]
           ,[TOTAL_SUM_INSURED_AMT]
           ,[EXTRNL_SUM_INSURED_AMT]
           ,[TOTAL_EXTRNL_SUM_INSURED_AMT]
           ,[RETAINED_SUM_INSURED_AMT]
           ,[TOTAL_RETAINED_SUM_INSURED_AMT]
           ,[CUST_ANNUAL_PREM_AMT]
           ,[TOTAL_CUST_ANNUAL_PREM_AMT]
           ,[APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_APLCBLE_ANNUAL_PREM_AMT]
           ,[RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT]
           ,[MNTHLY_REINS_PREM_AMT]
           ,[TOTAL_MNTHLY_REINS_PREM_AMT]
           ,[REINS_CMSN_INF_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_INF_INITIAL_AMT]
           ,[REINS_CMSN_INF_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_INF_ONGOING_AMT]
           ,[REINS_CMSN_NB_INITIAL_AMT]
           ,[TOTAL_REINS_CMSN_NB_INITIAL_AMT]
           ,[REINS_CMSN_NB_ONGOING_AMT]
           ,[TOTAL_REINS_CMSN_NB_ONGOING_AMT]
           ,[PAS_CLIENT_ID]
           ,[PRODUCT_SYSTEM_CODE]
           ,[AT_RISK_AMT]
           ,[INCR_CLAIM_OPT_PCNT]
           ,[SERIES_START_DATE]
           ,[CAMPAIGN_CODES]
           ,[DIAL_DOWN_PREM_PCNT]
           ,[SUBJECT_TO_CAMPAIGN_PCNT]
           ,[ADJ_ENTRY_AGE]
           ,[SWITCH_AGE]
           ,[TPD_OVERLAP_DISC]
           ,[FULL_DAY_CVRG_CODE]
           ,[FREQ_LDNG_AMT]
           ,[SALES_CHANNEL]
           ,[TABLE_CODE]
           ,[COVER_TYPE]
           ,[SUM_INSRD_FREQ_CODE]
           ,[GRP_DISC_PCNT]
           ,[DD_DISC_PCNT]
           ,[LSIDP_DISC_PCNT]
           ,[LSIDA_DISC_AMT]
           ,[MPD_DISC_PCNT]
           ,[VCDP_DISC_PCNT]
           ,[LD_DISC_PCNT]
           ,[PERIOD_FROM_TO_DATE]
           ,[REINSURANCE_PCNT]
           ,[SOURCE_OF_BUSN_CODE]
           ,[MYSUPER_CODE]
           ,[RISK_MODULE_CODE]
           ,[Source_Type]
           ,[Reins_Benefit_Type]
           ,[Created_Date_Time]
           ,[Created_By]
           ,[Updated_Date]
           ,[Updated_By])
SELECT
	   [PBdxRowCount] 
	  ,CENSUS_DATE as [CENSUS_DATE_AsDate]
	  --,CENSUS_DATE
	  ,convert(varchar(10), CENSUS_DATE,101) as CENSUS_DATE
      ,[SCV_ID]
      ,[FIRST_NAME]
      ,[SECOND_NAME]
      ,[SURNAME]
      ,[GENDER_CODE]
      ,format(DOB,'dd/MM/yyyy') as DOB
      ,[JOINT_LIFE_IND]
      ,[POST_CODE]
      ,[STATE_CODE]
      ,[POLICY_NUM]
      ,format(POLICY_COMM_DATE,'dd/MM/yyyy') as POLICY_COMM_DATE
      ,[PRODUCT_CODE]
      ,[PRODUCT_NAME]
      ,[CLASS_OF_BUSN_CODE]
      ,[STATUS_CODE]
      ,[REPLACE_POLICY_NUM]
      ,[BENEFIT_CODE]
      ,[BENEFIT_DESC]
      ,[BENEFIT_STATUS_CODE]
      ,[BENEFIT_TYPE]
      ,format([BENEFIT_COMM_DATE],'dd/MM/yyyy') as [BENEFIT_COMM_DATE]
      ,format([BENEFIT_EXPR_DATE],'dd/MM/yyyy') as [BENEFIT_EXPR_DATE]
      ,[SMOKER_STATUS_CODE]
      ,[OCUPTN_CLASS_CODE]
      ,[PREM_TYPE_CODE]
      ,[PREM_FREQ_CODE]
      ,[LINKED_BENEFIT_CODE]
      ,[DISABL_DEFTN_CODE]
      ,[CMSN_TYPE_CODE]
      ,[REINSTATE_IND]
      ,[PREM_TERM]
      ,[POLICY_FEE_AMT]
      ,[STAMP_DUTY_AMT]
      ,[ASSESS_CODE]
      ,[OCUPTN_LOADING_PCNT]
      ,[ASSESS_LOAD_PCNT]
      ,[POLICY_SIZE_DISC_PCNT]
      ,[PERM_DISC_PCNT]
      ,[TEMP_DISC_PCNT]
      ,[TEMP_DISC_EXP]
      ,[DIAL_DOWN_CMSN_PCNT]
      ,[ACC_BENEFIT_PERIOD]
      ,[SICK_BENEFIT_PERIOD]
      ,[WAIT_PERIOD]
      ,[CLAIM_ESC_IND]
      ,[CPI_IND]
      ,[PREM_RATE_GUAR_IND]
      ,[DAY_1_OPTION_IND]
      ,[PREM_WAIVER_IND]
      ,[BUYBACK_IND]
      ,[AIDS_COVER_IND]
      ,[CHRONIC_OPTION_IND]
      ,[SUPER_CONTRB_OPTION_IND]
      ,[ON_HOLD_OPTION_IND]
      ,[INDMNTY_OPTION_IND]
      ,[TRAUMA_BUYBACK_IND]
      ,[TRAUMA_PARTIALS_IND]
      ,[TRAUMA_PARTIALS_PLUS_IND]
      ,[TRAUMA_REINST_IND]
      ,[TPD_OWN_OCC_IND]
      ,[TPD_PLUS_IND]
      ,[SPECIAL_RISK_CODE]
      ,[SPECIAL_RISK_RATE]
      ,[REINS_TYPE_CODE]
      ,[WEBXL_POLICY_NUM]
      ,[TRANCHE_EFTV_DATE]
      ,[TRANCHE_PROCESS_DATE]
      ,[TRANCHE_LAYER_NUM]
      ,[TRANCHE_REASON_CODE]
      ,[UWRITE_CATEGORY_CODE]
      ,[SUM_INSURED_AMT]
      ,[TOTAL_SUM_INSURED_AMT]
      ,[EXTRNL_SUM_INSURED_AMT]
      ,[TOTAL_EXTRNL_SUM_INSURED_AMT]
      ,[RETAINED_SUM_INSURED_AMT]
      ,[TOTAL_RETAINED_SUM_INSURED_AMT]
      ,[CUST_ANNUAL_PREM_AMT]
      ,[TOTAL_CUST_ANNUAL_PREM_AMT]
      ,[APLCBLE_ANNUAL_PREM_AMT]
      ,[TOTAL_APLCBLE_ANNUAL_PREM_AMT]
      ,[RETAINED_APLCBLE_ANNUAL_PREM_AMT]
      ,[TOTAL_RETAINED_APLCBLE_ANNUAL_PREM_AMT]
      ,[MNTHLY_REINS_PREM_AMT]
      ,[TOTAL_MNTHLY_REINS_PREM_AMT]
      ,[REINS_CMSN_INF_INITIAL_AMT]
      ,[TOTAL_REINS_CMSN_INF_INITIAL_AMT]
      ,[REINS_CMSN_INF_ONGOING_AMT]
      ,[TOTAL_REINS_CMSN_INF_ONGOING_AMT]
      ,[REINS_CMSN_NB_INITIAL_AMT]
      ,[TOTAL_REINS_CMSN_NB_INITIAL_AMT]
      ,[REINS_CMSN_NB_ONGOING_AMT]
      ,[TOTAL_REINS_CMSN_NB_ONGOING_AMT]
      ,[PAS_CLIENT_ID]
      ,[PRODUCT_SYSTEM_CODE]
      ,[AT_RISK_AMT]
      ,[INCR_CLAIM_OPT_PCNT]
      ,[SERIES_START_DATE]
      ,[CAMPAIGN_CODES]
      ,[DIAL_DOWN_PREM_PCNT]
      ,[SUBJECT_TO_CAMPAIGN_PCNT]
      ,[ADJ_ENTRY_AGE]
      ,[SWITCH_AGE]
      ,[TPD_OVERLAP_DISC]
      ,[FULL_DAY_CVRG_CODE]
      ,[FREQ_LDNG_AMT]
      ,[SALES_CHANNEL]
      ,[TABLE_CODE]
      ,[COVER_TYPE]
      ,[SUM_INSRD_FREQ_CODE]
      ,[GRP_DISC_PCNT]
      ,[DD_DISC_PCNT]
      ,[LSIDP_DISC_PCNT]
      ,[LSIDA_DISC_AMT]
      ,[MPD_DISC_PCNT]
      ,[VCDP_DISC_PCNT]
      ,[LD_DISC_PCNT]
      ,[PERIOD_FROM_TO_DATE]
      ,[REINSURANCE_PCNT]
      ,[SOURCE_OF_BUSN_CODE]
      ,[MYSUPER_CODE]
      ,[RISK_MODULE_CODE]
      ,[Source_Type]
      ,[Reins_Benefit_Type]
      ,[Created_Date_Time]
      ,[Created_By]
      ,[Updated_Date]
      ,[Updated_By]
  FROM [dbo].[P_BORDEREAU_AMPL_MR_T1_Temp]

  
 --
 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
	--
	COMMIT TRAN T1;

	

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH

END





GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_ACE_Claim_Enrich_Rule1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_ACE_Claim_Enrich_Rule1]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Claim_Number varchar(30)
	DECLARE @Transaction_Process_date datetime
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @Policy_Number varchar(50)
	DECLARE @Claim_Source_id varchar (15)
	DECLARE @Source_trnx_id varchar(20)

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Get_Policy_list (
			Claim_Number varchar(30),
			Source_trnx_id varchar(20)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.Claim_Number, A.Source_trnx_id
			From dbo.Reins_Claim_expense_trnx A
			Where Source_Trnx_Id like ''AB%''
			and claim_enrichment_rule is null
			
			'
			
			
			
	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Claim_Number,
	@Source_trnx_id

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where Claim_number = @Claim_Number
		--and EDW_Product_system_code = 'CP'
		--and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'
	
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
			UPDATE dbo.Reins_Claim_Expense_Trnx
			SET
				 Product_System_Code = B.EDW_Product_system_code,
				 EDW_Contract_Id = B.EDW_Contract_Id,
				 EDW_Contract_key = B.EDW_COntract_key,
				 EDW_Product_Key = B.EDW_Product_Key,
				 EDW_Product_Code = B.EDW_Product_Code,
				 EDW_Class_Of_Business = B.EDW_Class_Of_Business,
				 [Product_Option_Code] = B.[EDW_Product_Option_Code] ,
				 [Layer_0_Reins_Percent] = B.[Layer_0_Reins_Percent],
				 [Layer_1_Reins_Percent] = B.[Layer_1_Reins_Percent],
				 [Layer_1_Treaty_Id] = B.[Layer_1_Treaty_Id],
				 [Layer_2_Treaty_Id] = B.[Layer_2_Treaty_Id], 
				 Claim_Source_id = B.Claim_Source_id ,
				 Layer_2_Reins_Percent = B.Layer_2_Reins_Percent,
				 [Claim_enrichment_rule] = 'CE_AB_Claim_Pol',
				 --Updated_by = SYstem_user,
				  Updated_by = ORIGINAL_LOGIN(),
				 Updated_date_time = getdate()

			FROM dbo.Reins_Claim_Expense_Trnx A ,
				 dbo.Reins_Claim_Listing B
			Where A.Claim_number = B.Claim_Number
				  AND A.Claim_number = @Claim_Number
				  AND A.Policy_Number = B.Policy_Number
				  --AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date, cast('2899-12-31' as date))
				  AND B.Row_End_Date = '3000-12-31'
				  AND A.Source_Trnx_id = @Source_trnx_id

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount
				  			
			COMMIT Transaction

	
		End
		
		If @NumRows > 1
		Begin
		Select top 1 @Claim_Source_id = Claim_Source_id from dbo.Reins_Claim_Listing
		Where Claim_number = @Claim_Number
		and Row_End_Date = '3000-12-31'
		and Claim_Finalised_Date is null
		order by Claim_number, Benefit_Number asc

		UPDATE dbo.Reins_Claim_Expense_Trnx
		SET	 Product_System_Code = B.EDW_Product_system_code,
				 EDW_Contract_Id = B.EDW_Contract_Id,
				 EDW_Contract_key = B.EDW_COntract_key,
				 EDW_Product_Key = B.EDW_Product_Key,
				 EDW_Product_Code = B.EDW_Product_Code,
				 EDW_Class_Of_Business = B.EDW_Class_Of_Business,
				 [Product_Option_Code] = B.[EDW_Product_Option_Code] ,
				 [Layer_0_Reins_Percent] = B.[Layer_0_Reins_Percent],
				 [Layer_1_Reins_Percent] = B.[Layer_1_Reins_Percent],
				 [Layer_1_Treaty_Id] = B.[Layer_1_Treaty_Id],
				 [Layer_2_Treaty_Id] = B.[Layer_2_Treaty_Id], 
				 Claim_Source_id = B.Claim_Source_id ,
				 Layer_2_Reins_Percent = B.Layer_2_Reins_Percent,
				 [Claim_enrichment_rule] = 'CE_AB_Claim_Pol',
				 Updated_by = ORIGINAL_LOGIN(),
				 Updated_date_time = getdate()

			FROM dbo.Reins_Claim_Expense_Trnx A ,
				 dbo.Reins_Claim_Listing B
		Where 
			 A.Claim_number = B.Claim_Number
			 AND A.Claim_number = @Claim_Number
			 AND A.Policy_Number = B.Policy_Number
			 and B.Claim_Source_id = @Claim_Source_id
			 and A.Source_Trnx_Id = @Source_trnx_id

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

		END
	FETCH NEXT FROM Policy_List_To_Process into 
	@Claim_Number,
	@Source_trnx_id

	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
		
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
	
END
































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_ACE_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_ACE_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
--DECLARE @Source_Claim_Number	varchar(20)
DECLARE @CLIENT_REF_ID_1 varchar(50)
DECLARE @Claim_reference_Id varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
--DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @EDW_Contract_key int
DECLARE @Month_Effective_Date datetime
DECLARE @Claim_Number varchar(30)

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


--DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
--DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Policy_number  VARCHAR(50), 
			Claim_Number varchar(30),
			Transaction_Process_Date datetime , 
			Transaction_Type VARCHAR(50),
			Month_Effective_Date datetime

)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
				Policy_number, 
				Claim_Number,
				Transaction_Process_Date, 
				Transaction_Type,
				Month_Effective_Date
		FROM dbo.Reins_Able_Claim_Expense_Trnx
		
		WHERE
			Policy_Number is not null
			and exclude_flag = ''N''
			and Claim_expense_id is null
			'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4,5
		
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Policy_number ,
	@Claim_Number ,
	@Transaction_Process_Date	,
	@Transaction_Type,
	@Month_Effective_Date
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	

		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum(dbo.Reins_Able_Claim_Expense_Trnx.Transaction_amount),2)
		FROM 
			dbo.Reins_Able_Claim_Expense_Trnx
		WHERE
		(
			Policy_number			= @Policy_number
		AND Claim_Number  = @Claim_Number		
		AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Transaction_Type	= @Transaction_Type
		-- And it has not been consumed yet
		AND [dbo].Reins_Able_Claim_Expense_Trnx.Claim_Expense_Id Is Null
		
		)

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
		-- For Able Claim Expense Trnxs it as been advised that all the expenses should be assumed as PAID. 
		-- So the status will be marked to CLOSED straightaway and the transaction type will be marked as EXPENSE PAID	
		If @Transaction_Type != 'SKIP'
		BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_effective_Date,
						Policy_number, 
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-PAID',
						'CLOSED',
						@SumOfLEDGER_MVMT_AMT,
						Getdate(),
					--	System_User,
				    	ORIGINAL_LOGIN(),
						-110
					
					)
				
				set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].Reins_Able_Claim_Expense_Trnx
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_By = ORIGINAL_LOGIN(),
					Updated_Date_Time = getdate()
					WHERE 
						(
						Policy_number=@Policy_number
					AND Claim_Number = @Claim_Number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND [Claim_Expense_Id] is null
				
					)

				set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					Claim_Number,
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[GL_Account_Id],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].Reins_Able_Claim_Expense_Trnx.[Able_Claim_Expense_Trnx_Id],
					@NEWClaimExpId,
					[dbo].Reins_Able_Claim_Expense_Trnx.Transaction_Type, 
					[dbo].Reins_Able_Claim_Expense_Trnx.Claim_Number,
					'Y',
					[dbo].Reins_Able_Claim_Expense_Trnx.Transaction_Process_Date as Assumed_Paid_Date, 
					NULL,
					[dbo].Reins_Able_Claim_Expense_Trnx.Policy_number,
					[dbo].Reins_Able_Claim_Expense_Trnx.[Month_Effective_date],
					[dbo].Reins_Able_Claim_Expense_Trnx.[Account_Id],
					[dbo].Reins_Able_Claim_Expense_Trnx.Transaction_Amount, 
					[dbo].Reins_Able_Claim_Expense_Trnx.[Transaction_Effective_date], 
					[dbo].Reins_Able_Claim_Expense_Trnx.Transaction_Process_Date, 
					getdate(),
					ORIGINAL_LOGIN(),
					-110
					FROM 
					[dbo].Reins_Able_Claim_Expense_Trnx
					WHERE
					Policy_number=@Policy_number
					AND Claim_Number = @Claim_Number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

   
				--PRINT @Transaction_Type;

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Policy_number ,
		@Claim_Number ,
		@Transaction_Process_Date	,
		@Transaction_Type,
		@Month_Effective_Date
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_ACE_Policy_LKP]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_ACE_Policy_LKP]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Claim_Number varchar(30)
	DECLARE @Transaction_Process_date datetime
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @Policy_Number varchar(50) = NULL
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	CREATE table #Get_Policy_list (
			Claim_Number varchar(30)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.Claim_Number
			From dbo.Reins_Able_Claim_Expense_Trnx A
			Where Policy_number is null
			and isnull(exclude_flag, ''NA'') != ''Y''

			'
			
	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Claim_Number

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where Claim_number = @Claim_Number
		--and EDW_Product_system_code = 'CP'
		--and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'
		and Policy_Number is not null
	
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
			UPDATE dbo.Reins_Able_Claim_Expense_Trnx
			SET
				 Policy_Number = dbo.Reins_Claim_Listing.Policy_number,
				 Updated_by = SYstem_user,
				 Updated_date_time = getdate()

			FROM dbo.Reins_Able_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where Reins_Able_Claim_Expense_Trnx.Claim_number = Reins_Claim_Listing.Claim_Number
				  AND Reins_Able_Claim_Expense_Trnx.Claim_number = @Claim_Number
				  --AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Able_Claim_Expense_Trnx.Policy_Number is null
				
			SET @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT	  			
			COMMIT Transaction
			
	
		End
		
		If @NumRows > 1
		Begin

		SET @Policy_Number = NULL

		Select top 1 @Policy_Number = Policy_number from dbo.Reins_Claim_Listing
		Where Claim_number = @Claim_Number
		and Row_End_Date = '3000-12-31'
		and Claim_Finalised_Date is null
		order by Claim_number, Benefit_Number asc--, ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date, cast('2899-12-31' as date)) desc

		END
		--Print @Policy_Number
		If @Policy_Number is not null

		Begin

		Begin Transaction
		UPDATE dbo.Reins_Able_Claim_Expense_Trnx
		SET	 Policy_Number = @Policy_Number,
			 Updated_by = SYstem_user,
			 Updated_date_time = getdate()
		Where Claim_number = @Claim_Number
		and Policy_Number is null

		SET @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT
		Commit Transaction

		END

		
		
	FETCH NEXT FROM Policy_List_To_Process into 
	@Claim_Number

	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END










GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Cyclic_Create_ReportTables]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_Cyclic_Create_ReportTables]
	@Reins_Cyclic_Id int = NULL
as
BEGIN

	SET NOCOUNT ON

	-- If Data Exists the ERROR...
	Declare @NUMROWS_COUNT as integer =0

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	
BEGIN TRY

--Begin TRAN TRAN1

	If @Reins_Cyclic_Id is null 
	Begin
	Select @Reins_Cyclic_Id = max(Reins_cyclic_id) from Reins_Cyclic where Reins_Cyclic_status = 'CLOSED'
	END

	Select  @NUMROWS_COUNT = count(*) FROM Reins_Report_Bordereau where Reins_cyclic_id = @Reins_Cyclic_Id
	--select  @NUMROWS_COUNT = @NUMROWS_COUNT  + count(*) FROM Reins_Report_Bordereau
	
	if @NUMROWS_COUNT > 0  
		Begin
			RAISERROR (  'ERROR - Data Already Exists' , -100 , -100 ) 
			RETURN -100
		end


	BEGIN TRANSACTION

	--Build Layer0 Borderaux
	INSERT INTO Reins_Report_Bordereau ( 
		--Keys
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Source_Trnx_Id, 
		Reins_Benefit_Type,
		--Data
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Reins_Percent,
		[Expense_Recovery_Amount],
		Payment_Amount,
		Reins_Recovery_Amt,
		[Current_Monthly_Benefit_Amount] ,
		[Current_Monthly_Reins_Benefit_Amount],
		[Paid_From_Date],
		[Paid_to_Date],
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period,
		Waiting_Period,
		Sum_Insured_on_Incurred_Date,
		[Init_Reins_Amount],
		Incurred_Date,
		OFFSET,
		[Claim_Status],
		Escalation_Ind,
		Ind_Value,
		[Payment_Description],
		Policy_Commencement_Date,
		Claim_Notify_Date,
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date,
		Claim_Reopen_Reason,
	 
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		[Effective_From_To_Date_Description],
		Ready_For_Recovery,
		GL_Product_Code,          --Added 23/10/2018 to enable reporting
		Reins_Life_Identifier
	)
	SELECT 
		--Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		Reins_Treaty.Treaty_Id, 
		Reins_Claim_Expense_Trnx_Recoverable.Source_Trnx_Id,
		Reins_Claim_Listing.Reins_Benefit_Type, -- Reins_benefit_type (IP or LS)
		--Data 
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number) as Claim_no,
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Layer_0_Reins_Percent				AS REINS_PERCENT,  --NEW
		CASE WHEN Transaction_Type in ('Medical', 'Non-Medical' ) then [Layer_0_Reins_Claim_Amount] Else 0 END	as EXP_RECOVERY ,	--EXP_RECOVERY
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS PAYMENT_AMT	, -- PAYMENT_AMT	
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then [Layer_0_Reins_Claim_Amount] ELSE 0 END  as REINS_RECOVERY_AMT	 ,	-- REINS_PAYMENT_AMT	 ,						
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS CURR_MONTH_BEN ,-- CURR_MONTH_BEN					
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then [Layer_0_Reins_Claim_Amount] ELSE 0 END	AS	CURR_REINS_MONTH_BEN ,-- CURR_REINS_MONTH_BEN	
				
		Pay_Date_From,
		Pay_Date_To,
		Cause,
		Occupation,
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END					, --Claim_Type
		Benefit_Period,
		Waiting_Period,
		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, --ORIG_SUM_INS
		Reins_Claim_Listing.Layer_0_Init_Reins_Exposure, --Reins_Claim_Expense_Trnx_Recoverable.[Layer_0_Reins_Claim_Amount] --ORIG_SUM_REINS
		Incurred_Date,
		0, -- offset
		COALESCE(Benefit_Status, Claim_Status),	 --Claim_Status
		Escalation_Ind,
		Ind_Value,
		CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
			THEN pd.[Description]
			ELSE
				Case when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type != 'WOP' then 'Monthly Benefit'
				When Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type = 'WOP' then 'Premium Waiver'
				when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'LS' then 'Sum Insured'
				When Source_trnx_Id like 'AB%' then Transaction_type Else 'Unknown'
				END
		END AS PAY_DESC ,
		Policy_Commencement_Date,
		Claim_Notify_Date,
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date), --Claim_Finalised_Date
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason), --Claim_Finalised_Reason
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date), --Claim_Reopen_Date
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason), --Claim_Reopen_Reason
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Claim_Event_Type,
		Reins_Claim_Listing.EDW_Contract_Id,
		convert( varchar(50) , null )							as EFFECTIVE_FROM_TO_DATE ,  --EFFECTIVE_FROM_TO_DATE
		Reins_Claim_Expense_Trnx_Recoverable.Progress_to_Recovery			as READY_FOR_RECOVERY, -- New
		Reins_Claim_Expense_Trnx_Recoverable.GL_Product_Code, --Added 23/10/2018 to enable reporting 
		Reins_Claim_Listing.Reins_Life_Identifier
	FROM 
		Reins_Cyclic, 
		[dbo].[Reins_Treaty],
		Reins_Claim_Listing ,
		Reins_Claim_Expense_Trnx_Recoverable 
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = Reins_Claim_Expense_Trnx_Recoverable.Ref_Payment_Description_Id
	WHERE 
		Reins_Claim_Listing.Claim_Source_Id = Reins_Claim_Expense_Trnx_Recoverable.Claim_Source_Id
		AND Reins_Claim_Expense_Trnx_Recoverable.[Layer_0_Reins_Claim_Amount] != 0
		AND Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
		AND Treaty_Name = 'Layer 0'
		and Reins_Claim_Expense_Trnx_Recoverable.Reins_Cyclic_Id = @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
		AND Reins_Claim_Expense_Trnx_Recoverable.Progress_to_recovery = 'Y'
		--and Reins_Cyclic.Reins_Cyclic_Effective_Date = Reins_Claim_Expense_Trnx_Recoverable.Month_Effective_Date
		
	set @InsertRowCount = @InsertRowCount + @@Rowcount
		

	--Build Layer1 Borderaux
	INSERT INTO Reins_Report_Bordereau ( 
		--Keys
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Source_Trnx_Id, 
		Reins_Benefit_Type,
		--Data
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Reins_Percent,
		[Expense_Recovery_Amount],
		Payment_Amount,
		Reins_Recovery_Amt,
		[Current_Monthly_Benefit_Amount] ,
		[Current_Monthly_Reins_Benefit_Amount],
		[Paid_From_Date],
		[Paid_to_Date],
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period,
		Waiting_Period,
		Sum_Insured_on_Incurred_Date,
		[Init_Reins_Amount],
		Incurred_Date,
		OFFSET,
		[Claim_Status],
		Escalation_Ind,
		Ind_Value,
		[Payment_Description],
		Policy_Commencement_Date,
		Claim_Notify_Date,
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date,
		Claim_Reopen_Reason,
	 
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		[Effective_From_To_Date_Description],
		Ready_For_Recovery,
		GL_Product_Code,          --Added 23/10/2018 to enable reporting
		Reins_Life_Identifier
	)
	SELECT 
		--Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		Reins_Claim_Expense_Trnx_Recoverable.[Layer_1_Treaty_Id], 
		Reins_Claim_Expense_Trnx_Recoverable.Source_Trnx_Id,
		Reins_Claim_Listing.Reins_Benefit_Type, -- Reins_benefit_type (IP or LS)
		--Data 
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number) as Claim_no,
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Layer_1_Reins_Percent				AS REINS_PERCENT,  --NEW
		CASE WHEN Transaction_Type in ('Medical', 'Non-Medical' ) then Layer_1_Reins_Claim_Amount Else 0 END	as EXP_RECOVERY ,	--EXP_RECOVERY
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS PAYMENT_AMT	, -- PAYMENT_AMT	
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then [Layer_1_Reins_Claim_Amount] ELSE 0 END  as REINS_RECOVERY_AMT	 ,	-- REINS_PAYMENT_AMT	 ,						
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS CURR_MONTH_BEN ,-- CURR_MONTH_BEN					
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then [Layer_1_Reins_Claim_Amount] ELSE 0 END	AS	CURR_REINS_MONTH_BEN ,-- CURR_REINS_MONTH_BEN	
				
		Pay_Date_From,
		Pay_Date_To,
		Cause,
		Occupation,
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END		, --Claim_Type
		Benefit_Period,
		Waiting_Period,
		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, --ORIG_SUM_INS
		Reins_Claim_Listing.Layer_1_Init_Reins_Exposure, --Reins_Claim_Expense_Trnx_Recoverable.[Layer_0_Reins_Claim_Amount] --ORIG_SUM_REINS
		Incurred_Date,
		0, -- offset
		COALESCE(Benefit_Status, Claim_Status),	 --Claim_Status
		Escalation_Ind,
		Ind_Value,
		CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
			THEN pd.[Description]
			ELSE
				Case when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type != 'WOP' then 'Monthly Benefit'
				When Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type = 'WOP' then 'Premium Waiver'
				when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'LS' then 'Sum Insured'
				When Source_trnx_Id like 'AB%' then Transaction_type Else 'Unknown'
				END
		END AS PAY_DESC ,
		Policy_Commencement_Date,
		Claim_Notify_Date,
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date), --Claim_Finalised_Date
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason), --Claim_Finalised_Reason
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date), --Claim_Reopen_Date
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason), --Claim_Reopen_Reason
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Claim_Event_Type,
		Reins_Claim_Listing.EDW_Contract_Id,
		convert( varchar(50) , null )							as EFFECTIVE_FROM_TO_DATE,   --EFFECTIVE_FROM_TO_DATE
		Reins_Claim_Expense_Trnx_Recoverable.Progress_to_Recovery			as READY_FOR_RECOVERY , -- New
		Reins_Claim_Expense_Trnx_Recoverable.GL_Product_Code, --Added 23/10/2018 to enable reporting
		Reins_Claim_Listing.Reins_Life_Identifier

	FROM 
		Reins_Cyclic, 
		Reins_Claim_Listing INNER JOIN (Reins_Treaty INNER JOIN Reins_Claim_Expense_Trnx_Recoverable 
				ON Reins_Treaty.Treaty_Id = Reins_Claim_Expense_Trnx_Recoverable.Layer_1_Treaty_Id) 
					ON Reins_Claim_Listing.Claim_Source_Id = Reins_Claim_Expense_Trnx_Recoverable.Claim_Source_Id
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = Reins_Claim_Expense_Trnx_Recoverable.Ref_Payment_Description_Id
	WHERE 
		Reins_Claim_Expense_Trnx_Recoverable.Layer_1_Reins_Claim_Amount!= 0 
		and Reins_Claim_Expense_Trnx_Recoverable.Reins_Cyclic_Id = @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
		AND Reins_Claim_Expense_Trnx_Recoverable.Progress_to_recovery = 'Y'
		--and Reins_Cyclic.Reins_Cyclic_Effective_Date = Reins_Claim_Expense_Trnx_Recoverable.Month_Effective_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount

	--Build Layer2 Borderaux
	INSERT INTO Reins_Report_Bordereau ( 
		--Keys
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Source_Trnx_Id, 
		Reins_Benefit_Type,
		--Data
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Reins_Percent,
		[Expense_Recovery_Amount],
		Payment_Amount,
		Reins_Recovery_Amt,
		[Current_Monthly_Benefit_Amount] ,
		[Current_Monthly_Reins_Benefit_Amount],
		[Paid_From_Date],
		[Paid_to_Date],
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period,
		Waiting_Period,
		Sum_Insured_on_Incurred_Date,
		[Init_Reins_Amount],
		Incurred_Date,
		OFFSET,
		[Claim_Status],
		Escalation_Ind,
		Ind_Value,
		[Payment_Description],
		Policy_Commencement_Date,
		Claim_Notify_Date,
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date,
		Claim_Reopen_Reason,
	 
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		[Effective_From_To_Date_Description],
		Ready_For_Recovery,
		GL_Product_Code ,         --Added 23/10/2018 to enable reporting
		Reins_Life_Identifier
	)
	SELECT 
	--Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		[Reins_Treaty].[Treaty_Id], 
		Reins_Claim_Expense_Trnx_Recoverable.Source_Trnx_Id,
		Reins_Claim_Listing.Reins_Benefit_Type, -- Reins_benefit_type (IP or LS)
		--Data 
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number) as Claim_no,
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Layer_2_Reins_Percent				AS REINS_PERCENT,  --NEW
		CASE WHEN Transaction_Type in ('Medical', 'Non-Medical' ) then Layer_2_Reins_Claim_Amount Else 0 END	as EXP_RECOVERY ,	--EXP_RECOVERY
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS PAYMENT_AMT	, -- PAYMENT_AMT	
		CASE WHEN Reins_Benefit_Type = 'LS' AND Source_trnx_Id not like 'AB%' then [Layer_2_Reins_Claim_Amount] ELSE 0 END  as REINS_RECOVERY_AMT	 ,	-- REINS_PAYMENT_AMT	 ,						
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then Transaction_amount ELSE 0 END	AS CURR_MONTH_BEN ,-- CURR_MONTH_BEN					
		CASE WHEN Reins_Benefit_Type = 'IP' AND Source_trnx_Id not like 'AB%' then [Layer_2_Reins_Claim_Amount] ELSE 0 END	AS	CURR_REINS_MONTH_BEN ,-- CURR_REINS_MONTH_BEN	
				
		Pay_Date_From,
		Pay_Date_To,
		Cause,
		Occupation,
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END		, --Claim_Type
		Benefit_Period,
		Waiting_Period,
		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, --ORIG_SUM_INS
		Reins_Claim_Listing.Layer_2_Init_Reins_Exposure, --Reins_Claim_Expense_Trnx_Recoverable.[Layer_0_Reins_Claim_Amount] --ORIG_SUM_REINS
		Incurred_Date,
		0, -- offset
		COALESCE(Benefit_Status, Claim_Status),	 --Claim_Status
		Escalation_Ind,
		Ind_Value,
		CASE WHEN pd.Ref_Payment_Description_Id IS NOT NULL
			THEN pd.[Description]
			ELSE
				Case when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type != 'WOP' then 'Monthly Benefit'
				When Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'IP' and Transaction_type = 'WOP' then 'Premium Waiver'
				when Reins_Claim_Expense_Trnx_Recoverable.Reins_benefit_Category = 'LS' then 'Sum Insured'
				When Source_trnx_Id like 'AB%' then Transaction_type Else 'Unknown'
				END
		END AS PAY_DESC ,
		Policy_Commencement_Date,
		Claim_Notify_Date,
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date), --Claim_Finalised_Date
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason), --Claim_Finalised_Reason
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date), --Claim_Reopen_Date
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason), --Claim_Reopen_Reason
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Claim_Event_Type,
		Reins_Claim_Listing.EDW_Contract_Id,
		convert( varchar(50) , null )							as EFFECTIVE_FROM_TO_DATE,   --EFFECTIVE_FROM_TO_DATE
		Reins_Claim_Expense_Trnx_Recoverable.Progress_to_Recovery			as READY_FOR_RECOVERY, -- New
		Reins_Claim_Expense_Trnx_Recoverable.GL_Product_Code, --Added 23/10/2018 to enable reporting
		Reins_Claim_Listing.Reins_Life_Identifier

	FROM 
		Reins_Cyclic, 
		[dbo].[Reins_Treaty],
		Reins_Claim_Listing ,
		Reins_Claim_Expense_Trnx_Recoverable
	LEFT JOIN [dbo].[Ref_Payment_Description] AS pd
	ON pd.Ref_Payment_Description_Id = Reins_Claim_Expense_Trnx_Recoverable.Ref_Payment_Description_Id
	WHERE 
		Reins_Claim_Listing.Claim_Source_Id = Reins_Claim_Expense_Trnx_Recoverable.Claim_Source_Id
		AND Reins_Claim_Expense_Trnx_Recoverable.Layer_2_Reins_Claim_Amount != 0
		AND Treaty_Name IN ('Treaty 3', 'Removed from GenRe SS')
		and Reins_Claim_Listing.Layer_2_Treaty_Id = [Reins_Treaty].Treaty_Id	
		and Reins_Claim_Expense_Trnx_Recoverable.Reins_Cyclic_Id = @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
		AND Reins_Claim_Expense_Trnx_Recoverable.Progress_to_recovery = 'Y'
		--and Reins_Cyclic.Reins_Cyclic_Effective_Date = Reins_Claim_Expense_Trnx_Recoverable.Month_Effective_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount

	COMMIT
	
	Select  @NUMROWS_COUNT = count(*) FROM Reins_Report_Claims_List where Reins_cyclic_id = @Reins_Cyclic_Id
	
	

	if @NUMROWS_COUNT > 0  
		Begin
			RAISERROR (  'ERROR - Data Already Exists' , -100 , -100 ) 
			RETURN -100
		end

	BEGIN Transaction
	-- Build Layer 0 Claims List
	-- ================================================
	INSERT INTO Reins_Report_Claims_List ( 
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Claim_Source_Id, 
		Reins_Benefit_Type, --NEW
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period, 
		Waiting_Period,
		Incurred_Date, 
		REINS_PERCENT,  --NEW
		Sum_Insured_on_Reporting_Date, 
		[Reins_Payment_Amount],
		Sum_Insured_on_Incurred_Date, 
		[Init_Reins_Amount],
		Claim_Status,
		Escalation_Ind,
		Ind_Value,
		Policy_Commencement_Date, 
		Claim_Notify_Date, 
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date, 
		Claim_Reopen_Reason,  --NEW
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		Reins_Life_Identifier
	)
	SELECT 
		-- Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		Reins_Treaty.Treaty_Id, 
		Reins_Claim_Listing.Claim_Source_Id, 
		Reins_Claim_Listing.Reins_Benefit_Type,
		--Data
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number), -- CLaim_number
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Cause, 
		Reins_Claim_Listing.Occupation, 
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END			 , --Claim_type
		Reins_Claim_Listing.Benefit_Period, 
		Reins_Claim_Listing.Waiting_Period, 
		Reins_Claim_Listing.Incurred_Date, 
		Reins_Claim_Listing.Layer_0_Reins_Percent,
		Reins_Claim_Listing.Sum_Insured_on_Reporting_Date, 
		-- Layer 0 Specific stuff 
		[Layer_0_Curr_Reins_Exposure]  , 

		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, 
		-- Layer 0 Specific stuff 
		[Layer_0_Init_Reins_Exposure]  , 

		COALESCE(Benefit_Status, Claim_Status), --Claim_Status
		Reins_Claim_Listing.Escalation_Ind,
		Reins_Claim_Listing.Ind_Value,
		Reins_Claim_Listing.Policy_Commencement_Date, 
		Reins_Claim_Listing.Claim_Notify_Date, 
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date)				as CLAIM_FINALISED_DATE, 
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason)				as CLAIM_FINALISED_REASON, 
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date)					as CLAIM_REOPEN_DATE, 
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason)					as CLAIM_REOPEN_REASON, 
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Reins_Claim_Listing.Claim_Event_type,
		Reins_Claim_Listing.EDW_Contract_Id,
		Reins_Claim_Listing.Reins_Life_Identifier
	FROM 
		Reins_Treaty, 
		Reins_Cyclic, 
		Reins_Claim_Listing
	WHERE 
		Reins_Treaty.Treaty_Name='Layer 0'
		AND Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
		and (Reins_Claim_Listing.Layer_0_Reins_Percent)!=0
		and Reins_Cyclic.Reins_Cyclic_Effective_Date between Reins_Claim_Listing.Row_Eftv_Date and reins_claim_listing.Row_End_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount

	-- Build Layer 1 Claims List
	INSERT INTO Reins_Report_Claims_List ( 
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Claim_Source_Id, 
		Reins_Benefit_Type, --NEW
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period, 
		Waiting_Period,
		Incurred_Date, 
		REINS_PERCENT,  --NEW
		Sum_Insured_on_Reporting_Date, 
		[Reins_Payment_Amount],
		Sum_Insured_on_Incurred_Date, 
		[Init_Reins_Amount],
		Claim_Status,
		Escalation_Ind,
		Ind_Value,
		Policy_Commencement_Date, 
		Claim_Notify_Date, 
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date, 
		Claim_Reopen_Reason,  --NEW
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		Reins_Life_Identifier
	)
	SELECT 
		-- Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		[Layer_1_Treaty_Id],
		Reins_Claim_Listing.Claim_Source_Id, 
		Reins_Claim_Listing.Reins_Benefit_Type,
		--Data
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number), -- CLaim_number
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Cause, 
		Reins_Claim_Listing.Occupation, 
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END			 , --Claim_type
		Reins_Claim_Listing.Benefit_Period, 
		Reins_Claim_Listing.Waiting_Period, 
		Reins_Claim_Listing.Incurred_Date, 
		-- Layer 1 Specific stuff 
		Reins_Claim_Listing.Layer_1_Reins_Percent,
		
		Reins_Claim_Listing.Sum_Insured_on_Reporting_Date, 
		-- Layer 1 Specific stuff 
		[Layer_1_Curr_Reins_Exposure]  , 

		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, 
		-- Layer 1 Specific stuff 
		[Layer_1_Init_Reins_Exposure]  , 

		COALESCE(Benefit_Status, Claim_Status), --Claim_Status
		Reins_Claim_Listing.Escalation_Ind,
		Reins_Claim_Listing.Ind_Value,
		Reins_Claim_Listing.Policy_Commencement_Date, 
		Reins_Claim_Listing.Claim_Notify_Date, 
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date)				as CLAIM_FINALISED_DATE, 
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason)				as CLAIM_FINALISED_REASON, 
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date)					as CLAIM_REOPEN_DATE, 
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason)					as CLAIM_REOPEN_REASON, 
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Reins_Claim_Listing.Claim_Event_type,
		Reins_Claim_Listing.EDW_Contract_Id,
		Reins_Claim_Listing.Reins_Life_Identifier
	FROM  
		Reins_Cyclic, 
		Reins_Claim_Listing
	WHERE 
		Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
		AND Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
		and Reins_Claim_Listing.Layer_1_Treaty_Id != -1
		and Reins_Cyclic.Reins_Cyclic_Effective_Date between Reins_Claim_Listing.Row_Eftv_Date and reins_claim_listing.Row_End_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount

	-- Build Layer 2 Claims List  for Treaty 5
	INSERT INTO Reins_Report_Claims_List ( 
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Claim_Source_Id, 
		Reins_Benefit_Type, --NEW
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period, 
		Waiting_Period,
		Incurred_Date, 
		REINS_PERCENT,  --NEW
		Sum_Insured_on_Reporting_Date, 
		[Reins_Payment_Amount],
		Sum_Insured_on_Incurred_Date, 
		[Init_Reins_Amount],
		Claim_Status,
		Escalation_Ind,
		Ind_Value,
		Policy_Commencement_Date, 
		Claim_Notify_Date, 
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date, 
		Claim_Reopen_Reason,  --NEW
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		Reins_Life_Identifier
	)
	SELECT 
		-- Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		Reins_Treaty.Treaty_Id, 
		Reins_Claim_Listing.Claim_Source_Id, 
		Reins_Claim_Listing.Reins_Benefit_Type,
		--Data
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number), -- CLaim_number
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Cause, 
		Reins_Claim_Listing.Occupation, 
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END			 , --Claim_type
		Reins_Claim_Listing.Benefit_Period, 
		Reins_Claim_Listing.Waiting_Period, 
		Reins_Claim_Listing.Incurred_Date, 
		
		-- Layer 2 Specific stuff 
		Reins_Claim_Listing.Layer_2_Reins_Percent,
		
		Reins_Claim_Listing.Sum_Insured_on_Reporting_Date, 
		-- Layer 2 Specific stuff 
		[Layer_2_Curr_Reins_Exposure]  , 

		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, 
		-- Layer 2 Specific stuff 
		[Layer_2_Init_Reins_Exposure]  , 

		COALESCE(Benefit_Status, Claim_Status), --Claim_Status
		Reins_Claim_Listing.Escalation_Ind,
		Reins_Claim_Listing.Ind_Value,
		Reins_Claim_Listing.Policy_Commencement_Date, 
		Reins_Claim_Listing.Claim_Notify_Date, 
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date)				as CLAIM_FINALISED_DATE, 
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason)				as CLAIM_FINALISED_REASON, 
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date)					as CLAIM_REOPEN_DATE, 
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason)					as CLAIM_REOPEN_REASON, 
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Reins_Claim_Listing.Claim_Event_type,
		Reins_Claim_Listing.EDW_Contract_Id,
		Reins_Claim_Listing.Reins_Life_Identifier
		
	FROM Reins_Treaty, Reins_Cyclic, Reins_Claim_Listing
	WHERE Reins_Treaty.Treaty_Name = 'Treaty 3'
	and Reins_Claim_Listing.Layer_2_Treaty_Id = [Reins_Treaty].Treaty_Id
	AND		Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
	AND		Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
	and		Reins_Claim_Listing.Layer_2_Reins_Percent!=0
	and Reins_Cyclic.Reins_Cyclic_Effective_Date between Reins_Claim_Listing.Row_Eftv_Date and reins_claim_listing.Row_End_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount


	-- Build Layer 2 Claims List  for Treaty -4
	INSERT INTO Reins_Report_Claims_List ( 
		Reins_Cyclic_Id, 
		Treaty_Id, 
		Claim_Source_Id, 
		Reins_Benefit_Type, --NEW
		Claim_Number, 
		Policy_Number, 
		Surname, 
		First_Name, 
		Sex, 
		Date_of_Birth, 
		Cause, 
		Occupation, 
		Claim_Type,
		Benefit_Period, 
		Waiting_Period,
		Incurred_Date, 
		REINS_PERCENT,  --NEW
		Sum_Insured_on_Reporting_Date, 
		[Reins_Payment_Amount],
		Sum_Insured_on_Incurred_Date, 
		[Init_Reins_Amount],
		Claim_Status,
		Escalation_Ind,
		Ind_Value,
		Policy_Commencement_Date, 
		Claim_Notify_Date, 
		Claim_Finalised_Date, 
		Claim_Finalised_Reason, 
		Claim_Reopen_Date, 
		Claim_Reopen_Reason,  --NEW
		Product_Code, 
		Product_Option_Code, 
		Claim_Event_Type,
		EDW_Contract_Id ,
		Reins_Life_Identifier
	)
	SELECT 
		-- Keys
		Reins_Cyclic.Reins_Cyclic_Id, 
		Reins_Treaty.Treaty_Id, 
		Reins_Claim_Listing.Claim_Source_Id, 
		Reins_Claim_Listing.Reins_Benefit_Type,
		--Data
		COALESCE(Reins_Claim_Listing.Benefit_Number, Reins_Claim_Listing.Claim_Number), -- CLaim_number
		Reins_Claim_Listing.Policy_Number, 
		Reins_Claim_Listing.Surname, 
		Reins_Claim_Listing.First_Name, 
		Reins_Claim_Listing.Sex, 
		Reins_Claim_Listing.Date_of_Birth, 
		Reins_Claim_Listing.Cause, 
		Reins_Claim_Listing.Occupation, 
		Case when Benefit_Type = 'Death'  then 'Death (Terminal Illness)' Else COALESCE(Benefit_Type, Claim_Type) END			 , --Claim_type
		Reins_Claim_Listing.Benefit_Period, 
		Reins_Claim_Listing.Waiting_Period, 
		Reins_Claim_Listing.Incurred_Date, 
		
		-- Layer 2 Specific stuff 
		Reins_Claim_Listing.Layer_2_Reins_Percent,
		
		Reins_Claim_Listing.Sum_Insured_on_Reporting_Date, 
		-- Layer 2 Specific stuff 
		[Layer_2_Curr_Reins_Exposure]  , 

		Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, 
		-- Layer 2 Specific stuff 
		[Layer_2_Init_Reins_Exposure]  , 

		COALESCE(Benefit_Status, Claim_Status), --Claim_Status
		Reins_Claim_Listing.Escalation_Ind,
		Reins_Claim_Listing.Ind_Value,
		Reins_Claim_Listing.Policy_Commencement_Date, 
		Reins_Claim_Listing.Claim_Notify_Date, 
		COALESCE(Benefit_Finalised_Date, Reins_Claim_Listing.Claim_Finalised_Date)				as CLAIM_FINALISED_DATE, 
		COALESCE(Benefit_Finalised_Reason, Reins_Claim_Listing.Claim_Finalised_Reason)				as CLAIM_FINALISED_REASON, 
		COALESCE(Benefit_Reopen_Date, Reins_Claim_Listing.Claim_Reopen_Date)					as CLAIM_REOPEN_DATE, 
		COALESCE(Benefit_Reopen_Reason, Reins_Claim_Listing.Claim_Reopen_Reason)					as CLAIM_REOPEN_REASON, 
		Reins_Claim_Listing.EDW_Product_Code, 
		Reins_Claim_Listing.EDW_Product_Option_Code, 
		Reins_Claim_Listing.Claim_Event_type,
		Reins_Claim_Listing.EDW_Contract_Id,
		Reins_Claim_Listing.Reins_Life_Identifier
		
	FROM Reins_Treaty, Reins_Cyclic, Reins_Claim_Listing
	WHERE Reins_Treaty.Treaty_Name = 'Removed from GenRe SS'
	and Reins_Claim_Listing.Layer_2_Treaty_Id = [Reins_Treaty].Treaty_Id
	AND		Reins_Cyclic.Reins_Cyclic_Id= @Reins_Cyclic_Id
	AND		Reins_Cyclic.Reins_Cyclic_Status='CLOSED'
	--and		Reins_Claim_Listing.Layer_2_Reins_Percent!=0
	and Reins_Cyclic.Reins_Cyclic_Effective_Date between Reins_Claim_Listing.Row_Eftv_Date and reins_claim_listing.Row_End_Date

	set @InsertRowCount = @InsertRowCount + @@Rowcount

	Commit 

		select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
		
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN TRAN1;
	THROW;
END CATCH

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Cyclic_Perform_Close]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure  [dbo].[usp_Reins_Cyclic_Perform_Close]
as
BEGIN
	SET NOCOUNT ON



	DECLARE @CURRENT_CYCLIC_ID as integer
	DECLARE @CURRENT_CYCLIC_DATE as datetime

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	--Run the progress to recovery rule in case the business has missed it so that we are sure that all recoverable trnxs will end up in the Bordereau

	--Begin Transaction
	--Exec usp_Reins_Progress_To_Recovery_Rule
	--Commit
	

	-- 1 )  Get the Header details of the Curretn month  where OPEN

		SELECT @CURRENT_CYCLIC_ID = max( Reins_Cyclic_Id )   
		from Reins_Cyclic
		where Reins_Cyclic_Status = 'Draft'

		select @CURRENT_CYCLIC_DATE = Reins_Cyclic.Reins_Cyclic_Effective_Date
		from Reins_Cyclic
		where Reins_Cyclic_Id  = @CURRENT_CYCLIC_ID


		
	-- 2 )  Move all records ready to migrate in the Claim_Expense_trnx table to the approriate tables.... 
BEGIN TRY	
	Begin Transaction
	
		INSERT [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
						(Reins_Cyclic_Id,
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID,
						Ref_Payment_Description_Id)

		select @CURRENT_CYCLIC_ID ,
				Month_Effective_Date,
				Claim_Expense_Id,
				Source_Trnx_Id,
				Product_System_Code,
				Policy_Number,
				EDW_Contract_Key,
				EDW_Policy_Number,
				EDW_Contract_Id,
				EDW_Product_Key,
				EDW_Product_Code,
				EDW_Class_Of_Business,
				Reins_Benefit_Category,
				Implicit_Benefit_Type_Code,
				Claim_Reference_Id,
				Source_Claim_Number,
				GL_Account_Id,
				GL_Product_Code,
				Transaction_Effective_date,
				Transaction_Process_Date,
				Transaction_Amount,
				Transaction_Type,
				Claim_Enrichment_Rule,
				Claim_Source_Id,
				Claim_Number,
				Product_Option_Code,
				Pay_From_To_Rule,
				Pay_Date_From,
				Pay_Date_To,
				Pay_From_To_EDW_Event_Num,
				Cheque_Id,
				Progress_to_Recovery_rule,
				Progress_to_Recovery,
				Assumed_Paid,
				Assumed_Paid_Date,
				Layer_0_Rule,
				Layer_0_Reins_Percent,
				Layer_0_Reins_Claim_Amount,
				Layer_0_Residual_Claim_Amount,
				Layer_1_Treaty_Rule,
				Layer_1_Treaty_Id,
				Layer_1_Reins_Percent,
				Layer_1_Reins_Claim_Amount,
				Layer_1_Residual_Claim_Amount,
				Layer_2_Treaty_Rule,
				Layer_2_Treaty_Id,
				Layer_2_Reins_Percent,
				Layer_2_Reins_Claim_Amount,
				Layer_2_Residual_Claim_Amount,
				Getdate(),
				System_user,
				Process_Log_ID,
				Ref_Payment_Description_Id
		from [dbo].[Reins_Claim_Expense_Trnx]
		where 
		Progress_to_Recovery = 'Y'
		 AND ( [Layer_0_Reins_Claim_Amount] != 0  OR [Layer_1_Reins_Claim_Amount] != 0  or [Layer_2_Reins_Claim_Amount] !=0  ) 
		-- AND Month_Effective_Date = @CURRENT_CYCLIC_DATE

		 set @InsertRowCount = @InsertRowCount + @@Rowcount

	Commit Transaction

		-- DELETE WHERE MOVED

	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx]
		where Source_Trnx_Id in (Select Source_Trnx_Id from [dbo].[Reins_Claim_Expense_Trnx_Recoverable] 
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID)

		set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

		-- Move the related Payment/Expense reversal records as well
	Begin Transaction
		INSERT [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
						(Reins_Cyclic_Id,
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID,
						Ref_Payment_Description_Id)

		select @CURRENT_CYCLIC_ID ,
				Month_Effective_Date,
				Claim_Expense_Id,
				Source_Trnx_Id,
				Product_System_Code,
				Policy_Number,
				EDW_Contract_Key,
				EDW_Policy_Number,
				EDW_Contract_Id,
				EDW_Product_Key,
				EDW_Product_Code,
				EDW_Class_Of_Business,
				Reins_Benefit_Category,
				Implicit_Benefit_Type_Code,
				Claim_Reference_Id,
				Source_Claim_Number,
				GL_Account_Id,
				GL_Product_Code,
				Transaction_Effective_date,
				Transaction_Process_Date,
				Transaction_Amount,
				Transaction_Type,
				Claim_Enrichment_Rule,
				Claim_Source_Id,
				Claim_Number,
				Product_Option_Code,
				Pay_From_To_Rule,
				Pay_Date_From,
				Pay_Date_To,
				Pay_From_To_EDW_Event_Num,
				Cheque_Id,
				Progress_to_Recovery_rule,
				Progress_to_Recovery,
				Assumed_Paid,
				Assumed_Paid_Date,
				Layer_0_Rule,
				Layer_0_Reins_Percent,
				Layer_0_Reins_Claim_Amount,
				Layer_0_Residual_Claim_Amount,
				Layer_1_Treaty_Rule,
				Layer_1_Treaty_Id,
				Layer_1_Reins_Percent,
				Layer_1_Reins_Claim_Amount,
				Layer_1_Residual_Claim_Amount,
				Layer_2_Treaty_Rule,
				Layer_2_Treaty_Id,
				Layer_2_Reins_Percent,
				Layer_2_Reins_Claim_Amount,
				Layer_2_Residual_Claim_Amount,
				Getdate(),
				System_user,
				Process_Log_ID,
				Ref_Payment_Description_Id
		from [dbo].[Reins_Claim_Expense_Trnx]
		where Claim_expense_id in (select Claim_expense_id from [Reins_Claim_Expense_Trnx_Recoverable]
									Where Reins_Cyclic_Id = @CURRENT_CYCLIC_ID)
			  AND Transaction_type != 'Expense'
	
	set @InsertRowCount = @InsertRowCount + @@Rowcount

	COMMIT Transaction
	
		-- DELETE WHERE MOVED

	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx]
		where Source_Trnx_Id in (Select Source_Trnx_Id from [dbo].[Reins_Claim_Expense_Trnx_Recoverable] 
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID)

	set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

		--Move the non recoverable records into Non-recoverable table
	Begin Transaction

	INSERT [dbo].[Reins_Claim_Expense_Trnx_NonRecoverable]
						(Reins_Cyclic_Id,
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID,
						Ref_Payment_Description_Id)

				select @CURRENT_CYCLIC_ID ,
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Getdate(),
						System_user,
						Process_Log_ID,
						Ref_Payment_Description_Id
		from [dbo].[Reins_Claim_Expense_Trnx]
		where 
			Progress_to_Recovery = 'Y'
			AND
			NOT ( [Layer_0_Reins_Claim_Amount] != 0  AND [Layer_1_Reins_Claim_Amount] != 0  AND [Layer_2_Reins_Claim_Amount] !=0  ) 
			-- AND Month_Effective_Date = @CURRENT_CYCLIC_DATE

	set @InsertRowCount = @InsertRowCount + @@Rowcount
	
	Commit Transaction
		
		-- DELETE WHERE MOVED
	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx]
		where Source_Trnx_Id in (Select Source_Trnx_Id from [dbo].[Reins_Claim_Expense_Trnx_nonRecoverable]
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID)

	set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

		-- Crystalise a cliam listing   NS - What needs to be done here??

		
		-- Move the related Payment/Expense reversal records as well
	Begin Transaction
		INSERT [dbo].[Reins_Claim_Expense_Trnx_NonRecoverable]
						(Reins_Cyclic_Id,
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID,
						Ref_Payment_Description_Id)

		select @CURRENT_CYCLIC_ID ,
				Month_Effective_Date,
				Claim_Expense_Id,
				Source_Trnx_Id,
				Product_System_Code,
				Policy_Number,
				EDW_Contract_Key,
				EDW_Policy_Number,
				EDW_Contract_Id,
				EDW_Product_Key,
				EDW_Product_Code,
				EDW_Class_Of_Business,
				Reins_Benefit_Category,
				Implicit_Benefit_Type_Code,
				Claim_Reference_Id,
				Source_Claim_Number,
				GL_Account_Id,
				GL_Product_Code,
				Transaction_Effective_date,
				Transaction_Process_Date,
				Transaction_Amount,
				Transaction_Type,
				Claim_Enrichment_Rule,
				Claim_Source_Id,
				Claim_Number,
				Product_Option_Code,
				Pay_From_To_Rule,
				Pay_Date_From,
				Pay_Date_To,
				Pay_From_To_EDW_Event_Num,
				Cheque_Id,
				Progress_to_Recovery_rule,
				Progress_to_Recovery,
				Assumed_Paid,
				Assumed_Paid_Date,
				Layer_0_Rule,
				Layer_0_Reins_Percent,
				Layer_0_Reins_Claim_Amount,
				Layer_0_Residual_Claim_Amount,
				Layer_1_Treaty_Rule,
				Layer_1_Treaty_Id,
				Layer_1_Reins_Percent,
				Layer_1_Reins_Claim_Amount,
				Layer_1_Residual_Claim_Amount,
				Layer_2_Treaty_Rule,
				Layer_2_Treaty_Id,
				Layer_2_Reins_Percent,
				Layer_2_Reins_Claim_Amount,
				Layer_2_Residual_Claim_Amount,
				Getdate(),
				System_user,
				Process_Log_ID,
				Ref_Payment_Description_Id
		from [dbo].[Reins_Claim_Expense_Trnx]
		where Claim_expense_id in (select Claim_expense_id from [Reins_Claim_Expense_Trnx_NonRecoverable]
									Where Reins_Cyclic_Id = @CURRENT_CYCLIC_ID)
			  AND Transaction_type != 'Expense'
		 
		 
		 set @InsertRowCount = @InsertRowCount + @@Rowcount

	COMMIT Transaction

		-- DELETE WHERE MOVED
	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx]
		where Source_Trnx_Id in (Select Source_Trnx_Id from [dbo].[Reins_Claim_Expense_Trnx_nonRecoverable]
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID)

	set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

	--Close the current Cycle

	Begin Transaction
		Update [dbo].[Reins_Cyclic]
		SET 
			Reins_Cyclic_Status = 'CLOSED', 
			Updated_Date_Time	= sysdatetime(),
			Updated_By = SYSTEM_USER
		where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID

		
		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

		Insert Reins_Cyclic
	( 
		Reins_Cyclic_Effective_Date,
		Reins_Cyclic_Status, 
		[Created_Date_Time],
		[Created_By]
	) 
	values ( 

	EOMONTH(dateadd ( month , 1 , @CURRENT_CYCLIC_DATE ) ),
	'Draft',
	SYSDATETIME(),
	SYSTEM_USER
)

	set @InsertRowCount = @InsertRowCount + @@Rowcount
	
	Commit Transaction	

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRANSACTION;
	THROW;
END CATCH

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_DS_Claims_Enrich_Rule3]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_Reins_DS_Claims_Enrich_Rule3]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(50)
	DECLARE @Transaction_Effective_date datetime
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @EDW_Contract_Key numeric(10,0)
	DECLARE @Reins_Benefit_Category varchar(20)

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Get_Policy_list (
			EDW_Contract_Key numeric(10,0),
			Transaction_Effective_date datetime,
			Reins_Benefit_Category varchar(20)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Effective_date, Reins_Benefit_Category
			From dbo.Reins_Claim_Expense_Trnx A
			WHERE A.Claim_Enrichment_rule is null and A.Transaction_type in ( ''Expense'', ''Expense reversal'')
			and A.product_system_code = ''DS'''
			

	

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Effective_date,
	@Reins_Benefit_Category
	

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
			Select @NumRows = count(*) from dbo.Reins_Claim_Listing
			where EDW_Contract_Key = @EDW_Contract_Key
			and EDW_Product_system_code = 'DS'
			and @Transaction_Effective_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
			and Row_End_Date = cast('3000-12-31' as date)
			and  Reins_Benefit_Type =  @Reins_Benefit_Category
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
				UPDATE dbo.Reins_Claim_Expense_Trnx
				SET
					[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
					[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
					[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
					[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
					[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
					[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
					Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
					Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
					[Claim_enrichment_rule] = 'CE_DS_Pol',
					--Updated_by = System_user,
					Updated_by = ORIGINAL_LOGIN(),
				Updated_date_time = getdate()
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ( 'Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'DS'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'DS'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Effective_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date =  cast('3000-12-31' as date)
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount
			
			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_number,
	@Transaction_Effective_date,
	@Reins_Benefit_Category
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
	
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END



























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_DS_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_DS_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Source_Claim_Number	varchar(20)
--DECLARE @CLIENT_REF_ID_4 varchar(50)
--DECLARE @Claim_reference_Id varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Transaction_Effective_Date	datetime
--DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @Transaction_Amount	money
DECLARE @Month_Effective_Date datetime
DECLARE @Contract_Key int

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


--DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
--DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			Contract_Key int,
			Transaction_Process_Date datetime , 
			Transaction_Effective_date datetime ,
			Transaction_Type VARCHAR(50),
			Source_Claim_Number varchar(20)
			
)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT 
			[dbo].[Reins_GL_Journal_Trnx].Month_Effective_Date,
			[dbo].[Reins_GL_Journal_Trnx].Policy_number, 
			[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Type,
			[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
			EDW_Product_System_Code = ''DS'' 
			AND Exclude_flag = ''N''
			AND
			(
				([dbo].[Reins_GL_Journal_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null)
				
			)'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,3,2,4,5
		
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@Contract_Key,
	@Transaction_Process_Date	,
	@Transaction_Effective_Date	,
	@Transaction_Type,
	@Source_Claim_Number
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	

		SELECT @Transaction_amount = ROUND(Sum([dbo].[Reins_GL_Journal_Trnx].Transaction_amount),2)
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
		
			Policy_number			= @Policy_number
			AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Transaction_Effective_Date		= @Transaction_Effective_Date	
		AND Transaction_Type	= @Transaction_Type
		--AND Claim_reference_Id = @Claim_reference_Id
		-- And it has not been consumed yet
		AND [dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null
		
		

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @Transaction_Amount  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
		-- For DS it as been advised that all the expenses and expense reversals should be assumed as PAID. 
		-- So the status will be marked to CLOSED straightaway and the transaction type will be marked as EXPENSE PAID	or Expense Reveresed respectively
		
		IF  @Transaction_Type = 'Expense reversal'   
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						--Source_Claim_Number,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						'DS',
						@Contract_Key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-REVERSED',
						'CLOSED',
						--@Source_Claim_Number,
						@Transaction_Amount,
						Getdate(),
						--System_user,
						ORIGINAL_LOGIN(),
						-103
					
					)

					
				set @InsertRowCount = @InsertRowCount + @@Rowcount
				
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId, 
					Updated_By = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					
					WHERE 
						(
						Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_date=@Transaction_Effective_Date
					--AND = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND EDW_PRODUCT_SYSTEM_CODE = 'DS'
					)

				set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[Policy_number],
					[Month_Effective_date],
					[Source_Claim_Number],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[Reins_Benefit_Category],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Pay_Date_From],
					[Pay_Date_To],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_GL_Journal_Trnx].GL_Journal_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Type, 
					'DS',
					'Y',
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date,
					[dbo].[Reins_GL_Journal_Trnx].Policy_number,
					[dbo].[Reins_GL_Journal_Trnx].[Month_Effective_date],
					[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number,
					[dbo].[Reins_GL_Journal_Trnx].GL_Account_Id,
					[dbo].[Reins_GL_Journal_Trnx].GL_Product_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Policy_Number,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Code,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Amount, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_GL_Journal_Trnx].[Reins_Benefit_Category],
					[dbo].[Reins_GL_Journal_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_GL_Journal_Trnx].[Paid_From_Date],
					[dbo].[Reins_GL_Journal_Trnx].[Paid_To_Date],
					getdate(),
					ORIGINAL_LOGIN(),
					-103
					FROM 
					[dbo].[Reins_GL_Journal_Trnx]
					Where
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

   
				--PRINT @Transaction_Type;

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						'DS',
						@Contract_Key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-PAID',
						'CLOSED',
						@Transaction_Amount,
						Getdate(),
						ORIGINAL_LOGIN(),
						-103
					
					)

				set @InsertRowCount = @InsertRowCount + @@Rowcount
				
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId, 
					Updated_By = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					WHERE 
						(
						Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_date=@Transaction_Effective_Date
					--AND = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND EDW_PRODUCT_SYSTEM_CODE = 'DS'
					)

				set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[Policy_number],
					[Month_Effective_date],
					[Source_Claim_Number],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[Reins_Benefit_Category],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Pay_Date_From],
					[Pay_Date_To],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_GL_Journal_Trnx].GL_Journal_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Type, 
					'DS',
					'Y',
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date,
					[dbo].[Reins_GL_Journal_Trnx].Policy_number,
					[dbo].[Reins_GL_Journal_Trnx].[Month_Effective_date],
					[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number,
					[dbo].[Reins_GL_Journal_Trnx].GL_Account_Id,
					[dbo].[Reins_GL_Journal_Trnx].GL_Product_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Policy_Number,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Code,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Amount, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_GL_Journal_Trnx].[Reins_Benefit_Category],
					[dbo].[Reins_GL_Journal_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_GL_Journal_Trnx].[Paid_From_Date],
					[dbo].[Reins_GL_Journal_Trnx].[Paid_To_Date],
					getdate(),
					ORIGINAL_LOGIN(),
					-103
					FROM 
					[dbo].[Reins_GL_Journal_Trnx]
					Where
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		
	
		
	
		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@Contract_Key,
		@Transaction_Process_Date	,
		@Transaction_Effective_Date	,
		@Transaction_Type,
		@Source_Claim_Number
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END
























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Exclude_Out_Of_Scope_Trnx_GL]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[usp_Reins_Exclude_Out_Of_Scope_Trnx_GL]
	@In_GL_Trnx_Id varchar(20) = NULL
	--@In_Product_System_Code varchar(3) = NULL
AS

BEGIN
SET NOCOUNT ON

Declare @sqlstatement nvarchar(4000)

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0



Begin Try
	Begin Transaction
		Set @sqlstatement = 'UPDATE [dbo].[Reins_GL_Journal_Trnx]
									SET [Exclude_Flag] = ''N'',
										[Exclude_Reason] = NULL,
										Updated_By = System_User,
										Updated_date_time = getdate()
									Where Exclude_flag is NULL'
		--If @In_Product_System_Code is not null
		--Begin
		--	set @sqlstatement = Concat(@sqlstatement, 'and Product_System_Code = ''',@In_Product_system_code, '''')
		--End
--			Print @sqlstatement
		exec(@sqlstatement)
		
		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction
	
	Begin Transaction	
		Set @sqlstatement = 'UPDATE [dbo].[Reins_GL_Journal_Trnx]
									SET [Exclude_Flag] = ''Y'',
									[Exclude_Reason] = ''Product is not in scope for Reinsurance'',
									Updated_Date_Time = getDATE(),
									updated_by = system_user
									WHERE 
									--EDW_Product_Code NOT IN (SELECT DISTINCT Product_Code FROM dbo.Reins_Treaty_Product)
									--AND 
									[Exclude_Flag] = ''N''
									AND GL_Product_Id NOT IN (SELECT DISTINCT GL_Product_Code FROM dbo.Reins_GL_Product WHERE In_Scope_For_Reinsurance = ''Y'')'
									
			--Print @sqlstatement

		if @In_GL_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND GL_Journal_Trnx_Id = ''' , @In_GL_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		
	
		exec(@sqlstatement)

		
		set @UpdateRowCount = @UpdateRowCount + @@Rowcount


	Commit Transaction
END TRY
BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
END CATCH


SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END










GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Exclude_Out_Of_Scope_Trnx_MR]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_Exclude_Out_Of_Scope_Trnx_MR]
	@In_Mercury_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 
AS

BEGIN
SET NOCOUNT ON

Declare @sqlstatement nvarchar(4000)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0



Begin Try
	Begin Transaction
		set @sqlstatement = 'UPDATE [dbo].[Reins_Mercury_Trnx]
							SET [Exclude_Flag] = ''N'',
								[Exclude_Reason] = NULL,
								Updated_Date_Time = getDATE(),
								Updated_by = system_user
								Where Exclude_flag is NULL'

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Mercury_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		Print @sqlstatement
		exec(@sqlstatement)

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction

	Begin Transaction	
		set @sqlstatement = 'UPDATE [dbo].[Reins_Mercury_Trnx]
							SET [Exclude_Flag] = ''Y'',
							[Exclude_Reason] = ''Product is not in scope for Reinsurance'',
							Updated_Date_Time = getDATE(),
							updated_by = system_user
							WHERE --EDW_Product_Code NOT IN (SELECT DISTINCT Product_Code FROM dbo.Reins_Treaty_Product)
							--AND 
							[Exclude_Flag] = ''N''
							AND GL_Product_Code NOT IN (SELECT DISTINCT GL_Product_Code FROM dbo.Reins_GL_Product WHERE In_Scope_For_Reinsurance = ''Y'')
							AND Transaction_type not like ''Pay%''
							'
							--AND Product_System_Code = ''', @In_Product_system_code, '''')
		--Print @sqlstatement

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Mercury_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		
		Print @sqlstatement
		exec(@sqlstatement)

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction
	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY
BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
END CATCH
 
 SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_Claims_Enrich_Rule3]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_FDA_Claims_Enrich_Rule3]


AS

BEGIN
	SET NOCOUNT ON
	
	--DECLARE @Policy_Number varchar(50)
	DECLARE @Transaction_Process_date datetime
	DECLARE @Transaction_type varchar(20)
	DECLARE @Benefit_Type varchar(20)
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @EDW_Contract_Key numeric(10,0)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0


	CREATE table #Get_Policy_list (
			EDW_Contract_Key  numeric(10,0),
			Transaction_Process_date datetime,
			Benefit_type varchar (20),
			Transaction_type varchar(20)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date, 
			[Reins_Benefit_Category] as Benefit_Type,
			Transaction_type
			From dbo.Reins_Claim_Expense_Trnx A
			WHERE A.Claim_Enrichment_rule is null 
			and  A.Transaction_type in (''Expense'', ''Expense reversal'', ''WOP'')
			and A.product_system_code = ''FDA''
			'

	

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Benefit_Type,
	@Transaction_type

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where EDW_Contract_Key = @EDW_Contract_Key
		and Reins_benefit_type = @Benefit_Type
		and EDW_Product_system_code = 'FDA'
		and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'

		

		If @NumRows = 1
		Begin

			Begin Transaction
			
			
			UPDATE dbo.Reins_Claim_Expense_Trnx
			SET
			 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
			 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
			 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
			 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
			 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
			 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
			 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
			 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
			 [Claim_enrichment_rule] = 'CE_FDA_Pol'
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type = @Transaction_type
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'FDA'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'FDA'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]
			
			set @UpdateRowCount = @UpdateRowCount + @@Rowcount

			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Benefit_Type,
	@Transaction_type
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
	
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_EDW_Claims_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_FDA_EDW_Claims_Enrich]

AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	DECLARE @Source_Claim_Number varchar(50)
	DECLARE @Transaction_Process_Date	date
	DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_Trnx_Id varchar(20) 
	DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @EDW_Contract_key int
	Declare @check int
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			Source_Claim_Number  VARCHAR(50), 
			Transaction_Process_Date datetime , 
			Claim_Expense_Id INT ,
			Source_Trnx_Id varchar(20),
			Transaction_Amount Numeric (15,2),
			)
	CREATE table #Get_EDW_Data (
			Contract_key  INT, 
			Event_Number varchar (40),
			Eftv_Date datetime , 
			PAY_DATE_FROM datetime ,
			PAY_DATE_TO datetime,
			DISBURS_AMT Decimal (20,3) ,
			Source_Trnx_Id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT dbo.Reins_Claim_Expense.POLICY_Number, 
							Reins_Claim_Expense.EDW_Contract_Key,
							--dbo.Reins_Claim_Expense.Source_Claim_Number,
							PAYMENTTABLE.Transaction_Process_Date,
							dbo.Reins_Claim_Expense.Claim_Expense_id, 
							PAYMENTTABLE.[Source_Trnx_Id],
							PAYMENTTABLE.Transaction_Amount
							    
			FROM dbo.Reins_Claim_Expense INNER JOIN dbo.Reins_Claim_Expense_Trnx AS EXPENSETABLE 
			ON (EXPENSETABLE.Claim_Expense_Id = dbo.Reins_Claim_Expense.Claim_Expense_Id) 
			INNER JOIN dbo.Reins_Claim_Expense_Trnx AS PAYMENTTABLE 
			ON dbo.Reins_Claim_Expense.Claim_Expense_Id = PAYMENTTABLE.Claim_Expense_Id  
			WHERE (((EXPENSETABLE.Product_option_code) Is Not Null) AND
			((dbo.Reins_Claim_Expense.Claim_Expense_Type)Like ''EXPENSE-PAID%'') 
			AND ((EXPENSETABLE.Transaction_Type) IN (''EXPENSE'', ''WOP'') )
			AND ((PAYMENTTABLE.Pay_From_To_Rule) Is Null) 
			AND ((PAYMENTTABLE.Transaction_Type)=''PAYMENT''))  
			AND dbo.Reins_Claim_Expense.Product_system_code = ''FDA'''

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction

	--PRINT 'Policy List sql executed'
	--Update #Get_Policy_list
	--SET Contract_Key = B.Contract_key
	--FROM #Get_Policy_list A, [STG].[Stg_EDW_Contract] B
	--where A.Policy_number = B.DISPLAY_CONTRACT_ID
	

	DECLARE Claim_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Claim_List_To_Process
	
	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	--@Source_Claim_Number,
	@EDW_Contract_key,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_Trnx_Id,
	@Transaction_Amount


	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		--Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--where DISPLAY_CONTRACT_ID = @Policy_Number

		--If @Contract_key is null
		--Begin
		--	Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--	where CONTRACT_ID = @Policy_Number
		--End
		--Print 'Staging Executed'
		
		--Print @Transaction_Process_Date
			Begin Transaction
				
				--PRINT @Policy_Number
				If @EDW_Contract_Key is null
				Begin 
				set @EDW_Contract_Key = -999
				END

				set @sql = concat('select dw_claim_event_disburs.Contract_key, dw_claim_event_disburs.Event_Num, dw_claim_event_disburs.EFTV_date, dw_claim_event_disburs.PAY_DATE_FROM, dw_claim_event_disburs.Pay_Date_To, dw_claim_event_disburs.DISBURS_AMT 
								from dw_claim_event_disburs where dw_claim_event_disburs.contract_key = ',@EDW_Contract_key  )

				set @sql = Concat(@sql,' and eftv_date= To_date(''',@Transaction_Process_Date, ''',''YYYY-MM-DD'')')

				set @sql = concat(@sql, ' and DISBURS_AMT = -1*cast(',@Transaction_Amount,' as decimal(20,3))')
							
				--PRINT @sql
				Insert into #Get_EDW_Data (
						Contract_key  , 
						Event_Number , 
						Eftv_Date  , 
						PAY_DATE_FROM  ,
						PAY_DATE_TO ,
						DISBURS_AMT 
						)

				exec Utility.dbo.usp_queryedw @sql
				
				--PRINT 'EDW Data Inserted into Temp Table'
				
				Update #Get_EDW_Data 
				Set Source_Trnx_Id = @Source_Trnx_Id	
				
				--Print'EDW Data updated with Policy Number'
				--Print @policy_number
				--Print @Claim_Expense_Item_id
				--Select * from #Get_EDW_Data
				--print @t.EFTV_Date
				--Print @Claim_Expense_Item_id  
				--Select * from   #Get_EDW_Data 
				Update dbo.Reins_Claim_Expense_Trnx
				set dbo.Reins_Claim_Expense_Trnx.PAY_DATE_FROM = T2.Pay_Date_From,
					dbo.Reins_Claim_Expense_Trnx.PAY_DATE_TO = T2.Pay_Date_To,
					dbo.Reins_Claim_Expense_Trnx.Pay_From_To_EDW_Event_Num = T2.Event_Number,
					dbo.Reins_Claim_Expense_trnx.PAY_FROM_TO_RULE = 'EDW_Pol_Dt_Amt',
					Updated_by = System_user,
					Updated_Date_Time = getdate()

				from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as T2
				where  T1.Source_Trnx_Id = T2.Source_Trnx_Id
				and T1.EDW_Contract_Key = T2.Contract_key
				and T1.Claim_Expense_Id = @Claim_Expense_Id
				and T1.Transaction_Type = 'Payment'
				
				--  
				--and T1.policy_number = @policy_number
				--and T1.Transaction_Process_Date = T2.Eftv_Date
				--and T1.Transaction_Amount = -1*Cast(T2.DISBURS_AMT as decimal(20,2))
				--and T1.[Claim_Expense_Item_id] = @Claim_Expense_Item_id
				--and Transaction_Type = 'Payment'
				--and T1.Target_Benefit_code is not null
			
				--Print 'Updating Payment table completed'

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount

			Commit Transaction
		
				--Select @check = Contract_key from @t group by Contract_key
		Truncate table #Get_EDW_Data
				

	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	--@Source_Claim_Number,
	@EDW_Contract_key,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_Trnx_Id,
	@Transaction_Amount
	
	END
	CLOSE Claim_List_To_Process
	Deallocate Claim_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END




















GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_Exclude_Excess_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_FDA_Exclude_Excess_Payments]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	--DECLARE @Source_Claim_Number varchar(50)
	DECLARE @Transaction_Process_Date	date
	--DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_Trnx_Id varchar(20) 
	--DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @EDW_Contract_key int
	--Declare @check int
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @EDW_COUNT Int = 0
	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Source_Trnx_Id varchar(20),
			
			
			)
	CREATE table #Get_EDW_Data (
			Contract_key  INT, 
			event_type_code varchar (40),
			Process_date datetime , 
			Source_Trnx_Id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT POLICY_Number, 
							EDW_Contract_Key,
							Transaction_Process_Date,
							[Mercury_trnx_id]
														    
			FROM Reins_Mercury_Trnx
			where claim_expense_id is null
			and transaction_type = ''Payment''
			AND Product_system_code = ''FDA''
			AND Exclude_Flag = ''N''
			--AND EDW_CONTRACT_KEY = 33073360
			'
			

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction

	--PRINT 'Policy List sql executed'
	--Update #Get_Policy_list
	--SET Contract_Key = B.Contract_key
	--FROM #Get_Policy_list A, [STG].[Stg_EDW_Contract] B
	--where A.Policy_number = B.DISPLAY_CONTRACT_ID
	

	DECLARE Claim_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Claim_List_To_Process
	
	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	@EDW_Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	


	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		--Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--where DISPLAY_CONTRACT_ID = @Policy_Number

		--If @Contract_key is null
		--Begin
		--	Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--	where CONTRACT_ID = @Policy_Number
		--End
		--Print 'Staging Executed'
		
		--Print @Transaction_Process_Date
			Begin Transaction
				
				--PRINT @Policy_Number
				If @EDW_Contract_Key is null
				Begin 
				set @EDW_Contract_Key = -999
				END

				set @sql = concat('select A.Contract_key, B.Event_type_code, A.process_date 
								From DW_CONTRACT_EVENT_TRNX A , DW_EVENT_TYPE B
								where  A.EVENT_TYPE_KEY = B.EVENT_type_key
								and B.source_system_code = ''FDA''
								and NVL(B.event_type_group_code, ''NA'') <> ''Claim''
								and B.EVENT_Type_Code in (''SURCLM'', ''MATCLM'', ''PRTSUR'', ''PARRFD'', ''PRMRCT'', ''PRMREV'')
								and A.CONTRACT_KEY = ',@EDW_Contract_key  )

				set @sql = Concat(@sql,' and A.process_date = To_date(''',@Transaction_Process_Date, ''',''YYYY-MM-DD'')')

				
							
				--PRINT @sql
				Insert into #Get_EDW_Data (
						Contract_key, 
						event_type_code,
						Process_date
						)

				exec Utility.dbo.usp_queryedw @sql
				
				--PRINT 'EDW Data Inserted into Temp Table'
				
				Update #Get_EDW_Data 
				Set Source_Trnx_Id = @Source_Trnx_Id	

				Select @EDW_COUNT = count(*) from #Get_EDW_Data 

				IF @EDW_COUNT >=1
					Begin
						Update Reins_mercury_trnx 
						SET [Exclude_Flag] = 'Y',
							[Exclude_Reason] = concat(T2.event_type_code, ' Investemt Product - Excluded') ,
							Updated_Date_Time = getDATE(),
							updated_by = system_user
						FROM Reins_mercury_trnx T1, #Get_EDW_Data as T2
						Where T1.Mercury_trnx_id =  T2.Source_Trnx_Id
						and T1.EDW_Contract_Key = T2.Contract_key
					END
				--Print'EDW Data updated with Policy Number'
				--Print @policy_number
				--Print @Claim_Expense_Item_id
				--Select * from #Get_EDW_Data
				--print @t.EFTV_Date
				--Print @Claim_Expense_Item_id  
				--Select * from   #Get_EDW_Data 
				--Update dbo.Reins_Claim_Expense_Trnx
				--set dbo.Reins_Claim_Expense_Trnx.PAY_DATE_FROM = T2.Pay_Date_From,
				--	dbo.Reins_Claim_Expense_Trnx.PAY_DATE_TO = T2.Pay_Date_To,
				--	dbo.Reins_Claim_Expense_Trnx.Pay_From_To_EDW_Event_Num = T2.Event_Number,
				--	dbo.Reins_Claim_Expense_trnx.PAY_FROM_TO_RULE = 'EDW_Pol_Dt_Amt',
				--	Updated_by = System_user,
				--	Updated_Date_Time = getdate()

				--from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as T2
				--where  T1.Source_Trnx_Id = T2.Source_Trnx_Id
				--and T1.EDW_Contract_Key = T2.Contract_key
				--and T1.Claim_Expense_Id = @Claim_Expense_Id
				--and T1.Transaction_Type = 'Payment'
				
				--  
				--and T1.policy_number = @policy_number
				--and T1.Transaction_Process_Date = T2.Eftv_Date
				--and T1.Transaction_Amount = -1*Cast(T2.DISBURS_AMT as decimal(20,2))
				--and T1.[Claim_Expense_Item_id] = @Claim_Expense_Item_id
				--and Transaction_Type = 'Payment'
				--and T1.Target_Benefit_code is not null
			
				--Print 'Updating Payment table completed'

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount

			Commit Transaction
		
				--Select @check = Contract_key from @t group by Contract_key
		Truncate table #Get_EDW_Data
				

	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	@EDW_Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	
	
	END
	CLOSE Claim_List_To_Process
	Deallocate Claim_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END






















GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[usp_Reins_FDA_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Source_Claim_Number	varchar(20)
DECLARE @CLIENT_REF_ID_1 varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @EDW_Contract_key Int
DECLARE @Month_Effective_Date datetime
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Policy_number  VARCHAR(50), 
			Source_Claim_Number  VARCHAR(50), 
			CLIENT_REF_ID_1  VARCHAR(50), 
			EDW_Contract_key int,
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			SORTKEY INT, 
			Transaction_Type VARCHAR(50),
			Month_Effective_Date datetime
)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
			[dbo].[Reins_Mercury_Trnx].CLIENT_REF_ID_1, 
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_key,
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			CASE [Transaction_Type]   
				WHEN  ''Expense reversal'' THEN 2
				WHEN  ''Expense'' THEN 3
				WHEN  ''Payment'' THEN 4
				WHEN  ''Payment reversal'' THEN 1
				WHEN  ''Expense reversal'' THEN 2
				WHEN  ''Expense reversal'' THEN 2
				WHEN  ''WOP'' THEN 3
				ELSE  99
			END    AS SORTKEY, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].Month_Effective_Date
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
			Product_System_Code = ''FDA''
		AND Exclude_flag = ''N''
		AND
			(
				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
			)'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4,5,6,7,8,9 
		
--		DISTINCT
--			[dbo].[Reins_Mercury_Trnx].Policy_number, 
--			[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
--			[dbo].[Reins_Mercury_Trnx].CLIENT_REF_ID_1, 
--			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
--			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
--			CASE [Transaction_Type]   
--				WHEN  'Expense reversal' THEN 2
--				WHEN  'Expense' THEN 3
--				WHEN  'Payment' THEN 4
--				WHEN  'Payment reversal' THEN 1
--				WHEN  'Expense reversal' THEN 2
--				WHEN  'Expense reversal' THEN 2
--				ELSE  99
--			END    AS SORTKEY, 
--			[dbo].[Reins_Mercury_Trnx].Transaction_Type
--		FROM 
--			[dbo].[Reins_Mercury_Trnx]
--		WHERE
--			(
--				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
--				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
----debug			and	Policy_number = 'P600557286'
--			)
--		ORDER BY 1,2,3,4,5,6,7
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Policy_number ,
	@Source_Claim_Number	,
	@CLIENT_REF_ID_1 ,
	@EDW_Contract_key,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@SORTKEY	,
	@Transaction_Type,
	@Month_Effective_Date
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	-- The value in the next step could change so has not bee drrived in the outer loop....
	-- Inefficient but so what   8->
	
	--Get Inner Trsanaction - This ios common across all types of trsanaction

		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
		(-- Criteria from outer loop
			Policy_number			= @Policy_number
		AND Source_Claim_Number			= @Source_Claim_Number	
		AND CLIENT_REF_ID_1		= @CLIENT_REF_ID_1
		AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Movement_Effective_Date		= @Movement_Effective_Date	
		AND Transaction_Type	= @Transaction_Type
		-- And it has not been consumed yet
		AND [dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null
		
		)

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
			
		IF  @Transaction_Type = 'Expense Reversal'     
			BEGIN
						
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND EDW_Contract_key = @EDW_Contract_key
				--AND Claim_reference_id = @CLIENT_REF_ID_1
				--AND Source_Claim_Number = @Source_Claim_Number
				AND Expense_date <= @Transaction_Process_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @SumOfLEDGER_MVMT_AMT , 2 ) 
	

				-- If there is no matching payment is there an expense today that is an exact match....CLAS Specia...
				-- tHIS MIGHT CREATE A MATCHING PAYMENT
				If  @NEWClaimExpId = -1 
					BEGIN
				
						SELECT @TMP_ADMIN_SYSTEM_FILE_ID = -1 
									
						SELECT  TOP 1
							@TMP_ADMIN_SYSTEM_FILE_ID	= ADMIN_SYSTEM_FILE_ID ,
							@TMP_FILE_REC_NUM			= File_Record_Number		
						FROM 
							[dbo].[Reins_Mercury_Trnx]
						WHERE
						-- Criteria from outer loop
							Policy_number			= @Policy_number
						and Source_Claim_Number			= @Source_Claim_Number	
						AND CLIENT_REF_ID_1		= @CLIENT_REF_ID_1
						AND Transaction_Process_Date		= @Transaction_Process_Date
						AND Movement_Effective_Date		= @Movement_Effective_Date	
						AND Transaction_Type	= 'EXPENSE'
						-- And it has not been consumed yet
						AND [dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null
						AND ROUND(Ledger_Movement_Amount,2) = -1 * @SumOfLEDGER_MVMT_AMT 
						and Transaction_Process_Date > '2017-05-29' -- Mercury only started loading data for Klas on this date
						AND Movement_Effective_Date > '2017-05-29'  -- Mercury only started loading data for Klas on this date
						order BY 1,2
			
						-- IF we have an Item to process
						-- Add it to Payment
						IF @TMP_ADMIN_SYSTEM_FILE_ID > -1 
							BEGIN
								BEGIN TRANSACTION;
									INSERT INTO [dbo].[Reins_Claim_Expense]
									(
										Month_Effective_Date,
										Policy_number, 
										[Product_System_Code],
										EDW_Contract_Key,
										--Source_Claim_Number,
										Expense_date,
										Claim_Expense_Type,
										Claim_Expense_Status,
										GROSS_EXPENSE_AMOUNT,
										--Claim_reference_id,
										Created_Date_Time,
										Created_By,
										Process_Log_Id
										)
									Values(
									@Month_Effective_Date,
									@Policy_number ,
									'FDA',
									@EDW_Contract_key,
									--@Source_Claim_Number	,
									@Transaction_Process_Date	,
									@Transaction_Type,
									'OPEN',
									@SumOfLEDGER_MVMT_AMT,
									--@CLIENT_REF_ID_1,
									GetDate(),
									--System_User,
									ORIGINAL_LOGIN(),
								-101
									
									)
								
									
									set @InsertRowCount = @InsertRowCount + @@Rowcount


									select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

									-- Mark Records as done
					
									UPDATE [dbo].[Reins_Mercury_Trnx] 
									SET Claim_Expense_Id = @NEWClaimExpId,
									Updated_By = ORIGINAL_LOGIN(),
									Updated_Date_time = getdate()
									WHERE 
										ADMIN_SYSTEM_FILE_ID	= @TMP_ADMIN_SYSTEM_FILE_ID
									AND File_Record_Number			= @TMP_FILE_REC_NUM	
										
									set @UpdateRowCount = @UpdateRowCount + @@Rowcount	
									
									-- Carry these records forward.
									INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
										Source_Trnx_Id,
										[Claim_Expense_Id],
										[Transaction_Type],
										[PRODUCT_SYSTEM_CODE],
										[Policy_number],
										[Month_Effective_date],
										[Claim_Reference_Id],
										[GL_Account_Id],
										[GL_Product_Code],
										[EDW_Contract_Key],
										EDW_Policy_Number,
										EDW_Contract_Id,
										EDW_Product_Key,
										EDW_Product_Code,
										EDW_Class_Of_Business,
										[Source_Claim_Number],
										[Transaction_Amount],
										[Transaction_Effective_date],
										[Transaction_Process_Date],
										[IMPLICIT_BENEFIT_TYPE_CODE],
										[Reins_Benefit_Category],
										[Created_Date_Time],
										Created_By,
										Process_Log_ID
										)
									SELECT 
										[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
										@NEWClaimExpId,
										[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
										'FDA',
										[dbo].[Reins_Mercury_Trnx].Policy_number,
										[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
										[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
										[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
										[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
										[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
										[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
										[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
										[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
										[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
										[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
										[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
										[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
										getdate(),
										ORIGINAL_LOGIN(),
										-101
									
									FROM 
										[dbo].[Reins_Mercury_Trnx]
									WHERE
										ADMIN_SYSTEM_FILE_ID	= @TMP_ADMIN_SYSTEM_FILE_ID
										AND File_Record_Number			= @TMP_FILE_REC_NUM			

										set @InsertRowCount = @InsertRowCount + @@Rowcount

								COMMIT TRANSACTION;
							END

					END	
		
				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION;
			--Close of the Payment
							UPDATE [dbo].[Reins_Claim_Expense]
							SET 
								[Claim_Expense_Status] = 'CLOSED' ,
								Claim_Expense_Type = 'EXPENSE-REVERSED',
								SETTLEMENT_DATE = @Transaction_Process_Date,
								Updated_Date_Time = getdate(),
								Updated_By = ORIGINAL_LOGIN()
							WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							
							-- Mark Records as done
							UPDATE [dbo].[Reins_Mercury_Trnx] 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = ORIGINAL_LOGIN()
							WHERE 
								(
								Policy_number=@Policy_number
							AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
							AND Transaction_Type=@Transaction_Type
							AND Transaction_Process_Date=@Transaction_Process_Date
							AND Movement_Effective_Date=@Movement_Effective_Date
							AND [Claim_Expense_Id] is null
							)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount


							-- Carry these records forward.


							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
										Source_Trnx_Id,
										[Claim_Expense_Id],
										[Transaction_Type],
										[PRODUCT_SYSTEM_CODE],
										[Policy_number],
										[Month_Effective_date],
										[Claim_Reference_Id],
										[GL_Account_Id],
										[GL_Product_Code],
										[EDW_Contract_Key],
										EDW_Policy_Number,
										EDW_Contract_Id,
										EDW_Product_Key,
										EDW_Product_Code,
										EDW_Class_Of_Business,
										[Source_Claim_Number],
										[Transaction_Amount],
										[Transaction_Effective_date],
										[Transaction_Process_Date],
										[IMPLICIT_BENEFIT_TYPE_CODE],
										[Reins_Benefit_Category],
										[Created_Date_Time],
										Created_By,
										Process_Log_ID
										)
									SELECT 
										[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
										@NEWClaimExpId,
										[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
										'FDA',
										[dbo].[Reins_Mercury_Trnx].Policy_number,
										[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
										[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
										[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
										[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
										[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
										[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
										[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
										[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
										[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
										[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
										[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
										[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
										getdate(),
										ORIGINAL_LOGIN(),
										-101
							FROM 
								[dbo].[Reins_Mercury_Trnx]
							WHERE
								Policy_number=@Policy_number
								AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId

						
						set @InsertRowCount = @InsertRowCount + @@Rowcount

						COMMIT TRANSACTION;
					END
			END
   
				--PRINT @Transaction_Type;

		IF  @Transaction_Type in ('Expense', 'WOP')
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						--Source_Claim_Number,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						--Claim_reference_id,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

						--, Movement_Effective_Date
						)
					Values(
					@Month_Effective_Date,
					@Policy_number ,
					'FDA',
					@EDW_Contract_key,
					--@Source_Claim_Number	,
					@Transaction_Process_Date	,
					'Expense',
					'OPEN',
					@SumOfLEDGER_MVMT_AMT,
					--@CLIENT_REF_ID_1,
					Getdate(),
					ORIGINAL_LOGIN(),
					-101
					
					)

					
				set @InsertRowCount = @InsertRowCount + @@Rowcount

					--PRINT N'iNSERT cOMPLETED';
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_Date_Time = getdate(),
					Updated_By = ORIGINAL_LOGIN()
					WHERE 
						(
						Policy_number=@Policy_number
					AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] is null
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
								@NEWClaimExpId,
								[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
								'FDA',
								[dbo].[Reins_Mercury_Trnx].Policy_number,
								[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
								[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
								[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
								[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
								[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
								[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
								[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
								[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
								[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
								[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
								[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
								[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
								getdate(),
								ORIGINAL_LOGIN(),
								-101
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Payment'     
			BEGIN
		
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
					Policy_number=@Policy_number
				--AND Claim_reference_id = @CLIENT_REF_ID_1
				--AND Source_Claim_Number = @Source_Claim_Number
				AND Expense_date <= @Transaction_Process_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  >=  round( -1 * 0.95 * @SumOfLEDGER_MVMT_AMT , 2 ) 
				AND round(GROSS_EXPENSE_AMOUNT,2)  <=  round( -1 * 1.05*  @SumOfLEDGER_MVMT_AMT , 2 ) 
		
				--PRINT @NEWClaimExpId;
		
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION;

						--Close of the Payment
							UPDATE [dbo].[Reins_Claim_Expense]
							SET 
								[Claim_Expense_Status] = 'CLOSED' ,
								Claim_Expense_Type = 'EXPENSE-PAID',
								SETTLEMENT_DATE = @Transaction_Process_Date,
								Updated_Date_Time = getdate(),
								Updated_By = ORIGINAL_LOGIN()
							WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount
						
							-- Mark Records as done
							UPDATE [dbo].[Reins_Mercury_Trnx] 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = ORIGINAL_LOGIN()
							WHERE 
								(
								Policy_number=@Policy_number
							AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
							AND Transaction_Type=@Transaction_Type
							AND Transaction_Process_Date=@Transaction_Process_Date
							AND Movement_Effective_Date=@Movement_Effective_Date
							AND [Claim_Expense_Id] is null
							)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

						-- Carry these records forward.

							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
								@NEWClaimExpId,
								[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
								'FDA',
								[dbo].[Reins_Mercury_Trnx].Policy_number,
								[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
								[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
								[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
								[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
								[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
								[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
								[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
								[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
								[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
								[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
								[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
								[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
								getdate(),
								ORIGINAL_LOGIN(),
								-101
							FROM 
								[dbo].[Reins_Mercury_Trnx]
							WHERE
								Policy_number=@Policy_number
								AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId

							set @InsertRowCount = @InsertRowCount + @@Rowcount

							COMMIT TRANSACTION;

						END

					IF @NEWClaimExpId = -1 

						BEGIN
						SELECT @NEWClaimExpId = A.Claim_Expense_Id
						FROM [dbo].[Reins_Claim_Expense] A, [dbo].[Reins_Claim_Expense_trnx] B
						WHERE A.Claim_Expense_Id = B.Claim_Expense_Id
								and A.Policy_number=@Policy_number
							AND B.Source_Claim_Number like 'P%'
							and @Source_Claim_Number like 'J%'
							AND A.Expense_date <= @Transaction_Process_Date
							AND A.Claim_Expense_Type = 'EXPENSE'
							AND A.[Claim_Expense_Status] = 'OPEN'
							AND round(A.GROSS_EXPENSE_AMOUNT,2)  =  round( -1 * @SumOfLEDGER_MVMT_AMT , 2 ) 
							--AND round(GROSS_EXPENSE_AMOUNT,2)  <=  round( -1 * 1.05*  @SumOfLEDGER_MVMT_AMT , 2 ) 
							
							IF @NEWClaimExpId != -1 
							Begin
								BEGIN TRANSACTION;
								--Close of the Payment
									UPDATE [dbo].[Reins_Claim_Expense]
									SET 
										[Claim_Expense_Status] = 'CLOSED' ,
										Claim_Expense_Type = 'EXPENSE-PAID',
										SETTLEMENT_DATE = @Transaction_Process_Date,
										Updated_Date_Time = getdate(),
										Updated_By = ORIGINAL_LOGIN()

									WHERE [Claim_Expense_Id] = @NEWClaimExpId

									set @UpdateRowCount = @UpdateRowCount + @@Rowcount
						
									-- Mark Records as done
									UPDATE [dbo].[Reins_Mercury_Trnx] 
									SET Claim_Expense_Id = @NEWClaimExpId,
									Updated_Date_Time = getdate(),
									Updated_By = ORIGINAL_LOGIN()
									WHERE 
										(
										Policy_number=@Policy_number
									AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
									AND Transaction_Type=@Transaction_Type
									AND Transaction_Process_Date=@Transaction_Process_Date
									AND Movement_Effective_Date=@Movement_Effective_Date
									AND [Claim_Expense_Id] is null
									)

								set @UpdateRowCount = @UpdateRowCount + @@Rowcount

								-- Carry these records forward.

									INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
										Source_Trnx_Id,
										[Claim_Expense_Id],
										[Transaction_Type],
										[PRODUCT_SYSTEM_CODE],
										[Policy_number],
										[Month_Effective_date],
										[Claim_Reference_Id],
										[GL_Account_Id],
										[GL_Product_Code],
										[EDW_Contract_Key],
										EDW_Policy_Number,
										EDW_Contract_Id,
										EDW_Product_Key,
										EDW_Product_Code,
										EDW_Class_Of_Business,
										[Source_Claim_Number],
										[Transaction_Amount],
										[Transaction_Effective_date],
										[Transaction_Process_Date],
										[IMPLICIT_BENEFIT_TYPE_CODE],
										[Reins_Benefit_Category],
										[Created_Date_Time],
										Created_By,
										Process_Log_ID
										)
									SELECT 
										[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
										@NEWClaimExpId,
										[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
										'FDA',
										[dbo].[Reins_Mercury_Trnx].Policy_number,
										[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
										[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
										[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
										[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
										[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
										[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
										[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
										[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
										[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
										[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
										[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
										[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
										getdate(),
										ORIGINAL_LOGIN(),
										-101
									FROM 
										[dbo].[Reins_Mercury_Trnx]
									WHERE
										Policy_number=@Policy_number
										AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
										AND Transaction_Type=@Transaction_Type
										AND Transaction_Process_Date=@Transaction_Process_Date
										AND Movement_Effective_Date=@Movement_Effective_Date
										AND [Claim_Expense_Id] =@NEWClaimExpId

									set @InsertRowCount = @InsertRowCount + @@Rowcount

									COMMIT TRANSACTION;
								END
							END

				END
	
		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Policy_number ,
		@Source_Claim_Number	,
		@CLIENT_REF_ID_1 ,
		@EDW_Contract_key,
		@Transaction_Process_Date	,
		@Movement_Effective_Date	,
		@SORTKEY	,
		@Transaction_Type,
		@Month_Effective_Date
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END


















GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_Identify_Payments_WOP]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[usp_Reins_FDA_Identify_Payments_WOP]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
--DECLARE @Source_Claim_Number	varchar(20)
DECLARE @CLIENT_REF_ID_1 varchar(50)
DECLARE @Claim_reference_Id varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
--DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @EDW_Contract_key int
DECLARE @Month_Effective_Date datetime

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0



--DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
--DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Policy_number  VARCHAR(50), 
			CLIENT_REF_ID_1  VARCHAR(50),
			EDW_Contract_key int,
			Claim_reference_Id  varchar(50),
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			Month_Effective_Date datetime

)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].CLIENT_REF_ID_1, 
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_key,
			[dbo].[Reins_Mercury_Trnx].Claim_Reference_Id, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].Month_Effective_Date
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
			Product_System_Code = ''FDA'' 
			AND Client_Ref_Id_1 like ''$WOP%''
			AND GL_Account_Id like ''5%''
			AND Transaction_Type = ''WOP''
			AND Claim_Expense_Id is null
			AND Exclude_Flag = ''N''
			'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4,5
		
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Policy_number ,
	@CLIENT_REF_ID_1 ,
	@EDW_Contract_key,
	@Claim_reference_Id,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@Transaction_Type,
	@Month_Effective_Date
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	

		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
		(
			Policy_number			= @Policy_number
		AND CLIENT_REF_ID_1		= @CLIENT_REF_ID_1
		AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Movement_Effective_Date		= @Movement_Effective_Date	
		AND Transaction_Type	= @Transaction_Type
		AND Claim_reference_Id = @Claim_reference_Id
		-- And it has not been consumed yet
		AND [dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null
		
		)

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
		-- For Waiver of Permium it as been advised that all the expenses should be assumed as PAID. 
		-- So the status will be marked to CLOSED straightaway and the transaction type will be marked as EXPENSE PAID	
		
		IF  @Transaction_Type = 'WOP'   
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						'FDA',
						@EDW_Contract_key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-PAID',
						'CLOSED',
						@SumOfLEDGER_MVMT_AMT,
						Getdate(),
						System_User,
						-101
					
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount
				
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_By = System_user,
					Updated_Date_Time = getdate()
					WHERE 
						(
						Policy_number=@Policy_number
					AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND Claim_reference_Id = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND PRODUCT_SYSTEM_CODE = 'FDA'
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					'Y',
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date as Assumed_Paid_Date, 
					'FDA',
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
					getdate(),
					System_User,
					-101
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

				
				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

   
				--PRINT @Transaction_Type;

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Policy_number ,
		@CLIENT_REF_ID_1 ,
		@EDW_Contract_key,
		@Claim_reference_Id,
		@Transaction_Process_Date	,
		@Movement_Effective_Date	,
		@Transaction_Type,
		@Month_Effective_Date
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END



























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FDA_WOP_From_To_Date]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_Reins_FDA_WOP_From_To_Date]


AS

BEGIN
	SET NOCOUNT ON
	
	
	--DECLARE @Transaction_Process_date datetime
	--DECLARE @NumRows int
	DECLARE @SQL varchar(MAX)
	DECLARE	@EDW_Contract_Key Numeric(10,0)
	DECLARE @Trnx_Process_Date  datetime
	DECLARE @Src_Trnx_Id varchar(20)
	DECLARE @Contract_Start_Date datetime
	DECLARE @From_Date datetime
	DECLARE @To_Date Datetime
	DECLARE @Align_Date Datetime
	DECLARE @Closest_Month_End datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Temp_WOP_Trnx (
			EDW_Contract_Key int,
			Transaction_Process_date datetime,
			Source_Trnx_Id varchar(20)
			)




	CREATE TABLE #Temp_EDW_Contract (
			[EDW_Contract_Key] [numeric](10, 0) NULL,
			[EDW_Contract_Start_Date] [datetime] NULL,
			)

	
	insert into #Temp_WOP_Trnx 
	select distinct EDW_Contract_key,  Transaction_Process_Date, Source_trnx_id from Reins_Claim_Expense_Trnx
	where Transaction_type = 'WOP' and Claim_reference_id like '$WOP%'and Pay_Date_From is null and Product_System_Code = 'FDA'
	--and Source_Trnx_Id = 'MR11735' -- Comment this after testing
	
	--print '#Temp_WOP_Trnx done'
	
	DECLARE Columns_List  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	Select * from #Temp_WOP_Trnx

	

	OPEN Columns_List
	FETCH NEXT FROM Columns_List into
	@EDW_Contract_Key,
	@Trnx_Process_Date,
	@Src_Trnx_Id 
	
	
	
	WHILE @@FETCH_STATUS = 0 
	BEGIN 
		
		-- EDW to Minerva
		SET @SQL =  Concat('select  c.contract_key, vrbl.Contract_start_dttm
					from Idsminerva.MDW.MRVConformed.DW_contract c
					join Idsminerva.MDW.MRVConformed.DW_contract_vrbl vrbl
					on c.contract_key = vrbl.contract_key
					and vrbl.[_ROW_STATUS_IND] = 1
					Where c.contract_key = ', @EDW_Contract_Key)

		--SET @SQL =  Concat('select  contract_key, Contract_start_date
		--			from dw_contract c
		--			Where contract_key = ', @EDW_Contract_Key)

		INSERT INTO #Temp_EDW_Contract
		Exec (@SQL)
		--EXEC Utility.dbo.usp_queryedw @SQL	

		Select @Contract_Start_Date = EDW_Contract_Start_Date   from #Temp_EDW_Contract
		where EDW_Contract_Start_Date is not null

		--Print Concat('Anniv Date = ',@Contract_Start_Date)
		
		If Day(@Trnx_Process_Date) >= Day(@Contract_Start_Date)
			Begin
				--Print 'Inside 1st Condition'
				
				set @From_Date = Cast(Concat(Year(@Trnx_Process_Date),'-',Month(@Trnx_Process_Date),'-',Day(@Contract_Start_Date)) as datetime)
				--Print Concat('From Date = ',@From_Date)

				Set @To_Date = Dateadd(dd,-1,Dateadd(mm, 1,@From_Date))
				--Print Concat('To Date = ',@To_Date)
			End

		If Day(@Trnx_Process_Date) < Day(@Contract_Start_Date)
			Begin
				--Print 'Inside 2nd condition'
				Set @Align_Date = Dateadd(dd, -Day(@Trnx_Process_Date), @Trnx_Process_Date)
			
				--Print Concat('Aligh Date = ', @Align_Date)

				If Abs(Datediff(day, @Trnx_Process_Date, eomonth(@Trnx_Process_Date))) >= Abs(Datediff(day, @Trnx_Process_Date, eomonth(@Align_Date)))
				Begin
					Set @Closest_Month_End = eomonth(@Align_Date)
					--Print concat('Closest_month_end_Align = ',@Closest_Month_End)
				End
				
				Else If  Abs(Datediff(day, @Trnx_Process_Date, eomonth(@Trnx_Process_Date))) < Abs(Datediff(day, @Trnx_Process_Date, eomonth(@Align_Date)))
				Begin
					Set @Closest_Month_End = eomonth(@Trnx_Process_Date)	
					--Print concat('Closest_month_end_Process = ',@Closest_Month_End)	
				End

				If Day(@Contract_Start_Date) >= Day(@Closest_Month_End)
				Begin	
					Set @From_Date = @Closest_Month_End
				END
				Else If Day(@Contract_Start_Date) < Day(@Closest_Month_End)
				Begin
					Set @From_Date = Cast(Concat(Year(@Closest_Month_End),'-',Month(@Closest_Month_End),'-',Day(@Contract_Start_Date)) as datetime)
				End	
				
				--Print Concat('From Date = ',@From_Date)

				Set @To_Date = Dateadd(dd,-1,Dateadd(mm, 1,@From_Date))	
				--Print Concat('To Date = ',@To_Date)
				
			End
		Begin Transaction
		
		Update 	Reins_claim_expense_trnx 
		SET Pay_date_From = @From_Date,
		Pay_Date_To = @To_Date,
		Pay_From_To_Rule = 'FDA_$WOP_EDW_Derived',
		Updated_by = SYSTEM_USER,
		Updated_Date_Time = getdate()
		where EDW_Contract_Key = @EDW_Contract_Key
		and Source_Trnx_Id = @Src_Trnx_Id
			

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

		COMMIT Transaction

		Truncate table #Temp_EDW_Contract

		FETCH NEXT FROM Columns_List into 
		@EDW_Contract_Key,
		@Trnx_Process_Date,
		@Src_Trnx_Id 
	END
	

	CLOSE Columns_List
	Deallocate Columns_List

	
	

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_FLL_NA_Claim_Match]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE procedure [dbo].[usp_Reins_FLL_NA_Claim_Match]


AS

BEGIN
	SET NOCOUNT ON
	
	--DECLARE @EDW_Contract_Key Numeric(10,0)
	--DECLARE @Transaction_Process_date datetime
	--DECLARE @NumRows int
	--DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	--The below update statement matches trnxs to Claim data for FLL Unpaid Accruals having DBX/DBN/DBE option codes
	Begin Transaction
					
						
			Update B
				set 
				[Product_Option_Code] = A.[EDW_Product_Option_Code] ,
									[Claim_Number] = A.[Claim_Number],
									[Layer_0_Reins_Percent] = A.[Layer_0_Reins_Percent],
									[Layer_1_Reins_Percent] = A.[Layer_1_Reins_Percent],
									[Layer_1_Treaty_Id] = A.[Layer_1_Treaty_Id],
									[Layer_2_Treaty_Id] = A.[Layer_2_Treaty_Id], 
									Claim_Source_id = A.Claim_Source_id ,
									Layer_2_Reins_Percent = A.Layer_2_Reins_Percent,
									[Claim_enrichment_rule] = 'CE_FLL_NA',
									Updated_by = System_user,
									Updated_date_time = getdate()
				--Select A.* , C.* --EDW_Product_System_Code, Count(*)
				from Reins_Claim_listing A, Reins_Claim_Expense_Trnx B--, Reins_GL_Journal_Trnx C
				where (A.Policy_number = B.policy_number or A.EDW_Contract_Key = B.EDW_Contract_Key)
				--and EDW_product_option_code like 'D%'
				and A.Reins_Benefit_Type = 'N/A'
				and B.Claim_Enrichment_Rule is null
				and B.Transaction_type in ( 'Expense', 'Expense reversal')
				and A.EDW_Product_System_Code = B.Product_System_Code
				and A.EDW_Product_Code = B.EDW_Product_Code
				AND B.Transaction_Process_date between A.Claim_Notify_date and ISNULL(A.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				AND A.Row_End_Date =  cast('3000-12-31' as date)
				--and B.Source_Trnx_Id = C.GL_Journal_Trnx_Id
				and  (
						B.EDW_Product_Code ='FLL'
		
					 )
				and A.EDW_Product_Option_Code in ('DBX', 'DBN', 'DBE', 'TPX', 'TPN', 'TPE')


				set @UpdateRowCount = @UpdateRowCount + @@Rowcount
			
			COMMIT Transaction
	
		
		



SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Claims_Enrich_Generic]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_GL_Claims_Enrich_Generic]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(50)
	DECLARE @Transaction_Process_date datetime
	DECLARE @Product_System_Code varchar(3)
	DECLARE @Source_trnx_Id varchar (20)
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @EDW_Contract_Key numeric (10,0)
	DECLARE @Reins_Benefit_Category varchar(20)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50),
			Transaction_Process_date datetime,
			Product_System_Code varchar(3),
			Source_Trnx_Id varchar (20),
			EDW_Contract_Key numeric (10,0),
			Reins_Benefit_Category varchar(20)
			)

	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.POLICY_Number, A.Transaction_Process_date, Product_System_Code, Source_trnx_Id, EDW_Contract_Key, Reins_Benefit_Category
			From dbo.Reins_Claim_Expense_Trnx A
			WHERE A.Claim_Enrichment_rule is null and A.Transaction_type in ( ''Expense'', ''Expense reversal'')
			and A.Source_trnx_Id like ''GL%''
			--and A.product_system_code = ''DS''
			'
			

	

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Transaction_Process_date,
	@Product_System_Code,
	@Source_trnx_Id,
	@EDW_Contract_Key,
	@Reins_Benefit_Category
	

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
			Select @NumRows = count(*) from dbo.Reins_Claim_Listing
			where (Policy_Number = @Policy_Number or EDW_Contract_Key = @EDW_Contract_Key)
			and EDW_Product_system_code = @Product_System_Code
			and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
			and Row_End_Date = cast('3000-12-31' as date)
			and Reins_Benefit_Type = @Reins_Benefit_Category
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
				UPDATE dbo.Reins_Claim_Expense_Trnx
				SET
					[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
					[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
					[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
					[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
					[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
					[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
					Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
					Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
					[Claim_enrichment_rule] = 'CE_GL_Pol',
				--	Updated_by = System_user,
					Updated_by = ORIGINAL_LOGIN(),
				Updated_date_time = getdate()
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where (dbo.Reins_Claim_Expense_Trnx.POLICY_Number = dbo.Reins_Claim_Listing.Policy_Number or dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_key)
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ( 'Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = @Product_System_Code
				  AND Reins_Claim_Listing.EDW_Product_System_Code = @Product_System_Code
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date =  cast('3000-12-31' as date)
				  AND dbo.Reins_Claim_Expense_Trnx.Source_trnx_Id = @Source_trnx_Id
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount
			
			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_number,
	@Transaction_Process_date,
	@Product_System_Code,
	@Source_trnx_Id,
	@EDW_Contract_Key		,
	@Reins_Benefit_Category
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
	
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END




























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Identify_Payments_FLSUNPAID]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE  [dbo].[usp_Reins_GL_Identify_Payments_FLSUNPAID]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Transaction_Effective_Date	datetime
DECLARE @Transaction_Type	varchar(20)
DECLARE @Transaction_Amt	money
DECLARE @Claim_Expense_Id	varchar(20)
DECLARE @NEWClaimExpId int
declare @sqlstatement nvarchar(4000)
DECLARE @Month_Effective_Date datetime
DECLARE @EDW_Contract_Key int
DECLARE @Product_System_Code varchar(3)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Transaction_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			Product_System_Code varchar(3)
)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_GL_Journal_Trnx].Month_Effective_Date,
			[dbo].[Reins_GL_Journal_Trnx].Policy_number, 
			[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Type,
			[dbo].[Reins_GL_Journal_Trnx].EDW_Product_System_Code
			
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
			(
			 --FLS Unpaid Claims 
			 GL_Journal_Line_Desc in (''FLS UNPAID CLAIMS'', ''FLS UNPAID CLAIMS-Reversal'')
			 
			 OR
			 
			 --OPUS accruals
			 (  Source_System_Narrative_1 like ''Outstanding Claims Accrual%'' )
			 
			 
			  OR 
			-- ABle Accruals
			 ( --GL_Posting_Ref_1 like ''MaylineDTH%'' AND   
			 Source_System_Narrative_1 like ''ABLE Claim accrual%'' )
			 
			 
			 )

			AND Exclude_Flag = ''N''
			--AND [Source_System_Ref_2] = ''SF9'' 
			AND
			(
				([dbo].[Reins_GL_Journal_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null)
			)
			and edw_product_system_code is not null'

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')

exec(@sqlstatement)

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,5,4,6

OPEN TXN_LIST_TO_PROCESS

FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@EDW_Contract_Key ,
	@Transaction_Process_Date	,
	@Transaction_Effective_Date	,
	@Transaction_Type,
	@Product_System_Code

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
		SELECT @Transaction_Amt = ROUND(Sum([dbo].Reins_GL_Journal_Trnx.Transaction_Amount),2)
		FROM [dbo].Reins_GL_Journal_Trnx
		WHERE
			Policy_number			= @Policy_number
			AND Transaction_Process_Date		= @Transaction_Process_Date
			AND Transaction_Effective_Date		= @Transaction_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			AND Claim_Expense_Id Is Null
			

		IF  @Transaction_Amt  IS NULL
		begin

			select @Transaction_Type = 'SKIP'

		end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					Values
					(
						@Month_Effective_Date,
						@Policy_number ,
						@Product_System_Code,
						@EDW_Contract_Key,
						@Transaction_Process_Date	,
						@Transaction_Type,
						'OPEN',
						@Transaction_Amt,
						Getdate(),
						--System_user,
						ORIGINAL_LOGIN(),
						-108
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_Date_Time = getdate(),
					Updated_By = ORIGINAL_LOGIN()


					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND Transaction_Process_Date=@Transaction_Process_Date
						AND Transaction_Effective_Date=@Transaction_Effective_Date
						AND [Claim_Expense_Id] is null
						
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].Reins_GL_Journal_Trnx.GL_Journal_Trnx_Id,
								@NEWClaimExpId,
								[dbo].Reins_GL_Journal_Trnx.Transaction_Type, 
								Reins_GL_Journal_Trnx.EDW_Product_System_Code,
								[dbo].Reins_GL_Journal_Trnx.Policy_number,
								[dbo].Reins_GL_Journal_Trnx.[Month_Effective_date],
								NULL,
								[dbo].Reins_GL_Journal_Trnx.[GL_Account_Id],
								[dbo].Reins_GL_Journal_Trnx.[GL_Product_Id],
								[dbo].Reins_GL_Journal_Trnx.[EDW_Contract_Key],
								[dbo].Reins_GL_Journal_Trnx.EDW_Policy_Number,
								[dbo].Reins_GL_Journal_Trnx.EDW_Contract_Id,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Key,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Code,
								[dbo].Reins_GL_Journal_Trnx.EDW_Class_Of_Business,
								NULL, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Amount, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Effective_date, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Process_Date, 
								NULL,
								[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
								getdate(),
								ORIGINAL_LOGIN(),
								-108
					FROM 
					[dbo].Reins_GL_Journal_Trnx
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					
				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense Reversal' 
			BEGIN
					
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND Expense_date <= @Transaction_Process_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @Transaction_Amt , 2 ) 

				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-REVERSED',
									SETTLEMENT_DATE = @Transaction_Process_Date,
									Updated_Date_Time = getdate(),
									Updated_By = ORIGINAL_LOGIN()

								WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount
							
								-- Mark Records as done
							UPDATE [dbo].Reins_GL_Journal_Trnx 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = ORIGINAL_LOGIN()

							WHERE 
								(
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] is null
								
								)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							-- Carry these records forward.
							
							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].Reins_GL_Journal_Trnx.GL_Journal_Trnx_Id,
								@NEWClaimExpId,
								[dbo].Reins_GL_Journal_Trnx.Transaction_Type, 
								Reins_GL_Journal_Trnx.EDW_Product_System_Code,
								[dbo].Reins_GL_Journal_Trnx.Policy_number,
								[dbo].Reins_GL_Journal_Trnx.[Month_Effective_date],
								NULL,
								[dbo].Reins_GL_Journal_Trnx.[GL_Account_Id],
								[dbo].Reins_GL_Journal_Trnx.[GL_Product_Id],
								[dbo].Reins_GL_Journal_Trnx.[EDW_Contract_Key],
								[dbo].Reins_GL_Journal_Trnx.EDW_Policy_Number,
								[dbo].Reins_GL_Journal_Trnx.EDW_Contract_Id,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Key,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Code,
								[dbo].Reins_GL_Journal_Trnx.EDW_Class_Of_Business,
								NULL, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Amount, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Effective_date, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Process_Date, 
								NULL,
								[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
								getdate(),
								ORIGINAL_LOGIN(),
								-108
							FROM 
								[dbo].Reins_GL_Journal_Trnx
							WHERE
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId

							set @InsertRowCount = @InsertRowCount + @@Rowcount

						COMMIT TRANSACTION;
					
					END
				END

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@EDW_Contract_Key ,
		@Transaction_Process_Date	,
		@Transaction_Effective_Date	,
		@Transaction_Type	,
		@Product_System_Code

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END  


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Identify_Payments_Generic]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_GL_Identify_Payments_Generic]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Transaction_Effective_Date	datetime
DECLARE @Transaction_Type	varchar(20)
DECLARE @Transaction_Amt	money
DECLARE @Claim_Expense_Id	varchar(20)
DECLARE @NEWClaimExpId int
declare @sqlstatement nvarchar(4000)
DECLARE @Month_Effective_Date datetime
DECLARE @EDW_Contract_Key int
DECLARE @Product_System_Code varchar(3)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Transaction_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			Product_System_Code varchar(3)
)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_GL_Journal_Trnx].Month_Effective_Date,
			[dbo].[Reins_GL_Journal_Trnx].Policy_number, 
			[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Type,
			[dbo].[Reins_GL_Journal_Trnx].EDW_Product_System_Code
			
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
			Not (GL_Journal_Line_Desc in (''FLS UNPAID CLAIMS'', ''FLS UNPAID CLAIMS-Reversal'')
			OR [Source_System_Ref_2] = ''SPE'' OR EDW_Product_System_Code = ''DS'')
			AND Exclude_Flag = ''N''
			AND EDW_Product_System_Code is not null
			AND Policy_Number is not null
			AND
			(
				([dbo].[Reins_GL_Journal_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null)
			)'

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')

exec(@sqlstatement)

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,5,4,6

OPEN TXN_LIST_TO_PROCESS

FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@EDW_Contract_Key ,
	@Transaction_Process_Date	,
	@Transaction_Effective_Date	,
	@Transaction_Type,
	@Product_System_Code

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
		SELECT @Transaction_Amt = ROUND(Sum([dbo].Reins_GL_Journal_Trnx.Transaction_Amount),2)
		FROM [dbo].Reins_GL_Journal_Trnx
		WHERE
			Policy_number			= @Policy_number
			AND ISNULL(Transaction_Process_Date, cast('2899-12-31' as date)) = ISNULL(@Transaction_Process_Date, cast('2899-12-31' as date))
			AND Transaction_Effective_Date		= @Transaction_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			AND Claim_Expense_Id Is Null
			

		IF  @Transaction_Amt  IS NULL
		begin

			select @Transaction_Type = 'SKIP'

		end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					Values
					(
						@Month_Effective_Date,
						@Policy_number ,
						@Product_System_Code,
						@EDW_Contract_Key,
						@Transaction_Effective_Date	,
						@Transaction_Type,
						'OPEN',
						@Transaction_Amt,
						Getdate(),
						--System_user,
						ORIGINAL_LOGIN(),
						-109
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_Date_Time = getdate(),
					Updated_By = ORIGINAL_LOGIN()


					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						--AND Transaction_Process_Date=@Transaction_Process_Date
						AND Transaction_Effective_Date=@Transaction_Effective_Date
						AND EDW_product_System_code = @Product_System_Code
						AND [Claim_Expense_Id] is null
						
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].Reins_GL_Journal_Trnx.GL_Journal_Trnx_Id,
								@NEWClaimExpId,
								[dbo].Reins_GL_Journal_Trnx.Transaction_Type, 
								Reins_GL_Journal_Trnx.EDW_Product_System_Code,
								[dbo].Reins_GL_Journal_Trnx.Policy_number,
								[dbo].Reins_GL_Journal_Trnx.[Month_Effective_date],
								NULL,
								[dbo].Reins_GL_Journal_Trnx.[GL_Account_Id],
								[dbo].Reins_GL_Journal_Trnx.[GL_Product_Id],
								[dbo].Reins_GL_Journal_Trnx.[EDW_Contract_Key],
								[dbo].Reins_GL_Journal_Trnx.EDW_Policy_Number,
								[dbo].Reins_GL_Journal_Trnx.EDW_Contract_Id,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Key,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Code,
								[dbo].Reins_GL_Journal_Trnx.EDW_Class_Of_Business,
								NULL, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Amount, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Effective_date, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Process_Date, 
								NULL,
								[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
								getdate(),
								ORIGINAL_LOGIN(),
								-109
					FROM 
					[dbo].Reins_GL_Journal_Trnx
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					
				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense Reversal' 
			BEGIN
					
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND Expense_date <= @Transaction_Effective_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @Transaction_Amt , 2 ) 

				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-REVERSED',
									SETTLEMENT_DATE = @Transaction_Effective_Date,
									Updated_Date_Time = getdate(),
									Updated_By = ORIGINAL_LOGIN()

								WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount
							
								-- Mark Records as done
							UPDATE [dbo].Reins_GL_Journal_Trnx 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = ORIGINAL_LOGIN()

							WHERE 
								(
								Policy_number=@Policy_number
								--AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND @Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] is null
								
								)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							-- Carry these records forward.
							
							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].Reins_GL_Journal_Trnx.GL_Journal_Trnx_Id,
								@NEWClaimExpId,
								[dbo].Reins_GL_Journal_Trnx.Transaction_Type, 
								Reins_GL_Journal_Trnx.EDW_Product_System_Code,
								[dbo].Reins_GL_Journal_Trnx.Policy_number,
								[dbo].Reins_GL_Journal_Trnx.[Month_Effective_date],
								NULL,
								[dbo].Reins_GL_Journal_Trnx.[GL_Account_Id],
								[dbo].Reins_GL_Journal_Trnx.[GL_Product_Id],
								[dbo].Reins_GL_Journal_Trnx.[EDW_Contract_Key],
								[dbo].Reins_GL_Journal_Trnx.EDW_Policy_Number,
								[dbo].Reins_GL_Journal_Trnx.EDW_Contract_Id,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Key,
								[dbo].Reins_GL_Journal_Trnx.EDW_Product_Code,
								[dbo].Reins_GL_Journal_Trnx.EDW_Class_Of_Business,
								NULL, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Amount, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Effective_date, 
								[dbo].Reins_GL_Journal_Trnx.Transaction_Process_Date, 
								NULL,
								[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
								getdate(),
								ORIGINAL_LOGIN(),
								-109
							FROM 
								[dbo].Reins_GL_Journal_Trnx
							WHERE
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId

						set @InsertRowCount = @InsertRowCount + @@Rowcount

						COMMIT TRANSACTION;
					
					END
				END

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@EDW_Contract_Key ,
		@Transaction_Process_Date	,
		@Transaction_Effective_Date	,
		@Transaction_Type	,
		@Product_System_Code

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END  








GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Identify_Payments_SPE]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_GL_Identify_Payments_SPE]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Source_Claim_Number	varchar(20)
--DECLARE @CLIENT_REF_ID_4 varchar(50)
--DECLARE @Claim_reference_Id varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Transaction_Effective_Date	datetime
--DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @Transaction_Amount	money
DECLARE @Month_Effective_Date datetime
DECLARE @Contract_Key int
DECLARE @PRODUCT_SYSTEM_CODE varchar(3)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


--DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
--DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			Contract_Key int,
			Transaction_Process_Date datetime , 
			Transaction_Effective_date datetime ,
			Transaction_Type VARCHAR(50),
			Source_Claim_Number varchar(20),
			PRODUCT_SYSTEM_CODE VARCHAR(3)
			
)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT 
			[dbo].[Reins_GL_Journal_Trnx].Month_Effective_Date,
			[dbo].[Reins_GL_Journal_Trnx].Policy_number, 
			[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
			[dbo].[Reins_GL_Journal_Trnx].Transaction_Type,
			[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number,
			[dbo].[Reins_GL_Journal_Trnx].[EDW_Product_System_Code]
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
			[Source_System_Ref_2] = ''SPE'' 
			AND Exclude_flag = ''N''
			AND
			EDW_Product_System_Code is not null
			AND
			(
				([dbo].[Reins_GL_Journal_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null)
				
			)'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,3,2,4,5
		
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@Contract_Key,
	@Transaction_Process_Date	,
	@Transaction_Effective_Date	,
	@Transaction_Type,
	@Source_Claim_Number,
	@PRODUCT_SYSTEM_CODE
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	

		SELECT @Transaction_amount = ROUND(Sum([dbo].[Reins_GL_Journal_Trnx].Transaction_amount),2)
		FROM 
			[dbo].[Reins_GL_Journal_Trnx]
		WHERE
		
			Policy_number			= @Policy_number
			AND Transaction_Process_Date		= @Transaction_Process_Date
			AND Transaction_Effective_Date		= @Transaction_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			--AND Claim_reference_Id = @Claim_reference_Id
			-- And it has not been consumed yet
			AND [dbo].[Reins_GL_Journal_Trnx].Claim_Expense_Id Is Null
		
		

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @Transaction_Amount  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
		-- For DS it as been advised that all the expenses and expense reversals should be assumed as PAID. 
		-- So the status will be marked to CLOSED straightaway and the transaction type will be marked as EXPENSE PAID	or Expense Reveresed respectively
		
		IF  @Transaction_Type = 'Expense reversal'   
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						--Source_Claim_Number,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						@PRODUCT_SYSTEM_CODE,
						@Contract_Key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-REVERSED',
						'CLOSED',
						--@Source_Claim_Number,
						@Transaction_Amount,
						Getdate(),
					--	System_user,
				        ORIGINAL_LOGIN(),
						-106
					
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount
				
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId, 
					Updated_By = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					
					WHERE 
						(
						Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_date=@Transaction_Effective_Date
					--AND = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND EDW_PRODUCT_SYSTEM_CODE = @PRODUCT_SYSTEM_CODE
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[Policy_number],
					[Month_Effective_date],
					[Source_Claim_Number],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					Reins_benefit_category,
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_GL_Journal_Trnx].GL_Journal_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Type, 
					@PRODUCT_SYSTEM_CODE,
					'Y',
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date,
					[dbo].[Reins_GL_Journal_Trnx].Policy_number,
					[dbo].[Reins_GL_Journal_Trnx].[Month_Effective_date],
					[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number,
					[dbo].[Reins_GL_Journal_Trnx].GL_Account_Id,
					[dbo].[Reins_GL_Journal_Trnx].GL_Product_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Policy_Number,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Code,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Amount, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
					[dbo].[Reins_GL_Journal_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					getdate(),
					ORIGINAL_LOGIN(),
					-106
					FROM 
					[dbo].[Reins_GL_Journal_Trnx]
					Where
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

					set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

   
				--PRINT @Transaction_Type;

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						@PRODUCT_SYSTEM_CODE,
						@Contract_Key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-PAID',
						'CLOSED',
						@Transaction_Amount,
						Getdate(),
						ORIGINAL_LOGIN(),
						-106
					
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount
				
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_GL_Journal_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId, 
					Updated_By = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					WHERE 
						(
						Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_date=@Transaction_Effective_Date
					--AND = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND EDW_PRODUCT_SYSTEM_CODE = @PRODUCT_SYSTEM_CODE
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Assumed_Paid],
					[Assumed_Paid_Date],
					[Policy_number],
					[Month_Effective_date],
					[Source_Claim_Number],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					Reins_benefit_category,
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_GL_Journal_Trnx].GL_Journal_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Type, 
					@PRODUCT_SYSTEM_CODE,
					'Y',
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date,
					[dbo].[Reins_GL_Journal_Trnx].Policy_number,
					[dbo].[Reins_GL_Journal_Trnx].[Month_Effective_date],
					[dbo].[Reins_GL_Journal_Trnx].Source_Claim_Number,
					[dbo].[Reins_GL_Journal_Trnx].GL_Account_Id,
					[dbo].[Reins_GL_Journal_Trnx].GL_Product_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Policy_Number,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Contract_Id,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Key,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Product_Code,
					[dbo].[Reins_GL_Journal_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Amount, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Effective_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_GL_Journal_Trnx].Reins_benefit_category,
					[dbo].[Reins_GL_Journal_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					getdate(),
					ORIGINAL_LOGIN(),
					-106
					FROM 
					[dbo].[Reins_GL_Journal_Trnx]
					Where
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					
					set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		
	
		
	
		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@Contract_Key,
		@Transaction_Process_Date	,
		@Transaction_Effective_Date	,
		@Transaction_Type,
		@Source_Claim_Number,
		@PRODUCT_SYSTEM_CODE

		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END

























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Insert_Reversal_FLS_And_Others]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE  [dbo].[usp_Reins_GL_Insert_Reversal_FLS_And_Others]
	--@In_Source_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 
AS

BEGIN
SET NOCOUNT ON
DECLARE @Current_processing_month datetime
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

	Begin Try
		Select @Current_processing_month = [Reins_Cyclic_Effective_Date] 
		from [dbo].[Reins_Cyclic]
		Where [Reins_Cyclic_Status] = 'Draft'

		Begin Transaction
			INSERT INTO 
							Reins_GL_Journal_Trnx ( GL_Journal_Trnx_Id, Month_Effective_Date, Policy_Number, EDW_Product_System_Code, EDW_Contract_Key, EDW_Product_Code, EDW_Product_Key, EDW_Product_Option_Code, EDW_Product_Option_Key, EDW_Contract_Id, EDW_Policy_Number, EDW_Product_Name, EDW_Class_of_Business, Reins_Benefit_Category, Claim_Number, Transaction_Effective_date, Transaction_Process_Date, Transaction_Amount, Transaction_Type, Implicit_Benefit_Type_Code, Source_Claim_Number, Trace_Code, GL_Business_Unit_Id, GL_Journal_Id, GL_Journal_Date, GL_Journal_Line, GL_Ledger_Code, GL_Account_Id, GL_Department_Id, GL_Product_Id, GL_Project_Id, GL_Affiliate_Id, GL_Currency_Code, GL_Monetary_Amount, GL_Posting_Ref_1, GL_Journal_Line_Desc, Status_Ref_1, Source_System_Ref_1, Source_System_Ref_2, GL_Posting_Ref_2, Status_Ref_2, GL_Posting_Date, User_Id, Source_System_Narrative_1, GL_Statistic_Amount, GL_Foreign_Currency_Code, GL_Foreign_Amount, GL_Journal_Month, Pcode, Created_By, Created_Date_Time, Updated_Date_Time, Updated_By, Process_Log_Id, Exclude_Flag, Exclude_Reason )
			SELECT [GL_Journal_Trnx_Id] + cast('-REV' as varchar) AS [GL_Journal_Trnx_Id], EOMONTH(DateAdd("m",1,[Month_Effective_Date])) AS Month_efective_Date, 
							Reins_GL_Journal_Trnx.Policy_Number, 
							Reins_GL_Journal_Trnx.EDW_Product_System_Code, 
							Reins_GL_Journal_Trnx.EDW_Contract_Key, 
							Reins_GL_Journal_Trnx.EDW_Product_Code, 
							Reins_GL_Journal_Trnx.EDW_Product_Key, 
							Reins_GL_Journal_Trnx.EDW_Product_Option_Code, 
							Reins_GL_Journal_Trnx.EDW_Product_Option_Key, 
							Reins_GL_Journal_Trnx.EDW_Contract_Id, 
							Reins_GL_Journal_Trnx.EDW_Policy_Number, 
							Reins_GL_Journal_Trnx.EDW_Product_Name, 
							Reins_GL_Journal_Trnx.EDW_Class_of_Business, 
							Reins_GL_Journal_Trnx.Reins_Benefit_Category,
							Reins_GL_Journal_Trnx.Claim_Number, [Transaction_Effective_date]+1 AS Transaction_Effective_Date, 
							Reins_GL_Journal_Trnx.Transaction_Process_Date, [Transaction_Amount]*-1 AS Transaction_Amount, 'Expense Reversal' AS Transaction_Type, 
							Reins_GL_Journal_Trnx.Implicit_Benefit_Type_Code, 
							Reins_GL_Journal_Trnx.Source_Claim_Number, 
							Reins_GL_Journal_Trnx.Trace_Code, 
							Reins_GL_Journal_Trnx.GL_Business_Unit_Id, 
							Reins_GL_Journal_Trnx.GL_Journal_Id, 
							Reins_GL_Journal_Trnx.GL_Journal_Date, 
							Reins_GL_Journal_Trnx.GL_Journal_Line, 
							Reins_GL_Journal_Trnx.GL_Ledger_Code, 
							Reins_GL_Journal_Trnx.GL_Account_Id, 
							Reins_GL_Journal_Trnx.GL_Department_Id, 
							Reins_GL_Journal_Trnx.GL_Product_Id, 
							Reins_GL_Journal_Trnx.GL_Project_Id, 
							Reins_GL_Journal_Trnx.GL_Affiliate_Id, 
							Reins_GL_Journal_Trnx.GL_Currency_Code, [GL_Monetary_Amount]*-1 AS [GL_Monetary_Amount], 
							Reins_GL_Journal_Trnx.GL_Posting_Ref_1, [GL_Journal_Line_Desc] + '-Reversal' AS [GL_Journal_Line_Desc], 
							Reins_GL_Journal_Trnx.Status_Ref_1, 
							Reins_GL_Journal_Trnx.Source_System_Ref_1, 
							Reins_GL_Journal_Trnx.Source_System_Ref_2, 
							Reins_GL_Journal_Trnx.GL_Posting_Ref_2, 
							Reins_GL_Journal_Trnx.Status_Ref_2, 
							Reins_GL_Journal_Trnx.GL_Posting_Date, 
							Reins_GL_Journal_Trnx.User_Id, [Source_System_Narrative_1] + ' Reversal' AS [Source_System_Narrative_1], 
							Reins_GL_Journal_Trnx.GL_Statistic_Amount, 
							Reins_GL_Journal_Trnx.GL_Foreign_Currency_Code, 
							Reins_GL_Journal_Trnx.GL_Foreign_Amount, 
							Reins_GL_Journal_Trnx.GL_Journal_Month, 
							Reins_GL_Journal_Trnx.Pcode, 
							SYSTEM_USER, 
							getdate(), 
							NULL, 
							NULL, 
							-107, 
							Reins_GL_Journal_Trnx.Exclude_Flag, 
							Reins_GL_Journal_Trnx.Exclude_Reason
			FROM 
							Reins_GL_Journal_Trnx 
			WHERE 
							Reins_GL_Journal_Trnx.Transaction_Type ='Expense' 
							AND (
							Reins_GL_Journal_Trnx.GL_Journal_Line_Desc ='FLS UNPAID CLAIMS'
							OR ( Source_System_Narrative_1 like 'Outstanding Claims Accrual%')
							OR  (Source_System_Narrative_1 like 'ABLE Claim accrual%')
							)
						AND Not Exists (select * from Reins_GL_Journal_Trnx B
										Where Reins_GL_Journal_Trnx.GL_Journal_Trnx_Id + cast('-REV' as varchar) = B.GL_Journal_Trnx_Id )	
						AND month_effective_date < 	(Select max(month_effective_date) from Reins_GL_Journal_Trnx)
							;
							
			set @InsertRowCount = @InsertRowCount + @@Rowcount

		Commit Transaction
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
  
  SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GL_Update_Claim_Data_for_FLS_Other_Reversals]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_GL_Update_Claim_Data_for_FLS_Other_Reversals]
	--@In_Source_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 
AS

BEGIN
SET NOCOUNT ON
DECLARE @Current_processing_month datetime
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

	Begin Try
		Begin Transaction
			Update Revs
			Set Claim_Source_id = Acc.Claim_source_id,
			Claim_enrichment_rule = Acc.Claim_enrichment_rule,
			[Product_Option_Code] = Acc.[Product_Option_Code],
			[Claim_Number] = Acc.[Claim_Number],
			[Layer_0_Reins_Percent] = Acc.[Layer_0_Reins_Percent],
			[Layer_1_Reins_Percent] = Acc.[Layer_1_Reins_Percent],
			[Layer_1_Treaty_Id] = Acc.[Layer_1_Treaty_Id],
			[Layer_2_Treaty_Id] = Acc.[Layer_2_Treaty_Id], 
			Layer_2_Reins_Percent = Acc.Layer_2_Reins_Percent,
			Updated_by = System_user,
			Updated_date_time = getdate()
			--Select Acc.Claim_Source_Id, Revs.*
			from
			Reins_Claim_Expense_Trnx Revs, Reins_Claim_Expense_Trnx Acc
			where Revs.Source_Trnx_Id = CONCAT(Acc.source_trnx_id, '-REV')
			and Revs.Source_Trnx_Id like '%REV'
			and Acc.Claim_Enrichment_Rule is not null
			and Revs.Claim_Enrichment_Rule is null
			and Revs.Source_Trnx_Id like 'GL%'

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount

		Commit Transaction
		
				

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
  
  SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Add_Payment_Description]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--*********************************************************************************************/
-- *Date       *Author    *Version     *Description
 --------------------------------------------------------------------------------------------
--  12/01/2021       MHTSIQ    1.0      GUI proc to add payment description for the ancillary benefits

---*********************************************************************************************/
CREATE PROCEDURE [dbo].[usp_Reins_GUI_Add_Payment_Description] 
	-- Add the parameters for the stored procedure here
	@Payment_Desc varchar(1000)
with EXECUTE as SELF

AS
BEGIN
SET NOCOUNT ON;
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	
	BEGIN TRY

   Begin Tran add_Payment_desc
    INSERT INTO [dbo].[Ref_Payment_Description]
           ([Description]
           ,[Effective_From_Date]
           ,[Effective_To_Date]
           ,[Created_Date_Time]
           ,[Created_By]
          )
     VALUES
           (@Payment_Desc , 
		  GETDATE()  , 
		   NULL , 
		   GETDATE() , 
		   ORIGINAL_LOGIN()
		    
		   )
 SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
 Print 'Added Rows :' + convert(varchar(50), @InsertRowCount)


	Commit TRAN add_Payment_desc

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN add_Payment_desc;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_DataCorrection_Make]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE Procedure  [dbo].[usp_REINS_GUI_DataCorrection_Make]
	@InputTableName	varchar(60) ,
	@InputKey1		varchar(60) ,
	@InputKey2		varchar(60) ,
	@InputKey3		varchar(60) ,
	@InputKey4		varchar(60) ,
	@InputKey5		varchar(60) ,
	@InputKey6		varchar(60) ,
	@InputField		varchar(60) ,
	@InputFieldValue varchar(60) ,
	@InputFieldNewValue varchar(60) 
as	
Begin
	--Confirm we have all required parameters

	--Confirm we dont already have a duplicate fix

	-- confirm the fix actually finds a record.

	-- Add to the table.

	insert [DataCorrection_Rules]
		(
		[Fix_Description],
		--[Row_Start_Date],	
		--[Row_End Date],
		[Table_Name],
		--Sequence_Number	,
		Source_Key_1,
		Source_Key_2,
		Source_Key_3,
		Source_Key_4,
		Source_Key_5,
		Source_Key_6,
		--Expected_Row_Count	,
		Target_Field	,
		Target_Field_Oldval , 
		Target_Field_Newval			
	--Created_By			[nvarchar](20) NULL,
	--Created_date		date,
	--Updated_By			[nvarchar](20) NULL,
	--Updated_date		date,
	--Last_Applied		Date,
	--Last_Applied_RowCount  int,
	) 
	Values (
	'TBD',
	--RSD
	--RED,
	@InputTableName,
	--
	@InputKey1,
	@InputKey2,
	@InputKey3,
	@InputKey4,
	@InputKey5,
	@InputKey6,
	@InputField,
	@InputFieldValue ,
	@InputFieldNewValue

	)

END


GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_DataCorrection_Read]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[usp_REINS_GUI_DataCorrection_Read]
	@InputTableName	varchar(60) ,
	@InputKey1		varchar(60) ,
	@InputKey2		varchar(60) ,
	@InputKey3		varchar(60) ,
	@InputKey4		varchar(60) ,
	@InputKey5		varchar(60) ,
	@InputKey6		varchar(60) 

as	
Begin
	--Confirm we have all required parameters

	--Confirm we dont already have a duplicate fix

	-- confirm the fix actually finds a record.

	-- return
	select * 
	from  [DataCorrection_Rules]
	WHERE 
		[Table_Name] = @InputTableName and 
		Source_Key_1 = @InputKey1 and
		Source_Key_2 = @InputKey2 and
		Source_Key_3 = @InputKey3 and
		Source_Key_4 = @InputKey4 and
		Source_Key_5 = @InputKey5 and
		Source_Key_6 = @InputKey6
	
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Disable_Payment_Description]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--*********************************************************************************************/
-- *Date       *Author    *Version     *Description
 --------------------------------------------------------------------------------------------
--  12/01/2021       MHTSIQ    1.0      GUI proc to disable payment description for the ancillary benefits

---*********************************************************************************************/


CREATE PROCEDURE [dbo].[usp_Reins_GUI_Disable_Payment_Description] 
	-- Add the parameters for the stored procedure here
	@Payment_Desc varchar(1000) 
with EXECUTE as SELF

AS
BEGIN 
SET NOCOUNT ON;
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	
	BEGIN TRY

   Begin Tran disable_Payment_desc
    Update [dbo].[Ref_Payment_Description]
	set Effective_To_Date = GETDATE()
	where Ref_Payment_Description_Id = @Payment_Desc

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 Print 'Updated Rows :' + convert(varchar(50), @InsertRowCount)
        

	Commit TRAN disable_Payment_desc

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN disable_Payment_desc;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Manual_Claim_Match]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_GUI_Manual_Claim_Match]
	@In_Source_Trnx_Id	varchar (20),
	@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	
	
	If  NOT EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		THROW  51000, 'Source_trnx_ID does not exist', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END
	
	If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where Claim_Source_id = @In_Claim_Src_Id)
	Begin
		THROW  51000, 'The Claim Source Id does not exists', 1;

	END

	If EXISTS (Select * from dbo.Reins_claim_Expense_Trnx A, Reins_claim_Listing B
				where A.Claim_Source_Id = B.Claim_Source_Id
				and A.Source_Trnx_Id =  @In_Source_Trnx_Id
				and B.Claim_Source_Id = @In_Claim_Src_Id)
		Begin
			THROW  51000, 'The Transaction and Claim have already been matched', 1;
		END
	
	SET @sql = Concat('Update dbo.Reins_Claim_expense_trnx 
								SET
								 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
								 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
								 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
								 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
								 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
								 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
								 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
								 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
								 [Claim_enrichment_rule] = ''CE_Manual_Match'',
								 Updated_by = ORIGINAL_LOGIN(),
								 Updated_date_time = getdate()
								From dbo.Reins_claim_Expense_Trnx , Reins_claim_Listing 
								Where  (dbo.Reins_Claim_Expense_Trnx.POLICY_Number = dbo.Reins_Claim_Listing.Policy_Number OR
								dbo.Reins_Claim_Expense_Trnx.EDW_Contract_key = dbo.Reins_Claim_Listing.EDW_Contract_key)
								AND dbo.Reins_Claim_Expense_Trnx.Product_System_code = dbo.Reins_Claim_Listing.EDW_Product_System_Code
								and dbo.Reins_Claim_Listing.Claim_Source_Id = ''',@In_Claim_Src_Id,'''',' 
								and Reins_Claim_Expense_Trnx.Source_trnx_id = ''',@In_Source_Trnx_Id, ''''
								)
	Begin Transaction
	exec(@sql);
	Commit Transaction

	SET @sql = Concat('Exec dbo.usp_Reins_Layer_calcs @In_Mercury_Trnx_Id = N''',@In_Source_Trnx_Id,'''')

	Begin Transaction
	exec(@sql);
	Commit Transaction
		
	SET @sql = Concat('Exec dbo.usp_Reins_Progress_To_Recovery_Rule @In_Source_Trnx_Id = N''',@In_Source_Trnx_Id,'''')

	Begin Transaction
	exec(@sql);
	Commit Transaction
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Manual_Claim_UnMatch]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_GUI_Manual_Claim_UnMatch] 
	@In_Source_Trnx_Id	varchar (20)
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	
	
	If  NOT EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		THROW  51000, 'Source_trnx_ID does not exist', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END
	
	--If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where Claim_Source_id = @In_Claim_Src_Id)
	--Begin
	--	THROW  51000, 'The Claim Source Id does not exists', 1;

	--END

	If NOT EXISTS (Select * from dbo.Reins_claim_Expense_Trnx A --, Reins_claim_Listing B
				where --A.Claim_Source_Id = B.Claim_Source_Id
				 A.Source_Trnx_Id =  @In_Source_Trnx_Id
				 and A.Claim_Source_Id is not null
				--and B.Claim_Source_Id = @In_Claim_Src_Id
				)
		Begin
			THROW  51000, 'The Transaction has not yet been matched to any claim', 1;
		END
	
	If @In_Source_Trnx_Id like 'AB%'
		Begin
			SET @sql = Concat('Update dbo.Reins_Claim_expense_trnx 
								SET
								 [Product_Option_Code] = NULL ,
								 --[Claim_Number] = NULL,
								 [Layer_0_Reins_Percent] = NULL,
								 [Layer_1_Reins_Percent] = NULL,
								 [Layer_1_Treaty_Id] = NULL,
								 [Layer_2_Treaty_Id] = NULL, 
								 Claim_Source_id = NULL ,
								 Layer_2_Reins_Percent = NULL,
								 [Claim_enrichment_rule] = NULL,
								 Layer_1_Reins_Claim_Amount = NULL,
								 Layer_1_Residual_Claim_Amount = Null,
								 Layer_1_Treaty_Rule = NULL,
								 Layer_0_Reins_Claim_Amount =  NULL,
								 Layer_0_Residual_Claim_Amount =  NULL,
								 Layer_0_Rule =  NULL,
								 Layer_2_Reins_Claim_Amount =  NULL,
								 Layer_2_Residual_claim_Amount =  NULL,
								 Layer_2_Treaty_Rule =  NULL,
								 Progress_to_Recovery = NULL,
								 Progress_to_Recovery_rule = NULL
								Where Source_Trnx_Id = ''',@In_Source_Trnx_Id,'''')
	END
	Else
		Begin
			SET @sql = Concat('Update dbo.Reins_Claim_expense_trnx 
								SET
								 [Product_Option_Code] = NULL ,
								 [Claim_Number] = NULL,
								 [Layer_0_Reins_Percent] = NULL,
								 [Layer_1_Reins_Percent] = NULL,
								 [Layer_1_Treaty_Id] = NULL,
								 [Layer_2_Treaty_Id] = NULL, 
								 Claim_Source_id = NULL ,
								 Layer_2_Reins_Percent = NULL,
								 [Claim_enrichment_rule] = NULL,
								 Layer_1_Reins_Claim_Amount = NULL,
								 Layer_1_Residual_Claim_Amount = Null,
								 Layer_1_Treaty_Rule = NULL,
								 Layer_0_Reins_Claim_Amount =  NULL,
								 Layer_0_Residual_Claim_Amount =  NULL,
								 Layer_0_Rule =  NULL,
								 Layer_2_Reins_Claim_Amount =  NULL,
								 Layer_2_Residual_claim_Amount =  NULL,
								 Layer_2_Treaty_Rule =  NULL,
								 Progress_to_Recovery = NULL,
								 Progress_to_Recovery_rule = NULL
								Where Source_Trnx_Id = ''',@In_Source_Trnx_Id,'''')
		END
	Begin Transaction
	exec(@sql);
	Commit Transaction

	--Exec dbo.usp_Reins_Layer_calcs
		
END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Manual_SplitPayment]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		DUNCNQ
-- Create date: 25/11/2021
-- Description:	Proc for Splitting a single payment transaction to smaller payments across multiple benefits
-- =============================================

CREATE procedure [dbo].[usp_Reins_GUI_Manual_SplitPayment]
	@In_Claim_Expense_Id		int ,  -- Tranaction to split into Parts
	@In_Part1_Benefit_Number	varchar (15),  -- Benefit number to Link to - Required
	@In_Part1_PaymentAmount		decimal(18,2), -- amount to allocate to benefit 1 
	@In_Part2_Benefit_Number	varchar (15),  -- Optional
	@In_Part2_PaymentAmount		decimal(18,2), -- Optional
	@In_Part3_Benefit_Number	varchar (15),  -- Optional
	@In_Part3_PaymentAmount		decimal(18,2), -- Optional
	@In_Part4_Benefit_Number	varchar (15),  -- Optional
	@In_Part4_PaymentAmount		decimal(18,2), -- Optional
	@In_Part5_Benefit_Number	varchar (15),  -- Optional
	@In_Part5_PaymentAmount		decimal(18,2)  -- Optional

	WITH EXECUTE AS SELF
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	declare @ErrorMsg varchar(255)

	
	-----------Validations on the expense transaction record---------------------------
	
	If  NOT EXISTS (	Select Reins_Claim_Expense.Claim_Expense_Id 
						from dbo.Reins_Claim_Expense 
						inner join dbo.Reins_Claim_Expense_Trnx 
							on Reins_Claim_Expense.Claim_Expense_Id = Reins_Claim_Expense_Trnx.Claim_Expense_Id   -- Must be in the Open Table - Cannot do tranactions that have progressed.
						where  Reins_Claim_Expense.Claim_Expense_Id  = @In_Claim_Expense_Id 
						and  Claim_Expense_Type ='EXPENSE-PAID'  
							)
	Begin
		THROW  51000, 'Source_trnx_ID does not exist', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END

	-- WARING - 
	--*******************************************************************************
	-- This logic only works on a single trasnaction being exensed... this is a more complex model if there a remore than one tranaction in a payment. 
	--
	
	DECLARE @Count_of_Expenses integer
	
	Select @Count_of_Expenses * count(*) 
	from dbo.Reins_Claim_Expense 
	inner join dbo.Reins_Claim_Expense_Trnx 
	on Reins_Claim_Expense.Claim_Expense_Id = Reins_Claim_Expense_Trnx.Claim_Expense_Id   -- Must be in the Open Table - Cannot do tranactions that have progressed.
	where  Reins_Claim_Expense.Claim_Expense_Id  = @In_Claim_Expense_Id 
	and  Claim_Expense_Type ='EXPENSE-PAID'  
	and Transaction_Type = 'Expense'
	
	if   @Count_of_Expenses != 1  
	Begin
		THROW  51000, 'This logic only works on a single trasnaction being exensed - Sorry....', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END

	If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part1_Benefit_Number)
	Begin
		set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part1_Benefit_Number + 'does not exists';
		THROW  51000, @ErrorMsg , 1;

	END

	if @In_Part1_Benefit_Number is not null or @In_Part1_PaymentAmount is not null 
	Begin 
		if	( @In_Part1_Benefit_Number is null and @In_Part1_PaymentAmount is  not null )  or 
			( @In_Part1_Benefit_Number is not null and @In_Part1_PaymentAmount is  null )  or
			( @In_Part1_Benefit_Number is not null and @In_Part1_PaymentAmount = 0  )  
		Begin
			THROW  51000, 'Both Benefit 1 and ammount 1 must be supplied if either is supplied and Amount must be > 0', 1;
		End 
		If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part1_Benefit_Number)
		Begin
		set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part1_Benefit_Number + 'does not exists';
		THROW  51000, @ErrorMsg , 1;

		END
	END

	if @In_Part2_Benefit_Number is not null or @In_Part2_PaymentAmount is not null 
	Begin 
		if	( @In_Part2_Benefit_Number is null and @In_Part2_PaymentAmount is not null )  or 
			( @In_Part2_Benefit_Number is not null and @In_Part2_PaymentAmount is null )  or
			( @In_Part2_Benefit_Number is not null and @In_Part2_PaymentAmount = 0  )  
		Begin
			THROW  51000, 'Both Benefit 2 and ammount 2 must be supplied if either is supplied and Amount must be > 0', 1;
		End 
		If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part2_Benefit_Number)
		Begin
			set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part2_Benefit_Number + 'does not exists';
			THROW  51000, @ErrorMsg , 1;

		END
	END
	if @In_Part3_Benefit_Number is not null or @In_Part3_PaymentAmount is not null 
	Begin 
		if	( @In_Part3_Benefit_Number is null and @In_Part3_PaymentAmount is not  null )  or 
			( @In_Part3_Benefit_Number is not null and @In_Part3_PaymentAmount is null )  or
			( @In_Part3_Benefit_Number is not null and @In_Part3_PaymentAmount = 0  )  
		Begin
			THROW  51000, 'Both Benefit 2 and ammount 2 must be supplied if either is supplied and Amount must be > 0', 1;
		End 
		If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part3_Benefit_Number)
		Begin
		set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part3_Benefit_Number + 'does not exists';
		THROW  51000, @ErrorMsg , 1;

		END
	END
		if @In_Part4_Benefit_Number is not null or @In_Part4_PaymentAmount is not null 
	Begin 
		if	( @In_Part4_Benefit_Number is null and @In_Part4_PaymentAmount is not null )  or 
			( @In_Part4_Benefit_Number is not null and @In_Part4_PaymentAmount is null )  or
			( @In_Part4_Benefit_Number is not null and @In_Part4_PaymentAmount = 0  )  
		Begin
			THROW  51000, 'Both Benefit 2 and ammount 2 must be supplied if either is supplied and Amount must be > 0', 1;
		End 
		If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part4_Benefit_Number)
		Begin
			set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part4_Benefit_Number + 'does not exists';
			THROW  51000, @ErrorMsg , 1;
		END
	END
		if @In_Part5_Benefit_Number is not null or @In_Part5_PaymentAmount is not null 
	Begin 
		if	( @In_Part5_Benefit_Number is null and @In_Part5_PaymentAmount is not null )  or 
			( @In_Part5_Benefit_Number is not null and @In_Part5_PaymentAmount is null )  or
			( @In_Part5_Benefit_Number is not null and @In_Part5_PaymentAmount = 0  )  
		Begin
			THROW  51000, 'Both Benefit 2 and ammount 2 must be supplied if either is supplied and Amount must be > 0', 1;
		End 
		If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where [Benefit_Number] = @In_Part5_Benefit_Number)
		Begin
			set @ErrorMsg = 'The Benefit_Number : ' +  @In_Part5_Benefit_Number + 'does not exists';
			THROW  51000, @ErrorMsg , 1;

		END
	END

	
	Declare @TotalAmountToAllocate  decimal(18,2)

	Select @TotalAmountToAllocate = [Gross_Expense_Amount]  from dbo.Reins_Claim_Expense  where Claim_Expense_Id = @In_Claim_Expense_Id




	if	coalesce( @In_Part1_PaymentAmount , 0 ) + 
		coalesce( @In_Part2_PaymentAmount , 0 ) + 
		coalesce( @In_Part3_PaymentAmount , 0 ) + 
		coalesce( @In_Part4_PaymentAmount , 0 ) + 
		coalesce( @In_Part5_PaymentAmount , 0 )  != @TotalAmountToAllocate
	Begin
				THROW  51000, 'The Amount to allcoate must equal the trasanction being allocated.', 1;
	End

	

	--Declare the working variables

	DECLARE @Policy_number varchar(20)
	DECLARE @Transaction_Process_Date	datetime
	DECLARE @Transaction_Effective_Date	datetime
	DECLARE @Transaction_Type	varchar(20)
	DECLARE @Transaction_Amt	money
	DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @NEWClaimExpId int
	declare @sqlstatement nvarchar(4000)
	DECLARE @Month_Effective_Date datetime
	DECLARE @EDW_Contract_Key int
	DECLARE @Product_System_Code varchar(3)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0;



	-- For Each of the Benefits Supplied Get the ClaimSourceId  - Best to add this to a table as it would make the allocateion easier.. 

	With ClaimRecs as (
		Select top 1  1 as ClaimOffset , [Claim_Source_Id] , @In_Part1_PaymentAmount Allocated_Ammount from [dbo].[Reins_Claim_Listing] where [Benefit_Number] = @In_Part1_Benefit_Number order by [Row_End_Date] desc
		union all
		Select top 1  2, [Claim_Source_Id] , @In_Part2_PaymentAmount from [dbo].[Reins_Claim_Listing] where [Benefit_Number] = @In_Part2_Benefit_Number order by [Row_End_Date] desc
		union all
		Select top 1  3, [Claim_Source_Id] , @In_Part3_PaymentAmount from [dbo].[Reins_Claim_Listing] where [Benefit_Number] = @In_Part3_Benefit_Number order by [Row_End_Date] desc
		union all
		Select top 1  4, [Claim_Source_Id] , @In_Part4_PaymentAmount from [dbo].[Reins_Claim_Listing] where [Benefit_Number] = @In_Part4_Benefit_Number order by [Row_End_Date] desc
		union all
		Select top 1  5, [Claim_Source_Id] , @In_Part5_PaymentAmount from [dbo].[Reins_Claim_Listing] where [Benefit_Number] = @In_Part5_Benefit_Number order by [Row_End_Date] desc
		)
		select  [Claim_Source_Id] , @In_Part1_PaymentAmount Allocated_Ammount
		into  #ClaimstoAllocate
		from ClaimRecs

	----Get the Expeses
	--	select * 
	--	into #ExpenseTrasnactions 
	--	from [dbo].[Reins_Claim_Expense_Trnx]
	--	where  Claim_Expense_Id  = @In_Claim_Expense_Id 
	--	and Transaction_Type = 'Expense'  


	---- Get the Payments
	--	select * 
	--	into #PaymentTransactions
	--	from [dbo].[Reins_Claim_Expense_Trnx]
	--	where  Claim_Expense_Id  = @In_Claim_Expense_Id 
	--	and Transaction_Type = 'Payment'  
  

	--About to start data changes

	Begin TRY;

	BEGIN TRANSACTION;
	
	-- Make the Original not a payment

			Update  [dbo].[Reins_Claim_Expense]
			SET		[Claim_Expense_Status] = 'CLOSED' ,
					Claim_Expense_Type = 'EXPENSE-REVERSED'
			where  Claim_Expense_Id  = @In_Claim_Expense_Id 
			;

			 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

	-- Make a New Trasnaction for the New Payment

					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					select 	
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						'EXPENSE-PAID',
						'CLOSED',
						GROSS_EXPENSE_AMOUNT,
						SYSDATETIME(),
						SYSTEM_USER ,
						-1 
					from [dbo].[Reins_Claim_Expense]
					where Claim_Expense_Id  = @In_Claim_Expense_Id 

					 SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
					
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					

	

		-- Move the Payment record to the new Expense
	
					Update  [dbo].[Reins_Claim_Expense_Trnx]
					set Claim_Expense_Id = @NEWClaimExpId
					where  Claim_Expense_Id  = @In_Claim_Expense_Id 
					and Transaction_Type = 'Payment'  ;

					SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		-- Add reversal eleemnts for all the Expense amount on original trasnaction 
			
			INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
				)
				select 
								Source_Trnx_Id + '-ADJ' , 
								[Claim_Expense_Id],
								'Expense Reversal',
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount] * -1 ,   --- ADJUSTED but Negative
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								SYSDATETIME(),
								SYSTEM_USER,
								-1
					from [Reins_Claim_Expense_Trnx]  
					where [Claim_Expense_Id] = @In_Claim_Expense_Id
					and [Transaction_Type] = 'Expense'

					SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT

		-- Add the Payment Records - as Expenses 
		

		Declare @ClaimOffset  as integer
		declare @NewTrnxNumber	as varchar(20)
		declare @Source_Trnx_Id as varchar(20)
		declare @ClaimId		 as varchar(20)
		declare @AllocationAmount as decimal(18,2)



		set @ClaimOffset   = 1
		While @ClaimOffset  < 6
		Begin

			--Allocation Details
			select 	@ClaimId = 	CTA.[Claim_Source_Id] , 
					@AllocationAmount  = Allocated_Ammount
			from #ClaimstoAllocate CTA	
			where  ClaimOffset = @ClaimOffset

			--SourceclaimDetail
			select @Source_Trnx_Id = Source_Trnx_Id , @NewTrnxNumber = Source_Trnx_Id + '-PAY-' + cast(  @ClaimOffset as  varchar(5) )
			from [Reins_Claim_Expense_Trnx] 
			where [Claim_Expense_Id] = @In_Claim_Expense_Id
			and [Transaction_Type] = 'Expense'


			if @ClaimId is not null 
			Begin
			
				INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
									Source_Trnx_Id,
									[Claim_Expense_Id],
									[Transaction_Type],
									[PRODUCT_SYSTEM_CODE],
									[Policy_number],
									[Month_Effective_date],
									[Claim_Reference_Id],
									[Claim_Source_Id],
									[GL_Account_Id],
									[GL_Product_Code],
									[EDW_Contract_Key],
									EDW_Policy_Number,
									EDW_Contract_Id,
									EDW_Product_Key,
									EDW_Product_Code,
									EDW_Class_Of_Business,
									[Source_Claim_Number],
									[Transaction_Amount],
									[Transaction_Effective_date],
									[Transaction_Process_Date],
									[IMPLICIT_BENEFIT_TYPE_CODE],
									[Reins_Benefit_Category],
									[Created_Date_Time],
									Created_By,
									Process_Log_ID
					)
					select 
									@NewTrnxNumber				,			--- Keep  a reference  tot he source
									@NEWClaimExpId,							-- Mapp to the new [Claim_Expense_Id]
									'Expense',								-- Force Expense.. 
									[PRODUCT_SYSTEM_CODE],
									[Policy_number],						-- This is a bit rough... but should be the same policy
									[Month_Effective_date],
									[Claim_Reference_Id],
									 null ,									-- CTA.[Claim_Source_Id]  - Need to force this is a trasnaction 
									[GL_Account_Id],
									[GL_Product_Code],
									[EDW_Contract_Key],
									EDW_Policy_Number,
									EDW_Contract_Id,
									EDW_Product_Key,
									EDW_Product_Code,
									EDW_Class_Of_Business,
									[Source_Claim_Number],
									@AllocationAmount   ,
									[Transaction_Effective_date],
									[Transaction_Process_Date],
									[IMPLICIT_BENEFIT_TYPE_CODE],
									[Reins_Benefit_Category],
									SYSDATETIME(),
									SYSTEM_USER,
									-1
						from [Reins_Claim_Expense_Trnx] 
						where @Source_Trnx_Id = @Source_Trnx_Id

						SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
						
				if @@ROWCOUNT  = 1  
				begin
					exec [usp_Reins_GUI_Manual_Claim_Match]  @In_Source_Trnx_Id = @NewTrnxNumber , @In_Claim_Src_Id = @ClaimId;
				end 
				
			end 

			set @ClaimOffset  = @ClaimOffset  + 1
			
		End

	Commit Transaction
	
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
---
END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRAN;

		SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;

		THROW;
	END CATCH
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Manual_Unmake_Trnx]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_GUI_Manual_Unmake_Trnx] 
	@In_Source_Trnx_Id	varchar (20)
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	DECLARE @Claim_Expense_Id int
	

	If  EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx_recoverable where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		
		THROW  51000, 'Cannot unamke this transaction as the month end reporting is for this is closed', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END

	If  EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx_nonrecoverable where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		
		THROW  51000, 'Cannot unamke this transaction as the month end reporting is for this is closed', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END
	
	If  NOT EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		Return
		--THROW  51000, 'Source_trnx_ID does not exist', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END
	
	



	--If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where Claim_Source_id = @In_Claim_Src_Id)
	--Begin
	--	THROW  51000, 'The Claim Source Id does not exists', 1;

	--END

	--If NOT EXISTS (Select * from dbo.Reins_claim_Expense_Trnx A --, Reins_claim_Listing B
	--			where --A.Claim_Source_Id = B.Claim_Source_Id
	--			 A.Source_Trnx_Id =  @In_Source_Trnx_Id
	--			 and A.Claim_Source_Id is not null
	--			--and B.Claim_Source_Id = @In_Claim_Src_Id
	--			)
	--	Begin
	--		THROW  51000, 'The Transaction has not yet been matched to any claim', 1;
	--	END
	
	Select @Claim_Expense_Id = Claim_expense_id from Reins_Claim_Expense_Trnx
	where Source_Trnx_Id = @In_Source_Trnx_Id

	If @Claim_Expense_Id is null 
	Begin
		Return
	End

	If @In_Source_Trnx_Id like 'AB%'
		Begin
			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense_trnx
								Where Claim_Expense_Id = ',@Claim_Expense_Id)
			Begin Transaction
			--Print @sql
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense
								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Update dbo.Reins_Able_Claim_Expense_trnx
								Set Claim_expense_id = NULL,
								Updated_by = ORIGINAL_LOGIN(),
								Updated_date_time = getdate()

								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			Exec(@sql)
			Commit Transaction
	END
	

	--GL Trnx
	If @In_Source_Trnx_Id like 'GL%'
		Begin
			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense_trnx
								Where Claim_Expense_Id = ',@Claim_Expense_Id)
			Begin Transaction
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense
								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Update dbo.Reins_GL_Journal_trnx
								Set Claim_expense_id = NULL,
								Updated_by = ORIGINAL_LOGIN(),
								Updated_date_time = getdate()
								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			Exec(@sql)
			Commit Transaction
	END

	--Mercury Trnxs

	If @In_Source_Trnx_Id like 'MR%'
		Begin
			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense_trnx
								Where Claim_Expense_Id = ',@Claim_Expense_Id)
			Begin Transaction
			--Print @sql
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Delete from dbo.Reins_Claim_Expense
								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			--Print @sql
			Exec(@sql)
			Commit Transaction

			SET @sql = Concat('Update dbo.Reins_Mercury_trnx
								Set Claim_expense_id = NULL,
								Updated_by = ORIGINAL_LOGIN(),
								Updated_date_time = getdate()
								Where Claim_Expense_Id = ',@Claim_Expense_Id)

			Begin Transaction
			--Print @sql
			Exec(@sql)
			Commit Transaction
	END

	--Exec dbo.usp_Reins_Layer_calcs

		
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Map_Treaty_Product]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		AU\MHTSIQ
-- Create date: 07/07/2020
-- Description:This Procedure is to load the new product and product options available in EDW
--             to Reins_Treaty_Product Table. 
-- =============================================

CREATE PROCEDURE [dbo].[usp_Reins_GUI_Map_Treaty_Product]
	-- Add the parameters for the stored procedure here
@Product_System_code varchar(50),
@Product_code varchar(50),
@Product_Desc varchar(50),
@Product_Option_code varchar(50),
@Product_Option_Description varchar(50),
@Product_Option_Group_Desc varchar(50),
@Class_Of_Busn varchar(50),
@Reinsurer_Name varchar(50),
@Reins_Benefit_Type varchar(50),
@Reins_Benefit_Category varchar(50)




--WITH EXECUTE AS OWNER

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0


    -- Insert statements for procedure here
BEGIN TRY

		Begin Tran Load_Product_Map

Delete from [dbo].[Reins_Treaty_Product] 
	where Product_Option_Code = @Product_Option_Code
	and Product_Code = @Product_Code
	and Class_Of_Business = @Class_Of_Busn
	and Treaty_id = -999


		CREATE TABLE #temp_product_map(Treaty_id int NOT NULL,
		Product_System_Code varchar(50) NOT NULL , 
		Product_Code varchar(50) NOT NULL ,
		Product_Desc varchar(100)  NULL ,
		product_option_code varchar(50) NOT NULL ,
		product_option_desc varchar(100)  NULL ,
		product_opt_group_desc varchar(100) NULL ,
		class_of_busn_desc varchar(50)NOT NULL ,
		reins_benefit_type varchar(50) NOT NULL,
		reins_benefit_category varchar(50)NOT NULL,
	   Created_Date_Time date,
      Created_By varchar(50)NOT NULL
		)

		if @Reinsurer_Name = 'MunichRe'

		BEGIN
		INSERT INTO #temp_product_map 

		VALUES
		(1, 
		@Product_System_code,
	@Product_code ,
	@Product_Desc ,
	@Product_Option_code ,
	@Product_Option_Description ,
	@Product_Option_Group_Desc ,
	@Class_Of_Busn ,
	@Reins_Benefit_Type ,
	@Reins_Benefit_Category,
	GETDATE(),
	ORIGINAL_LOGIN()),
	(2 ,
	@Product_System_code,
	@Product_code ,
	@Product_Desc ,
	@Product_Option_code ,
	@Product_Option_Description ,
	@Product_Option_Group_Desc ,
	@Class_Of_Busn ,
	@Reins_Benefit_Type ,
	@Reins_Benefit_Category,
	GETDATE(),
	ORIGINAL_LOGIN())
	END

	ELSE IF  @Reinsurer_Name = 'GenRe'
	BEGIN
	INSERT INTO #temp_product_map 
		VALUES
			(3, @Product_System_code,
	@Product_code ,
	@Product_Desc ,
	@Product_Option_code ,
	@Product_Option_Description ,
	@Product_Option_Group_Desc ,
	@Class_Of_Busn ,
	@Reins_Benefit_Type ,
	@Reins_Benefit_Category,
	GETDATE(),
	ORIGINAL_LOGIN()),

	(4, @Product_System_code,
	@Product_code ,
	@Product_Desc ,
	@Product_Option_code ,
	@Product_Option_Description ,
	@Product_Option_Group_Desc ,
	@Class_Of_Busn ,
	@Reins_Benefit_Type ,
	@Reins_Benefit_Category,
	GETDATE(),
	ORIGINAL_LOGIN())
	END

	ELSE
	BEGIN
	
	INSERT INTO #temp_product_map 
		VALUES
	(-1, @Product_System_code,
	@Product_code ,
	@Product_Desc ,
	@Product_Option_code ,
	@Product_Option_Description ,
	@Product_Option_Group_Desc ,
	@Class_Of_Busn ,
	@Reins_Benefit_Type ,
	@Reins_Benefit_Category,
	GETDATE(),
	ORIGINAL_LOGIN())
	END



	INSERT INTO [dbo].[Reins_Treaty_Product] ([Treaty_Id]
,[Product_System_Code]
,[Product_Code]
,[Product_Desc]
,[Class_Of_Business]
,[Product_Option_Code]
,[Product_Option_Desc]
,[Product_Option_Group_Desc]
,[Reins_Benefit_Type]
,[Reins_Benefit_Category]
,[Created_Date_Time]
,[Created_By])
select * from #temp_product_map


SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		Print 'New records inserted into the Treaty Product Table ' + convert(varchar(50), @InsertRowCount)
COMMIT TRAN Load_Product_Map;	
		
 


		Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;
		END TRY


BEGIN CATCH
	
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN Load_Product_Map;

			select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

		THROW;

END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_MR_Ignore_Item]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  [dbo].[usp_Reins_GUI_MR_Ignore_Item]
	@TransactionId varchar(20) = NULL

WITH EXECUTE AS OWNER
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Source_Claim_Number	varchar(20)
DECLARE @CLIENT_REF_ID_1 varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @Product_System_Code  varchar(20)
DECLARE @Month_Effective_Date datetime

DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int
DECLARE @EDW_Contract_Key int

create table #MAKE_PAYMENTS_POLICYLIST(
			Policy_number  VARCHAR(50), 
			Source_Claim_Number  VARCHAR(50), 
			CLIENT_REF_ID_1  VARCHAR(50), 
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			SORTKEY INT, 
			Transaction_Type VARCHAR(50),
			Month_Effective_Date datetime,
			Product_System_Code  varchar(20),
			EDW_Contract_Key int
)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
			[dbo].[Reins_Mercury_Trnx].CLIENT_REF_ID_1, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			CASE [Transaction_Type]   
				WHEN  ''Expense reversal'' THEN 2
				WHEN  ''Expense'' THEN 3
				WHEN  ''Payment'' THEN 4
				WHEN  ''Payment reversal'' THEN 1
				WHEN  ''Expense reversal'' THEN 2
				WHEN  ''Expense reversal'' THEN 2
				ELSE  99
			END    AS SORTKEY, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].Month_Effective_Date,
			[dbo].[Reins_Mercury_Trnx].Product_System_Code,
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_key
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
	--		Product_System_Code = ''FDA''
	--	AND
			(
				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
			)
			
			AND  Exclude_flag = ''N''
			'

--PRINT @sqlstatement;

if @TransactionId is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND [Mercury_Trnx_Id] = ''' , @TransactionId , '''')
	
else 
	Raiserror (15600,-1,-1, 'mysp_CreateCustomer');  
PRINT @sqlstatement
exec(@sqlstatement)

print 'After statement Execution ' + Cast(@@Rowcount as varchar(10))

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4,5,6,7 
		

	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Policy_number ,
	@Source_Claim_Number	,
	@CLIENT_REF_ID_1 ,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@SORTKEY	,
	@Transaction_Type ,
	@Month_Effective_Date ,
	@Product_System_Code	,
	@EDW_Contract_Key
	
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	-- The value in the next step could change so has not bee drrived in the outer loop....
	-- Inefficient but so what   8->
	
	--Get Inner Trsanaction - This ios common across all types of trsanaction
	
		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		 --, @Product_System_Code = min(Product_System_Code)

		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
		(-- Criteria from outer loop
			Policy_number			= @Policy_number
		--AND Source_Claim_Number			= @Source_Claim_Number	
		--AND CLIENT_REF_ID_1		= @CLIENT_REF_ID_1
		AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Movement_Effective_Date		= @Movement_Effective_Date	
		AND Transaction_Type	= @Transaction_Type
		-- And it has not been consumed yet
		AND [dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null
		
		)

		PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
			


		BEGIN
			BEGIN TRANSACTION;
				INSERT INTO [dbo].[Reins_Claim_Expense]
				(
					Month_effective_date,
					Policy_number, 
					Product_System_Code,
					EDW_Contract_Key,
					--Source_Claim_Number,
					Expense_date,
					Claim_Expense_Type,
					Claim_Expense_Status,
					GROSS_EXPENSE_AMOUNT,
					--Claim_reference_id,
					[Created_Date_Time],
					Created_By,
					[Process_Log_ID]

					--, Movement_Effective_Date
					)
				Values(
				@Month_Effective_Date,
				@Policy_number ,
				@Product_System_Code,
				--@Source_Claim_Number	,
				@EDW_Contract_Key,
				@Transaction_Process_Date	,
				'IGNORE',
				'IGNORE',
				@SumOfLEDGER_MVMT_AMT,
				--@CLIENT_REF_ID_1,
				Getdate(),
				--system_user,
				ORIGINAL_LOGIN(),
				--, @Movement_Effective_Date
				-1
				)
				--PRINT N'iNSERT cOMPLETED';
				select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
				--PRINT @NEWClaimExpId;
				-- Mark Records as done

				UPDATE [dbo].[Reins_Mercury_Trnx] 
				SET Claim_Expense_Id = @NEWClaimExpId
				WHERE 
					(
					[Mercury_Trnx_Id] =  @TransactionId
					 
					
--					Policy_number=@Policy_number
--				AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
--				AND Transaction_Type=@Transaction_Type
--				AND Transaction_Process_Date=@Transaction_Process_Date
--				AND Movement_Effective_Date=@Movement_Effective_Date
				AND [Claim_Expense_Id] is null
				)

				-- Carry these records forward.
				INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
				)
				SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					[dbo].[Reins_Mercury_Trnx].Product_System_Code,
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
				getdate(),
				ORIGINAL_LOGIN(),
				-1
				FROM 
				[dbo].[Reins_Mercury_Trnx]
				WHERE
					[Mercury_Trnx_Id] =  @TransactionId
				--Policy_number=@Policy_number
				--AND CLIENT_REF_ID_1=@CLIENT_REF_ID_1
				--AND Transaction_Type=@Transaction_Type
				--AND Transaction_Process_Date=@Transaction_Process_Date
				--AND Movement_Effective_Date=@Movement_Effective_Date
				AND [Claim_Expense_Id] =@NEWClaimExpId
			COMMIT TRANSACTION;
		END

		
		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Policy_number ,
		@Source_Claim_Number	,
		@CLIENT_REF_ID_1 ,
		@Transaction_Process_Date	,
		@Movement_Effective_Date	,
		@SORTKEY	,
		@Transaction_Type ,
		@Month_Effective_Date ,
		@Product_System_Code	,
		@EDW_Contract_Key

		--,@SumOfLEDGER_MVMT_AMT	
		--,@Claim_Expense_Id	
		--,	@BENEFIT_CATEGORY 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS


END



GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_Payment_Match_Claim]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[usp_REINS_GUI_Payment_Match_Claim]
	@InputPolicyNumber varchar(20) = NULL
AS
BEGIN
	SET NOCOUNT ON

	If @InputPolicyNumber is not null 

		 SELECT 
			--Reins_Mercury_Trnx.Transaction_Id, 
			Reins_Claim_Expense_Trnx.[Source_Trnx_Id], 
			Reins_Claim_Expense.Policy_Number, 
			Reins_Claim_Expense_Trnx.Claim_Source_Id, 
			[EDW_Contract_Id],
			Reins_Claim_Expense_Trnx.Reins_Benefit_Category,
			Reins_Claim_Expense_Trnx.Transaction_Type,
			Reins_Claim_Expense.Claim_Expense_Type, 	
			Reins_Claim_Expense.Claim_Expense_STATUS, 	
			
			--Reins_Mercury_Trnx.Transaction_Type, 
			
			dbo.udf_Claim_not_match_reason( [Source_Trnx_Id] )  as MatchReason,
			--Reins_Claim_Expense.Claim_Reference_Id, 
			Reins_Claim_Expense_Trnx.Transaction_Effective_date, 
			Reins_Claim_Expense_Trnx.Transaction_Process_Date, 
[PAY_DATE_FROM],
[PAY_DATE_TO],		
	[dbo].[udf_Return_User_Comment]('Transaction', [Source_Trnx_Id] )  AS Comment,

			Reins_Claim_Expense_Trnx.Transaction_Amount, 
			[Assumed_Paid],
	
			CASE Claim_Expense_Type
			WHEN 'IGNORE'  THEN  Reins_Claim_Expense_Trnx.[Transaction_Amount]
			ELSE 0
			END as Ignore_Amount,

			CASE Reins_Claim_Expense_Trnx.[Transaction_Type]
			WHEN 'Medical'  THEN   Reins_Claim_Expense_Trnx.[Transaction_Amount]
			WHEN 'Non-Medical'  THEN   Reins_Claim_Expense_Trnx.[Transaction_Amount]
			ELSE 0
			END as OtherExpenses,

						CASE Reins_Claim_Expense_Trnx.[Transaction_Type]
			WHEN 'WOP'  THEN   Reins_Claim_Expense_Trnx.[Transaction_Amount]
			ELSE 0
			END as WOP,

			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_Claim_Expense_Trnx.[Transaction_Type] = 'Expense'				THEN 	Reins_Claim_Expense_Trnx.[Transaction_Amount]
			 WHEN Reins_Claim_Expense_Trnx.[Transaction_Type] = 'Expense reversal'	THEN	Reins_Claim_Expense_Trnx.[Transaction_Amount]
			 ELSE 0
			END AS ExpenseAmount, 
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_Claim_Expense_Trnx.[Transaction_Type] = 'Payment'			THEN	Reins_Claim_Expense_Trnx.[Transaction_Amount]
			 WHEN Reins_Claim_Expense_Trnx.[Transaction_Type] = 'Payment Reversal'	THEN	Reins_Claim_Expense_Trnx.[Transaction_Amount]
			 when  Reins_Claim_Expense_Trnx.[Transaction_Type] = 'Expense' 
					and [Assumed_Paid] = 'Y'									THEN	Reins_Claim_Expense_Trnx.[Transaction_Amount] * -1
			 ELSE	0
			END  AS PaymentAmount
	FROM 
		--Reins_Mercury_Trnx LEFT JOIN (
			Reins_Claim_Expense RIGHT JOIN Reins_Claim_Expense_Trnx 
				ON Reins_Claim_Expense.Claim_Expense_id = Reins_Claim_Expense_Trnx.Claim_Expense_Id--) 
			--ON Reins_Mercury_Trnx.Trace_Code = Reins_Claim_Expense_Trnx.Source_Trnx_Trace_Code
	WHERE 
		(((Reins_Claim_Expense_Trnx.Policy_Number) = @InputPolicyNumber ))
	--	(((Reins_Mercury_Trnx.Policy_Number) = '9045595' ))
	 and ( Reins_Claim_Expense_Trnx.[Transaction_Type] not like  'Pay%'	 ) 	
	
	ORDER BY 
		Reins_Claim_Expense_Trnx.Policy_Number, 
		Reins_Claim_Expense_Trnx.Transaction_Effective_date, 
		Reins_Claim_Expense_Trnx.Transaction_Process_Date
END
;


GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_Payment_Match_Claim_Claims]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[usp_REINS_GUI_Payment_Match_Claim_Claims]
	@InputPolicyNumber varchar(20) = NULL
AS
BEGIN
	SET NOCOUNT ON

	If @InputPolicyNumber is not null 


	SELECT     
			Reins_Claim_Listing.Claim_Source_Id , 
			Reins_Claim_Listing.Claim_Source,
			Reins_Claim_Listing.Claim_Number , 
			Reins_Claim_Listing.Benefit_Number,
			Reins_Claim_Listing.Policy_Number,
			Reins_Claim_Listing.EDW_CONTRACT_ID,
			Reins_Claim_Listing.Claim_Status, 
			Reins_Claim_Listing.Claim_Notify_Date, 
			Reins_Claim_Listing.Incurred_Date,
			Reins_Claim_Listing.Claim_Finalised_Date,
			Reins_Claim_Listing.Claim_Finalised_Reason, 
			Reins_Claim_Listing.Claim_Reopen_Date,
			Reins_Claim_Listing.Claim_Reopen_Reason,
			Reins_Claim_Listing.Claim_Type,
			[dbo].[udf_Return_User_Comment]('Claim', [Claim_Number] )  AS Comment,
			Reins_Claim_Listing.Sum_Insured_on_Incurred_Date, 
			Reins_Claim_Listing.Sum_Insured_on_Reporting_Date, 
			Reins_Claim_Listing.EDW_Product_System_Code,
			Reins_Claim_Listing.EDW_Product_Code, 
			Reins_Claim_Listing.EDW_Class_Of_Business, 
			Reins_Claim_Listing.EDW_Product_Option_Code, 
			Reins_Claim_Listing.Claim_Event_Type, 
			Reins_Claim_Listing.Benefit_Period, 
			Reins_Claim_Listing.Waiting_Period, 
			Reins_Claim_Listing.Policy_Commencement_Date,
			Reins_Claim_Listing.Benefit_Commencement_Date,
			Reins_Claim_Listing.Surname, 
			Reins_Claim_Listing.first_name, 
			Reins_Claim_Listing.Sex, 
			Reins_Claim_Listing.Date_of_Birth, 
			Reins_Claim_Listing.Date_of_Death, 
			Reins_Claim_Listing.Cause, 
			Reins_Claim_Listing.Escalation_Ind  
		FROM    
			Reins_Claim_Listing 
		where 
				Policy_Number  = @InputPolicyNumber 
			and ROW_END_DATE = convert( datetime , '3000/12/31')
		order by 
			Incurred_Date desc, 
			Claim_number , 
			Benefit_Number , 
			Row_Eftv_date
END


GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_Payment_Match_GL_SUM]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  procedure [dbo].[usp_REINS_GUI_Payment_Match_GL_SUM]
	@InputPolicyNumber varchar(20) = NULL
AS
BEGIN
	SET NOCOUNT ON

	If @InputPolicyNumber is not null 

		
		WITH Reins_Claim_Expense_Trnx_ALL
		as ( select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num from Reins_Claim_Expense_Trnx 
			union all
			select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num from Reins_Claim_Expense_Trnx_NonRecoverable
			union all
			select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num from Reins_Claim_Expense_Trnx_Recoverable
			)

		 SELECT 
			[GL_Journal_Trnx_Id], --concat('GL' , Reins_GL_Journal_Trnx.Transaction_ID)  ,
			Reins_GL_Journal_Trnx.Claim_Expense_id, 
			Reins_Claim_Expense.Claim_Expense_Type, 	
			Reins_GL_Journal_Trnx.Transaction_Type, 
			EDW_Product_System_Code,
			Reins_GL_Journal_Trnx.Policy_Number, 
			Source_System_Ref_2, 
			GL_Posting_Date	, User_Id , PCODE,GL_Journal_Line_Desc,

			--Reins_Claim_Expense_Trnx.Claim_Source_Id, 
			--'' as Claim_Reference_Id, 

			Reins_GL_Journal_Trnx.Transaction_Effective_date, 
			Reins_GL_Journal_Trnx.Transaction_Process_Date, 

			Reins_GL_Journal_Trnx.Transaction_Amount, 
			[Assumed_Paid],
			[dbo].[udf_Return_User_Comment]('Transaction', [GL_Journal_Trnx_Id] )  AS Comment,
	
			CASE Claim_Expense_Type
			WHEN 'IGNORE'  THEN  Reins_GL_Journal_Trnx.[Transaction_Amount]
			ELSE 0
			END as Ignore_Amount,

			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_GL_Journal_Trnx.[Transaction_Type] = 'Expense'				THEN 	Reins_GL_Journal_Trnx.[Transaction_Amount]
			 WHEN Reins_GL_Journal_Trnx.[Transaction_Type] = 'WOP'				THEN 	Reins_GL_Journal_Trnx.[Transaction_Amount]
			 WHEN Reins_GL_Journal_Trnx.[Transaction_Type] = 'Expense reversal'	THEN	Reins_GL_Journal_Trnx.[Transaction_Amount]
			 ELSE 0
			END AS ExpenseAmount, 
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_GL_Journal_Trnx.[Transaction_Type] = 'Payment'			THEN	Reins_GL_Journal_Trnx.[Transaction_Amount]
			 WHEN Reins_GL_Journal_Trnx.[Transaction_Type] = 'Payment Reversal'	THEN	Reins_GL_Journal_Trnx.[Transaction_Amount]
			 when  Reins_GL_Journal_Trnx.[Transaction_Type] = 'Expense' 
					and [Assumed_Paid] = 'Y'									THEN	Reins_GL_Journal_Trnx.[Transaction_Amount] * -1
			when  Reins_GL_Journal_Trnx.[Transaction_Type] = 'WOP' 
					and [Assumed_Paid] = 'Y'									THEN	Reins_GL_Journal_Trnx.[Transaction_Amount] * -1
			 ELSE	0
			END  AS PaymentAmount
	FROM 
		Reins_GL_Journal_Trnx 
		LEFT JOIN Reins_Claim_Expense  
			ON ( Reins_GL_Journal_Trnx.Claim_Expense_id = Reins_Claim_Expense.Claim_Expense_Id) 
		LEFT JOIN Reins_Claim_Expense_Trnx_ALL 
			ON ( Reins_GL_Journal_Trnx.[GL_Journal_Trnx_Id] = Reins_Claim_Expense_Trnx_all.Source_Trnx_Id ) 
				
	WHERE 
		(((isnull(Reins_GL_Journal_Trnx.Policy_Number,'')) = @InputPolicyNumber ))
		AND Reins_GL_Journal_Trnx.Exclude_Flag = 'N'

	--	(((Reins_GL_Journal_Trnx.Policy_Number) = '9045595' ))
	
	ORDER BY 
		Reins_GL_Journal_Trnx.Policy_Number, 
		Reins_GL_Journal_Trnx.Transaction_Effective_date, 
		Reins_GL_Journal_Trnx.Transaction_Process_Date
END
;


GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_Payment_Match_Summ]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  procedure [dbo].[usp_REINS_GUI_Payment_Match_Summ]
	@InputPolicyNumber varchar(20) = NULL
AS
BEGIN
	SET NOCOUNT ON

	If @InputPolicyNumber is not null 

		WITH Reins_Claim_Expense_Trnx_ALL
		as ( select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num , convert( varchar , null )  as Cyclic_Status from Reins_Claim_Expense_Trnx 
			union all
			select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num , 'CLOSED' as Cyclic_Status from Reins_Claim_Expense_Trnx_NonRecoverable
			union all
			select Source_Trnx_ID,Assumed_Paid,Pay_From_To_EDW_Event_Num ,'CLOSED' as Cyclic_Status  from Reins_Claim_Expense_Trnx_Recoverable
			)

		 SELECT 
			Reins_Mercury_Trnx.Mercury_Trnx_Id, 
			Reins_Mercury_Trnx.Claim_Expense_id, 
			Reins_Mercury_Trnx.Transaction_Type, 
			Reins_Claim_Expense.Claim_Expense_Type, 	
			
			Reins_Mercury_Trnx.Policy_Number, 
			--Reins_Claim_Expense_Trnx.Claim_Source_Id, 
			--Reins_Mercury_Trnx.Claim_Reference_Id, 
			Reins_Mercury_Trnx.Transaction_Effective_date, 
			Reins_Mercury_Trnx.Transaction_Process_Date, 

			Reins_Mercury_Trnx.Transaction_Amount, 
			[Assumed_Paid],
			Pay_From_To_EDW_Event_Num,
			Cyclic_Status,

			[dbo].[udf_Return_User_Comment]('Transaction', Mercury_Trnx_Id )  AS Comment,
			CASE Claim_Expense_Type
			WHEN 'IGNORE'  THEN  [Reins_Mercury_Trnx].[Transaction_Amount]
			ELSE 0
			END as Ignore_Amount,
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_Mercury_Trnx.[Transaction_Type] = 'Expense'				THEN 	[Reins_Mercury_Trnx].[Transaction_Amount]
			 WHEN Reins_Mercury_Trnx.[Transaction_Type] = 'WOP'				THEN 	[Reins_Mercury_Trnx].[Transaction_Amount]
			 WHEN Reins_Mercury_Trnx.[Transaction_Type] = 'Expense reversal'	THEN	[Reins_Mercury_Trnx].[Transaction_Amount]
			 ELSE 0
			END AS ExpenseAmount, 
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN [Reins_Mercury_Trnx].[Transaction_Type] = 'Payment'			THEN	[Reins_Mercury_Trnx].[Transaction_Amount]
			 WHEN [Reins_Mercury_Trnx].[Transaction_Type] = 'Payment Reversal'	THEN	[Reins_Mercury_Trnx].[Transaction_Amount]
			 when  [Reins_Mercury_Trnx].[Transaction_Type] = 'Expense' 
					and [Assumed_Paid] = 'Y'									THEN	[Reins_Mercury_Trnx].[Transaction_Amount] * -1
			when  [Reins_Mercury_Trnx].[Transaction_Type] = 'WOP' 
					and [Assumed_Paid] = 'Y'									THEN	[Reins_Mercury_Trnx].[Transaction_Amount] * -1
			 ELSE	0
			END  AS PaymentAmount
			
	FROM 
		Reins_Mercury_Trnx 
			LEFT JOIN Reins_Claim_Expense 
					ON (Reins_Claim_Expense.Claim_Expense_id = Reins_Mercury_Trnx.Claim_Expense_Id) 
				
			LEFT JOIN Reins_Claim_Expense_Trnx_ALL 
					ON  ( Reins_Mercury_Trnx.mercury_trnx_id  = Reins_Claim_Expense_Trnx_ALL.Source_Trnx_ID )  
			
	WHERE 
		(((Reins_Mercury_Trnx.Policy_Number) = @InputPolicyNumber ))
	--	(((Reins_Mercury_Trnx.Policy_Number) = '9045595' ))
	

	ORDER BY 
		Reins_Mercury_Trnx.Policy_Number, 
		Reins_Mercury_Trnx.Transaction_Effective_date, 
		Claim_Expense_Id asc,
		Reins_Mercury_Trnx.Transaction_Process_Date
END
;


GO
/****** Object:  StoredProcedure [dbo].[usp_REINS_GUI_Payment_OPUS]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Developer:      KHNNR2
-- Updated date:   15/06/2020,
-- Description:    Add filter: EDW_Event_Type_Desc <> 'Opus_Claim_Accrual' and to remove records that are Automatched
-- =============================================


CREATE procedure [dbo].[usp_REINS_GUI_Payment_OPUS]
	@InputPolicyNumber varchar(20) = NULL
AS
BEGIN
	SET NOCOUNT ON

	If @InputPolicyNumber is not null 


		WITH Reins_Claim_Expense_Trnx_ALL
		as (	select Source_Trnx_ID,Assumed_Paid, convert( varchar , null )  as Cyclic_Status 
				from Reins_Claim_Expense_Trnx 
			union all
				select Source_Trnx_ID,Assumed_Paid, 'CLOSED' as Cyclic_Status 
				from Reins_Claim_Expense_Trnx_NonRecoverable
			union all
				select Source_Trnx_ID,Assumed_Paid,'CLOSED' as Cyclic_Status  
				from Reins_Claim_Expense_Trnx_Recoverable
			)

		 SELECT 
			
			Reins_Opus_Trnx.Reins_Opus_Trnx_ID, 
			Reins_Opus_Trnx.Claim_Expense_Id, 
			Reins_Opus_Trnx.Transaction_Type, 
			Reins_Opus_Trnx.EDW_Event_Type_Code, 
			Reins_Opus_Trnx.EDW_Event_Type_Desc, 
			Reins_Opus_Trnx.Transaction_Effective_date, 
			Reins_Opus_Trnx.Transaction_Process_Date, 
			Reins_Opus_Trnx.Transaction_Amount, 
			Reins_Opus_Trnx.Exclude_Flag, 
			Reins_Opus_Trnx.Exclude_Reason, 
			Reins_Opus_Trnx.Original_Sum_Insured, 
			Reins_Opus_Trnx.Current_Sum_Insured, 
			Reins_Opus_Trnx.Override_Amount, 
			Reins_Opus_Trnx.Override_by_user, 
			Reins_Opus_Trnx.Override_Reason

			[Assumed_Paid],
			Cyclic_Status,
			[dbo].[udf_Return_User_Comment]('Transaction', Reins_OPUS_Trnx_Id )  AS Comment,
			CASE Claim_Expense_Type
			WHEN 'IGNORE'  THEN  Reins_Opus_Trnx.[Transaction_Amount]
			ELSE 0
			END as Ignore_Amount,
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_Opus_Trnx.EDW_EVENT_TYPE_CODE is not null	THEN	0
			 WHEN Reins_Opus_Trnx.[Transaction_Type] = 'Expense'				THEN 	Reins_Opus_Trnx.[Transaction_Amount]
			 WHEN Reins_Opus_Trnx.[Transaction_Type] = 'WOP'				THEN 	Reins_Opus_Trnx.[Transaction_Amount]
			 WHEN Reins_Opus_Trnx.[Transaction_Type] = 'Expense reversal'	THEN	Reins_Opus_Trnx.[Transaction_Amount]
			 ELSE 0
			END AS ExpenseAmount, 
			
			CASE 
			 WHEN Claim_Expense_Type = 'IGNORE' THEN 0 
			 WHEN Reins_Opus_Trnx.EDW_EVENT_TYPE_CODE is not null	THEN	Reins_Opus_Trnx.[Transaction_Amount]
			 ELSE	0
			END  AS PaymentAmount,

			Reins_Opus_Trnx.EDW_Policy_Number,
			Reins_Opus_Trnx.Client_Ref_Id_2,
			Reins_Opus_Trnx.Trans_Ref_Key_1,
			Reins_Opus_Trnx.Ledger_Movement_Amount,
			Reins_Opus_Trnx.GL_Posting_Date
			
	FROM Reins_Opus_Trnx
		
			LEFT JOIN Reins_Claim_Expense 
					ON (Reins_Claim_Expense.Claim_Expense_id = Reins_Opus_Trnx.Claim_Expense_Id) 
				
			LEFT JOIN Reins_Claim_Expense_Trnx_ALL 
					ON  ( Reins_Opus_Trnx.Reins_OPUS_trnx_id  = Reins_Claim_Expense_Trnx_ALL.Source_Trnx_ID )  
			
	WHERE 
	   (((Reins_Opus_Trnx.Policy_Number) = @InputPolicyNumber ))
		--AND ( EXCLUDE_REASON != 'Product or Product option out of scope' OR Exclude_Reason IS NULL ) 
		and ( Exclude_Flag = 'N'  or Exclude_Flag is null ) 
	--	(((Reins_Mercury_Trnx.Policy_Number) = '9045595' ))
	  and ISNULL(Reins_Opus_Trnx.EDW_Event_Type_Desc,'') <> 'Opus_Claim_Accrual'
	  and ISNULL(Reins_Opus_Trnx.Override_Amount,0) = 0
	

	ORDER BY 
		Reins_Opus_Trnx.Policy_Number, 
		Reins_Opus_Trnx.Transaction_Effective_date, 
		Claim_Expense_Id asc,
		Reins_Opus_Trnx.Transaction_Process_Date
END
;



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Rerun_Claim_match]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[usp_Reins_GUI_Rerun_Claim_match] 
	--@In_Policy_Number	varchar (50) = NULL
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	--DECLARE @sql varchar(4000)
	--DECLARE @Claim_Expense_Id int
	--DECLARE @NumRows int
	
	
			Exec dbo.usp_Reins_ACE_Claim_Enrich_Rule1
			
			Exec [dbo].usp_Reins_DS_Claims_Enrich_Rule3
			
			Exec dbo.usp_Reins_FDA_Claims_Enrich_Rule3
			
			Exec dbo.[usp_Reins_GL_Claims_Enrich_Generic]
			
			Exec dbo.usp_Reins_Incom_Claims_Enrich_Rule1
			
			Exec dbo.usp_Reins_U2_Claims_Enrich
			
			Exec dbo.usp_Reins_Ultimate_Claims_Enrich_Rule1			
				
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_GUI_Rerun_Trnx_match]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_GUI_Rerun_Trnx_match] 
	@In_Policy_Number	varchar (50) = NULL
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	--DECLARE @sql varchar(4000)
	--DECLARE @Claim_Expense_Id int
	DECLARE @NumRows int
	
	Select @NumRows = count(*) from Reins_mercury_trnx	
	where Claim_expense_id is null and Policy_number = @In_Policy_Number

	If @NumRows > 0 
		Begin 
			Exec [dbo].[usp_Reins_U2_Identify_Payments] @In_Policy_Number
			--Print 'U2 done'
			Exec [dbo].usp_Reins_FDA_Identify_Payments  @In_Policy_Number
			--Print 'FDA done'
			Exec dbo.usp_Reins_Incom_Identify_Payments  @In_Policy_Number
			--Print 'Incom done'
			Exec dbo.usp_Reins_Ultimate_Identify_Payments  @In_Policy_Number
			--Print 'Ultimate done'
		End
	Select @NumRows = count(*) from Reins_GL_Journal_trnx	
	where Claim_expense_id is null and Policy_number = @In_Policy_Number

	If @NumRows > 0 
		Begin 
			Exec dbo.usp_Reins_DS_Identify_Payments  @In_Policy_Number
			--Print 'DS done'
			Exec dbo.usp_Reins_GL_Identify_Payments_FLSUNPAID  @In_Policy_Number
			--Print 'FLS done'
			Exec dbo.usp_Reins_GL_Identify_Payments_SPE  @In_Policy_Number
			--Print 'SPE done'
			Exec dbo.usp_Reins_GL_Identify_Payments_Generic  @In_Policy_Number
			--Print 'GL_GEN done'
		End

	Select @NumRows = count(*) from Reins_Able_Claim_Expense_trnx	
	where Claim_expense_id is null and Policy_number = @In_Policy_Number

	If @NumRows > 0 
		Begin 
			Exec dbo.usp_Reins_ACE_Identify_Payments @In_Policy_Number

		End
			
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Incom_Claims_Enrich_Rule1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_Reins_Incom_Claims_Enrich_Rule1]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @EDW_Contract_Key Numeric (10,0)
	DECLARE @Transaction_Process_date datetime
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Get_Policy_list (
			EDW_Contract_Key  NUmeric (10,0),
			Transaction_Process_date datetime,
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date
			From dbo.Reins_Claim_Expense_Trnx A
			WHERE A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'', ''WOP'')
			and A.product_system_code = ''OR'''
			

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where EDW_Contract_Key = @EDW_Contract_Key
		and EDW_Product_system_code = 'OR'
		and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'
	
				

	If @NumRows = 1
	Begin

		Begin Transaction
						
		UPDATE dbo.Reins_Claim_Expense_Trnx
		SET
			[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
			[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
			[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
			[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
			[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
			[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
			Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
			Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
			[Claim_enrichment_rule] = 'CE_OR_Pol',
			Updated_date_time = getdate(),
			--Updated_By = System_User
			Updated_By = ORIGINAL_LOGIN()

		FROM dbo.Reins_Claim_Expense_Trnx ,
				dbo.Reins_Claim_Listing
		Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal','WOP')
				AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'OR'
				AND Reins_Claim_Listing.EDW_Product_System_Code = 'OR'
				AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_Date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

			set @UpdateRowCount = @UpdateRowCount + @@Rowcount

		COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date

	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

	
END






























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Incom_DMSA_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_Incom_DMSA_Enrich]

AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	--DECLARE @Transaction_Effective_Date date
	DECLARE @Transaction_Process_Date	date
	--DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_Trnx_Id varchar (20) 
	--DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @Contract_key int
	--DECLARE @Event_Number varchar (40)
	--DECLARE @Trans_Ref_Key_1 varchar (10)
	--DECLARE @Trans_Ref_Key_2 varchar (10)
	--DECLARE @Contract_id varchar (20)
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Source_Trnx_Id varchar(20)
			)
	CREATE table #Get_DMSA_Data (
			Policy_Number VARCHAR(50), 
			Journal_Id varchar(50),
			Journal_Date datetime,
			Source_Trnx_Id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT trn.Policy_number, 
							trn.EDW_Contract_Key,
							trn.Transaction_Process_date,
							trn.Source_trnx_id
							
			from Reins_Claim_Expense_Trnx Trn, Reins_Claim_Expense par
			where par.Claim_Expense_Id = trn.Claim_Expense_Id
			and trn.Product_System_Code = ''OR''
			and par.claim_expense_status = ''OPEN''
			and trn.Transaction_type = ''Expense''
			and trn.Policy_number is not null
			--and trn.Policy_number = ''V5182299-F''
						
			  '

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction
	
	
	

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	

	--NS-09-032021 - Modifeid the DMSA lookup query below to include a hint to improve performance
	WHILE @@FETCH_STATUS = 0  
	
	Begin
		Begin Transaction
				
				set @sql = Concat('SELECT /*+ full(gla) full(glj) full(cal) */ GLJ.Policy, GLJ.Journal_id, GLJ.Journal_date 
									FROM    DMSASCHEMA.DMSA_GL_JOURNAL_TRNX  GLJ , 
												DMSCHEMA.DM_ACCOUNT GLA, 
												DM_CALENDAR CAL 
									where 
												GLJ.ACCOUNT_SK = GLA.ACCOUNT_SK 
												and GLA.ACCOUNT_CODE between ''213403'' and ''213425'' 
												and GLJ.DESCRIPTION = ''AP Transactions'' 
												AND CAL.DATE_VALUE >= to_date(''', @Transaction_Process_Date,''',','''YYYY-MM-DD'')', 
												' AND CAL.DATE_VALUE <= sysdate 
												and CAL.CALENDAR_SK = GLJ.JOURNAL_DATE_SK 
												and policy = ''',@Policy_Number,'''' )
								
					
								
					--print @sql						
				
				
					Insert into #Get_DMSA_Data (
							Policy_Number,
							Journal_Id,
							Journal_Date
							)

					exec Utility.dbo.usp_QueryDM02PRDM @sql
				
					--PRINT 'EDW Data Inserted into Temp Table'
				
					Update #Get_DMSA_Data 
					Set Source_Trnx_Id = @Source_Trnx_Id	
				
				--Select * from 	#Get_DMSA_Data
					
					Update dbo.Reins_Claim_Expense_Trnx
					set dbo.Reins_Claim_Expense_trnx.Assumed_Paid = 'Y',
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid_Date = T2.Journal_Date,
						dbo.Reins_Claim_Expense_trnx.Cheque_Id = T2.Journal_Id,
						dbo.Reins_Claim_Expense_trnx.Updated_by = System_user,
						dbo.Reins_Claim_Expense_trnx.Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense_Trnx as T1, #Get_DMSA_Data as T2
					where  T1.Source_Trnx_Id = T2.Source_Trnx_Id
							and T2.Journal_Id is not null
							and T2.Journal_Date is not null
					
					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					Update dbo.Reins_Claim_Expense
					Set Claim_expense_status = 'CLOSED',
						Claim_Expense_Type = 'EXPENSE-PAID',
						Settlement_date = @Transaction_Process_Date,
						Updated_By = System_user,
						Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense T1, dbo.Reins_Claim_Expense_Trnx as T2, #Get_DMSA_Data as T3
					where  T1.[Claim_Expense_id] = T2.[Claim_Expense_id]
							and T2.Source_Trnx_Id = T3.Source_Trnx_Id
							and T3.Journal_Id is not null
							and T3.Journal_Date is not null

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount				
				 
											
			Commit Transaction

	
	
		Truncate table #Get_DMSA_Data
				

	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Incom_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE  [dbo].[usp_Reins_Incom_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @Claim_Expense_Id	varchar(20)
DECLARE @NEWClaimExpId int
declare @sqlstatement nvarchar(4000)
DECLARE @Month_effective_date datetime
DECLARE @EDW_Contract_Key int
DECLARE @Admin_System_File_Id numeric (10,0)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_effective_date datetime,
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			Transaction_Type VARCHAR(50)	,
			Admin_System_File_Id numeric (10,0)
)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Month_effective_date,
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_Key,
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].Admin_System_File_Id --Added to force separate trnxs across days
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
			Product_System_Code = ''OR''
		AND Exclude_Flag = ''N''
		AND
			(
				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
			)'

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')

exec(@sqlstatement)

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4

OPEN TXN_LIST_TO_PROCESS

FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_effective_date,
	@Policy_number ,
	@EDW_Contract_Key,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@Transaction_Type	,
	@Admin_System_File_Id

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		FROM [dbo].[Reins_Mercury_Trnx]
		WHERE
			Policy_number			= @Policy_number
			AND Transaction_Process_Date		= @Transaction_Process_Date
			AND Movement_Effective_Date		= @Movement_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			AND Claim_Expense_Id Is Null
			AND Admin_System_File_Id = @Admin_System_File_Id
		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
		begin

			select @Transaction_Type = 'SKIP'

		end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 

		IF @Transaction_Type = 'WOP'
		BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
								(
									Month_effective_Date,
									Policy_number, 
									Product_System_Code,
									EDW_Contract_Key,
									Expense_date,
									SETTLEMENT_DATE, 
									Claim_Expense_Type,
									Claim_Expense_Status,
									GROSS_EXPENSE_AMOUNT,
									Created_Date_Time,
									Created_By,
									Process_Log_Id
								)
								Values(
									@Month_Effective_Date,
									@Policy_number ,
									'OR',
									@EDW_Contract_key,
									@Transaction_Process_Date	,
									@Transaction_Process_Date,
									'EXPENSE-PAID',
									'CLOSED',
									@SumOfLEDGER_MVMT_AMT,
									Getdate(),
									--System_User,
									ORIGINAL_LOGIN(),
									-104
					
								)
							
					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

						-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_by = ORIGINAL_LOGIN(),
					Updated_Date_Time = getdate()

					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND Transaction_Process_Date=@Transaction_Process_Date
						AND Movement_Effective_Date=@Movement_Effective_Date
						AND [Claim_Expense_Id] is null
						AND Admin_System_File_Id = @Admin_System_File_Id
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID,
					Assumed_paid,
					Assumed_Paid_Date

						
					)
					SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					'OR',
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
					getdate(),
					ORIGINAL_LOGIN(),
					-104,
					'Y',
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					AND Admin_System_File_Id = @Admin_System_File_Id

					
				set @InsertRowCount = @InsertRowCount + @@Rowcount
				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					Values(
					@Month_effective_date,
					@Policy_number ,
					'OR',
					@EDW_Contract_Key,
					@Transaction_Process_Date	,
					@Transaction_Type,
					'OPEN',
					@SumOfLEDGER_MVMT_AMT,
					Getdate(),
					ORIGINAL_LOGIN(),
					-104
					)

					
					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

					-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_by = ORIGINAL_LOGIN(),
					Updated_Date_Time = getdate()

					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND Transaction_Process_Date=@Transaction_Process_Date
						AND Movement_Effective_Date=@Movement_Effective_Date
						AND [Claim_Expense_Id] is null
						AND Admin_System_File_Id = @Admin_System_File_Id
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					'OR',
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
					getdate(),
					ORIGINAL_LOGIN(),
					-104
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					AND Admin_System_File_Id = @Admin_System_File_Id

					
				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense Reversal' 
			BEGIN
					
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND Expense_date <= @Transaction_Process_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @SumOfLEDGER_MVMT_AMT , 2 ) 
				

				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-REVERSED',
									SETTLEMENT_DATE = @Transaction_Process_Date,
									Updated_By = ORIGINAL_LOGIN(),
									Updated_date_time = getdate()
								WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

								-- Mark Records as done
							UPDATE [dbo].[Reins_Mercury_Trnx] 
							SET Claim_Expense_Id = @NEWClaimExpId,
								Updated_By = ORIGINAL_LOGIN(),
								Updated_date_time = getdate()
							WHERE 
								(
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] is null
								AND Admin_System_File_Id = @Admin_System_File_Id
								)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							-- Carry these records forward.
							
							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
										Source_Trnx_Id,
										[Claim_Expense_Id],
										[Transaction_Type],
										[PRODUCT_SYSTEM_CODE],
										[Policy_number],
										[Month_Effective_date],
										[Claim_Reference_Id],
										[GL_Account_Id],
										[GL_Product_Code],
										[EDW_Contract_Key],
										EDW_Policy_Number,
										EDW_Contract_Id,
										EDW_Product_Key,
										EDW_Product_Code,
										EDW_Class_Of_Business,
										[Source_Claim_Number],
										[Transaction_Amount],
										[Transaction_Effective_date],
										[Transaction_Process_Date],
										[IMPLICIT_BENEFIT_TYPE_CODE],
										[Reins_Benefit_Category],
										[Created_Date_Time],
										Created_By,
										Process_Log_ID

						
										)
										SELECT 
										[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
										@NEWClaimExpId,
										[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
										'OR',
										[dbo].[Reins_Mercury_Trnx].Policy_number,
										[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
										[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
										[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
										[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
										[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
										[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
										[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
										[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
										[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
										[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
										[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
										[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
										[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
										[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
										getdate(),
										ORIGINAL_LOGIN(),
										-104
							FROM 
								[dbo].[Reins_Mercury_Trnx]
							WHERE
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId
								AND Admin_System_File_Id = @Admin_System_File_Id

							set @InsertRowCount = @InsertRowCount + @@Rowcount

						COMMIT TRANSACTION;
					
					END
				END

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_effective_date,
		@Policy_number ,
		@EDW_Contract_Key,
		@Transaction_Process_Date	,
		@Movement_Effective_Date	,
		@Transaction_Type	,
		@Admin_System_File_Id

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END  








GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Land_Process_Opus_Data]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 15/07/2020
-- Description:	Decomissioning the procedue as Opus now has new flow to use data from Mercury Feed- RGU-578
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Land_Process_Opus_Data] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

-- DECLARE @InsertRowCount Int = 0
-- DECLARE @UpdateRowCount Int = 0
-- DECLARE @DeleteRowCount int = 0
-- DECLARE @return_value   int = 0

--    -- Insert statements for procedure here
		
--BEGIN TRY

--Begin Tran T1

---- usp_Reins_Opus_Get_Trnx_EDW
--set @return_value = 0
--EXEC	@return_value = dbo.usp_Reins_Opus_Get_Trnx_EDW

--set @UpdateRowCount = @UpdateRowCount + @return_value

----usp_Reins_Opus_Update_Exclude_Flag
--set @return_value = 0
--EXEC	@return_value = [dbo].usp_Reins_Opus_Update_Exclude_Flag

--set @UpdateRowCount = @UpdateRowCount + @return_value

---- usp_Reins_Opus_Update_Sum_Insured
--set @return_value = 0
--Exec @return_value = dbo.usp_Reins_Opus_Update_Sum_Insured

--set @UpdateRowCount = @UpdateRowCount + @return_value

---- usp_Reins_Opus_Insert_Accruals
--set @return_value = 0
--Exec  @return_value = [dbo].usp_Reins_Opus_Insert_Accruals

--set @UpdateRowCount = @UpdateRowCount + @return_value

---- usp_Reins_Opus_Insert_Reversals
--set @return_value = 0
--Exec  @return_value = [dbo].usp_Reins_Opus_Insert_Reversals

--set @UpdateRowCount = @UpdateRowCount + @return_value

----  usp_Reins_Opus_Identify_Payments
--set @return_value = 0
--Exec  @return_value = [dbo].usp_Reins_Opus_Identify_Payments

--set @UpdateRowCount = @UpdateRowCount + @return_value

---- usp_Reins_Opus_Claims_Enrich_Rule1
--set @return_value = 0
--Exec  @return_value = [dbo].usp_Reins_Opus_Claims_Enrich_Rule1

--set @UpdateRowCount = @UpdateRowCount + @return_value

---- usp_Reins_Layer_calcs
--set @return_value = 0
--Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

--set @UpdateRowCount = @UpdateRowCount + @return_value

--Commit TRAN T1

--	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

--END TRY

--BEGIN CATCH
	
--	IF @@TRANCOUNT > 0
--	ROLLBACK TRAN T1;

--	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

--	THROW;

--END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Layer_calcs]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--------------------------------------------------------------------------------------------------------------
-- RRNAA2
-- 15/05/2021
-- RGU-1265 - Treaty ID update in claims listing for adj and Conversions to reflect into Claims Expense tables.
---------------------------------------------------------------------------------------------------------------


CREATE PROCEDURE  [dbo].[usp_Reins_Layer_calcs]
	@In_Mercury_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) = NULL

	WITH EXECUTE AS SELF
AS

BEGIN
SET NOCOUNT ON

Declare @sqlstatement nvarchar(4000)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


Begin Try

	Begin Transaction
		Merge dbo.Reins_Claim_Expense_Trnx as TGT
		Using dbo.Reins_Claim_Listing AS SRC
		ON (TGT.Claim_Source_Id = SRC.Claim_Source_Id)
		WHEN MATCHED and (Coalesce(TGT.[Layer_0_Reins_Percent], -99999) <> Coalesce(SRC.[Layer_0_Reins_Percent], -99999) OR 
						  Coalesce(TGT.[Layer_1_Reins_Percent],-99999) <> Coalesce(SRC.[Layer_1_Reins_Percent],-99999) OR
						  Coalesce(TGT.Layer_2_Reins_Percent, -99999) <> Coalesce(SRC.Layer_2_Reins_Percent, -99999) OR
						  Coalesce(TGT.Layer_1_Treaty_Id, -99999) <> Coalesce(SRC.Layer_1_Treaty_Id, -99999) OR
						  Coalesce(TGT.Layer_2_Treaty_Id, -99999) <> Coalesce(SRC.Layer_2_Treaty_Id, -99999))
					AND TGT.Product_System_Code = SRC.EDW_Product_System_Code
					--AND TGT.Product_System_Code = @In_Product_system_code

		THEN 
		UPDATE SET	TGT.[Layer_0_Reins_Percent] = SRC.[Layer_0_Reins_Percent],  
					TGT.[Layer_1_Reins_Percent] = SRC.[Layer_1_Reins_Percent] ,
					TGT.Layer_2_Reins_Percent = SRC.Layer_2_Reins_Percent,
					TGT.Layer_1_Treaty_Id = SRC.Layer_1_Treaty_Id,
					TGT.Layer_2_Treaty_Id = SRC.Layer_2_Treaty_Id,
					TGT.Layer_0_Rule = NULL,
					TGT.Layer_0_Reins_Claim_Amount = NULL,
					TGT.Layer_0_Residual_Claim_Amount = NULL,
					TGT.Layer_1_Treaty_Rule = NULL,
					TGT.Layer_1_Reins_Claim_Amount = NULL,
					TGT.Layer_1_Residual_Claim_Amount = NULL,
					TGT.Layer_2_Treaty_Rule = NULL,
					TGT.Layer_2_Reins_Claim_Amount = NULL,
					TGT.Layer_2_Residual_Claim_Amount = NULL,
					TGT.Progress_to_Recovery_rule = NULL,
					TGT.Progress_to_Recovery = NULL 
					;

			Select @UpdateRowCount = @@ROWCOUNT 
	Commit Transaction

	Begin Transaction
		set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
			SET Layer_0_Reins_Claim_Amount = Round(Transaction_Amount * Layer_0_Reins_Percent,2),
			Layer_0_Residual_Claim_Amount = Transaction_Amount - Round(Transaction_Amount * Layer_0_Reins_Percent,2),
			Layer_0_Rule = ''Reins_Layer_0'',
			Updated_by = ORIGINAL_LOGIN(),
			Updated_date_time = getdate()
			where CLAIM_ENRICHMENT_RULE is not null
			and Layer_0_Rule is null
			and Layer_0_Reins_Percent is not null
			and Transaction_type in ( ''Expense'', ''Expense Reversal'', ''WOP'')
			and source_trnx_id not like ''AB%''
			'
			
									

		if @In_Mercury_Trnx_Id is not null
		Begin
		set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
		--PRINT @sqlstatement
		END
		--	Print @sqlstatement
		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 
	
	Commit Transaction

	Begin Transaction
		Set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
									SET Layer_1_Reins_Claim_Amount = Round(Transaction_Amount * Layer_1_Reins_Percent,2),
									Layer_1_Residual_Claim_Amount = Layer_0_Residual_Claim_Amount - Round(Transaction_Amount * Layer_1_Reins_Percent,2),
									Layer_1_Treaty_Rule = ''Reins_Layer_1'',
									Updated_by = ORIGINAL_LOGIN(),
									Updated_date_time = getdate()
									Where CLAIM_ENRICHMENT_RULE is not null
									and Layer_1_Treaty_Rule is null
									and Layer_1_Reins_Percent is not null
									and Transaction_type in ( ''Expense'', ''Expense Reversal'', ''WOP'') 
									and source_trnx_id not like ''AB%''
									'
									

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END

		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 

	Commit Transaction

	Begin Transaction
		Set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
									SET Layer_2_Reins_Claim_Amount = Round(Transaction_Amount * Layer_2_Reins_Percent,2),
									Layer_2_Residual_claim_Amount = Layer_1_Residual_claim_amount - Round(Transaction_Amount * Layer_2_Reins_Percent,2),
									Layer_2_Treaty_Rule = ''Reins_Layer_2'',
									Updated_by = ORIGINAL_LOGIN(),
									Updated_date_time = getdate()
									where CLAIM_ENRICHMENT_RULE is not null
									and Layer_2_Treaty_Rule is null
									and Layer_2_Reins_Percent is not null
									and Transaction_type in ( ''Expense'', ''Expense Reversal'') 
									and source_trnx_id not like ''AB%''
									'
									

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 

	Commit Transaction

	-----Below section is to calculate specifically for ABLE Claim Expenses

	Begin Transaction
		set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
			SET Layer_0_Reins_Claim_Amount = Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_0_Reins_Percent),2),
			Layer_0_Residual_Claim_Amount = Transaction_Amount - Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_0_Reins_Percent),2),
			Layer_0_Rule = ''Reins_Layer_0'',
			Updated_by = ORIGINAL_LOGIN(),
			Updated_date_time = getdate()
			where CLAIM_ENRICHMENT_RULE is not null
			and Layer_0_Rule is null
			and Layer_0_Reins_Percent is not null
			--and Transaction_type in ( ''Expense'', ''WOP'')
			and source_trnx_id like ''AB%''
			'
			
									

		if @In_Mercury_Trnx_Id is not null
		Begin
		set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
		--PRINT @sqlstatement
		END
		--	Print @sqlstatement
		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 

	Commit Transaction

	Begin Transaction
		Set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
									SET Layer_1_Reins_Claim_Amount = Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_1_Reins_Percent),2),
									Layer_1_Residual_Claim_Amount = Layer_0_Residual_Claim_Amount - Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_1_Reins_Percent),2),
									Layer_1_Treaty_Rule = ''Reins_Layer_1'',
									Updated_by = ORIGINAL_LOGIN(),
									Updated_date_time = getdate()
									Where CLAIM_ENRICHMENT_RULE is not null
									and Layer_1_Treaty_Rule is null
									and Layer_1_Reins_Percent is not null
									--and Transaction_type in ( ''Expense'', ''WOP'') 
									and source_trnx_id like ''AB%''
									'
									

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 
	
	Commit Transaction

	Begin Transaction
		Set @sqlstatement = 'Update dbo.Reins_Claim_Expense_Trnx
									SET Layer_2_Reins_Claim_Amount = Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_2_Reins_Percent),2),
									Layer_2_Residual_claim_Amount = Layer_1_Residual_claim_amount - Round((Transaction_amount - (0.75*((Transaction_Amount*0.1)/1.1)))* (Layer_2_Reins_Percent),2),
									Layer_2_Treaty_Rule = ''Reins_Layer_2'',
									Updated_by = ORIGINAL_LOGIN(),
									Updated_date_time = getdate()
									where CLAIM_ENRICHMENT_RULE is not null
									and Layer_2_Treaty_Rule is null
									and Layer_2_Reins_Percent is not null
									--and Transaction_type =  ''Expense''
									and source_trnx_id like ''AB%''
									'					

		if @In_Mercury_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Mercury_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		exec(@sqlstatement)

		Select @UpdateRowCount = @UpdateRowCount+@@ROWCOUNT 

	Commit Transaction
		
	
	--Print @rowcnt

	--If @rowcnt > 0 
	--Begin
	--	Exec dbo.usp_Reins_Layer_calcs
	--End
	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRANSACTION;
	THROW;
END CATCH
  
END








GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Claims_Enrich_Rule1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: Jul 2020
-- Description:	RGU-623 - updated the Procedure to remove the condition of Source_trnx_Id in the where clause
-- =============================================


CREATE procedure [dbo].[usp_Reins_Opus_Claims_Enrich_Rule1]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @EDW_Contract_Key Numeric(10,0)
	DECLARE @Transaction_Process_date datetime
	DECLARE @EDW_Product_Code varchar(50)
	DECLARE @NumRows int
	--DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Get_Policy_list (
			EDW_Contract_Key Numeric(10,0),
			Transaction_Process_date datetime,
			EDW_Product_code varchar(50)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date, A.EDW_Product_Code
			From dbo.Reins_Claim_Expense_Trnx A, dbo.Reins_Claim_Expense B
			WHERE A.Claim_expense_id = B.Claim_expense_id
			and A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'')
			and A.product_system_code = ''LS''
			--and A.Source_trnx_Id like ''LS%''
			--and B.Claim_Expense_Status != ''IGNORE''
			'
			
	
	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@EDW_Product_Code

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where EDW_Contract_Key = @EDW_Contract_Key
		and EDW_Product_system_code = 'LS'
		and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'
		and EDW_Product_Code = @EDW_Product_Code
	
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
			UPDATE dbo.Reins_Claim_Expense_Trnx
			SET
				 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
				 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
				 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
				 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
				 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
				 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
				 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
				 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
				 [Claim_enrichment_rule] = 'CE_LS_Pol',
				 Updated_by = SYstem_user,
				 Updated_date_time = getdate()

			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'LS'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'LS'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  

				set @UpdateRowCount = @UpdateRowCount + @@Rowcount
			
			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@EDW_Product_Code

	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END
































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Get_Trnx_EDW]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 15/07/2020
-- Description:	Decomissioning the procedue as Opus now has new flow to use data from Mercury Feed- RGU-578
-- =============================================

CREATE procedure [dbo].[usp_Reins_Opus_Get_Trnx_EDW]
@ProcessLogID Int = -999
  ,@ProcessingMonthYear NVARCHAR(100) = NULL

AS

BEGIN
	SET NOCOUNT ON
	
	
--	DECLARE @InsertRowCount Int = 0
--	DECLARE @UpdateRowCount Int = 0
--	DECLARE @DeleteRowCount Int = 0
--	--DECLARE @Process_Log_Id int = -999
--	DECLARE @max_proc_date as date
--	DECLARE @month_effective_date as datetime
--	DECLARE @Max_Event_Num int = 0

--	--DECLARE @t table (
--	--		Contract_key  INT, 
--	--		Eftv_Date datetime , 
--	--		PAY_DATE_FROM datetime ,
--	--		PAY_DATE_TO datetime,
--	--		Policy_number varchar(20)
--	--		)

--	--CREATE table #Get_Policy_list (
--	--		Policy_number  VARCHAR(50), 
--	--		Contract_Key Int,
--	--		Transaction_Effective_Date datetime,
--	--		Transaction_Process_Date datetime , 
--	--		Claim_Expense_Id INT ,
--	--		Source_Trnx_Id varchar (20),
--	--		Transaction_Amount Numeric (15,2),
--	--		Trans_Ref_Key_1 varchar (10),
--	--		Trans_Ref_Key_2 varchar (10)
--	--		)
--	CREATE table #Get_EDW_Data (
--			EVENT_TYPE_CODE varchar(10),
--			EVENT_TYPE_DESC varchar (50),
--			PRODUCT_CODE varchar(20),
--			PRODUCT_DESC varchar(255),
--			CONTRACT_KEY Numeric(10,0),	
--			EVENT_STATUS_CODE varchar(20), 
--			EVENT_AMT Decimal (15,2),
--			PROCESS_DATE datetime,
--			EFTV_DATE datetime,
--			DISPLAY_CONTRACT_ID varchar(50),
--			CONTRACT_ID varchar(50),
--			EVENT_NUM int

--			)

--	declare @sqlstatement nvarchar(4000)

--	--Create the sql statement to be executed on EDW To get Opus Trnxs

--	--Select @max_proc_date = coalesce(max(Transaction_Effective_Date), '01-NOV-2017') from Reins_Opus_Trnx
--	Select @Max_Event_Num = isnull(max(EDW_Event_Number),0) from Reins_Opus_Trnx
	
--	--Print @max_proc_date

--	--set @sqlstatement = concat('select EVENT_TYPE_CODE , EVENT_TYPE_DESC , PRODUCT_CODE ,PRODUCT_DESC ,t.CONTRACT_KEY , t.EVENT_STATUS_CODE , t.EVENT_AMT , t.PROCESS_DATE , t.EFTV_DATE 
--	--	, c.display_contract_id , c.contract_id, t.event_num
--	--	from DW_CONTRACT_EVENT_TRNX t, dw_contract c, dw_event_type tt, dw_product p
--	--	WHERE t.contract_key = c.contract_key
--	--	AND t.event_type_key = tt.Event_type_key
--	--	AND c.product_system_code = ''LS''
--	--	and c.product_key = p.product_key
--	--	AND t.process_date >= ''01-NOV-2017''  
--	--	and COUNTRY_CODE = ''AUS''
--	--	--and event_amt < -5000
--	--	and event_type_code in ( ''DDI'',''DTA'',''KADE'', ''DOA'' , ''DDT'' )
--	--	AND t.process_date > To_date(''', @max_proc_date, ''',''YYYY-MM-DD'')')
		
--	set @sqlstatement = 'select EVENT_TYPE_CODE , EVENT_TYPE_DESC , PRODUCT_CODE ,PRODUCT_DESC ,t.CONTRACT_KEY , t.EVENT_STATUS_CODE , t.EVENT_AMT , t.PROCESS_DATE , t.EFTV_DATE 
--		, c.display_contract_id , c.contract_id, t.event_num
--		from DW_CONTRACT_EVENT_TRNX t, dw_contract c, dw_event_type tt, dw_product p
--		WHERE t.contract_key = c.contract_key
--		AND t.event_type_key = tt.Event_type_key
--		AND c.product_system_code = ''LS''
--		and c.product_key = p.product_key
--		AND t.process_date >= ''01-NOV-2017''  
--		and COUNTRY_CODE = ''AUS''
--		--and event_amt < -5000
--		and event_type_code in ( ''DDI'',''DTA'',''KADE'',''DOA'' , ''DDT'' )'
		


--	--print @sqlstatement	

--	--Actually insert the EDW data in the temp table
--	Begin Transaction
--		Insert into #Get_EDW_Data
--		exec Utility.dbo.usp_queryedw @sqlstatement
--	Commit
--	set @InsertRowCount = @InsertRowCount + @@Rowcount

--	--Select * from #Get_EDW_Data
	
--	--Print 'Now inserting data into Reins table'

--	Select @month_effective_date = isnull(Convert(datetime, @ProcessingMonthYear), eomonth(DATEADD(m, -1, getdate())))
--	--Now insert the EDW Data from Temp Table to IDS_Reins table
--	Begin Transaction
		
--		Insert into dbo.Reins_Opus_Trnx (Month_Effective_Date,
--										Reins_Opus_Trnx_Id,
--										Product_System_Code,
--										Policy_Number,
--										EDW_Contract_Key,
--										EDW_Contract_Id,
--										EDW_Product_Key,
--										EDW_Product_Code,
--										EDW_Product_Desc,
--										EDW_Class_Of_Business,
--										Reins_Benefit_Category,
--										Transaction_Effective_date,
--										Transaction_Process_Date,
--										Transaction_Amount,
--										Transaction_Type,
--										Claim_Expense_Id,
--										EDW_Event_Status_Code,
--										EDW_Event_Type_Code,
--										EDW_Event_Type_Desc,
--										EDW_Event_Number,
--										Created_Date_Time,
--										Created_By,
--										Updated_Date_Time,
--										Updated_By,
--										Process_Log_ID,
--										Exclude_Flag,
--										Exclude_Reason)

--		Select @month_effective_date as Month_effective_date,
--				'NULL' as Reins_Opus_Trnx_Id,
--				'LS' as Product_System_code,
--				a.DISPLAY_CONTRACT_ID,
--				a.CONTRACT_KEY,
--				a.CONTRACT_ID,
--				NULL as EDW_Product_key,
--				a.PRODUCT_CODE,
--				a.PRODUCT_DESC,
--				NULL as EDW_Class_Of_Business,
--				NULL as Reins_Benefit_Category,
--				EFTV_DATE,
--				PROCESS_DATE,
--				-1*EVENT_AMT,
--				'Expense' as Transaction_Type,
--				NULL as Claim_Expense_Id,
--				a.Event_Status_Code,
--				a.EVENT_TYPE_CODE,
--				a.EVENT_TYPE_DESC,
--				a.EVENT_NUM,
--				Getdate(),
--				SYSTEM_USER,
--				NULL as Updated_date_time,
--				NULL as Updated_By,
--				@ProcessLogID,
--				'N' as Exclude_Flag,
--				NULL as Exclude_Reason
--				from #Get_EDW_Data a
--				Where concat(a.contract_key, a.Event_Num, a.Eftv_date) not in (select isnull(CONCAT(EDW_Contract_key,EDW_Event_Number,Transaction_effective_date),'NA') from dbo.Reins_Opus_Trnx)
	
--		--Print @@Rowcount
					
--		SET @InsertRowCount = @InsertRowCount + @@ROWCOUNT
--	Commit

	

--	--Print 'Completed Inserting data into Reins Table'

--	--Print ' Update Reins_Opus_trnx_id'

--	--Update Reins_opus_trnx_id based on the generated opus_trnx_id
--	Begin Transaction
--		Update dbo.Reins_Opus_Trnx 
--		Set Reins_Opus_trnx_Id = concat('LS', b.Opus_Trnx_ID),
--		Updated_By = SYSTEM_USER,
--		Updated_Date_Time = getdate()
--		from dbo.Reins_Opus_Trnx b

--		--Print @@Rowcount
--		set @UpdateRowCount = @UpdateRowCount + @@Rowcount
--	Commit
	


--	--Update the below EDW Column from Reins_Claim_Listing
--	Begin Transaction
--		Update dbo.Reins_Opus_Trnx
--		set EDW_Product_key = b.EDW_Product_key,
--		EDW_Class_Of_Business = b.EDW_Class_Of_Business,
--		Reins_Benefit_Category = b.Reins_Benefit_Type
--		from dbo.Reins_Opus_trnx a, Reins_Claim_Listing b
--		where a.EDW_contract_key = b.EDW_contract_key
--		and a.EDW_Product_Code = b.EDW_Product_Code

--		set @UpdateRowCount = @UpdateRowCount + @@Rowcount
--	Commit

--	--Update the GL Account and Product codes
--	Begin Transaction
--		Update dbo.Reins_Opus_Trnx
--		set GL_Product_Code = 'A5A310',
--		Account_Id = Case when EDW_Event_Type_Code = 'DDT' then '660100' 
--						  when EDW_Event_Type_Code in ('DDI', 'DTA') then '660000'
--						  Else '699999' END

--		Where (Account_Id is null or GL_Product_Code is null)

--		set @UpdateRowCount = @UpdateRowCount + @@Rowcount
--	Commit
					
				 
											
		
--	--Truncate table #Get_EDW_Data
				


--SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_GUI_Confirm_Amount]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_Opus_GUI_Confirm_Amount] 
	@In_Source_Trnx_Id	varchar (20),
	@In_Override_Amount Numeric(15,2),
	@In_Override_Reason varchar(255),
	@In_Override_by_user varchar(30) = NULL
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	--DECLARE @Claim_Expense_Id int
	
	BEGIN TRY
		Begin Transaction
		--SET @sql = Concat('Update dbo.Reins_Opus_trnx
		--					set Override_Amount = ',@In_Override_Amount,',
		--					Override_by_user = isnull(''',@In_Override_by_user,''', System_user),
		--					Override_Reason = ''',@In_Override_Reason,''',
		--					Updated_by = System_user,
		--					Updated_date_time = getdate()
		--					Where Reins_Opus_Trnx_Id = ''',@In_Source_Trnx_Id,'''')

			Update dbo.Reins_Opus_trnx
							set Override_Amount = @In_Override_Amount,
							Override_by_user = isnull(@In_Override_by_user, ORIGINAL_LOGIN()),
							Override_Reason = @In_Override_Reason,
							--Updated_by = System_user,
							Updated_by = ORIGINAL_LOGIN(),
							Updated_date_time = getdate()
							Where Reins_Opus_Trnx_Id = @In_Source_Trnx_Id


		--Print @sql

		
		--Print @sql
		--Exec(@sql)
		Commit Transaction
	--Print 'One Part complete'

		Exec usp_Reins_Opus_Identify_Payments

		Exec usp_Reins_Opus_Claims_Enrich_Rule1

		EXEC usp_Reins_Layer_calcs
		
		EXEC usp_Reins_Progress_To_Recovery_Rule
			
	END TRY
	
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
	
END




GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_GUI_Undo_Override]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_Opus_GUI_Undo_Override] 
	@In_Source_Trnx_Id	varchar (20)
	--,@In_Claim_Src_Id	varchar (15)

	WITH EXECUTE AS OWNER
AS

BEGIN
	SET NOCOUNT ON
		
	DECLARE @sql varchar(4000)
	DECLARE @Claim_Expense_Id int
	

	If  EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx_recoverable where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		
		THROW  51000, 'Cannot undo this override as the month end reporting is for this is closed', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END

	If  EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx_nonrecoverable where Source_trnx_ID = @In_Source_Trnx_Id)
	Begin
		
		THROW  51000, 'Cannot undo this override as the month end reporting is for this is closed', 1;
		--RaiseError ('Invalid Source Transaction Id',16,1) ;
	END
	
	--If  NOT EXISTS (Select * from dbo.Reins_Claim_Expense_Trnx where Source_trnx_ID = @In_Source_Trnx_Id)
	--Begin
	--	Return
	--	--THROW  51000, 'Source_trnx_ID does not exist', 1;
	--	--RaiseError ('Invalid Source Transaction Id',16,1) ;
	--END
	
	--If  NOT EXISTS (Select * from dbo.Reins_Claim_Listing where Claim_Source_id = @In_Claim_Src_Id)
	--Begin
	--	THROW  51000, 'The Claim Source Id does not exists', 1;

	--END

	--If NOT EXISTS (Select * from dbo.Reins_claim_Expense_Trnx A --, Reins_claim_Listing B
	--			where --A.Claim_Source_Id = B.Claim_Source_Id
	--			 A.Source_Trnx_Id =  @In_Source_Trnx_Id
	--			 and A.Claim_Source_Id is not null
	--			--and B.Claim_Source_Id = @In_Claim_Src_Id
	--			)
	--	Begin
	--		THROW  51000, 'The Transaction has not yet been matched to any claim', 1;
	--	END
	
	Select @Claim_Expense_Id = Claim_expense_id from Reins_Claim_Expense_Trnx
	where Source_Trnx_Id = @In_Source_Trnx_Id

	--If @Claim_Expense_Id is null 
	--Begin
	--	Return
	--End

	
	--Verify it is an Opus Trnxs

	If @In_Source_Trnx_Id like 'LS%'
		Begin
			If @Claim_Expense_Id is not null
				Begin
					SET @sql = Concat('Delete from dbo.Reins_Claim_Expense_trnx
								Where Claim_Expense_Id = ',@Claim_Expense_Id)
					Begin Transaction
					--Print @sql
					Exec(@sql)
					Commit Transaction

					SET @sql = Concat('Delete from dbo.Reins_Claim_Expense
										Where Claim_Expense_Id = ',@Claim_Expense_Id)

					Begin Transaction
					--Print @sql
					Exec(@sql)
					Commit Transaction
				End
			Begin Transaction
			Update dbo.Reins_Opus_trnx
					Set Claim_expense_id = NULL,
					Override_Amount = NULL,
					Override_by_user = NULL,
					Override_Reason = NULL,
					--Updated_by = System_user,
					Updated_by = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					Where Reins_Opus_Trnx_Id = @In_Source_Trnx_Id

			Commit Transaction
	END
	
END



GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: Jul 2020
-- Description:	RGU-612 - updated the Procedure change the condition to identify Payments from Accruals based on Client _Ref_ID2 columns for expense and expense reversals.
-- =============================================




CREATE PROCEDURE  [dbo].[usp_Reins_Opus_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL,
	@ProcessLogId int = -999

--	WITH EXECUTE AS OWNER
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Transaction_Effective_Date	datetime
DECLARE @Transaction_Type	varchar(20)
DECLARE @Transaction_Amt	money
DECLARE @Claim_Expense_Id	varchar(20)
DECLARE @NEWClaimExpId int
declare @sqlstatement nvarchar(4000)
DECLARE @Month_Effective_Date datetime
DECLARE @EDW_Contract_Key int
DECLARE @Product_System_Code varchar(3)
DECLARE @EDW_Event_Type_Desc varchar(50)
DECLARE @Client_Ref_Id_2 varchar(10)

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Transaction_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			Product_System_Code varchar(3),
			EDW_Event_Type_Desc varchar (50),
			Client_Ref_Id_2 varchar(10)
)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			Month_Effective_Date,
			Policy_number, 
			EDW_Contract_Key,
			Transaction_Process_Date, 
			Transaction_Effective_Date, 
			Transaction_Type,
			Product_System_Code,
			EDW_Event_Type_Desc,
			Client_Ref_Id_2
			
		FROM 
			[dbo].[Reins_Opus_Trnx]
		WHERE
			Exclude_Flag = ''N''
			AND Product_System_Code is not null
			AND Policy_Number is not null
			AND Override_amount is not null 
			AND
			(
				(Transaction_Type Is Not Null) 
				AND (Claim_Expense_Id Is Null)
			)'

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')

exec(@sqlstatement)

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,5,4,6

OPEN TXN_LIST_TO_PROCESS

FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@EDW_Contract_Key ,
	@Transaction_Process_Date	,
	@Transaction_Effective_Date	,
	@Transaction_Type,
	@Product_System_Code,
	@EDW_Event_Type_Desc,
	@Client_Ref_Id_2

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
		SELECT @Transaction_Amt = ROUND(Sum(Transaction_Amount),2)
		FROM [dbo].Reins_Opus_Trnx
		WHERE
			Policy_number			= @Policy_number
			AND ISNULL(Transaction_Process_Date, cast('2899-12-31' as date)) = ISNULL(@Transaction_Process_Date, cast('2899-12-31' as date))
			AND Transaction_Effective_Date		= @Transaction_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			AND Claim_Expense_Id Is Null
		
		--PRINT 'DATA being Taken' 
		--PRINT 	'Policy_number' + @Policy_number
		--PRINT 'TransactionAmt: ' +  convert(varchar(50),@Transaction_Amt)
		--PRINT 'Transaction_Type ' + @Transaction_Type
		--PRINT '@Transaction_Process_Date ' + CONVERT(varchar(50),@Transaction_Process_Date)
		--PRINT '@Transaction_Effective_Date ' + convert(varchar(50),@Transaction_Effective_Date)

		IF  @Transaction_Amt  IS NULL
		begin

			select @Transaction_Type = 'SKIP'

		end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					Values
					(
						@Month_Effective_Date,
						@Policy_number ,
						@Product_System_Code,
						@EDW_Contract_Key,
						@Transaction_Effective_Date	,
						Case when (@Client_Ref_Id_2 = 'CADD' or @Client_Ref_Id_2 = 'DTH') then @Transaction_Type else 'EXPENSE-PAID' END ,
						Case when (@Client_Ref_Id_2 = 'CADD' or @Client_Ref_Id_2 = 'DTH') then 'OPEN' else 'CLOSED' END ,
						@Transaction_Amt,
						Getdate(),
						System_user,
						@ProcessLogId
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

					-- Mark Records as done
					UPDATE [dbo].[Reins_Opus_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_Date_Time = getdate(),
					Updated_By = SYSTEM_USER


					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND Transaction_Process_Date=@Transaction_Process_Date
						AND Transaction_Effective_Date=@Transaction_Effective_Date
						AND product_System_code = @Product_System_Code
						AND [Claim_Expense_Id] is null
						
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[EDW_Contract_Key],
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[Reins_Benefit_Category],
								Assumed_Paid,
								Assumed_Paid_Date,
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								Reins_Opus_Trnx_Id,
								@NEWClaimExpId,
								Transaction_Type, 
								Product_System_Code,
								Policy_number,
								[Month_Effective_date],
								EDW_Contract_Key,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								Transaction_Amount, 
								Transaction_Effective_date, 
								Transaction_Process_Date, 
								Reins_benefit_category,
								Case when @Client_Ref_Id_2 = 'CADD' then 'N' else 'Y' END as Assumed_Paid,
								Case when @Client_Ref_Id_2 = 'CADD' then NULL else @Transaction_process_date END as Assumed_Paid_Date,
								getdate(),
								System_User,
								@ProcessLogId
					FROM 
					[dbo].Reins_Opus_Trnx
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Transaction_Effective_Date=@Transaction_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					
				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense Reversal' 
			BEGIN
					
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND Expense_date <= @Transaction_Effective_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @Transaction_Amt , 2 ) 

				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION

						--PRINT '@NEWClaimExpId ' + convert(varchar(50),@NEWClaimExpId)

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-REVERSED',
									SETTLEMENT_DATE = @Transaction_Effective_Date,
									Updated_Date_Time = getdate(),
									Updated_By = SYSTEM_USER
								
								WHERE [Claim_Expense_Id] = @NEWClaimExpId
								and @Client_Ref_Id_2 != 'DTH'

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-PAID',
									SETTLEMENT_DATE = @Transaction_Effective_Date,
									Updated_Date_Time = getdate(),
									Updated_By = SYSTEM_USER
								
								WHERE [Claim_Expense_Id] = @NEWClaimExpId
								and @Client_Ref_Id_2 = 'DTH'

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount
							
								-- Mark Records as done
							UPDATE [dbo].Reins_Opus_Trnx 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = SYSTEM_USER

							WHERE 
								(
								Policy_number=@Policy_number
								--AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND @Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] is null
								
								)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							-- Carry these records forward.
							
							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[EDW_Contract_Key],
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[Reins_Benefit_Category],
								Assumed_Paid,
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								Reins_Opus_Trnx_Id,
								@NEWClaimExpId,
								Transaction_Type, 
								Product_System_Code,
								Policy_number,
								[Month_Effective_date],
								EDW_Contract_Key,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								Transaction_Amount, 
								Transaction_Effective_date, 
								Transaction_Process_Date, 
								Reins_benefit_category,
								Case when Client_Ref_Id_2 = 'RCA' then 'N' else 'Y' END as Assumed_Paid,
								getdate(),
								System_User,
								@ProcessLogId
					FROM 
					[dbo].Reins_Opus_Trnx
							WHERE
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Transaction_Effective_Date=@Transaction_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId

						set @InsertRowCount = @InsertRowCount + @@Rowcount

						--Update Asssumed_paid_date where Asssumed paid is yes. This is done here separately becasue this proc will be used for Accruals as well and we do not want
						--to update assumed_paid_date for Opus Claim Accrual records
						--PRINT ' Updating Asumed Paid Date' 
						Update [Reins_Claim_Expense_Trnx]
						set Assumed_Paid_Date = @Transaction_process_date
						where Assumed_paid = 'Y'
						and Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND [Claim_Expense_Id] =@NEWClaimExpId
						AND Product_system_code = 'LS'

						COMMIT TRANSACTION;
					
					END
				END

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@EDW_Contract_Key ,
		@Transaction_Process_Date	,
		@Transaction_Effective_Date	,
		@Transaction_Type	,
		@Product_System_Code,
		@EDW_Event_Type_Desc,
		@Client_Ref_Id_2

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS



SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END  





GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Insert_Accruals]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 15/07/2020
-- Description:	Decomissioning the procedue as Opus now has new flow to use data from Mercury Feed- RGU-578
-- =============================================

CREATE PROCEDURE  [dbo].[usp_Reins_Opus_Insert_Accruals]
	--@In_Source_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 
	@ProcessLogId int = -999,
	@ProcessingMonthYear varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON
--DECLARE @Current_processing_month datetime
--DECLARE @DeleteRowCount Int = 0
--DECLARE @InsertRowCount Int = 0
--DECLARE @UpdateRowCount Int = 0

	--Begin Try
	--	set @Current_processing_month = isnull(Convert(datetime, @ProcessingMonthYear), eomonth(DATEADD(m, -1, getdate())))

	--	Begin Transaction
	--		INSERT INTO Reins_Opus_Trnx (Month_Effective_Date,
	--									Product_System_Code,
	--									Policy_Number,
	--									EDW_Contract_Key,
	--									EDW_Contract_Id,
	--									EDW_Product_Key,
	--									EDW_Product_Code,
	--									EDW_Product_Desc,
	--									EDW_Class_Of_Business,
	--									Reins_Benefit_Category,
	--									Transaction_Effective_date,
	--									Transaction_Process_Date,
	--									Transaction_Amount,
	--									Transaction_Type,
	--									Claim_Expense_Id,
	--									EDW_Event_Type_Desc,
	--									Created_Date_Time,
	--									Created_By,
	--									Process_Log_ID,
	--									Exclude_Flag,
	--									Original_Sum_Insured,
	--									Current_Sum_Insured
	--									)
	--			Select @Current_processing_month,
	--				   EDW_Product_System_code,
	--				   Policy_Number,
	--				   EDW_Contract_Key,
	--				   EDW_Contract_Id,
	--				   EDW_Product_Key,
	--				   EDW_Product_Code,
	--				   NULL,
	--				   EDW_Class_Of_Business,
	--				   Reins_Benefit_Type,
	--				   Incurred_Date,
	--				   isnull(Claim_Finalised_Date, Incurred_date),
	--				   Sum_Insured_on_Incurred_Date,
	--				   'Expense',
	--				   NULL,
	--				   'Opus_Claim_Accrual',
	--				   getdate(),
	--				   SYSTEM_USER,
	--				   @ProcessLogId,
	--				   'N',
	--				   Sum_Insured_on_Incurred_Date,
	--				   Sum_Insured_on_Reporting_Date
	--			From Reins_Claim_Listing
	--			where EDW_Product_System_Code = 'LS'
	--			and EDW_Contract_Key not in (Select EDW_Contract_Key from Reins_Opus_Trnx)
	--			and Reins_Benefit_Type != 'N/A'
	--			and Incurred_Date >= '2017-11-01'
	--			and cast(Row_End_Date as date) = '3000-12-31'

							
	--		set @InsertRowCount = @InsertRowCount + @@Rowcount

	--	Commit Transaction

	--	Begin Transaction
	--		Update Reins_Opus_Trnx
	--		set Reins_Opus_Trnx_Id = Concat('LS',Opus_Trnx_ID),
	--		Updated_by = System_user,
	--		Updated_Date_Time = getdate()
	--		where Reins_Opus_Trnx_Id is null

	--		set @UpdateRowCount = @UpdateRowCount + @@Rowcount
	--	Commit

	--END TRY
	--BEGIN CATCH
	--	IF @@TRANCOUNT > 0
	--	ROLLBACK TRANSACTION;
	--	THROW;
	--END CATCH
  
 -- SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Insert_Reversals]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 15/07/2020
-- Description:	Decomissioning the procedue as Opus now has new flow to use data from Mercury Feed- RGU-578
-- =============================================

CREATE PROCEDURE  [dbo].[usp_Reins_Opus_Insert_Reversals]
	--@In_Source_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 
	@ProcessLogId int = -999
AS

BEGIN
SET NOCOUNT ON
--DECLARE @Current_processing_month datetime
--DECLARE @DeleteRowCount Int = 0
--DECLARE @InsertRowCount Int = 0
--DECLARE @UpdateRowCount Int = 0

--	Begin Try
		
--		Begin Transaction
--			INSERT INTO Reins_Opus_Trnx (Reins_Opus_Trnx_Id,
--										Month_Effective_Date,
--										Product_System_Code,
--										Policy_Number,
--										EDW_Contract_Key,
--										EDW_Contract_Id,
--										EDW_Product_Key,
--										EDW_Product_Code,
--										EDW_Product_Desc,
--										EDW_Class_Of_Business,
--										Reins_Benefit_Category,
--										Transaction_Effective_date,
--										Transaction_Process_Date,
--										Transaction_Amount,
--										Transaction_Type,
--										Claim_Expense_Id,
--										EDW_Event_Type_Desc,
--										Created_Date_Time,
--										Created_By,
--										Process_Log_ID,
--										Exclude_Flag,
--										Original_Sum_Insured,
--										Current_Sum_Insured
--										)
--				Select Reins_opus_Trnx_Id + cast('-REV' as varchar) AS Reins_Opus_Trnx_Id,
--					   EOMONTH(DateAdd("m",1,[Month_Effective_Date])) AS Month_effective_Date,
--					   Product_System_code,
--					   Policy_Number,
--					   EDW_Contract_Key,
--					   EDW_Contract_Id,
--					   EDW_Product_Key,
--					   EDW_Product_Code,
--					   NULL,
--					   EDW_Class_Of_Business,
--					   Reins_Benefit_Category,
--					   [Transaction_Effective_date]+1 AS Transaction_Effective_Date, 
--					   Transaction_Process_Date,
--					   [Transaction_Amount]*-1 AS Transaction_Amount,
--					   'Expense Reversal',
--					   NULL,
--					   'Opus_Claim_Accrual-Reversal',
--					   getdate(),
--					   SYSTEM_USER,
--					   @ProcessLogId,
--					   'N',
--					   Original_Sum_Insured,
--					   Current_Sum_Insured
--				From Reins_Opus_Trnx A
--				WHERE 
--							A.Transaction_Type ='Expense' 
--						AND A.EDW_Event_Type_Desc ='Opus_Claim_Accrual'
							
--						AND Not Exists (select * from Reins_opus_trnx B
--										Where A.Reins_opus_trnx_id + cast('-REV' as varchar) = B.Reins_Opus_trnx_id )	
--						AND A.month_effective_date < 	(Select max(month_effective_date) from Reins_Opus_Trnx)

							
--			set @InsertRowCount = @InsertRowCount + @@Rowcount

--		Commit Transaction

		

--	END TRY
--	BEGIN CATCH
--		IF @@TRANCOUNT > 0
--		ROLLBACK TRANSACTION;
--		THROW;
--	END CATCH
  
--  SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Update_Exclude_Flag]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: 15/07/2020
-- Description:	Decomissioning the procedue as Opus now has new flow to use data from Mercury Feed- RGU-578
-- =============================================

CREATE procedure [dbo].[usp_Reins_Opus_Update_Exclude_Flag]
@ProcessLogID Int = -999
--This procedure looks at the Reins_Claim_listing table to see whether a claim exist for an opus transaction. If not it the opus trnx will be marked as excluded. 
--Even if the claim record exists but the product/product option is out of scope based on Claim Listing, the transaction will be marked as out of scope

AS

BEGIN
		SET NOCOUNT ON;
	
	
--	DECLARE @InsertRowCount Int = 0
--	DECLARE @UpdateRowCount Int = 0
--	DECLARE @DeleteRowCount Int = 0
	

	
		
--	--Update the exclude flag = 'Y' if the transaction does not have a corresponding Claim record
--	Begin Transaction
--		Update dbo.Reins_Opus_Trnx 
--		Set Exclude_flag = 'Y',
--		Exclude_Reason = 'No Claim record exists',
--		Updated_By = SYSTEM_USER,
--		Updated_Date_Time = getdate()
--		from dbo.Reins_Opus_Trnx a
--		where not exists (select * from Reins_Claim_Listing b
--						  where a.EDW_Contract_Key = b.EDW_Contract_Key
--						  )
--		and a.Exclude_Flag = 'N'

--		--Print @@Rowcount
--		set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--		Update dbo.Reins_Opus_Trnx 
--		Set Exclude_flag = 'Y',
--		Exclude_Reason = 'Product or Product option out of scope',
--		Updated_By = SYSTEM_USER,
--		Updated_Date_Time = getdate()
--		from dbo.Reins_Opus_Trnx a, Reins_Claim_Listing b
--		where a.EDW_Contract_Key = b.EDW_Contract_Key
--		and Reins_benefit_type = 'N/A'
--		and a.edw_product_code = b.EDW_Product_Code
--		and a.Exclude_Flag = 'N'



--	Commit
	


--SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Opus_Update_Sum_Insured]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- RRNAA2
-- Opus Claims Payment Enhancement Change
-- RGU-627 - 25/06/2020 - Updated procedure to add the extra logic to update Override amt as Sum insured or Transaction_Amt based on if the record is an accrual or payment to facilitate automatch of the transactions
-- =============================================
-- =============================================
-- RRNAA2
-- Opus Claims Payment Enhancement Change
-- RGU-1137 - 18/01/2021 - Updated procedure to add the extra logic include only Mercury transactions for Automatch
-- =============================================


CREATE procedure [dbo].[usp_Reins_Opus_Update_Sum_Insured] @ProcessLogID Int 
--This procedure looks at the Reins_Claim_listing table and updates the Original and Current Sum Insured in the Reins base table - Reins_Opus_trnx. 

AS

BEGIN
	
	DECLARE @Reins_opus_Trnx_Id varchar(20)
	DECLARE @Month_Effective_Date datetime
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount Int = 0
	

BEGIN TRY	
		
	--Update the Original and Current Sum Insured from Reins_Claim_Listing
	Begin TRAN T1
		Update dbo.Reins_Opus_Trnx 
		Set Original_Sum_Insured = b.Sum_Insured_on_Incurred_date,
		Current_Sum_Insured = b.Sum_Insured_on_Reporting_date,
		Updated_By = SYSTEM_USER,
		Updated_Date_Time = getdate()
		from (Select  Reins_Opus_trnx_Id, a.edw_Contract_key, count(*) Number_Of_Rows
		from Reins_opus_trnx a, Reins_Claim_listing b
		where a.EDW_Contract_Key = b.EDW_Contract_Key
		and Reins_benefit_type != 'N/A'
		and a.edw_product_code = b.EDW_Product_Code
		and a.Transaction_Process_Date between b.Row_Eftv_Date and b.row_end_date
		group by Reins_Opus_trnx_Id, a.edw_Contract_key
		having count(*) = 1
		) a, -- This is to get the rows which match 1:1 to Claim Listing, duplicate records should not be considered
		Reins_Claim_Listing b, dbo.Reins_Opus_Trnx c
		where a.EDW_Contract_Key = b.EDW_Contract_Key
		and a.Reins_Opus_trnx_Id = c.Reins_Opus_Trnx_Id
		and c.EDW_Contract_Key = b.EDW_Contract_Key
		and b.Reins_benefit_type != 'N/A'
		and c.edw_product_code = b.EDW_Product_Code
		and c.Transaction_Process_Date between b.Row_Eftv_Date and b.row_end_date
		and c.exclude_flag = 'N'
		and C.Reins_Opus_Trnx_Id like 'MR%' -- RGU-1137 - 18/01/2021 - Updated procedure to add the extra logic include only Mercury transactions for Automatch
						  

		--Print @@Rowcount
		set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

		
	Commit TRAN T1
	
	---- Update override amt as Original Sum insured where the transaction amt and Sum insured amts Match (ie, Payement to Claim Insured amt match)

	--Begin TRAN T2

	--	Update dbo.Reins_Opus_trnx
	--	set Override_Amount = Original_Sum_Insured,
	--	Override_by_user = SYSTEM_USER,
	--	Override_Reason = 'AUTOMATCH',
	--	Updated_by = System_user,
	--	--Updated_by = ORIGINAL_LOGIN(),
	--	Updated_date_time = getdate()
	--	Where (Original_Sum_Insured - ABS(Transaction_Amount)) <= (Original_Sum_Insured * (0.01 / 100))
	--	and Reins_Opus_Trnx_Id like 'MR%' -- RGU-1137 - 18/01/2021 - Updated procedure to add the extra logic include only Mercury transactions for Automatch


	--COMMIT TRAN T2

	-- Update override amt as transaction amt where claim match is not found for non Payment entries (accruals and reversals for the same )

		Begin TRAN T2

		Update dbo.Reins_Opus_trnx
		set Override_Amount = ABS(Transaction_Amount),
		Override_by_user = SYSTEM_USER,
		Override_Reason = 'AUTOMATCH',
		Updated_by = System_user,
		--Updated_by = ORIGINAL_LOGIN(),
		Updated_date_time = getdate()
		Where Override_Amount is NULL 
		and Client_Ref_Id_2 in ('CADD','RCA')

	COMMIT TRAN T2

	-- Update override amt as Original Sum insured where the transaction amt and Sum insured amts Match (ie, Payement to Claim Insured amt match)
	-- Also update based on checking if there was a previous claim payment RGU-1298

	BEGIN TRAN T3;
	
	IF OBJECT_ID('tempdb.dbo.#tempClaimLnk', 'U') IS NOT NULL DROP TABLE #tempClaimLnk
	create table #tempClaimLnk
	(
	Reins_Opus_trnx_Id varchar(20) Not NULL,
	Claim_Number varchar(30) Not NULL,
	Transaction_Amount numeric(15,2) Null,
	Original_Sum_Insured numeric(28,2) NULL,
	AggAmtGreaterThanSIFlag char(1) NULL
	)


	insert into #tempClaimLnk 
	Select  Reins_Opus_trnx_Id,b.Claim_Number,a.Transaction_Amount,a.Original_Sum_Insured, NULL as AggAmtGreaterThanSIFlag
	from Reins_opus_trnx a, Reins_Claim_listing b
	where a.EDW_Contract_Key = b.EDW_Contract_Key
	and Reins_benefit_type != 'N/A'
	and a.edw_product_code = b.EDW_Product_Code
	and a.Transaction_Process_Date between b.Row_Eftv_Date and b.row_end_date
	and Reins_Opus_Trnx_Id like 'MR%'
	and Transaction_Type = 'Expense'

   COMMIT TRAN T3;


   BEGIN TRAN T4;

   IF OBJECT_ID('tempdb.dbo.#AggTAmtByClaim', 'U') IS NOT NULL DROP TABLE #AggTAmtByClaim
   select * into #AggTAmtByClaim
	from
	(	 select sum(R.Transaction_Amount) as Sum_Transaction_Amount,R.Original_Sum_Insured,C.Claim_Number from Reins_Opus_Trnx R,
		 #tempClaimLnk C
		 where R.Reins_Opus_Trnx_Id = C.Reins_Opus_Trnx_Id
		  and R.Override_Reason is NULL
		 and R.Reins_Opus_Trnx_Id like 'MR%'
		 and R.Transaction_Type = 'Expense'
		 group by C.Claim_Number,R.Original_Sum_Insured
		 ) a
		 update #tempClaimLnk
		 set AggAmtGreaterThanSIFlag = 'Y'
		 from #tempClaimLnk L,
		 #AggTAmtByClaim A
		 where L.Claim_Number = A.Claim_Number
		 and A.Sum_Transaction_Amount > (A.Original_Sum_Insured * (0.01 / 100))

  COMMIT TRAN T4;

  BEGIN TRAN T5;

		Update dbo.Reins_Opus_trnx
		set Override_Amount = Original_Sum_Insured,
		Override_by_user = SYSTEM_USER,
		Override_Reason = 'AUTOMATCH',
		Updated_by = System_user,
		Updated_date_time = getdate()
		where Reins_Opus_Trnx_Id not in (Select distinct Reins_Opus_Trnx_Id from #tempClaimLnk where AggAmtGreaterThanSIFlag = 'Y')
		and Reins_Opus_Trnx_Id like 'MR%'
		and Client_Ref_Id_2 not in ('CADD','RCA')
		and Override_Reason is NULL

  COMMIT TRAN T5;


END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	ROLLBACK TRAN T2;
	ROLLBACK TRAN T3;
	ROLLBACK TRAN T4;
	ROLLBACK TRAN T5;

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount;

	THROW;

END CATCH
END






































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_ACE]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_ACE] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


-- Process ACE Payments
set @return_value = 0
EXEC	@return_value = [dbo].usp_Reins_ACE_Identify_Payments

set @UpdateRowCount = @UpdateRowCount + @return_value

/* **** definition not present. 

-- Update EDW and reins percent data from Claim listing
set @return_value = 0
EXEC	@return_value = dbo.usp_Reins_ACE_Claim_Enrich_Rule1

set @UpdateRowCount = @UpdateRowCount + @return_value
*/

-- Calculate Reins and Residual Amounts
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

/*  *** definition not present 

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule
*/

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_Clas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_Clas] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


-- Update Benefit details
UPDATE 
    [dbo].[Reins_Mercury_Trnx]
SET
 --   [Reins_Benefit_Category] = [Reins_Claim_Benefit_Type].[BENEFIT_CATEGORY] ,
    [Implicit_Benefit_Type_Code] =   
          Reins_Claim_Benefit_Type.[IMPLICIT_BENEFIT_TYPE]
FROM 
    [dbo].[Reins_Claim_Benefit_Type] ,
     [dbo].[Reins_Mercury_Trnx]
WHERE
      [Reins_Claim_Benefit_Type].[PRODUCT_SYSTEM_CODE] = 'FDA'
AND [Reins_Claim_Benefit_Type].[SOURCE_BENEFIT_CODE] =   
           [dbo].[Reins_Mercury_Trnx].[Trans_Ref_Key_1]
--AND    [dbo].[Reins_Mercury_Trnx].[Reins_BENEFIT_CATEGORY] IS NULL 
AND [Implicit_Benefit_Type_Code] is null
AND [IMPLICIT_BENEFIT_TYPE] is not null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Identify WOP Payments
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_FDA_Identify_Payments_WOP]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Identify Payments
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_FDA_Identify_Payments]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Claim Enrichment Pri match
UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_FDA_Pol_Claim_Ben',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'FDA'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'FDA'
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Type in ( 'EXPENSE', 'Expense reversal', 'WOP')
AND Left(dbo.Reins_Claim_Listing.[EDW_Product_Option_Code], len([dbo].Reins_Claim_Expense_Trnx.[IMPLICIT_BENEFIT_TYPE_CODE])) = [dbo].Reins_Claim_Expense_Trnx.[IMPLICIT_BENEFIT_TYPE_CODE]
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
AND  dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
AND dbo.Reins_Claim_Expense_Trnx.Claim_enrichment_rule is null
AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrichment IP Able Sec match
UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_FDA_Pol_Ben',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
--AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'FDA'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'FDA'
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Type in ( 'EXPENSE', 'Expense reversal', 'WOP')
AND Left(dbo.Reins_Claim_Listing.[EDW_Product_Option_Code], len([dbo].Reins_Claim_Expense_Trnx.[IMPLICIT_BENEFIT_TYPE_CODE])) = [dbo].Reins_Claim_Expense_Trnx.[IMPLICIT_BENEFIT_TYPE_CODE]
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
AND  dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
AND dbo.Reins_Claim_Expense_Trnx.Claim_enrichment_rule is null
AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]  

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrichment Rule 3
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_FDA_Claims_Enrich_Rule3]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Enrich Pay Date From and To from EDW for IP
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_FDA_EDW_Claims_Enrich]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Update Expense Records from Payment Records

  Update A
  SET PAY_FROM_TO_RULE = B.PAY_FROM_TO_RULE,
  PAY_DATE_FROM = B.PAY_DATE_FROM,
  PAY_DATE_To = B.PAY_DATE_To,
  Pay_From_To_EDW_Event_Num = B.Pay_From_To_EDW_Event_Num
  from [dbo].[Reins_Claim_Expense_Trnx] A, [dbo].[Reins_Claim_Expense_Trnx] B
  where A.Claim_expense_id = B.Claim_expense_id
  and A.Policy_number = B.Policy_number
  and A.Transaction_Process_Date = B.Transaction_Process_Date
  and A.Transaction_type in ( 'Expense', 'WOP')
  and B.Transaction_Type = 'Payment'
  and B.Pay_From_To_Rule is not null
  and (A.Pay_From_To_Rule is null)
  
  set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- usp_Reins_FDA_WOP_From_To_Date
set @return_value = 0
Exec @return_value = [dbo].usp_Reins_FDA_WOP_From_To_Date

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exec Layer Calcs and look for rate changes
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exclude Excess Payments
set @return_value = 0
Exec @return_value = dbo.usp_Reins_FDA_Exclude_Excess_Payments

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_Disco]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_Disco] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
BEGIN TRY

Begin Tran T1

--Update Implcit Benefit Type Code

Update  dbo.Reins_GL_Journal_Trnx
SET Implicit_Benefit_Type_Code = B.Benefit_code,
   Updated_By = System_User,
   Updated_date_time = getdate()
from Reins_GL_Journal_Trnx A, 
(
Select GL_Journal_Trnx_Id, 
substring(GL_Journal_Line_Desc, charindex(' ',GL_Journal_Line_Desc)+1,charindex('-',GL_Journal_Line_Desc)-charindex(' ',GL_Journal_Line_Desc)+2) as Benefit_code
--,len(rtrim(substring(GL_Journal_Line_Desc, charindex(' ',GL_Journal_Line_Desc)+1,charindex('-',GL_Journal_Line_Desc)-charindex(' ',GL_Journal_Line_Desc)+3))) as lbf,
--Charindex(' ',substring(GL_Journal_Line_Desc, charindex(' ',GL_Journal_Line_Desc)+1,charindex('-',GL_Journal_Line_Desc)-charindex(' ',GL_Journal_Line_Desc)+2))
 from 
dbo.Reins_GL_Journal_Trnx
where  GL_Journal_Line_Desc like '%|-0%' escape '|' 
and len(substring(GL_Journal_Line_Desc, charindex(' ',GL_Journal_Line_Desc),charindex('-',GL_Journal_Line_Desc)-charindex(' ',GL_Journal_Line_Desc)+3)) <=11
and  EDW_Product_System_Code = 'DS'
) B
where A.GL_Journal_Trnx_Id = B.GL_Journal_Trnx_Id
and EDW_Product_System_Code = 'DS'
and A.Implicit_Benefit_Type_Code is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Update Source Claim Number

Update dbo.Reins_GL_Journal_Trnx
SET Source_Claim_Number = B.Source_Claim_Number,
   Updated_By = System_User,
   Updated_date_time = getdate()
from dbo.Reins_GL_Journal_Trnx A,
(
Select GL_Journal_Trnx_Id ,GL_Journal_Line_Desc,
rtrim(substring(GL_Journal_Line_Desc, charindex(' ',GL_Journal_Line_Desc)+1,charindex(' ',GL_Journal_Line_Desc))) as Source_Claim_Number
from 
dbo.Reins_GL_Journal_Trnx
where not( GL_Journal_Line_Desc like '%|-%' escape '|') 
and charindex(' ',GL_Journal_Line_Desc,(charindex(' ',GL_Journal_Line_Desc)+1)) <=15
) B
where A.GL_Journal_Trnx_Id = B.GL_Journal_Trnx_Id
and EDW_Product_System_Code = 'DS'
and A.Source_Claim_Number is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Identify DS Payments
set @return_value = 0
EXEC	@return_value = [dbo].usp_Reins_DS_Identify_Payments

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Claim Enrich based on Benefit Num

UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_DS_Pol_Ben',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
--AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
AND dbo.Reins_Claim_Listing.[Benefit_Number] = dbo.Reins_Claim_Expense_Trnx.IMPLICIT_BENEFIT_TYPE_CODE
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('3000-12-31' as date))
AND dbo.Reins_Claim_Listing.Row_End_Date = cast('3000-12-31' as date)
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'DS'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'DS'
AND Claim_enrichment_rule is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrich based Src Claim No

UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_DS_Pol_Ben',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
--AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
AND dbo.Reins_Claim_Listing.[Benefit_Number] = dbo.Reins_Claim_Expense_Trnx.IMPLICIT_BENEFIT_TYPE_CODE
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('3000-12-31' as date))
AND dbo.Reins_Claim_Listing.Row_End_Date = cast('3000-12-31' as date)
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'DS'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'DS'
AND Claim_enrichment_rule is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrich based on Source Claim Number

UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_DS_Pol_Claim',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
--AND dbo.Reins_Claim_Listing.[Benefit_Number] = dbo.Reins_Claim_Expense_Trnx.IMPLICIT_BENEFIT_TYPE_CODE
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('3000-12-31' as date))
AND dbo.Reins_Claim_Listing.Row_End_Date =  cast('3000-12-31' as date)
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'DS'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'DS'
AND dbo.Reins_Claim_Expense_Trnx.Claim_enrichment_rule is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrich Pol No

UPDATE dbo.Reins_Claim_Expense_Trnx
SET
 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
 [Claim_enrichment_rule] = 'CE_DS_Pol_Ben',
 Updated_by = System_user,
Updated_date_time = getdate()
 FROM 
 dbo.Reins_Claim_Expense , 
 dbo.Reins_Claim_Expense_Trnx ,
 dbo.Reins_Claim_Listing
WHERE 
dbo.Reins_Claim_Expense.Claim_Expense_Id  = dbo.Reins_Claim_Expense_Trnx.Claim_Expense_Id
--AND dbo.Reins_Claim_Expense_Trnx.Source_Claim_Number = dbo.Reins_Claim_Listing.Claim_Number
AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
AND dbo.Reins_Claim_Listing.[Benefit_Number] = dbo.Reins_Claim_Expense_Trnx.IMPLICIT_BENEFIT_TYPE_CODE
AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('3000-12-31' as date))
AND dbo.Reins_Claim_Listing.Row_End_Date = cast('3000-12-31' as date)
AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'DS'
AND Reins_Claim_Listing.EDW_Product_System_Code = 'DS'
AND Claim_enrichment_rule is null

set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- Claim Enrich based on Policy only
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_DS_Claims_Enrich_Rule3]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exec Layer Calcs and look for rate changes
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_GL_Data_Other]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_GL_Data_Other] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


-- Process Spectra Trnxs
set @return_value = 0
Exec @return_value = dbo.usp_Reins_GL_Identify_Payments_SPE

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Insert Expense Revs for identified GL Txns
set @return_value = 0
Exec @return_value = dbo.usp_Reins_GL_Insert_Reversal_FLS_And_Others

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Process FLSUNPAID Trnxs
set @return_value = 0
EXEC	@return_value = dbo.usp_Reins_GL_Identify_Payments_FLSUNPAID

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Process Other Possible GL Trnxs
set @return_value = 0
Exec @return_value = dbo.usp_Reins_GL_Identify_Payments_Generic

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Update Revs Claim data from parent Accruals
set @return_value = 0
Exec  @return_value = dbo.usp_Reins_GL_Update_Claim_Data_for_FLS_Other_Reversals

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Enrich GL data from Claims List (Only non DS)
set @return_value = 0
Exec  @return_value = dbo.usp_Reins_GL_Claims_Enrich_Generic

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Update Accrual trnxs with Claim data for FLL Product
set @return_value = 0
Exec  @return_value = [dbo].[usp_Reins_FLL_NA_Claim_Match]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Calculate different Reins layer Amounts
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_Incom]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_Incom] @ProcessLogID int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1

-- Identify Incom Payments

set @return_value = 0
EXEC	@return_value = [dbo].usp_Reins_Incom_Identify_Payments

set @UpdateRowCount = @UpdateRowCount + @return_value

--usp_Reins_Incom_DMSA_Enrich
set @return_value = 0
EXEC	@return_value = [dbo].usp_Reins_Incom_DMSA_Enrich

set @UpdateRowCount = @UpdateRowCount + @return_value

--Claim Encrichment only poicy based
set @return_value = 0
Exec @return_value = dbo.usp_Reins_Incom_Claims_Enrich_Rule1

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exec Layer Calcs and look for rate changes
set @return_value = 0
Exec  @return_value = [dbo].usp_Reins_Layer_calcs

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_Opus]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- RRNAA2
-- Opus Claims Payment Enhancement Change 
-- RGU-625 - 25/06/2020 -  New Procedure for Opus Payment process procs being called in sequence
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_Opus] @ProcessLogID int,@ProcessingMonthYear NVARCHAR(100)
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
		
BEGIN TRY

Begin Tran T1

-- Load Mercury details to Reins_Opus_Trnx table for Opus
set @return_value = 0
EXEC @return_value = dbo.usp_Process_Merc_Data_into_Reins_Opus @ProcessLogID = @ProcessLogID, @ProcessingMonthYear = @ProcessingMonthYear

set @UpdateRowCount = @UpdateRowCount + @return_value

-- usp_Reins_Opus_Update_Sum_Insured
set @return_value = 0
Exec @return_value = dbo.usp_Reins_Opus_Update_Sum_Insured  @ProcessLogID = @ProcessLogID

set @UpdateRowCount = @UpdateRowCount + @return_value

--  usp_Reins_Opus_Identify_Payments
set @return_value = 0
Exec  @return_value = [dbo].usp_Reins_Opus_Identify_Payments

set @UpdateRowCount = @UpdateRowCount + @return_value

-- usp_Reins_Opus_Claims_Enrich_Rule1
set @return_value = 0
Exec  @return_value = [dbo].usp_Reins_Opus_Claims_Enrich_Rule1

set @UpdateRowCount = @UpdateRowCount + @return_value

-- usp_Reins_Layer_calcs
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

--usp_Reins_Progress_To_Recovery_Rule
set @return_value = 0
Exec @return_value = usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_U2]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_U2] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1



-- Identify U2 Payments
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_U2_Identify_Payments]

set @UpdateRowCount = @UpdateRowCount + @return_value

--Enrich U2 data from EDW
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_U2_EDW_Enrich]

set @UpdateRowCount = @UpdateRowCount + @return_value

--Claim Enrichment
set @return_value = 0
Exec @return_value = dbo.usp_Reins_U2_Claims_Enrich

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Update Accrual trnxs with Claim data for FLL product
set @return_value = 0
Exec  @return_value = [dbo].[usp_Reins_FLL_NA_Claim_Match]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exec Layer Calcs and look for rate changes
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Payment_Processing_Ultimate]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Payment_Processing_Ultimate] @ProcessLogID int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0
 DECLARE @return_value   int = 0

    -- Insert statements for procedure here
	
	
BEGIN TRY

Begin Tran T1


--  Identify Ultimate Payments
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_Ultimate_Identify_Payments]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Claim Enrichment Only policy based
set @return_value = 0
EXEC	@return_value = [dbo].[usp_Reins_Ultimate_Claims_Enrich_Rule1]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Identify Payment record from EDW
set @return_value = 0
Exec @return_value = dbo.usp_Reins_Ultimate_EDW_Enrich

set @UpdateRowCount = @UpdateRowCount + @return_value

-- usp_Reins_Ultimate_DMSA_Enrich
set @return_value = 0
Exec  @return_value = [dbo].[usp_Reins_Ultimate_DMSA_Enrich]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Exec Layer Calcs and look for rate changes
set @return_value = 0
Exec @return_value = [dbo].[usp_Reins_Layer_calcs]

set @UpdateRowCount = @UpdateRowCount + @return_value

-- Set Progress to Recovery Flag
set @return_value = 0
exec @return_value = dbo.usp_Reins_Progress_To_Recovery_Rule

set @UpdateRowCount = @UpdateRowCount + @return_value

Commit TRAN T1

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Progress_To_Recovery_Rule]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_Progress_To_Recovery_Rule]
	@In_Source_Trnx_Id varchar(20) = NULL
	--@In_Product_system_code varchar(3) 

	WITH EXECUTE AS OWNER

AS

BEGIN
SET NOCOUNT ON

Declare @sqlstatement nvarchar(4000)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


Begin Try
	Begin Transaction
	--Progress to recovery rule for IP
		set @sqlstatement = '
							Update Reins_Claim_Expense_Trnx
							SET 
								Progress_to_Recovery = ''Y''
								,Progress_to_Recovery_rule = ''Paid_Claim_Treaty_IP''
							from 
								Reins_Claim_Expense_Trnx A 
								Inner Join Reins_Claim_Expense B on A.Claim_expense_id	= B.Claim_Expense_Id
								Inner Join Reins_Claim_Listing C on C.Claim_Source_Id	= A.Claim_Source_Id
							Where 
								A.Claim_enrichment_rule is not null 
							and B.Claim_Expense_Status = ''CLOSED''
							and B.Claim_Expense_Type = ''EXPENSE-PAID''
							and A.Pay_Date_From is not null
							and A.Pay_Date_To is not null
							and (
								A.Layer_0_Rule is not null or 
								A.Layer_1_Treaty_Rule is not null 
								or A.Layer_2_Treaty_Rule is not null
								)
							and transaction_type not in (''Payment'', ''Expense reversal'')
							and A.Reins_benefit_Category = ''IP''
							and Progress_to_Recovery is NULL
							'

		if @In_Source_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Source_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		--Print @sqlstatement
		exec(@sqlstatement)
		
		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction

	--Progress to recovery rule for Non IP
	Begin Transaction	
		set @sqlstatement = '
							Update Reins_Claim_Expense_Trnx
							SET 
								Progress_to_Recovery = ''Y'',
								Progress_to_Recovery_rule = ''Paid_Claim_LumpSum''
							from 
								Reins_Claim_Expense_Trnx A 
								Inner Join Reins_Claim_Expense B On A.Claim_expense_id	= B.Claim_Expense_Id
								Inner Join Reins_Claim_Listing C On C.Claim_Source_Id	= A.Claim_Source_Id
							Where 
								A.Claim_enrichment_rule is not null 
							and B.Claim_Expense_Status = ''CLOSED''
							and B.Claim_Expense_Type = ''EXPENSE-PAID''
							--and case when A.Product_System_Code = ''FDA'' then Pay_From_To_Rule else ''Rule'' end is not null
							and (A.Layer_0_Rule is not null or A.Layer_1_Treaty_Rule is not null or A.Layer_2_Treaty_Rule is not null)
							and transaction_type not in (''Payment'', ''Expense reversal'')
							and A.Reins_benefit_Category != ''IP''
							and Progress_to_Recovery is NULL
							and Source_trnx_id not like ''AB%''
							'

		--Print @sqlstatement

		if @In_Source_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Source_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		
		--Print @sqlstatement
		exec(@sqlstatement)

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction

	--This section is specifically for WOP Trnxs 
	--NS - Commented this section on 24/01/2018 as WOP is now has the same business rules as all other IP trnnxs
		--Begin Transaction
		--set @sqlstatement = '
		--					Update Reins_Claim_Expense_Trnx
		--					SET 
		--						Progress_to_Recovery = ''Y''
		--						,Progress_to_Recovery_rule = ''Paid_WOP''
		--					from 
		--						Reins_Claim_Expense_Trnx A 
		--						Inner Join Reins_Claim_Expense B on A.Claim_expense_id	= B.Claim_Expense_Id
		--						Inner Join Reins_Claim_Listing C on C.Claim_Source_Id	= A.Claim_Source_Id
		--					Where 
		--						A.Claim_enrichment_rule is not null 
		--					and B.Claim_Expense_Status = ''CLOSED''
		--					and B.Claim_Expense_Type = ''EXPENSE-PAID''
		--					--and A.Pay_Date_From is not null
		--					--and A.Pay_Date_To is not null
		--					and (
		--						A.Layer_0_Rule is not null or 
		--						A.Layer_1_Treaty_Rule is not null 
		--						or A.Layer_2_Treaty_Rule is not null
		--						)
		--					and transaction_type = (''WOP'')
		--					--and C.Reins_benefit_type = ''IP''
		--					and C.Claim_Source_Id is not null
		--					and Progress_to_Recovery is NULL
		--					'

	--	if @In_Source_Trnx_Id is not null
	--		Begin
	--		set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Source_Trnx_Id,'''' )
	--		--PRINT @sqlstatement
	--		END
	--	--Print @sqlstatement
	--	exec(@sqlstatement)

	--	set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	--Commit Transaction

	--This section is specifically for Able Claim Expense Trnxs
	Begin Transaction
		set @sqlstatement = '
							Update Reins_Claim_Expense_Trnx
							SET 
								Progress_to_Recovery = ''Y''
								,Progress_to_Recovery_rule = ''Paid_Able Claim Expense''
							from 
								Reins_Claim_Expense_Trnx A 
								Inner Join Reins_Claim_Expense B on A.Claim_expense_id	= B.Claim_Expense_Id
								Inner Join Reins_Claim_Listing C on C.Claim_Source_Id	= A.Claim_Source_Id
							Where 
								A.Claim_enrichment_rule is not null 
								and B.Claim_Expense_Status = ''CLOSED''
								and B.Claim_Expense_Type = ''EXPENSE-PAID''
							--and A.Pay_Date_From is not null
							--and A.Pay_Date_To is not null
								and (
									A.Layer_0_Rule is not null or 
									A.Layer_1_Treaty_Rule is not null 
									or A.Layer_2_Treaty_Rule is not null
								)
							--and transaction_type = (''WOP'')
							--and C.Reins_benefit_type = ''IP''
								and C.Claim_Source_Id is not null
								and Progress_to_Recovery is NULL
								and Source_trnx_id like ''AB%''
							'

		if @In_Source_Trnx_Id is not null
			Begin
			set @sqlstatement  = concat( @sqlstatement, ' AND Source_Trnx_Id = ''' , @In_Source_Trnx_Id,'''' )
			--PRINT @sqlstatement
			END
		--Print @sqlstatement
		exec(@sqlstatement)

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount

	Commit Transaction



END TRY
BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
END CATCH
 
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Rollback_Cyclic_Close]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[usp_Reins_Rollback_Cyclic_Close]  @CURRENT_CYCLIC_ID  integer
as
BEGIN
	SET NOCOUNT ON



	
	DECLARE @CURRENT_CYCLIC_DATE as datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	-- Validation

	

	-- 1 )  Get the Header details of the Curretn month  where OPEN

		--SELECT @CURRENT_CYCLIC_ID = min( Reins_Cyclic_Id )   
		--from Reins_Cyclic
		--where Reins_Cyclic_Status = 'CLOSED'

		--select @CURRENT_CYCLIC_DATE = Reins_Cyclic.Reins_Cyclic_Effective_Date
		--from Reins_Cyclic
		--where Reins_Cyclic_Id  = @CURRENT_CYCLIC_ID


		
	-- 2 )  Move all records ready to migrate in the Claim_Expense_trnx table to the approriate tables.... 
BEGIN TRY	
	Begin Transaction
	
		INSERT [dbo].[Reins_Claim_Expense_Trnx]
						(Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID)

		select 	Month_Effective_Date,
				Claim_Expense_Id,
				Source_Trnx_Id,
				Product_System_Code,
				Policy_Number,
				EDW_Contract_Key,
				EDW_Policy_Number,
				EDW_Contract_Id,
				EDW_Product_Key,
				EDW_Product_Code,
				EDW_Class_Of_Business,
				Reins_Benefit_Category,
				Implicit_Benefit_Type_Code,
				Claim_Reference_Id,
				Source_Claim_Number,
				GL_Account_Id,
				GL_Product_Code,
				Transaction_Effective_date,
				Transaction_Process_Date,
				Transaction_Amount,
				Transaction_Type,
				Claim_Enrichment_Rule,
				Claim_Source_Id,
				Claim_Number,
				Product_Option_Code,
				Pay_From_To_Rule,
				Pay_Date_From,
				Pay_Date_To,
				Pay_From_To_EDW_Event_Num,
				Cheque_Id,
				Progress_to_Recovery_rule,
				Progress_to_Recovery,
				Assumed_Paid,
				Assumed_Paid_Date,
				Layer_0_Rule,
				Layer_0_Reins_Percent,
				Layer_0_Reins_Claim_Amount,
				Layer_0_Residual_Claim_Amount,
				Layer_1_Treaty_Rule,
				Layer_1_Treaty_Id,
				Layer_1_Reins_Percent,
				Layer_1_Reins_Claim_Amount,
				Layer_1_Residual_Claim_Amount,
				Layer_2_Treaty_Rule,
				Layer_2_Treaty_Id,
				Layer_2_Reins_Percent,
				Layer_2_Reins_Claim_Amount,
				Layer_2_Residual_Claim_Amount,
				Getdate(),
				System_user,
				Process_Log_ID   
		from  [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
		where 
		[dbo].[Reins_Claim_Expense_Trnx_Recoverable].Reins_Cyclic_Id = @CURRENT_CYCLIC_ID
		print convert(varchar(50) ,  @CURRENT_CYCLIC_ID)
	set @InsertRowCount = @InsertRowCount + @@Rowcount

	Commit Transaction

		-- DELETE WHERE MOVED

	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
		where Reins_Cyclic_id = @CURRENT_CYCLIC_ID
		
		--@CURRENT_CYCLIC_ID

		set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

	Begin Transaction

	INSERT [dbo].[Reins_Claim_Expense_Trnx]
						(Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Created_Date_Time,
						Created_By,
						Process_Log_ID)

				select 
						Month_Effective_Date,
						Claim_Expense_Id,
						Source_Trnx_Id,
						Product_System_Code,
						Policy_Number,
						EDW_Contract_Key,
						EDW_Policy_Number,
						EDW_Contract_Id,
						EDW_Product_Key,
						EDW_Product_Code,
						EDW_Class_Of_Business,
						Reins_Benefit_Category,
						Implicit_Benefit_Type_Code,
						Claim_Reference_Id,
						Source_Claim_Number,
						GL_Account_Id,
						GL_Product_Code,
						Transaction_Effective_date,
						Transaction_Process_Date,
						Transaction_Amount,
						Transaction_Type,
						Claim_Enrichment_Rule,
						Claim_Source_Id,
						Claim_Number,
						Product_Option_Code,
						Pay_From_To_Rule,
						Pay_Date_From,
						Pay_Date_To,
						Pay_From_To_EDW_Event_Num,
						Cheque_Id,
						Progress_to_Recovery_rule,
						Progress_to_Recovery,
						Assumed_Paid,
						Assumed_Paid_Date,
						Layer_0_Rule,
						Layer_0_Reins_Percent,
						Layer_0_Reins_Claim_Amount,
						Layer_0_Residual_Claim_Amount,
						Layer_1_Treaty_Rule,
						Layer_1_Treaty_Id,
						Layer_1_Reins_Percent,
						Layer_1_Reins_Claim_Amount,
						Layer_1_Residual_Claim_Amount,
						Layer_2_Treaty_Rule,
						Layer_2_Treaty_Id,
						Layer_2_Reins_Percent,
						Layer_2_Reins_Claim_Amount,
						Layer_2_Residual_Claim_Amount,
						Getdate(),
						System_user,
						Process_Log_ID   
		from [dbo].[Reins_Claim_Expense_Trnx_NonRecoverable]
		where Reins_Cyclic_id = @CURRENT_CYCLIC_ID
				
	set @InsertRowCount = @InsertRowCount + @@Rowcount

	Commit Transaction
		
		-- DELETE WHERE MOVED
	Begin Transaction
		Delete from [dbo].[Reins_Claim_Expense_Trnx_NonRecoverable]
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID

		set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

		-- Crystalise a cliam listing   NS - What needs to be done here??
	Begin Transaction
		Delete from [dbo].[Reins_Report_Bordereau]
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID

		set @DeleteRowCount = @DeleteRowCount + @@Rowcount

	Commit Transaction

	Begin Transaction
		Delete from [dbo].[Reins_Report_Claims_List]
		Where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID

		set @DeleteRowCount = @DeleteRowCount + @@Rowcount
		
	Commit Transaction


	Begin Transaction

	--	Delete from  Reins_Cyclic
		--Where Reins_Cyclic_Status = 'DRAFT'
		--and Reins_Cyclic_id = (Select min(Reins_Cyclic_id) from Reins_Cyclic)

		--set @DeleteRowCount = @DeleteRowCount + @@Rowcount

		Update [dbo].[Reins_Cyclic]
		SET 
			Reins_Cyclic_Status = 'DRAFT', 
			Updated_Date_Time	= sysdatetime(),
			Updated_By = SYSTEM_USER
		where  Reins_Cyclic_id = @CURRENT_CYCLIC_ID
		and Reins_Cyclic_Status = 'CLOSED'

		set @UpdateRowCount = @UpdateRowCount + @@Rowcount
		
	Commit Transaction	

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRANSACTION;
	THROW;
END CATCH

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Rollback_Recoverable_Trnx_After_Close]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure  [dbo].[usp_Reins_Rollback_Recoverable_Trnx_After_Close]
 @Source_Trnx_Id varchar(20)
as
BEGIN
	SET NOCOUNT ON
	--This Procedure will roll back an expense record from Reins_Report_Bordereau table and Reins_Claim_expense_trnx_recoverable table. 
	--The associated expense reversal or payment record will also roll back 


	--DECLARE @CURRENT_CYCLIC_ID as integer
	--DECLARE @CURRENT_CYCLIC_DATE as datetime
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @Trnx_Count int = 0
	DECLARE @Claim_Expense_Id int
	--DECLARE @Claim_Expense_Id int = 0
	

-- 1 )  Check if the Trnx Id exist in the report table and Fail if the Trnx Id does not 

		Select @Trnx_Count = count(*) from Reins_Report_Bordereau
		where Source_Trnx_Id = @Source_Trnx_Id

BEGIN TRY
		If @Trnx_Count = 0
			Begin
				THROW  51000, 'Source_trnx_ID does not exist', 1;
			End
		Else
			Begin
				--Rollabck the trnx from the Recoverable table into the base trnx table (reins_claim_expense_trnx)
				Select @Claim_Expense_Id = Claim_expense_id from [Reins_Claim_Expense_Trnx_Recoverable] where Source_Trnx_Id = @Source_Trnx_Id
				Begin Transaction
				INSERT into [dbo].[Reins_Claim_Expense_Trnx]
							  (Month_Effective_Date,
							  Claim_Expense_Id,
							  Source_Trnx_Id,
							  Product_System_Code,
							  Policy_Number,
							  EDW_Contract_Key,
							  EDW_Policy_Number,
							  EDW_Contract_Id,
							  EDW_Product_Key,
							  EDW_Product_Code,
							  EDW_Class_Of_Business,
							  Reins_Benefit_Category,
							  Implicit_Benefit_Type_Code,
							  Claim_Reference_Id,
							  Source_Claim_Number,
							  GL_Account_Id,
							  GL_Product_Code,
							  Transaction_Effective_date,
							  Transaction_Process_Date,
							  Transaction_Amount,
							  Transaction_Type,
							  Claim_Enrichment_Rule,
							  Claim_Source_Id,
							  Claim_Number,
							  Product_Option_Code,
							  Pay_From_To_Rule,
							  Pay_Date_From,
							  Pay_Date_To,
							  Pay_From_To_EDW_Event_Num,
							  Cheque_Id,
							  Progress_to_Recovery_rule,
							  Progress_to_Recovery,
							  Assumed_Paid,
							  Assumed_Paid_Date,
							  Layer_0_Rule,
							  Layer_0_Reins_Percent,
							  Layer_0_Reins_Claim_Amount,
							  Layer_0_Residual_Claim_Amount,
							  Layer_1_Treaty_Rule,
							  Layer_1_Treaty_Id,
							  Layer_1_Reins_Percent,
							  Layer_1_Reins_Claim_Amount,
							  Layer_1_Residual_Claim_Amount,
							  Layer_2_Treaty_Rule,
							  Layer_2_Treaty_Id,
							  Layer_2_Reins_Percent,
							  Layer_2_Reins_Claim_Amount,
							  Layer_2_Residual_Claim_Amount,
							  Created_Date_Time,
							  Created_By,
							  Process_Log_ID)

						select  Month_Effective_Date,
						  Claim_Expense_Id,
						  Source_Trnx_Id,
						  Product_System_Code,
						  Policy_Number,
						  EDW_Contract_Key,
						  EDW_Policy_Number,
						  EDW_Contract_Id,
						  EDW_Product_Key,
						  EDW_Product_Code,
						  EDW_Class_Of_Business,
						  Reins_Benefit_Category,
						  Implicit_Benefit_Type_Code,
						  Claim_Reference_Id,
						  Source_Claim_Number,
						  GL_Account_Id,
						  GL_Product_Code,
						  Transaction_Effective_date,
						  Transaction_Process_Date,
						  Transaction_Amount,
						  Transaction_Type,
						  Claim_Enrichment_Rule,
						  Claim_Source_Id,
						  Claim_Number,
						  Product_Option_Code,
						  Pay_From_To_Rule,
						  Pay_Date_From,
						  Pay_Date_To,
						  Pay_From_To_EDW_Event_Num,
						  Cheque_Id,
						  Progress_to_Recovery_rule,
						  Progress_to_Recovery,
						  Assumed_Paid,
						  Assumed_Paid_Date,
						  Layer_0_Rule,
						  Layer_0_Reins_Percent,
						  Layer_0_Reins_Claim_Amount,
						  Layer_0_Residual_Claim_Amount,
						  Layer_1_Treaty_Rule,
						  Layer_1_Treaty_Id,
						  Layer_1_Reins_Percent,
						  Layer_1_Reins_Claim_Amount,
						  Layer_1_Residual_Claim_Amount,
						  Layer_2_Treaty_Rule,
						  Layer_2_Treaty_Id,
						  Layer_2_Reins_Percent,
						  Layer_2_Reins_Claim_Amount,
						  Layer_2_Residual_Claim_Amount,
						  Getdate(),
						  System_user,
						  Process_Log_ID   
						from [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
						where 
						--Source_Trnx_Id = @Source_Trnx_Id
						Claim_Expense_Id = @Claim_Expense_Id -- rollback the expense record based on trnx_id and also the associated payment record

						set @InsertRowCount = @InsertRowCount + @@Rowcount
					Commit Transaction

				--Get the claim_expense_id to get the entire set of transactions related to this transaction

		--		Select @Claim_Expense_Id = Claim_expense_id  from [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
		--		where 	Source_Trnx_Id = @Source_Trnx_Id


		--		--Insert the set of trnxs based on the above claim expense Id
	
		--	Begin Transaction
		--		INSERT into [dbo].[Reins_Claim_Expense_Trnx]
		--				(Month_Effective_Date,
		--				Claim_Expense_Id,
		--				Source_Trnx_Id,
		--				Product_System_Code,
		--				Policy_Number,
		--				EDW_Contract_Key,
		--				EDW_Policy_Number,
		--				EDW_Contract_Id,
		--				EDW_Product_Key,
		--				EDW_Product_Code,
		--				EDW_Class_Of_Business,
		--				Reins_Benefit_Category,
		--				Implicit_Benefit_Type_Code,
		--				Claim_Reference_Id,
		--				Source_Claim_Number,
		--				GL_Account_Id,
		--				GL_Product_Code,
		--				Transaction_Effective_date,
		--				Transaction_Process_Date,
		--				Transaction_Amount,
		--				Transaction_Type,
		--				Claim_Enrichment_Rule,
		--				Claim_Source_Id,
		--				Claim_Number,
		--				Product_Option_Code,
		--				Pay_From_To_Rule,
		--				Pay_Date_From,
		--				Pay_Date_To,
		--				Pay_From_To_EDW_Event_Num,
		--				Cheque_Id,
		--				Progress_to_Recovery_rule,
		--				Progress_to_Recovery,
		--				Assumed_Paid,
		--				Assumed_Paid_Date,
		--				Layer_0_Rule,
		--				Layer_0_Reins_Percent,
		--				Layer_0_Reins_Claim_Amount,
		--				Layer_0_Residual_Claim_Amount,
		--				Layer_1_Treaty_Rule,
		--				Layer_1_Treaty_Id,
		--				Layer_1_Reins_Percent,
		--				Layer_1_Reins_Claim_Amount,
		--				Layer_1_Residual_Claim_Amount,
		--				Layer_2_Treaty_Rule,
		--				Layer_2_Treaty_Id,
		--				Layer_2_Reins_Percent,
		--				Layer_2_Reins_Claim_Amount,
		--				Layer_2_Residual_Claim_Amount,
		--				Created_Date_Time,
		--				Created_By,
		--				Process_Log_ID)

		--		select 	Month_Effective_Date,
		--				Claim_Expense_Id,
		--				Source_Trnx_Id,
		--				Product_System_Code,
		--				Policy_Number,
		--				EDW_Contract_Key,
		--				EDW_Policy_Number,
		--				EDW_Contract_Id,
		--				EDW_Product_Key,
		--				EDW_Product_Code,
		--				EDW_Class_Of_Business,
		--				Reins_Benefit_Category,
		--				Implicit_Benefit_Type_Code,
		--				Claim_Reference_Id,
		--				Source_Claim_Number,
		--				GL_Account_Id,
		--				GL_Product_Code,
		--				Transaction_Effective_date,
		--				Transaction_Process_Date,
		--				Transaction_Amount,
		--				Transaction_Type,
		--				Claim_Enrichment_Rule,
		--				Claim_Source_Id,
		--				Claim_Number,
		--				Product_Option_Code,
		--				Pay_From_To_Rule,
		--				Pay_Date_From,
		--				Pay_Date_To,
		--				Pay_From_To_EDW_Event_Num,
		--				Cheque_Id,
		--				Progress_to_Recovery_rule,
		--				Progress_to_Recovery,
		--				Assumed_Paid,
		--				Assumed_Paid_Date,
		--				Layer_0_Rule,
		--				Layer_0_Reins_Percent,
		--				Layer_0_Reins_Claim_Amount,
		--				Layer_0_Residual_Claim_Amount,
		--				Layer_1_Treaty_Rule,
		--				Layer_1_Treaty_Id,
		--				Layer_1_Reins_Percent,
		--				Layer_1_Reins_Claim_Amount,
		--				Layer_1_Residual_Claim_Amount,
		--				Layer_2_Treaty_Rule,
		--				Layer_2_Treaty_Id,
		--				Layer_2_Reins_Percent,
		--				Layer_2_Reins_Claim_Amount,
		--				Layer_2_Residual_Claim_Amount,
		--				Getdate(),
		--				System_user,
		--				Process_Log_ID   
		--		from [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
		--		where Claim_expense_id = @Claim_Expense_Id

		--		set @InsertRowCount = @InsertRowCount + @@Rowcount
		--Commit Transaction

-----------------

		-- DELETE WHERE MOVED

			Begin Transaction

				Delete from [dbo].[Reins_Claim_Expense_Trnx_Recoverable]
				where Claim_Expense_Id = @Claim_Expense_Id
				
				set @DeleteRowCount = @DeleteRowCount + @@Rowcount
					
			Commit Transaction




		--Delete the transaction from the Report Bordereau Table

		Begin Transaction
	
			Delete from [dbo].[Reins_Report_Bordereau]
			Where  Source_Trnx_Id = @Source_Trnx_Id
			
			set @DeleteRowCount = @DeleteRowCount + @@Rowcount

		Commit Transaction

		--Insert Comment into the Reins_Comment table
		Begin Transaction

			Insert into Reins_comment (Object_Type,	Object_Id,	Object_Comment,	Created_Date_Time,	Created_By)
			Values ('Header_Transaction', @Claim_Expense_Id, 'System initiated Rollback as per business request', getdate(), System_user)
		
		Commit Transaction

		select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
	End
	
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRANSACTION;
	THROW;
END CATCH

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Snapshot_T2_Report]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Nimesh Shah
-- Create date: 31/10/2018
-- Description:	This is a simple proc to snapshot T2 Finance Report into a table every month so that the movements can be calculated. 
--This will be called from the MS Acces frontend when the business generates the T2 report
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reins_Snapshot_T2_Report]
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	Begin Try
		Begin Transaction
		--Insert into T2 Report_Hist table to capture a snapshot of T2 report evey month, along with the snapshot time (insert time)
			Insert into Reins_GL_T2_Report_Hist
			Select ID,
			Month_Effective_Date,
			GL_Business_Unit_Id,
			GL_Journal_Id,
			GL_Journal_Date,
			GL_Journal_Line,
			GL_Ledger_Code,
			GL_Account_Id,
			GL_Department_Id,
			GL_Product_Id,
			GL_Project_Id,
			GL_Affiliate_Id,
			GL_Currency_Code,
			GL_Monetary_Amount,
			GL_Posting_Ref_1,
			GL_Journal_Line_Desc,
			Status_Ref_1,
			Source_System_Ref_1,
			Source_System_Ref_2,
			GL_Posting_Ref_2,
			Status_Ref_2,
			GL_Posting_Date,
			[User_Id],
			Source_System_Narrative_1,
			GL_Foreign_Currency_Code,
			GL_Foreign_Amount,
			Policy_Number,
			Paid_From_Date,
			Paid_To_Date,
			Assessed,
			Recoverable_This_Month,
			Recoverable_Prior_Months,
			Recoverable_Prior_Borderaux,
			Outstanding_Accrual,
			Layer_0_Reins_Claim_Amount,
			Layer_0_Reins_Percent,
			Layer_1_Reins_Claim_Amount,
			Layer_1_Reins_Percent,
			Layer_1_Treaty_Name,
			Layer_2_Reins_Claim_Amount,
			Layer_2_Reins_Percent,
			Residual,
			Reins_Benefit_Type,
			Benefit_Type,
			Layer_0_Rule,
			Layer_1_Treaty_Rule,
			Layer_2_Treaty_Rule,
			Reason_Code,
			Reason_Desc,
			getdate() as snapshot_time
			 from vw_GL_Report_T2

			set @InsertRowCount = @InsertRowCount + @@Rowcount 

		Commit

			SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
    
END


GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_U2_Claims_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[usp_Reins_U2_Claims_Enrich]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @EDW_Contract_Key Numeric(10,0)
	DECLARE @Transaction_Process_date datetime
	DECLARE @Trans_Ref_Key_2 varchar (20)
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @Implicit_Benefit_Type_Code varchar(20)
	DECLARE @Reins_Benefit_Category varchar(20)

	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	
	

	CREATE table #Get_Policy_list (
			EDW_Contract_Key  Numeric (10,0),
			Transaction_Process_date datetime,
			trans_ref_key_2 varchar (20),
			IMPLICIT_BENEFIT_TYPE_CODE varchar (20),
			Reins_Benefit_Category varchar(20)
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			(EDW_Contract_Key,
			Transaction_Process_date ,
			trans_ref_key_2 ,
			IMPLICIT_BENEFIT_TYPE_CODE)
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date, B.trans_ref_key_2, A.[IMPLICIT_BENEFIT_TYPE_CODE]
			From dbo.Reins_Claim_Expense_Trnx A, [dbo].[Reins_Mercury_Trnx] B 
			WHERE A.Source_trnx_id = B.Mercury_trnx_id
			and A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'')
			and A.product_system_code = ''U2'''
			

	

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2,
	@Implicit_Benefit_Type_Code,
	@Reins_Benefit_Category
	
	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 

		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
				where EDW_Contract_Key = @EDW_Contract_Key
				and EDW_Product_Option_Code = @Implicit_Benefit_Type_Code
				and EDW_Product_System_Code = 'U2'
				and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
				and Row_End_Date = '3000-12-31'
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
			Update Reins_Claim_Expense_Trnx
			SET
				[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
				[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
				[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
				[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
				[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
				[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
				Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
				Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
				[Claim_enrichment_rule] = 'CE_U2_Pol_Ben',
			--	Updated_by = System_user,
				Updated_by = ORIGINAL_LOGIN(),
				Updated_date_time = getdate()
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'U2'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'U2'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]


			Set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

			
			COMMIT Transaction
	
		End

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2	,
	@Implicit_Benefit_Type_Code,
	@Reins_Benefit_Category

	End
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	set @sqlstatement = 
			'insert into #Get_Policy_list
			(EDW_Contract_Key,
			Transaction_Process_date ,
			trans_ref_key_2 ,
			Reins_Benefit_Category)
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date, B.trans_ref_key_2, A.[Reins_Benefit_Category]
			From dbo.Reins_Claim_Expense_Trnx A, [dbo].[Reins_Mercury_Trnx] B 
			WHERE A.Source_trnx_id = B.Mercury_trnx_id
			and A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'')
			and A.product_system_code = ''U2'''
			

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2,
	@Implicit_Benefit_Type_Code,
	@Reins_Benefit_Category

	WHILE @@FETCH_STATUS = 0  
	BEGIN 

		If @Trans_Ref_Key_2 = 'CLM'
			Begin
				Select @NumRows = count(*) from dbo.Reins_Claim_Listing
				where EDW_Contract_Key = @EDW_Contract_Key
				and Reins_benefit_type = @Reins_Benefit_Category
				and EDW_Product_system_code = 'U2'
				and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
				and Row_End_Date = '3000-12-31'
			END
		If @Trans_Ref_Key_2 <> 'CLM'
			Begin
				Select @NumRows = count(*) from dbo.Reins_Claim_Listing
				where EDW_Contract_Key = @EDW_Contract_Key
				and Reins_benefit_type = @Reins_Benefit_Category
				and EDW_Product_system_code = 'U2'
				and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
				and Row_End_Date = '3000-12-31'
			END

		

		If @NumRows = 1
		Begin

			Begin Transaction
						
			Update Reins_Claim_Expense_Trnx
			SET
				[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
				[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
				[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
				[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
				[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
				[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
				Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
				Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
				[Claim_enrichment_rule] = 'CE_U2_Pol',
				Updated_by = ORIGINAL_LOGIN(),
				Updated_date_time = getdate()
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'U2'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'U2'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

			Set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2		,
	@Implicit_Benefit_Type_Code ,
	@Reins_Benefit_Category
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process
	
	--Excluded products in the Reins Treaty but included in GL Product

	set @sqlstatement = 
			'insert into #Get_Policy_list
			(EDW_Contract_Key,
			Transaction_Process_date ,
			Reins_Benefit_Category)
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date, A.[Reins_Benefit_Category]
			From dbo.Reins_Claim_Expense_Trnx A
			WHERE A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'')
			and A.product_system_code = ''U2'''
			

	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2,
	@Implicit_Benefit_Type_Code,
	@Reins_Benefit_Category

	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		
			Select @NumRows = count(*) from dbo.Reins_Claim_Listing
			where EDW_Contract_Key = @EDW_Contract_Key
			and Case when benefit_type in ('Death', 'Total Permanent Disability') Then 'LS' 
			When benefit_type = 'Income Protection' Then 'IP' else 'Unknown' END    = @Reins_Benefit_Category
			and EDW_Product_system_code = 'U2'
			and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
			and Row_End_Date = '3000-12-31'
		

		

		

		If @NumRows = 1
		Begin

			Begin Transaction
						
			Update Reins_Claim_Expense_Trnx
			SET
				[Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
				[Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
				[Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
				[Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
				[Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
				[Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
				Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
				Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
				[Claim_enrichment_rule] = 'CE_U2_Pol',
				Updated_by = ORIGINAL_LOGIN(),
				Updated_date_time = getdate()
			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'U2'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'U2'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = Case when benefit_type in ('Death', 'Total Permanent Disability') Then 'LS' 
																				   When benefit_type = 'Income Protection' Then 'IP' else 'Unknown' END
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category]= @Reins_Benefit_Category

			Set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date,
	@Trans_Ref_Key_2		,
	@Implicit_Benefit_Type_Code ,
	@Reins_Benefit_Category
	
	END

	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END






























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_U2_EDW_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[usp_Reins_U2_EDW_Enrich]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	DECLARE @Claim_Reference_Id varchar (20)
	DECLARE @Transaction_Process_Date	date
	DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_trnx_Id varchar (20) 
	DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @Contract_key int
	DECLARE @Event_Number varchar (20)
	DECLARE @Trans_Ref_Key_2 varchar (10)
	DECLARE @Contract_id varchar (20)
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			Claim_Reference_id varchar(20),
			Transaction_Process_Date datetime , 
			Claim_Expense_Id INT ,
			Source_trnx_id varchar(20),
			Transaction_Amount Numeric (15,2),
			Contract_Key INT,
			Trans_Ref_Key_2 varchar (10)
			)
	CREATE table #Get_EDW_Data (
			Contract_key  INT, 
			Event_Number varchar (40),
			Cheque_Id int,
			--Eftv_Date datetime , 
			PAY_DATE_FROM datetime ,
			PAY_DATE_TO datetime,
			Claim_Insurance_Amt Decimal (20,3) ,
			CLaim_Pay_Amt Decimal (20,3),
			Claim_Tax_Amt Decimal (20,3),
			Product_Option_Code varchar (5),
			Confirm_Date datetime,
			Source_trnx_id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT dbo.Reins_Claim_Expense.POLICY_Number, 
							EXPENSETABLE.Claim_Reference_Id,
							EXPENSETABLE.Transaction_Process_Date,
							dbo.Reins_Claim_Expense.Claim_Expense_id, 
							EXPENSETABLE.Source_trnx_Id,
							EXPENSETABLE.Transaction_Amount,
							EXPENSETABLE.EDW_Contract_Key,     
							dbo.[Reins_Mercury_Trnx].Trans_Ref_Key_2
			FROM dbo.Reins_Claim_Expense INNER JOIN dbo.Reins_Claim_Expense_Trnx AS EXPENSETABLE 
			ON (EXPENSETABLE.Claim_Expense_Id = dbo.Reins_Claim_Expense.Claim_Expense_Id)  
			INNER JOIN dbo.[Reins_Mercury_Trnx]
			ON EXPENSETABLE.Source_trnx_ID = dbo.[Reins_Mercury_Trnx].Mercury_trnx_Id
			WHERE (
			--((EXPENSETABLE.Target_Benefit_Code) Is Not Null) AND
			((dbo.Reins_Claim_Expense.Claim_Expense_Type) = ''Expense'') 
			AND ((EXPENSETABLE.Transaction_Type) in (''EXPENSE'', ''Expense reversal'')) 
			AND ((EXPENSETABLE.PAY_FROM_TO_RULE) Is Null) 
			AND dbo.Reins_Claim_Expense.Product_System_Code = ''U2''
						
			)  '

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction

	--PRINT 'Policy List sql executed'
	--Update #Get_Policy_list
	--SET Contract_Key = B.Contract_key
	--FROM #Get_Policy_list A, [STG].[Stg_EDW_Contract] B
	--where A.Policy_number = B.DISPLAY_CONTRACT_ID
	

	DECLARE Claim_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Claim_List_To_Process
	
	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	@Claim_Reference_Id ,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_trnx_Id,
	@Transaction_Amount,
	@Contract_key,
	@Trans_Ref_Key_2

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		
		--Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--where DISPLAY_CONTRACT_ID = @Policy_Number

		--If @Contract_key is null
		--Begin
		--	Select @Contract_key = Contract_key from [STG].[Stg_EDW_Contract]
		--	where CONTRACT_ID = @Policy_Number
		--End
		--Print 'Staging Executed'
		
		
			If @Trans_Ref_Key_2 = 'CLM'
				Begin
		--Print @Transaction_Process_Date
				Begin Transaction
				
				--PRINT @Transaction_Process_Date
					set @sql = 'SELECT CONT.CONTRACT_KEY ,
									  CE.EVENT_NUM,
									  CED.CHEQUE_ID ,
									  CXR.PAY_FROM_DATE,
									  CXR.PAY_TO_DATE,
									  CE.CLAIM_INSURANCE_AMT ,
									  CE.CLAIM_PAY_AMT ,
									  CE.CLAIM_TAX_AMT,
									  PO.PRODUCT_OPTION_CODE,
									  CED.CONFIRM_DATE,
									  Cast(Null as varchar(20)) as Source_trnx_id
								  
								FROM dw_contract CONT ,
									  DW_CLAIM_EVENT CE ,
									  DW_CLAIM_EVENT_DISBURS CED ,
									  DW_CLAIM_EVENT_XREF CXR,
									  dw_product_option PO
									WHERE CONT.CONTRACT_KEY    = CE.CONTRACT_KEY
									AND CONT.CONTRACT_KEY      = CED.CONTRACT_KEY
									AND CE.EVENT_NUM           = CED.EVENT_NUM
									AND CXR.CONTRACT_KEY       = CONT.CONTRACT_KEY
									AND CXR.EVENT_NUM          = CE.EVENT_NUM
									AND CXR.product_option_key = PO.product_option_key '
							
								
							
					Set @Event_Number = concat('CLM', @CLaim_Reference_Id)
					Set @Contract_Id = concat('M', @Policy_NUmber)
				
					Set @sql = Concat(@sql, 'AND CE.EVENT_NUM = ''',@Event_Number, ''' AND CONT.contract_id = ''',@Contract_Id, '''')
				
											
					--PRINT @sql
				
					Insert into #Get_EDW_Data (
							Contract_key   ,
							Event_Number  ,
							Cheque_Id ,
							PAY_DATE_FROM  ,
							PAY_DATE_TO ,
							Claim_Insurance_Amt  ,
							CLaim_Pay_Amt ,
							Claim_Tax_Amt ,
							Product_Option_Code ,
							Confirm_Date,
							Source_trnx_id 
							)

					exec Utility.dbo.usp_queryedw @sql
				
					--PRINT 'EDW Data Inserted into Temp Table'
				
					Update #Get_EDW_Data 
					Set Source_trnx_id = @Source_trnx_id	
				
					--Print'EDW Data updated with Policy Number'
					--Print @policy_number
					--Print @Claim_Expense_Item_id
					--Select * from #Get_EDW_Data
					--print @t.EFTV_Date
					--Print @Claim_Expense_Item_id  
					--Select * from   #Get_EDW_Data 
					Update dbo.Reins_Claim_Expense_Trnx
					set dbo.Reins_Claim_Expense_Trnx.PAY_DATE_FROM = T2.Pay_Date_From,
						dbo.Reins_Claim_Expense_Trnx.PAY_DATE_TO = T2.Pay_Date_To,
						dbo.Reins_Claim_Expense_Trnx.Pay_From_To_EDW_Event_Num = T2.Event_Number,
						dbo.Reins_Claim_Expense_trnx.PAY_FROM_TO_RULE = 'EDW_Pay_Rec',
						dbo.Reins_Claim_Expense_trnx.Cheque_id = T2.Cheque_Id,
						dbo.Reins_Claim_Expense_trnx.Product_Option_Code = T2.Product_Option_Code,
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid = 'Y',
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid_Date = T2.Confirm_Date,
						Updated_By = SYSTEM_USER,
						Updated_date_time = getdate()

					from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as T2
					where  T1.Source_trnx_id = T2.Source_trnx_id
					
					set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
				
					Update dbo.Reins_Claim_Expense
					Set Claim_expense_status = 'CLOSED',
						Claim_Expense_Type = 'EXPENSE-PAID',
						Settlement_date = @Transaction_Process_Date,
						Updated_By = System_user,
						Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense T1, dbo.Reins_Claim_Expense_Trnx as T2, #Get_EDW_Data as T3
					where  T1.[Claim_Expense_id] = T2.[Claim_Expense_id]
							and T2.Source_Trnx_Id = T3.Source_Trnx_Id
							and T1.Claim_Expense_id = @Claim_Expense_Id
							
					set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
			
					--Print 'Updating Payment table completed'
			Commit Transaction

		END
			
			If @Trans_Ref_Key_2 = 'JNM'
			Begin
				--Set @Contract_Id = concat('M', @Policy_NUmber)
				--Print @contract_id
				Begin Transaction
					set @sql = 'Select Contract_Key, Event_Num, Confirm_date, Cast(Null as varchar(20)) as Claim_Expense_Item_id
								From DW_CONTRACT_EVENT_TRNX
								Where contract_key = '
					set @sql = concat(@sql, @Contract_key, ' and process_date = to_date(''',@Transaction_Process_Date,''', ''YYYY/MM/DD'') and EVENT_NUM like ''JNM%''')
					--Print @sql
					Insert into #Get_EDW_Data (
							Contract_key   ,
							Event_Number  ,
							Confirm_date,
							--Product_Option_Code ,
							SOurce_trnx_id 
							)

					exec Utility.dbo.usp_queryedw @sql
				
					--PRINT 'EDW Data Inserted into Temp Table'
				
					Update #Get_EDW_Data 
					Set Source_trnx_id = @Source_trnx_id	

					Update dbo.Reins_Claim_Expense_Trnx
					set Pay_From_To_EDW_Event_Num = EDW.Event_Number,
						--Product_option_code = EDW.Product_Option_code, Do not return the JNM product option code as it represents the case account
						PAY_FROM_TO_RULE = 'EDW_Pay_Rec',
						Assumed_Paid = 'Y',
						Assumed_Paid_date = EDW.Confirm_date,
						Updated_By = SYSTEM_USER,
						Updated_date_time = getdate()
					from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as EDW
					where  T1.Source_Trnx_id = EDW.Source_trnx_id
					
					set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

					Update dbo.Reins_Claim_Expense
					Set Claim_expense_status = 'CLOSED',
						Claim_Expense_Type = 'EXPENSE-PAID',
						Settlement_date = @Transaction_Process_Date,
						Updated_By = System_user,
						Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense T1, dbo.Reins_Claim_Expense_Trnx as T2, #Get_EDW_Data as T3
					where  T1.[Claim_Expense_id] = T2.[Claim_Expense_id]
							and T2.Source_Trnx_Id = T3.Source_Trnx_Id
							and T1.Claim_Expense_id = @Claim_Expense_Id
					
					set @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
										
				Commit Transaction
			END								
								;
			



				--Select @check = Contract_key from @t group by Contract_key
		Truncate table #Get_EDW_Data
				

	FETCH NEXT FROM Claim_List_To_Process into 
	@Policy_Number,
	@Claim_Reference_Id ,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_trnx_Id,
	@Transaction_Amount,
	@Contract_key,
	@Trans_Ref_Key_2
	
	END
	CLOSE Claim_List_To_Process
	Deallocate Claim_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END

































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_U2_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE  [dbo].[usp_Reins_U2_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
--DECLARE @Source_Claim_Number	varchar(20)
DECLARE @CLIENT_REF_ID_4 varchar(50)
DECLARE @Claim_reference_Id varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
--DECLARE @SORTKEY	int
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @Month_Effective_Date Datetime
DECLARE @EDW_Contract_Key Numeric(10,0)

DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0

--DECLARE @TMP_ADMIN_SYSTEM_FILE_ID   int
--DECLARE @TMP_FILE_REC_NUM			int

DECLARE @Claim_Expense_Id	varchar(20)
--DECLARE @BENEFIT_CATEGORY varchar(20)
DECLARE @NEWClaimExpId int


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Policy_number  VARCHAR(50), 
			CLIENT_REF_ID_4  VARCHAR(50),
			EDW_Contract_key Numeric(10,0),
			Claim_reference_Id  varchar(50),
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			Month_effective_Date datetime
)


declare @sqlstatement nvarchar(4000)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].CLIENT_REF_ID_4, 
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_key,
			[dbo].[Reins_Mercury_Trnx].Claim_Reference_Id, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].Month_Effective_Date

		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
			Product_System_Code = ''U2'' 
			AND Exclude_flag = ''N''
			AND 
			(
				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
				
			)'

--PRINT @sqlstatement;

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')
	--PRINT @sqlstatement;

exec(@sqlstatement)



DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4,5
		
	

OPEN TXN_LIST_TO_PROCESS


FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Policy_number ,
	@CLIENT_REF_ID_4 ,
	@EDW_Contract_Key,
	@Claim_reference_Id,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@Transaction_Type,
	@Month_Effective_Date
	

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
	

		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
		(-- Criteria from outer loop
			Policy_number			= @Policy_number
		AND CLIENT_REF_ID_4		= @CLIENT_REF_ID_4
		AND Transaction_Process_Date		= @Transaction_Process_Date
		AND Movement_Effective_Date		= @Movement_Effective_Date	
		AND Transaction_Type	= @Transaction_Type
		--AND Claim_reference_Id = @Claim_reference_Id
		-- And it has not been consumed yet
		AND [dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null
		
		)

		--PRINT  @SumOfLEDGER_MVMT_AMT;

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
			begin

				select @Transaction_Type = 'SKIP'

			end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 
		-- For U2 it as been advised that all the expenses and expense reversals should be assumed as PAID. 
		-- So the status will be marked to CLOSED straightaway and the transaction type will be marked as EXPENSE PAID	
		
		IF  @Transaction_Type = 'Expense Reversal'   
			BEGIN
				BEGIN TRANSACTION
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id
					)
					Values(
						@Month_Effective_Date,
						@Policy_number ,
						'U2',
						@EDW_Contract_key,
						@Transaction_Process_Date	,
						@Transaction_Process_Date,
						'EXPENSE-REVERSED',
						'CLOSED',
						@SumOfLEDGER_MVMT_AMT,
						Getdate(),
						--System_User,
						ORIGINAL_LOGIN(),
						-102
					
					)
				
					set @InsertRowCount = @InsertRowCount + @@Rowcount	

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_by = ORIGINAL_LOGIN(),
					Updated_date_time = getdate()
					WHERE 
						(
						Policy_number=@Policy_number
					AND CLIENT_REF_ID_4=@CLIENT_REF_ID_4
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					--AND Claim_reference_Id = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					AND PRODUCT_SYSTEM_CODE = 'U2'
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					'U2',
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					NULL, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
					getdate(),
					ORIGINAL_LOGIN(),
					-102
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND CLIENT_REF_ID_4=@CLIENT_REF_ID_4
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId

					set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

   
				--PRINT @Transaction_Type;

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_effective_Date,
						Policy_number, 
						Product_System_Code,
						EDW_Contract_Key,
						Expense_date,
						SETTLEMENT_DATE, 
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

						--, Movement_Effective_Date
						)
					Values(
					@Month_Effective_Date,
					@Policy_number ,
					'U2',
					@EDW_Contract_key,
					@Transaction_Process_Date	,
					NULL,
					'Expense',
					'OPEN',
					@SumOfLEDGER_MVMT_AMT,
					Getdate(),
					ORIGINAL_LOGIN(),
					-102
					)
					--PRINT N'iNSERT cOMPLETED';
					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]
					--PRINT @NEWClaimExpId;
					-- Mark Records as done

					set @InsertRowCount = @InsertRowCount + @@Rowcount

					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId
					WHERE 
						(
						Policy_number=@Policy_number
					AND CLIENT_REF_ID_4=@CLIENT_REF_ID_4
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					--AND Claim_reference_Id = @Claim_reference_Id
					AND [Claim_Expense_Id] is null
					)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
					Source_Trnx_Id,
					[Claim_Expense_Id],
					[Transaction_Type],
					[PRODUCT_SYSTEM_CODE],
					[Policy_number],
					[Month_Effective_date],
					[Claim_Reference_Id],
					[GL_Account_Id],
					[GL_Product_Code],
					[EDW_Contract_Key],
					EDW_Policy_Number,
					EDW_Contract_Id,
					EDW_Product_Key,
					EDW_Product_Code,
					EDW_Class_Of_Business,
					[Source_Claim_Number],
					[Transaction_Amount],
					[Transaction_Effective_date],
					[Transaction_Process_Date],
					[IMPLICIT_BENEFIT_TYPE_CODE],
					[Reins_Benefit_Category],
					[Created_Date_Time],
					Created_By,
					Process_Log_ID

						
					)
					SELECT 
					[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
					@NEWClaimExpId,
					[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
					'U2',
					[dbo].[Reins_Mercury_Trnx].Policy_number,
					[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
					[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
					[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
					[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
					[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
					[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
					[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
					[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
					NULL, 
					[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
					[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
					[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
					[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
					[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
					getdate(),
					ORIGINAL_LOGIN(),
					-102
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND CLIENT_REF_ID_4=@CLIENT_REF_ID_4
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					--AND Claim_reference_Id = @Claim_reference_Id
					AND [Claim_Expense_Id] =@NEWClaimExpId

					set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		
	
		
	
		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
			@Policy_number ,
			@CLIENT_REF_ID_4 ,
			@EDW_Contract_Key,
			@Claim_reference_Id,
			@Transaction_Process_Date	,
			@Movement_Effective_Date	,
			@Transaction_Type,
			@Month_Effective_Date
		
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END;  

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END



























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Ultimate_Claims_Enrich_Rule1]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[usp_Reins_Ultimate_Claims_Enrich_Rule1]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @EDW_Contract_Key Numeric(10,0)
	DECLARE @Transaction_Process_date datetime
	DECLARE @NumRows int
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	

	CREATE table #Get_Policy_list (
			EDW_Contract_Key Numeric(10,0),
			Transaction_Process_date datetime,
			)
	

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT A.EDW_Contract_Key, A.Transaction_Process_date
			From dbo.Reins_Claim_Expense_Trnx A, dbo.Reins_Claim_Expense B
			WHERE A.Claim_expense_id = B.Claim_expense_id
			and A.Claim_Enrichment_rule is null and A.Transaction_type in (''Expense'', ''Expense reversal'')
			and A.product_system_code = ''CP''
			--and B.Claim_Expense_Status != ''IGNORE''
			'
			
			
	exec(@sqlstatement);

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date

	
	WHILE @@FETCH_STATUS = 0  
	BEGIN 
		Select @NumRows = count(*) from dbo.Reins_Claim_Listing
		where EDW_Contract_Key = @EDW_Contract_Key
		and EDW_Product_system_code = 'CP'
		and @Transaction_Process_date Between Claim_Notify_date and ISNULL(Claim_Finalised_Date+14, cast('2899-12-31' as datetime))
		and Row_End_Date = '3000-12-31'
	
				

		If @NumRows = 1
		Begin

			Begin Transaction
						
			UPDATE dbo.Reins_Claim_Expense_Trnx
			SET
				 [Product_Option_Code] = dbo.Reins_Claim_Listing.[EDW_Product_Option_Code] ,
				 [Claim_Number] = dbo.Reins_Claim_Listing.[Claim_Number],
				 [Layer_0_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_0_Reins_Percent],
				 [Layer_1_Reins_Percent] = dbo.Reins_Claim_Listing.[Layer_1_Reins_Percent],
				 [Layer_1_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_1_Treaty_Id],
				 [Layer_2_Treaty_Id] = dbo.Reins_Claim_Listing.[Layer_2_Treaty_Id], 
				 Claim_Source_id = dbo.Reins_Claim_Listing.Claim_Source_id ,
				 Layer_2_Reins_Percent = dbo.Reins_Claim_Listing.Layer_2_Reins_Percent,
				 [Claim_enrichment_rule] = 'CE_CP_Pol',
				 --Updated_by = SYstem_user,
				 Updated_by = ORIGINAL_LOGIN(),
				 Updated_date_time = getdate()

			FROM dbo.Reins_Claim_Expense_Trnx ,
				 dbo.Reins_Claim_Listing
			Where dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = dbo.Reins_Claim_Listing.EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.EDW_Contract_Key = @EDW_Contract_Key
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_type in ('Expense', 'Expense reversal')
				  AND dbo.Reins_Claim_Expense_Trnx.Claim_Enrichment_rule is null
				  AND dbo.Reins_Claim_Expense_Trnx.Product_System_Code = 'CP'
				  AND Reins_Claim_Listing.EDW_Product_System_Code = 'CP'
				  AND dbo.Reins_Claim_Expense_Trnx.Transaction_Process_date between dbo.Reins_Claim_Listing.Claim_Notify_date and ISNULL(dbo.Reins_Claim_Listing.Claim_Finalised_Date+14, cast('2899-12-31' as date))
				  AND dbo.Reins_Claim_Listing.Row_End_Date = '3000-12-31'
				  AND dbo.Reins_Claim_Expense_Trnx.[Reins_Benefit_Category] = dbo.Reins_Claim_Listing.[Reins_Benefit_Type]

				set @UpdateRowCount = @UpdateRowCount + @@Rowcount
			
			COMMIT Transaction
	
		End
		

	FETCH NEXT FROM Policy_List_To_Process into 
	@EDW_Contract_Key,
	@Transaction_Process_date

	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END






























GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Ultimate_DMSA_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
  
 
CREATE procedure [dbo].[usp_Reins_Ultimate_DMSA_Enrich]



AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	--DECLARE @Transaction_Effective_Date date
	DECLARE @Transaction_Process_Date	date
	--DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_Trnx_Id varchar (20) 
	--DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @Contract_key int
	--DECLARE @Event_Number varchar (40)
	--DECLARE @Trans_Ref_Key_1 varchar (10)
	--DECLARE @Trans_Ref_Key_2 varchar (10)
	--DECLARE @Contract_id varchar (20)
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Source_Trnx_Id varchar(20)
			)
	CREATE table #Get_DMSA_Data (
			Policy_Number VARCHAR(50), 
			Journal_Id varchar(50),
			Journal_Date datetime,
			Source_Trnx_Id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT trn.Policy_number, 
							trn.EDW_Contract_Key,
							trn.Transaction_Process_date,
							trn.Source_trnx_id
							
			from Reins_Claim_Expense_Trnx Trn, Reins_Claim_Expense par
			where par.Claim_Expense_Id = trn.Claim_Expense_Id
			and trn.Product_System_Code = ''CP''
			and par.claim_expense_status = ''OPEN''
			and trn.Transaction_type = ''Expense''
			and trn.Policy_number is not null
			--and trn.Policy_number = ''V5155195-V''
						
			  '

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction
	
	
	

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	

	
	WHILE @@FETCH_STATUS = 0  
	
	--NS-09-032021 - Modifeid the DMSA lookup query below to include a hint to improve performance
	Begin
		Begin Transaction
				
				set @sql = Concat('SELECT /*+ full(gla) full(glj) full(cal) */ GLJ.Policy, GLJ.Journal_id, GLJ.Journal_date 
									FROM    DMSASCHEMA.DMSA_GL_JOURNAL_TRNX  GLJ , 
												DMSCHEMA.DM_ACCOUNT GLA, 
												DM_CALENDAR CAL 
									where 
												GLJ.ACCOUNT_SK = GLA.ACCOUNT_SK 
												and GLA.ACCOUNT_CODE between ''213403'' and ''213425'' 
												and GLJ.DESCRIPTION = ''AP Transactions'' 
												AND CAL.DATE_VALUE >= to_date(''', @Transaction_Process_Date,''',','''YYYY-MM-DD'')', 
												' AND CAL.DATE_VALUE <= sysdate 
												and CAL.CALENDAR_SK = GLJ.JOURNAL_DATE_SK 
												and policy = ''',@Policy_Number,'''' )
								
					
								
					--print @sql						
				
				
					Insert into #Get_DMSA_Data (
							Policy_Number,
							Journal_Id,
							Journal_Date
							)

					exec Utility.dbo.usp_QueryDM02PRDM @sql
				
					--PRINT 'EDW Data Inserted into Temp Table'
				
					Update #Get_DMSA_Data 
					Set Source_Trnx_Id = @Source_Trnx_Id	
				
				--Select * from 	#Get_DMSA_Data
					
					Update dbo.Reins_Claim_Expense_Trnx
					set dbo.Reins_Claim_Expense_trnx.Assumed_Paid = 'Y',
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid_Date = T2.Journal_Date,
						dbo.Reins_Claim_Expense_trnx.Cheque_Id = T2.Journal_Id,
						dbo.Reins_Claim_Expense_trnx.Updated_by = System_user,
						dbo.Reins_Claim_Expense_trnx.Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense_Trnx as T1, #Get_DMSA_Data as T2
					where  T1.Source_Trnx_Id = T2.Source_Trnx_Id
							and T2.Journal_Id is not null
							and T2.Journal_Date is not null
					
					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					Update dbo.Reins_Claim_Expense
					Set Claim_expense_status = 'CLOSED',
						Claim_Expense_Type = 'EXPENSE-PAID',
						Settlement_date = @Transaction_Process_Date,
						Updated_By = System_user,
						Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense T1, dbo.Reins_Claim_Expense_Trnx as T2, #Get_DMSA_Data as T3
					where  T1.[Claim_Expense_id] = T2.[Claim_Expense_id]
							and T2.Source_Trnx_Id = T3.Source_Trnx_Id
							and T3.Journal_Id is not null
							and T3.Journal_Date is not null

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount				
				 
											
			Commit Transaction

	
	
		Truncate table #Get_DMSA_Data
				

	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Process_Date,
	@Source_Trnx_Id
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END





































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Ultimate_EDW_Enrich]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[usp_Reins_Ultimate_EDW_Enrich]


AS

BEGIN
	SET NOCOUNT ON
	
	DECLARE @Policy_Number varchar(20)
	DECLARE @Transaction_Effective_Date date
	DECLARE @Transaction_Process_Date	date
	DECLARE @Claim_Expense_Id	varchar(20)
	DECLARE @Source_Trnx_Id varchar (20) 
	DECLARE @Transaction_Amount Numeric(15,2)
	DECLARE @Contract_key int
	DECLARE @Event_Number varchar (40)
	DECLARE @Trans_Ref_Key_1 varchar (10)
	DECLARE @Trans_Ref_Key_2 varchar (10)
	DECLARE @Contract_id varchar (20)
	DECLARE @sql varchar(4000)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0

	--DECLARE @t table (
	--		Contract_key  INT, 
	--		Eftv_Date datetime , 
	--		PAY_DATE_FROM datetime ,
	--		PAY_DATE_TO datetime,
	--		Policy_number varchar(20)
	--		)

	CREATE table #Get_Policy_list (
			Policy_number  VARCHAR(50), 
			Contract_Key Int,
			Transaction_Effective_Date datetime,
			Transaction_Process_Date datetime , 
			Claim_Expense_Id INT ,
			Source_Trnx_Id varchar (20),
			Transaction_Amount Numeric (15,2),
			Trans_Ref_Key_1 varchar (10),
			Trans_Ref_Key_2 varchar (10)
			)
	CREATE table #Get_EDW_Data (
			Source_Trnx_Type_Code  varchar(150), 
			Source_Trnx_Code varchar (10),
			Source_Trnx_Sub_Type varchar(100),
			Event_Num varchar (40),
			Process_Date date,
			trnx_Amt money,
			Trnx_Num int,
			Source_Trnx_Id varchar(20)
			)

	declare @sqlstatement nvarchar(4000)

	set @sqlstatement = 
			'insert into #Get_Policy_list
			SELECT DISTINCT dbo.Reins_Claim_Expense.POLICY_Number, 
							dbo.Reins_Claim_Expense.EDW_Contract_Key,
							EXPENSETABLE.Transaction_Effective_Date,
							EXPENSETABLE.Transaction_Process_Date,
							dbo.Reins_Claim_Expense.Claim_Expense_id, 
							EXPENSETABLE.Source_Trnx_Id,
							EXPENSETABLE.Transaction_Amount,
							dbo.[Reins_Mercury_Trnx].Trans_Ref_Key_1,
							dbo.[Reins_Mercury_Trnx].Trans_Ref_Key_2
			FROM dbo.Reins_Claim_Expense INNER JOIN dbo.Reins_Claim_Expense_Trnx AS EXPENSETABLE 
			ON (EXPENSETABLE.Claim_Expense_Id = dbo.Reins_Claim_Expense.Claim_Expense_Id)  
			INNER JOIN dbo.[Reins_Mercury_Trnx]
			ON EXPENSETABLE.Source_Trnx_Id = dbo.[Reins_Mercury_Trnx].Mercury_Trnx_Id
			WHERE (
			dbo.Reins_Claim_Expense.Claim_Expense_Status = ''OPEN''
			AND EXPENSETABLE.Transaction_Type = ''EXPENSE''
			AND dbo.Reins_Claim_Expense.Product_System_Code = ''CP''
			--AND EXPENSETABLE.Policy_number = ''NT0022109Y''
						
			)  '

	--PRINT @sqlstatement;
	Begin Transaction
	exec(@sqlstatement);
	COMMIT Transaction
	
	--Select * from #Get_Policy_list
	--PRINT 'Policy List sql executed'
	--Update #Get_Policy_list
	--SET Contract_Key = B.Contract_key
	--FROM #Get_Policy_list A, [STG].[Stg_EDW_Contract] B
	--where A.Policy_number = B.DISPLAY_CONTRACT_ID
	

	DECLARE Policy_List_To_Process  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
	Select * from #Get_Policy_list 

	OPEN Policy_List_To_Process
	
	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Effective_Date ,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_Trnx_Id,
	@Transaction_Amount,
	@Trans_Ref_Key_1,
	@Trans_Ref_Key_2

	
	WHILE @@FETCH_STATUS = 0  
	
	BEGIN 
	--Print 'Inside 1st Begin'
		
		
		
		
			If @Trans_Ref_Key_1 = 'CLM' and @Trans_Ref_Key_2 in ('TIB', 'NOT')
				Begin
		--Print 'Inside 2nd Begin'
				Begin Transaction
				--Print 'Inside Begin Trnx'
				--PRINT @Transaction_Process_Date
				If @Contract_key is null
					Begin
					Set @Contract_key = -999
					END

					set @sql = 'select dw_trnx_type.SOURCE_TRNX_TYPE_CODE, dw_trnx_type.source_trnx_code, dw_trnx_type.SOURCE_TRNX_SUB_TYPE, DW_CONTRACT_OPTION_TRNX.Event_Num, DW_CONTRACT_OPTION_TRNX.Process_Date,
								DW_CONTRACT_OPTION_TRNX.trnx_amt, DW_CONTRACT_OPTION_TRNX.Trnx_num, Cast(Null as INT) as Source_Trnx_Id
								From DW_CONTRACT_OPTION_TRNX , dw_trnx_type , dw_product_option
								where DW_CONTRACT_OPTION_TRNX.TRNX_TYPE_KEY = dw_trnx_type.trnx_type_key
								and DW_CONTRACT_OPTION_TRNX.product_option_key = dw_product_option.product_option_key
								and SOURCE_TRNX_TYPE_CODE like ''C%''
								and DW_CONTRACT_OPTION_TRNX.Contract_key = '
								
					set @sql = Concat(@sql, @Contract_key, ' order by DW_CONTRACT_OPTION_TRNX.eftv_date desc')
								
					--print @sql						
				
				
					Insert into #Get_EDW_Data (
							Source_Trnx_Type_Code  , 
							Source_Trnx_Code ,
							Source_Trnx_Sub_Type,
							Event_Num ,
							Process_Date ,
							trnx_Amt ,
							Trnx_Num ,
							Source_Trnx_Id 
							)

					exec Utility.dbo.usp_queryedw @sql
				
					--PRINT 'EDW Data Inserted into Temp Table'
				
					Update #Get_EDW_Data 
					Set Source_Trnx_Id = @Source_Trnx_Id	
					
					
					Update dbo.Reins_Claim_Expense_Trnx
					set dbo.Reins_Claim_Expense_Trnx.Pay_From_To_EDW_Event_Num = T2.Event_Num,
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid = 'Y',
						dbo.Reins_Claim_Expense_trnx.Assumed_Paid_Date = T2.Process_Date,
						dbo.Reins_Claim_Expense_trnx.Pay_from_to_rule = 'EDW_Pay_Rec',
						dbo.Reins_Claim_Expense_trnx.Updated_by = System_user,
						dbo.Reins_Claim_Expense_trnx.Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as T2
					where  T1.Source_Trnx_Id = T2.Source_Trnx_Id
					and T2.SOURCE_TRNX_TYPE_CODE in ('CLMSETCASH', 'CLMPAYCASH')
					and T2.Process_Date >= T1.Transaction_Effective_date
					and T2.Process_Date >= T1.Transaction_Process_Date
					and T2.trnx_Amt = -1* T1.Transaction_Amount

					Update dbo.Reins_Claim_Expense
					Set Claim_expense_status = 'CLOSED',
						Claim_Expense_Type = 'EXPENSE-PAID',
						Updated_By = System_user,
						Updated_Date_Time = getdate()
					from dbo.Reins_Claim_Expense T1, dbo.Reins_Claim_Expense_Trnx as T2, #Get_EDW_Data as T3
					where  T1.[Claim_Expense_id] = T2.[Claim_Expense_id]
							and T2.Source_Trnx_Id = T3.Source_Trnx_Id
							and T1.Claim_Expense_id = @Claim_Expense_Id
							and T3.Event_Num is not null
							and T3.SOURCE_TRNX_TYPE_CODE in ('CLMSETCASH', 'CLMPAYCASH')
							and T3.Process_Date >= T2.Transaction_Effective_date
							and T3.Process_Date >= T2.Transaction_Process_Date
							and T3.trnx_Amt = -1* T2.Transaction_Amount

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount				
				 
											
					Commit Transaction

		END
			
			--If @Trans_Ref_Key_2 = 'JNM'
			--Begin
			--	Set @Contract_Id = concat('M', @Policy_NUmber)
			--	Print @contract_id
			--	Begin Transaction
			--		set @sql = 'Select DW_CONTRACT_OPTION_TRNX.Contract_Key, DW_CONTRACT_OPTION_TRNX.Event_Num,  DW_PRODUCT_OPTION.product_option_code, Cast(Null as int) as Claim_Expense_Item_id
			--					From DW_CONTRACT_OPTION_TRNX , DW_PRODUCT_OPTION , DW_CONTRACT
			--					Where DW_CONTRACT_OPTION_TRNX.product_option_key = DW_PRODUCT_OPTION.product_option_key
			--					and DW_CONTRACT_OPTION_TRNX.contract_key = DW_Contract.Contract_key and dw_contract.contract_id = '''
			--		set @sql = concat(@sql, @Contract_Id, ''' and DW_CONTRACT_OPTION_TRNX.process_date = to_date(''',@Transaction_Process_Date,''', ''YYYY/MM/DD'') and DW_CONTRACT_OPTION_TRNX.EVENT_NUM like ''JNM%'' order by process_date desc')
			--		Print @sql
			--		Insert into #Get_EDW_Data (
			--				Contract_key   ,
			--				Event_Number  ,
			--				Product_Option_Code ,
			--				[Claim_Expense_Item_id] 
			--				)

			--		exec Utility.dbo.usp_queryedw @sql
				
			--		--PRINT 'EDW Data Inserted into Temp Table'
				
			--		Update #Get_EDW_Data 
			--		Set [Claim_Expense_Item_id] = @Claim_Expense_Item_id	

			--		Update dbo.Reins_Claim_Expense_Trnx
			--		set Pay_From_To_EDW_Event_Num = EDW.Event_Number,
			--			--Product_option_code = EDW.Product_Option_code, Do not return the JNM product option code as it represents the case account
			--			PAY_FROM_TO_RULE = '1 - Exact Match',
			--			Assumed_Paid = 'Y'
			--		from dbo.Reins_Claim_Expense_Trnx as T1, #Get_EDW_Data as EDW
			--		where  T1.[Claim_Expense_Item_id] = EDW.[Claim_Expense_Item_id]
								
			--	Commit Transaction
			--END								
			--					;
			



				--Select @check = Contract_key from @t group by Contract_key
		Truncate table #Get_EDW_Data
				

	FETCH NEXT FROM Policy_List_To_Process into 
	@Policy_Number,
	@Contract_key,
	@Transaction_Effective_Date ,
	@Transaction_Process_Date,
	@Claim_Expense_Id,
	@Source_Trnx_Id,
	@Transaction_Amount,
	@Trans_Ref_Key_1,
	@Trans_Ref_Key_2
	
	END
	CLOSE Policy_List_To_Process
	Deallocate Policy_List_To_Process

	SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END




































GO
/****** Object:  StoredProcedure [dbo].[usp_Reins_Ultimate_Identify_Payments]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE  [dbo].[usp_Reins_Ultimate_Identify_Payments]
	@InputPolicyNumber varchar(20) = NULL
AS

BEGIN
SET NOCOUNT ON

DECLARE @Policy_number varchar(20)
DECLARE @Transaction_Process_Date	datetime
DECLARE @Movement_Effective_Date	datetime
DECLARE @Transaction_Type	varchar(20)
DECLARE @SumOfLEDGER_MVMT_AMT	money
DECLARE @Claim_Expense_Id	varchar(20)
DECLARE @NEWClaimExpId int
declare @sqlstatement nvarchar(4000)
DECLARE @Month_Effective_Date datetime
DECLARE @EDW_Contract_Key int
DECLARE @File_Record_Number numeric (10,0)
DECLARE @DeleteRowCount Int = 0
DECLARE @InsertRowCount Int = 0
DECLARE @UpdateRowCount Int = 0


CREATE table #MAKE_PAYMENTS_POLICYLIST(
			Month_Effective_Date datetime,
			Policy_number  VARCHAR(50), 
			EDW_Contract_Key Int,
			Transaction_Process_Date datetime , 
			Movement_Effective_Date datetime ,
			Transaction_Type VARCHAR(50),
			File_Record_Number Numeric (10,0)
)

set @sqlstatement = 
			'insert into #MAKE_PAYMENTS_POLICYLIST 
			SELECT DISTINCT
			[dbo].[Reins_Mercury_Trnx].Month_Effective_Date,
			[dbo].[Reins_Mercury_Trnx].Policy_number, 
			[dbo].[Reins_Mercury_Trnx].EDW_Contract_Key,
			[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
			[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
			[dbo].[Reins_Mercury_Trnx].Transaction_Type,
			[dbo].[Reins_Mercury_Trnx].File_Record_Number  --This is needed for Ultimate as the trnxs are seen be single transactions rather than a group
		FROM 
			[dbo].[Reins_Mercury_Trnx]
		WHERE
			Product_System_Code = ''CP''
		AND Exclude_Flag = ''N''
		AND
			(
				([dbo].[Reins_Mercury_Trnx].Transaction_Type Is Not Null) 
				AND ([dbo].[Reins_Mercury_Trnx].Claim_Expense_Id Is Null)
			)'

if @InputPolicyNumber is not null
	set @sqlstatement  = concat( @sqlstatement , ' AND Policy_number = ''' , @InputPolicyNumber , ''' ')

exec(@sqlstatement)

DECLARE TXN_LIST_TO_PROCESS  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
    FOR 
		SELECT * from #MAKE_PAYMENTS_POLICYLIST ORDER BY 1,2,3,4

OPEN TXN_LIST_TO_PROCESS

FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
	@Month_Effective_Date,
	@Policy_number ,
	@EDW_Contract_Key ,
	@Transaction_Process_Date	,
	@Movement_Effective_Date	,
	@Transaction_Type,
	@File_Record_Number

WHILE @@FETCH_STATUS = 0  
BEGIN 
	BEGIN TRY
		SELECT @SumOfLEDGER_MVMT_AMT = ROUND(Sum([dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount),2)
		FROM [dbo].[Reins_Mercury_Trnx]
		WHERE
			Policy_number			= @Policy_number
			AND Transaction_Process_Date		= @Transaction_Process_Date
			AND Movement_Effective_Date		= @Movement_Effective_Date	
			AND Transaction_Type	= @Transaction_Type
			AND Claim_Expense_Id Is Null
			and File_Record_Number = @File_Record_Number

		IF  @SumOfLEDGER_MVMT_AMT  IS NULL
		begin

			select @Transaction_Type = 'SKIP'

		end

		-- Reset our action
		SELECT @NEWClaimExpId = -1 

		IF  @Transaction_Type = 'Expense'
			BEGIN
				BEGIN TRANSACTION;
					INSERT INTO [dbo].[Reins_Claim_Expense]
					(
						Month_Effective_Date,
						Policy_number, 
						[Product_System_Code],
						EDW_Contract_Key,
						Expense_date,
						Claim_Expense_Type,
						Claim_Expense_Status,
						GROSS_EXPENSE_AMOUNT,
						Created_Date_Time,
						Created_By,
						Process_Log_Id

					)
					Values(
					@Month_Effective_Date,
					@Policy_number ,
					'CP',
					@EDW_Contract_Key,
					@Transaction_Process_Date	,
					@Transaction_Type,
					'OPEN',
					@SumOfLEDGER_MVMT_AMT,
					Getdate(),
					--System_user,
					ORIGINAL_LOGIN(),
					-105
					)

					set @InsertRowCount = @InsertRowCount + @@Rowcount

					select @NEWClaimExpId = max(Claim_Expense_Id) FROM [dbo].[Reins_Claim_Expense]

					-- Mark Records as done
					UPDATE [dbo].[Reins_Mercury_Trnx] 
					SET Claim_Expense_Id = @NEWClaimExpId,
					Updated_Date_Time = getdate(),
					Updated_By = ORIGINAL_LOGIN()


					WHERE 
						(
						Policy_number=@Policy_number
						AND Transaction_Type=@Transaction_Type
						AND Transaction_Process_Date=@Transaction_Process_Date
						AND Movement_Effective_Date=@Movement_Effective_Date
						AND [Claim_Expense_Id] is null
						and File_Record_Number = @File_Record_Number
						)

					set @UpdateRowCount = @UpdateRowCount + @@Rowcount

					-- Carry these records forward.
					INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
								@NEWClaimExpId,
								[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
								'CP',
								[dbo].[Reins_Mercury_Trnx].Policy_number,
								[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
								[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
								[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
								[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
								[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
								[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
								[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
								[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
								[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
								[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
								[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
								[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
								getdate(),
								ORIGINAL_LOGIN(),
								-105
					FROM 
					[dbo].[Reins_Mercury_Trnx]
					WHERE
					Policy_number=@Policy_number
					AND Transaction_Type=@Transaction_Type
					AND Transaction_Process_Date=@Transaction_Process_Date
					AND Movement_Effective_Date=@Movement_Effective_Date
					AND [Claim_Expense_Id] =@NEWClaimExpId
					AND File_Record_Number = @File_Record_Number

				set @InsertRowCount = @InsertRowCount + @@Rowcount

				COMMIT TRANSACTION;
			END

		IF  @Transaction_Type = 'Expense Reversal' 
			BEGIN
					
				-- Is there a matching payment
				SELECT @NEWClaimExpId = Claim_Expense_Id
				FROM [dbo].[Reins_Claim_Expense]
				WHERE 
				Policy_number=@Policy_number
				AND Expense_date <= @Transaction_Process_Date
				AND Claim_Expense_Type = 'EXPENSE'
				AND [Claim_Expense_Status] = 'OPEN'
				AND round(GROSS_EXPENSE_AMOUNT,2)  = round( -1 * @SumOfLEDGER_MVMT_AMT , 2 ) 

				-- There is a matching payment
				IF @NEWClaimExpId != -1 
					BEGIN
						BEGIN TRANSACTION

							UPDATE [dbo].[Reins_Claim_Expense]
								SET 
									[Claim_Expense_Status] = 'CLOSED' ,
									Claim_Expense_Type = 'EXPENSE-REVERSED',
									SETTLEMENT_DATE = @Transaction_Process_Date,
									Updated_Date_Time = getdate(),
									Updated_By = ORIGINAL_LOGIN()

								WHERE [Claim_Expense_Id] = @NEWClaimExpId

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount
							
								-- Mark Records as done
							UPDATE [dbo].[Reins_Mercury_Trnx] 
							SET Claim_Expense_Id = @NEWClaimExpId,
							Updated_Date_Time = getdate(),
							Updated_By = ORIGINAL_LOGIN()

							WHERE 
								(
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] is null
								and File_Record_Number = @File_Record_Number
								)

							set @UpdateRowCount = @UpdateRowCount + @@Rowcount

							-- Carry these records forward.
							
							INSERT INTO [dbo].[Reins_Claim_Expense_Trnx] (
								Source_Trnx_Id,
								[Claim_Expense_Id],
								[Transaction_Type],
								[PRODUCT_SYSTEM_CODE],
								[Policy_number],
								[Month_Effective_date],
								[Claim_Reference_Id],
								[GL_Account_Id],
								[GL_Product_Code],
								[EDW_Contract_Key],
								EDW_Policy_Number,
								EDW_Contract_Id,
								EDW_Product_Key,
								EDW_Product_Code,
								EDW_Class_Of_Business,
								[Source_Claim_Number],
								[Transaction_Amount],
								[Transaction_Effective_date],
								[Transaction_Process_Date],
								[IMPLICIT_BENEFIT_TYPE_CODE],
								[Reins_Benefit_Category],
								[Created_Date_Time],
								Created_By,
								Process_Log_ID
								)
							SELECT 
								[dbo].[Reins_Mercury_Trnx].Mercury_Trnx_Id,
								@NEWClaimExpId,
								[dbo].[Reins_Mercury_Trnx].Transaction_Type, 
								'CP',
								[dbo].[Reins_Mercury_Trnx].Policy_number,
								[dbo].[Reins_Mercury_Trnx].[Month_Effective_date],
								[dbo].[Reins_Mercury_Trnx].[Claim_Reference_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Account_Id],
								[dbo].[Reins_Mercury_Trnx].[GL_Product_Code],
								[dbo].[Reins_Mercury_Trnx].[EDW_Contract_Key],
								[dbo].[Reins_Mercury_Trnx].EDW_Policy_Number,
								[dbo].[Reins_Mercury_Trnx].EDW_Contract_Id,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Key,
								[dbo].[Reins_Mercury_Trnx].EDW_Product_Code,
								[dbo].[Reins_Mercury_Trnx].EDW_Class_Of_Business,
								[dbo].[Reins_Mercury_Trnx].Source_Claim_Number, 
								[dbo].[Reins_Mercury_Trnx].Ledger_Movement_Amount, 
								[dbo].[Reins_Mercury_Trnx].Movement_Effective_Date, 
								[dbo].[Reins_Mercury_Trnx].Transaction_Process_Date, 
								[dbo].[Reins_Mercury_Trnx].[IMPLICIT_BENEFIT_TYPE_CODE],
								[dbo].[Reins_Mercury_Trnx].[Reins_Benefit_Category],
								getdate(),
								ORIGINAL_LOGIN(),
								-105
							FROM 
								[dbo].[Reins_Mercury_Trnx]
							WHERE
								Policy_number=@Policy_number
								AND Transaction_Type=@Transaction_Type
								AND Transaction_Process_Date=@Transaction_Process_Date
								AND Movement_Effective_Date=@Movement_Effective_Date
								AND [Claim_Expense_Id] =@NEWClaimExpId
								AND File_Record_Number = @File_Record_Number

							set @InsertRowCount = @InsertRowCount + @@Rowcount

						COMMIT TRANSACTION;
					
					END
				END

		FETCH NEXT FROM TXN_LIST_TO_PROCESS into 
		@Month_Effective_Date,
		@Policy_number ,
		@EDW_Contract_Key ,
		@Transaction_Process_Date	,
		@Movement_Effective_Date	,
		@Transaction_Type	,
		@File_Record_Number

	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END

CLOSE TXN_LIST_TO_PROCESS
DEALLOCATE TXN_LIST_TO_PROCESS

SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END  






GO
/****** Object:  StoredProcedure [dbo].[usp_Reinstatement_Exceptions]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--*********************************************************************************************/
-- *Date       *Author    *Version     *Description
 --------------------------------------------------------------------------------------------
--   01/07/2020       MHTSIQ        1.0     Initial Version (To populate reinstatement exception cases in the reinstatement exception report table)
 --  12/01/2021       MHTSIQ        1.1         Defect fix to remove duplicates from the reinstatement exception report table for "Benefits where REINS_LIFE_IDENTIFIER has changed"  (RGU_1176)
 

---*********************************************************************************************/
 
CREATE
PROCEDURE [dbo].[usp_Reinstatement_Exceptions] @CENSUS_DATE datetime,@PAS nvarchar(3)
  -- Add the parameters for the stored procedure here

AS
BEGIN
  SET NOCOUNT ON;
  --Treaty Variables from INI File for the Census Date
  --DECLARE
  --  @CENSUS_DATE DATE =
  --  (SELECT Top 1 CENSUS_DATE
  --  FROM INFORCE_TEMP
  --  )
	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
	 
BEGIN TRY

Begin Tran Reins_Exp
				DECLARE @SQLDELETE nvarchar(MAx) = ''
	             SET @SQLDELETE = 'If Exists (Select 1 from Reinstatement_Exception_RPT
             where PRODUCT_SYSTEM_CODE=''@Pas@'' and CURRENT_CENSUS_DATE=''@CENSUS_DATE@'')
             Begin 
             Delete from Reinstatement_Exception_RPT where PRODUCT_SYSTEM_CODE=''@Pas@'' and CURRENT_CENSUS_DATE=''@CENSUS_DATE@''
             END 
             '

             SET @SQLDELETE = Replace(@SQLDELETE, '@Pas@', @Pas)
             SET @SQLDELETE = Replace(@SQLDELETE, '@CENSUS_DATE@', @CENSUS_DATE)

       --Print @SQLDELETE
       
             EXECUTE sp_executesql @SQLDELETE
             
             SET @DeleteRowCount = @DeleteRowCount + @@Rowcount
             Print 'Delete Records from Reinstatement_Exception_RPT for the Census Date for Pas ' + @Pas + convert(varchar(50), @DeleteRowCount)

     DECLARE
      @TREATY_START DATE = CONVERT(DATE,
      (SELECT VALUE FROM INI WHERE PARAMETER='TREATY START DATE'
      ))
      --DECLARE
      --  @PAS nvarchar(3) =
      --  (SELECT Top 1 PRODUCT_SYSTEM_CODE FROM INFORCE_TEMP
      --  )
        --Put Date Vars into a Hash Table as it makes life easier for debugging one step at a time
        IF OBJECT_ID('tempdb.dbo.#CALC_PARAMS', 'U') IS NOT NULL
          DROP TABLE #CALC_PARAMS SELECT TREATY_START = @TREATY_START ,
            CENSUS_DATE                               = @CENSUS_DATE ,
            ONE_YEAR_AGO                              = DATEADD(YEAR, -1, @CENSUS_DATE) ,
            TOMORROW                                  = DATEADD(DAY, 1, @CENSUS_DATE) -- 1st day of month following the census
            ,
            MONTHS_SINCE_TREATY = DATEDIFF(MONTH, @TREATY_START, @CENSUS_DATE) ,
            *
          INTO #CALC_PARAMS
          FROM PAS_INI
          WHERE PRODUCT_SYSTEM_CODE = @PAS


		   DECLARE @InforceTableName nvarchar(20) = ''
		  SET @InforceTableName  = 'INFORCE_TEMP_' + @PAS

	

	-- This table is populated as a comparision of the #Last Seen table and the Inforce_Temp table to satisfy the matching criteria

	

	--This temp table is created to match all the Benefits, where the Contract_Risk_Key has changed, 
	-- but the benefit is an  "Ongoing Benefit" , if it matches the Primary and Secondary matching criteria
	
	--Change in contract Risk Key
  
	IF OBJECT_ID('tempdb.dbo.#New_Ongoing_Change', 'U') IS NOT NULL DROP TABLE #New_Ongoing_Change
   CREATE TABLE #New_Ongoing_Change
            (
              OLD_CONTRACT_RISK_KEY INT ,
			  NEW_CONTRACT_RISK_KEY INT,
			  Reins_Life_Identifier int,
			  Product_System_Code nvarchar(4),
              Product_code nvarchar(20),
			  Product_option_code nvarchar(20),
			  Contract_key int, 
			  Contract_ID nvarchar(11),
			  First_name nvarchar(50),
			  SURNAME nvarchar (50),
			  DOB date,
			  Gender_code nvarchar(1),
			  Sum_Insured_Amt int,
			  check_census date , 
			 [CREATED_DATE_TIME] date,
		[CREATED_BY] varchar (50),
		[PROCESS_LOG_ID] int

			  )

	--Secondary Matching 

		 Declare @InsertNewReinsLifeIdentifier nvarchar(1500) = ''
		set  @InsertNewReinsLifeIdentifier  =  'INSERT INTO #New_Ongoing_Change
            (OLD_CONTRACT_RISK_KEY  ,
			  NEW_CONTRACT_RISK_KEY ,
			  Reins_Life_Identifier ,
			  Product_System_Code,
             Product_code ,
			 Product_option_code ,
			  Contract_key, 
			  Contract_Id,
			  First_name,
			  SURNAME ,
			  DOB ,
			  Gender_code,
			  Sum_Insured_Amt,
			   check_census 
            )
          select distinct L.Contract_risk_key,
		  I.CONTRACT_RISK_KEY,
		  I.reins_life_identifier,
		  I.Product_System_Code,
		  I.Product_code ,
			 I.Product_option_code ,
			  I.Contract_key, 
			  I.Contract_Id,
			  I.First_name,
			  I.SURNAME ,
			  I.DOB ,
			  I.Gender_code,
			  I.Sum_Insured_Amt,
			  L.LAST_SEEN_DATE from ' + @InforceTableName + ' As I
			inner join [dbo].[Inforce_Last_Seen]  as L  
			on  L.Product_Code = I.Product_code
			and L.Product_Option_Code = I.Product_Option_Code
			and L.First_name = I.FIRST_NAME
			and L.SURNAME = I.SURNAME
			and L.DOB = I.DOB
			and L.Gender_code = I.GENDER_CODE
			and L.Contract_Key  = I.CONTRACT_Key
			where (L.contract_risk_key <> I.contract_risk_key )
			and (L.Reins_Life_identifier  <> I.Reins_life_Identifier)
			and I.contract_risk_key not in (select contract_risk_key from [dbo].[Inforce_Last_Seen] )
			and I.comment = ''ONGOING''
			 '

	  EXECUTE sp_executesql @InsertNewReinsLifeIdentifier
		SET @InsertNewReinsLifeIdentifier  = @InsertRowCount + @@ROWCOUNT
	    Print 'Insert into #New_Ongoing_Change' + convert(varchar(50), @InsertRowCount)
	-- Insert the data in another table, which will be later used for Reporting Reinstatement Edge cases

		Declare @PopulateRecordswithnewCRK nvarchar(max) = ''
		set   @PopulateRecordswithnewCRK = 'INSERT INTO [dbo].[Reinstatement_Exception_RPT](Contract_ID,
		Contract_Key, 
		Contract_Risk_Key,
		Product_Code,
		Product_option_code,
		Product_System_Code,
		Reins_Life_Identifier,
		Last_Seen_Census_date,
		Current_Census_Date,
		Current_Sum_Insured_Amount ,
		Last_Seen_Sum_Insured_Amount,
		Reason_for_Inclusion,
		[CREATED_DATE_TIME],
		[CREATED_BY],
		[PROCESS_LOG_ID])


		select reins.Contract_ID ,
		reins.Contract_key ,
		reins.New_Contract_Risk_Key  as Contract_Risk_Key  , 
		reins.Product_Code,
		reins.Product_option_code,
		reins.Product_System_Code, 
		reins.Reins_Life_Identifier,
		reins. Last_Seen_Census_Date,
		reins.Current_Census_Date,
		reins.Current_Sum_Insured_Amount ,
		reins.Last_Seen_Sum_Insured_Amount,
		Reason_For_Inclusion = ''Benefits where Reins Life Identifier has changed'' , 
		reins.[CREATED_DATE_TIME],
		reins.[CREATED_BY],
		reins.[PROCESS_LOG_ID]
		from 

		(select N.Contract_Key  ,
		N.Contract_ID,
		New_Contract_Risk_Key 
		,N.Product_code as Product_Code ,
		N.Product_option_code as Product_option_code
		, N.Product_System_Code as Product_System_code
		, N.Reins_Life_Identifier as Reins_Life_Identifier
		,  N.check_census as Last_Seen_Census_Date 
		,  T.CENSUS_DATE as Current_Census_Date , 
		
		N.SUM_INSURED_AMT as Current_Sum_Insured_Amount 
		,  (select Sum_Insured_Amt from INFORCE as IT  where IT.CONTRACT_RISK_KEY = N.OLD_CONTRACT_RISK_KEY and IT.CENSUS_DATE = N.check_census) AS Last_Seen_Sum_Insured_Amount,
		T.CREATED_DATE_TIME, 
		T.CREATED_BY,
		T.PROCESS_LOG_ID
		from #New_Ongoing_Change as N 
			join ' + @InforceTableName + ' AS T	
							ON T.CONTRACT_RISK_KEY = N.NEW_CONTRACT_RISK_KEY
							JOIN INFORCE_LAST_SEEN  AS I
							ON  N.OLD_CONTRACT_RISK_KEY = I.CONTRACT_RISK_KEY 
							AND T.CENSUS_DATE = I.CENSUS_DATE
						    where N.NEW_CONTRACT_RISK_KEY <> I.CONTRACT_RISK_KEY
						
							
						)  as reins'
		
						
	EXECUTE sp_executesql  @PopulateRecordswithnewCRK
	
	  	--Print '-@@UpdCommOngoingSQL'
   SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
      Print 'Ongoing Benefits(New Contract Risk Key) ' + convert(varchar(50), @UpdateRowCount)




--This will be used to populate the 'NEW BUSINESS' which are reinstated after 12 months, but were inforce when treaty started
			Declare @PopulateNewBusinessReinstated nvarchar(max) = ''
		set   @PopulateNewBusinessReinstated = 'INSERT INTO [dbo].[Reinstatement_Exception_RPT](Contract_ID,
		Contract_Key, 
		Contract_Risk_Key,
		Product_System_Code,
		Product_Code,
		Product_option_code,
		Current_Census_Date,
		Current_Sum_Insured_Amount,
		Last_Seen_Census_date,
		Last_Seen_Sum_Insured_Amount,
		Reins_Life_Identifier,
		Reason_for_Inclusion,
		Created_Date_time,
		Created_by,
		Process_Log_Id)


		
		select I.CONTRACT_ID AS CONTRACT_ID, 
		I.CONTRACT_KEY as Contract_key, 
		I.CONTRACT_RISK_KEY AS CONTRACT_RISK_KEY ,
		I.PRODUCT_SYSTEM_CODE ,
		I.PRODUCT_CODE , 
		I.PRODUCT_OPTION_CODE,
		I.census_date AS CURRENT_CENSUS_DATE,
		I.SUM_INSURED_AMT as CURRENT_SUM_INSURED_AMOUNT ,
		L.Last_seen_date As Last_Seen_Census_Date, 
		L.[SUM_INSURED_AMT] as Last_Seen_Sum_Insured_Amount,
		I.Reins_Life_Identifier AS REINS_LIFE_IDENTIFIER,
		Reason_For_Inclusion = CASE 
								WHEN I.RISK_START_DATE      <  P.TREATY_START 
								THEN   ''New Business in Current Month with risk start date prior to 2017-11-01''
								ELSE ''New business as benefit reinstated after 12 months''
								END , 
	
		I.Created_Date_time,
		I.Created_by,
		I.Process_Log_Id
		from  ' + @InforceTableName +    ' as I  
		 join [dbo].[INFORCE_LAST_SEEN] as L on I.contract_risk_key = L.contract_risk_key
		JOIN #CALC_PARAMS AS P
		ON I.CENSUS_DATE = P.CENSUS_DATE
 where I.comment = ''NEW BUSINESS IN CURRENT MONTH''
'

 EXECUTE sp_executesql @PopulateNewBusinessReinstated


 
--This will be used to populate the 'NEW BUSINESS' cases, where Risk Start Date is prior to '2017-11-01', which has come to inforce for the first time i.e. it might have lapsed prior to treaty start
			Declare @PopulateNewBusiness nvarchar(max) = ''
		set    @PopulateNewBusiness = 'INSERT INTO [dbo].[Reinstatement_Exception_RPT](Contract_ID,
		Contract_Key, 
		Contract_Risk_Key,
		Product_System_Code,
		Product_Code,
		Product_option_code,
		Current_Census_Date,
		Current_Sum_Insured_Amount,
		Last_Seen_Census_date,
		Last_Seen_Sum_Insured_Amount,
		Reins_Life_Identifier,
		Reason_for_Inclusion,
		Created_Date_time,
		Created_by,
		Process_Log_Id)


		
		select I.CONTRACT_ID AS CONTRACT_ID, 
		I.CONTRACT_KEY as Contract_key, 
		I.CONTRACT_RISK_KEY AS CONTRACT_RISK_KEY ,
		I.PRODUCT_SYSTEM_CODE ,
		I.PRODUCT_CODE , 
		I.PRODUCT_OPTION_CODE,
		I.census_date AS CURRENT_CENSUS_DATE,
		I.SUM_INSURED_AMT as CURRENT_SUM_INSURED_AMOUNT ,
		L.Last_seen_date As Last_Seen_Census_Date, 
		L.[SUM_INSURED_AMT] as Last_Seen_Sum_Insured_Amount,
		I.Reins_Life_Identifier AS REINS_LIFE_IDENTIFIER,
		Reason_For_Inclusion = ''New Business in Current Month with risk start date prior to 2017-11-01''
								 , 
	
		I.Created_Date_time,
		I.Created_by,
		I.Process_Log_Id
		from  ' + @InforceTableName +    ' as I  
		left join [dbo].[INFORCE_LAST_SEEN] as L on I.contract_risk_key = L.contract_risk_key
		JOIN #CALC_PARAMS AS P
		ON I.CENSUS_DATE = P.CENSUS_DATE
 where I.comment = ''NEW BUSINESS IN CURRENT MONTH''
 and L.contract_risk_key is Null
 and I.Risk_Start_date < P.Treaty_start
'

 EXECUTE sp_executesql  @PopulateNewBusiness
		Commit TRAN Reins_Exp

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Reins_Exp;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END





GO
/****** Object:  StoredProcedure [dbo].[usp_Reinstatment_Lapses]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		RRNAA2
-- Create date: May 2019
-- Description:	Set Reinstatement and Lapses table for Each Pas Load
-- =============================================
CREATE PROCEDURE [dbo].[usp_Reinstatment_Lapses]  @CENSUS_DATE datetime,@Pas nvarchar(3)
	-- Add the parameters for the stored procedure here
	
AS
BEGIN


	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--DECLARE @CENSUS date = (SELECT top 1 CENSUS_DATE From STG.Stg_U2_Benefit)
DECLARE @TREATY_START Date = convert(date,(Select VALUE from INI where PARAMETER='TREATY START DATE'))

 DECLARE @InsertRowCount Int = 0
 DECLARE @UpdateRowCount Int = 0
 DECLARE @DeleteRowCount int = 0

  DECLARE @InforceTableName nvarchar(20) = ''
  SET @InforceTableName  = 'INFORCE_TEMP_' + @PAS

IF OBJECT_ID('tempdb.dbo.#LOAD_PARAMS', 'U') IS NOT NULL DROP TABLE #LOAD_PARAMS
Select
	TREATY_START         = @TREATY_START
	,CENSUS_DATE         = @CENSUS_DATE
	,ONE_YEAR_AGO        = DateAdd(year, -1, @CENSUS_DATE)
	,TOMORROW            = DateAdd(day,   1, @CENSUS_DATE)       -- 1st day of month following the census
	,MONTHS_SINCE_TREATY = DateDiff(Month, @TREATY_START, @CENSUS_DATE)
	,LAST_MONTH          = dbo.DateSerial(Year(@CENSUS_DATE), Month(@CENSUS_DATE), 0) --Day zero is the Last Day of the previous month
	,*
Into #LOAD_PARAMS
From PAS_INI 
Where PRODUCT_SYSTEM_CODE = @Pas


BEGIN TRY

Begin Tran ReinLapses

		--Identify Reinstatements
		--Create #Table to contain the lapse and reinstatement information
		IF OBJECT_ID('tempdb.dbo.#REIN', 'U') IS NOT NULL DROP TABLE #REIN
		CREATE TABLE #REIN (CONTRACT_RISK_KEY int, REIN_DATE date, LAPSE_DATE date, AMT Money)
		Declare @InsertReinSQL nvarchar(700) = ''
		set @InsertReinSQL = 'Insert into #REIN
		Select
			T.CONTRACT_RISK_KEY
			,T.CENSUS_DATE
			,L.LAPSE_DATE
			,L.QS_AMT_LAPSE_RECOVERED
		FROM ' + @InforceTableName + ' As T JOIN LAPSED As L 
			on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
				and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
		  where QS_GAP_MONTHS > 1                                      
			and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE'

			EXECUTE sp_executesql @InsertReinSQL
		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
	    Print 'Insert into #REIN ' + convert(varchar(50), @InsertRowCount)

		--Insert into #REIN
		--Select
		--	T.CONTRACT_RISK_KEY
		--	,T.CENSUS_DATE
		--	,L.LAPSE_DATE
		--	,L.QS_AMT_LAPSE_RECOVERED
		--FROM [INFORCE_TEMP] As T JOIN LAPSED As L 
		--	on T.CONTRACT_RISK_KEY = L.CONTRACT_RISK_KEY 
		--		and L.CENSUS_DATE = dbo.DateSerial(Year(T.CENSUS_DATE),Month(T.CENSUS_DATE) + 1 -QS_GAP_MONTHS,0)
		--  where QS_GAP_MONTHS > 1                                             -- The contract was missing at the previous census so may have lapsed
		--	and coalesce(L.REINSTATEMENT_DATE,T.CENSUS_DATE) = T.CENSUS_DATE  -- Not already reinstated

		--Update Both Lapse and Inforce Temp Tables
		BEGIN TRANSACTION;
		Declare @UpdAmtLapseRVSSQL nvarchar(500) = ''
		SET @UpdAmtLapseRVSSQL = 'Update T Set
			[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
		FROM ' + @InforceTableName + ' As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY'

		--Update T Set
		--	[QS_AMT_LAPSE_RVS] = coalesce(R.AMT,0)
		--FROM INFORCE_TEMP As T JOIN #REIN As R ON T.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY 
			EXECUTE sp_executesql @UpdAmtLapseRVSSQL
		SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
	
		Update L Set
			[QS_AMT_LAPSE_RECOVERED] = R.AMT
			,REINSTATEMENT_DATE = R.REIN_DATE --Also Flag the Lapsed Data records as Reinstated
		FROM
			LAPSED As L JOIN #REIN As R on L.CONTRACT_RISK_KEY = R.CONTRACT_RISK_KEY and L.LAPSE_DATE = R.LAPSE_DATE
			SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

		COMMIT;
		DECLARE @QS_REIN int = (Select count(*) From #REIN)
		--Print @QS_REIN
		--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='Process Reinstatements', @RECS=@QS_REIN
		   Print 'Process Reinstatements ' + convert(varchar(50), @UpdateRowCount)

		--Update Lapses for Conversions (Similar to Reinstatements)
		If 1 = (Select ALLOW_CONVERSIONS FROM #LOAD_PARAMS)
			BEGIN
			BEGIN TRANSACTION;

			Declare @UpdAmtLapseRVSFromConvSQL nvarchar(4000) = ''
			SET @UpdAmtLapseRVSFromConvSQL = 'Update T SET
				QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0),
				updated_date_time = getdate(),
				Updated_by = SYSTEM_USER
			from CONVERTED As C JOIN ' + @InforceTableName + ' as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE'
			print @UpdAmtLapseRVSFromConvSQL
			EXECUTE sp_executesql @UpdAmtLapseRVSFromConvSQL
			SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT

			--Update T SET
			--	QS_AMT_LAPSE_RVS = coalesce(L.QS_AMT_LAPSE_RECOVERED,0)
			--from CONVERTED As C JOIN INFORCE_TEMP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
			--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE

			Declare @UpdAmtLapseReinFromConvSQL nvarchar(4000) = ''
			SET @UpdAmtLapseReinFromConvSQL = 'Update L Set
				L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
				,L.REINSTATEMENT_DATE = T.CENSUS_DATE
				,updated_date_time = getdate()
				,Updated_by = SYSTEM_USER
			from CONVERTED As C JOIN ' + @InforceTableName + ' as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
				JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE'
			print @UpdAmtLapseReinFromConvSQL
			EXECUTE sp_executesql @UpdAmtLapseReinFromConvSQL
			SET @UpdateRowCount  = @UpdateRowCount + @@ROWCOUNT
						
			--Update L Set
			--	L.[QS_AMT_REINSTATED] = L.QS_AMT_LAPSE_RECOVERED
			--	,L.REINSTATEMENT_DATE = T.CENSUS_DATE
			--from CONVERTED As C JOIN INFORCE_TEMP as T on T.contract_risk_key = C.new_contract_risk_key and T.CENSUS_DATE = C.CENSUS_DATE
			--	JOIN LAPSED As L on L.contract_risk_key = C.off_contract_risk_key and L.CENSUS_DATE = C.OFF_CENSUS_DATE
			COMMIT;

			DECLARE @QS_CONV int = (Select count(*) From CONVERTED_TEMP)
			--Print @QS_CONV
			--EXEC usp_LOG @STORED_PROC='usp_Load_OPUS', @CENSUS_DATE=@CENSUS, @STEP='Process Conversions', @RECS=@QS_CONV
			print 'Process Conversions' + convert(varchar(50), @QS_CONV)
			END

		Commit TRAN ReinLapses

	Select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount

	--Delete from dbo.Inforce where CENSUS_DATE=@CENSUS_DATE and PRODUCT_SYSTEM_CODE = @Pas		--Change added as per QS / 2019-08-12
	--Declare @InsertintoInforce varchar(200) = 'Insert into Inforce
	--Select * from '+ @InforceTableName
	--EXECUTE sp_executesql @InsertintoInforce

END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN ReinLapses;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH


END
GO
/****** Object:  StoredProcedure [dbo].[usp_Remove_Garbage_Characters]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Remove_Garbage_Characters]
   @ProcessLogID Int
  ,@TableSchema VARCHAR(10)
  ,@TableName VARCHAR(100)
AS
---------
--
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @DateSQL VARCHAR(MAX)
	DECLARE @Data_Type VARCHAR(MAX)
	DECLARE @column_name VARCHAR(MAX)
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	BEGIN TRY;
	BEGIN TRAN T1;
	--
	DECLARE Columns_Lists  CURSOR LOCAL  FORWARD_ONLY  READ_ONLY
	FOR 
	Select Data_Type, column_name
	from INFORMATION_SCHEMA.COLUMNS
	WHERE      upper(table_schema) = upper(@TableSchema)
	AND upper(table_name) = upper(@TableName)
	and COLUMNPROPERTY(object_id(table_schema+'.'+table_name), column_name, 'IsIdentity') <> 1
	and LOWER(column_name) NOT IN ('updated_date_time','updated_by')
	order by ORDINAL_POSITION
	--
	OPEN Columns_Lists
	FETCH NEXT FROM Columns_Lists into 
	@Data_Type,
	@column_name

	WHILE @@FETCH_STATUS = 0 
	BEGIN
	    -- Automate generation of update scripts
		IF LOWER(@Data_Type) like 'varchar'
		BEGIN
			SET @SQL = 'UPDATE '+@TableSchema+'.'+@TableName+' SET ['+@column_name+'] = NULL, updated_date_time = GETDATE(), updated_by = system_user WHERE RTRIM(LTRIM(['+@column_name+'])) = '''''
			EXEC(@SQL)
			SET @SQL = 'UPDATE '+@TableSchema+'.'+@TableName+' SET ['+@column_name+'] = RTRIM(LTRIM(['+@column_name+'])), updated_date_time = GETDATE(), updated_by = system_user WHERE RTRIM(LTRIM(['+@column_name+'])) <> ['+@column_name+']'
			EXEC(@SQL)
			SET @SQL = 'UPDATE '+@TableSchema+'.'+@TableName+' SET ['+@column_name+'] = replace(replace(['+@column_name+'],char(13),''''),char(10),''''), updated_date_time = GETDATE(), updated_by = system_user WHERE charindex(char(13),['+@column_name+']) > 0 OR charindex(char(10),['+@column_name+']) > 0'
			EXEC(@SQL)
		END		
		-- IF LOWER(@Data_Type) like 'date%'
		 -- BEGIN		     
			 -- SET @DateSQL = 'UPDATE '+@TableSchema+'.'+@TableName+' SET ['+@column_name+'] = NULL, updated_date_time = GETDATE(), updated_by = system_user WHERE ['+@column_name+'] <= CONVERT('+@Data_Type+',''01/jan/1753'')' 
			 -- EXEC(@DateSQL)	
		 -- END
		FETCH NEXT FROM Columns_Lists into 
		@Data_Type,
		@column_name
	END

	CLOSE Columns_Lists
	Deallocate Columns_Lists
	--
	COMMIT TRAN T1;
---
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	THROW;
END CATCH
SET ANSI_NULLS ON


GO
/****** Object:  StoredProcedure [dbo].[usp_Run_DB_Maintanance]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		MHTSIQ
-- Create date: 2020-12-15
-- Description:	 Update Statistice and Recompile Procs for a database. Script provided by George M. 
-- ==========================================
CREATE PROCEDURE  [dbo].[usp_Run_DB_Maintanance] 
	with EXECUTE AS 'dbo'
AS

BEGIN
	
		SET NOCOUNT ON;

	 DECLARE @InsertRowCount Int = 0
	 DECLARE @UpdateRowCount Int = 0
	 DECLARE @DeleteRowCount int = 0
BEGIN TRY

Begin Tran Update_Stats
  --use IDS_Reinsurance
--go
 -- Update stats
EXEC sp_updatestats;  



-- Recompile SP
DECLARE C CURSOR FOR (SELECT [name] FROM sys.objects WHERE [type] IN ('P', 'FN', 'IF'));
DECLARE @name SYSNAME;
OPEN C;
FETCH NEXT FROM C INTO @name;
WHILE @@FETCH_STATUS=0 BEGIN
    EXEC sp_recompile @name;
    FETCH NEXT FROM C INTO @name;
END;
CLOSE C;
DEALLOCATE C;
 


	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount
Commit TRAN Update_Stats	
END TRY

BEGIN CATCH
	
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN Update_Stats;

	select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

	THROW;

END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[usp_Stg_Clas_Merge]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		NK
-- Create date: 09 May 2019
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Stg_Clas_Merge] 
	-- Add the parameters for the stored procedure here
	@ProcessLogId int
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

	Begin Try
		
		Delete from STG.STG_CLAS

	
		Set @DeleteRowCount = @@ROWCOUNT
		
		--Insert new calcs
		Begin Tran T1
			Insert into STG.STG_CLAS
				SELECT 
					ben.CENSUS_DATE
					,ben.CONTRACT_KEY
					,ben.PARTY_KEY
					,ben.CONTRACT_RISK_KEY
					,ben.CONTRACT_ID
					,ben.PAS_CLIENT_ID
					,ben.PRODUCT_SYSTEM_CODE
					,ben.FIRST_NAME
					,ben.MIDDLE_NAME
					,ben.SURNAME
					,ben.GENDER_CODE
					,ben.DOB
					,ben.CONTRACT_START_DATE
					,ben.PRODUCT_CODE
					,ben.CLASS_OF_BUSN_CODE
					,ben.PRODUCT_OPTION_CODE
					,CASE
						WHEN ben.product_option_code IN ('SPWO','LPWO','FPWO','TPWO') THEN 'WP'
						WHEN ben.product_option_code in ('SADB','LHEP','PLDS', 'PLD') THEN 'OTHER'
						WHEN ben.product_opt_group_desc = 'IP' AND ben.product_option_code in ('CAP','ADB','CCO','ALC'
							, 'CEOS1','CEOS2','CEOS3','CEOS4','CEOS5','CEOS6', 'CRBS1','CRBL1','CEOL6','LSA1','LSA2'
							,'BRPS','EPOL1', 'EPOL2', 'EPOF1', 'EPOF2', 'EPOS1','EPOS2','EPOT2', 'IPOS1') THEN 'OTHER'
						WHEN ben.product_option_code IN ('TISDD', 'TIDDD', 'TILDD', 'SNPMS') THEN 'DTH/TPD'
						WHEN ben.product_option_code IN ('TIST','TIST2','TIDT','TIDT2','TILT','TILT2') THEN 'DTH/TRAUMA'
						Else ben.product_opt_group_desc
					END AS PRODUCT_OPT_GROUP_DESC
					,ben.RISK_START_DATE
					,ben.RISK_EXPR_DATE
					,ben.SMOKER_STATUS_CODE
					,ben.SDUTY_STATE_CODE
					,ben.POST_CODE
					,coalesce(nullif(ben.ocuptn_class_code,'NA'), ip_occ.ocuptn_class_code) AS OCUPTN_CLASS_CODE
					,ben.STEP_LVL_PREM_CODE
					,CASE
						WHEN ben.sum_insrd_freq_code = 'WKL' THEN round(ben.sum_insured_amt * 52.18,2)
						WHEN ben.sum_insrd_freq_code = 'MNTH' THEN round(ben.sum_insured_amt * 12,2)
						ELSE round(ben.sum_insured_amt,2)
					END AS SUM_INSURED_AMT
				    ,CASE
				       WHEN ben.product_opt_group_desc IN ('DTH','TPD') AND ben.product_code IN ('FAORD','FASUP') THEN
					      CASE WHEN bal.balance > ben.sum_insured_amt THEN 0 ELSE Round(ben.sum_insured_amt-coalesce(bal.balance,0),2) END
						WHEN ben.product_option_code in ('SADB','LHEP','PLDS', 'PLD') THEN 0
						WHEN ben.sum_insrd_freq_code = 'WKL' THEN round(ben.sum_insured_amt * 52.18,2)
						WHEN ben.sum_insrd_freq_code = 'MNTH' THEN round(ben.sum_insured_amt * 12,2)
						ELSE round(ben.sum_insured_amt,2)
					END AS AT_RISK_AMT
					,ben.SERIES_START_DATE
					,round(coalesce(pol_fee.ANNUAL_POL_FEE * ben.PREM_AMT / nullif(sum(ben.PREM_AMT) over (Partition by ben.CONTRACT_KEY),0)
									,0),2) As ANNUAL_POL_FEE
					,ben.PREM_AMT
					,ben.EXPLICIT_SDUTY_AMT
					,ben.PREM_FREQ
					,ben.PREM_AMT * ben.PREM_FREQ + 
						round(coalesce(pol_fee.ANNUAL_POL_FEE * ben.PREM_AMT / nullif(sum(ben.PREM_AMT) over (Partition by ben.CONTRACT_KEY),0),0),2) AS ANNUAL_PREM
					,ben.RISK_WAIT_PERIOD_VAL
					,ben.RISK_WAIT_PERIOD_TYPE
					,ben.SICKNESS_BENEFIT_PERIOD
					,ben.INJURY_BENEFIT_PERIOD
					,ben.INDMNTY_OPTION_CODE
					,ben.AIDS_CVRG_CODE
					,ben.BENEFIT_INDEXATION
					,ben.SUM_INSRD_FREQ_CODE
					,ben.INCR_CLAIM_OPT_PCNT
					,tranche.CAMPAIGN_CODES
					,tranche.DIAL_DOWN_PREM_PCNT
					,tranche.ASSESS_LOAD_PCNT
					,tranche.SUBJECT_TO_CAMPAIGN_PCNT
					,tranche.ADJ_ENTRY_AGE
					,disc.GRP_DISC_PCNT
					,disc.DD_DISC_PCNT
					,disc.LSIDP_DISC_PCNT
					,disc.LSIDA_DISC_AMT
					,disc.MPD_DISC_PCNT
					,disc.VCDP_DISC_PCNT
					,disc.LD_DISC_PCNT
					,NULL As TPD_OVERLAP_DISC --Leave null for the moment
					,ben.FULL_DAY_CVRG_CODE
					,ben.SWITCH_AGE
					,tranche.NUM_TRANCHES
					,CASE
						WHEN ben.sum_insrd_freq_code = 'WKL' THEN round(tranche.TRANCHE_CPI_SI * 52.18,2)
						WHEN ben.sum_insrd_freq_code = 'MNTH' THEN tranche.TRANCHE_CPI_SI * 12
						ELSE ben.sum_insured_amt
					END AS TRANCHE_CPI_SI
					,ben.FREQ_LDNG_AMT
					,ben.SALESCHANNEL
					,ben.TABLE_CODE
					,ben.COVER_TYPE
					,CASE
					 --add the unmodelled business into a projection group
					 --WHEN ben.product_option_code IN ('PAIL','PAIS', 'PIIS','PIIL','AAOP','CBO','OAHH','PIILA','ALS','PIISA','NTPI','PIISX') THEN
					 --	'UNKNWN_' + CASE WHEN ben.step_lvl_prem_code IN ('L','Y') THEN 'LVL' ELSE 'STP' END              -- Unmodelled Business

					 WHEN ben.product_code IN ('ACL','ACLA','ACLG','ACLM','ACNT','ACNZ','ACNZF','ACNZG')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc IN ('AA','BE','GFI','IC','IP') THEN
						  'NMLA_AL_ACL_' + CASE WHEN ben.step_lvl_prem_code IN ('L','Y') THEN 'LVL' ELSE 'STP' End        --ACL IP Policies

					 WHEN ben.product_code IN ('ACL','ACLA','ACLG','ACLM','ACNT','SACL','SACLA','SACLM','SACNT')
						AND ben.product_opt_group_desc IN ('BB','BF','DTH','TPD','TRAUMA') THEN                             --ACL LS Policies
						  'NMLA_LS_ACL_' + CASE WHEN coalesce(step.DTH_STP_LVL, ben.STEP_LVL_PREM_CODE) IN ('L','Y') THEN 'LVL' ELSE 'STP' END

					 WHEN ben.product_code IN ('FP1','FP2','SFP2','RP3','RPM','RPP','ARPP','BBAP','CRP3','CRPM','CRPP','FP1A'
						,'FP1G','FP1W','GRPP','RP3A','RP3G','RP3W','RPMA','RPMG','RPMW','RPP5','SMF1','UFUP','WRPP'
						,'BBAP3','CARPP','CBAP3','CBBAP','CGRPO','CGRPP','CRP3A','CRP3G','CRP3W','CRPMA','CRPMG','CRPMW'
						,'CWRPP','GRPPO','SMF1W','SFP1','SFP1W')
						AND ben.product_opt_group_desc IN ('AA','BE','CB','IP') THEN
						'NMLA_AL_'                                                                                           --AXA IP
						  + CASE WHEN ben.contract_start_date < '1-Aug-2009' THEN 'PRE_' ELSE 'ELE_' END
						  + CASE WHEN ben.step_lvl_prem_code IN ('L','Y') THEN 'LVL' ELSE 'STP' End

					 ELSE 'NMLA_LS_'                                                                                          --AXA LS
						  + CASE WHEN ben.contract_start_date < '1-Aug-2009' THEN 'PRE_' ELSE 'ELE_' END
						  + CASE WHEN coalesce(step.DTH_STP_LVL, ben.STEP_LVL_PREM_CODE) IN ('L','Y') THEN 'LVL' ELSE 'STP' END
					END AS PROJECTION_GROUP

   --			-Model Point File
					,CASE
					  WHEN ben.product_option_code IN (/* 'PAIL','PAIS', 'PIIS','PIIL','PIISA','PIISX', */
						'AAOP','CBO','OAHH','PIILA','ALS','NTPI') THEN 'UNKNWN'                                --Errorneously exclude these

					  WHEN ben.product_code IN ('ACL','ACLA','ACLG','ACLM','ACNT','ACNZ','ACNZF','ACNZG')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc IN ('AA','BE','GFI','IC','IP') THEN 'PQDSLA'         --ACL IP Policies

					  WHEN ben.product_code IN ('ACL','ACLA','ACLG','ACLM','ACNT')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc IN ('BB','BF','DTH','TPD','TRAUMA') THEN 'CQONLC'    --ACL LS Policies (Ordinary)                                                                      ELSE 'CQONLC' END     --ACL LS

					  WHEN ben.product_code IN ('SACL','SACLA','SACLM','SACNT')
						AND ben.class_of_busn_code <> 'O'
						AND ben.product_opt_group_desc IN ('DTH','TPD') THEN 'CQSNLC'                       --ACL LS Policies (Super)

					  WHEN ben.product_code IN ('FP1','FP2','SFP2','RP3','RPM','RPP','ARPP','BBAP','CRP3','CRPM','CRPP','FP1A'
						,'FP1G','FP1W','GRPP','RP3A','RP3G','RP3W','RPMA','RPMG','RPMW','RPP5','SMF1','UFUP','WRPP'
						,'BBAP3','CARPP','CBAP3','CBBAP','CGRPO','CGRPP','CRP3A','CRP3G','CRP3W','CRPMA','CRPMG','CRPMW'
						,'CWRPP','GRPPO','SMF1W')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc IN ('AA','BE','CB','IP') THEN 'PQDS1A'               --AXA IP (Ordinary)

					  WHEN ben.product_code IN ('SFP1','SFP1W')
						AND ben.product_opt_group_desc <> 'O'
						AND ben.product_opt_group_desc IN ('AA','BE','CB','IP') THEN 'PQDSSA'               --AXA IP (Super)

					  WHEN ben.product_code IN ('SFP1','SRP3','SRPM','SRPP','ACSRP','CSARP','CSR3A','CSR3W','CSRMW'
						,'CSRP3','CSRPM','CSRPP','CSWRP','SFP1A','SFP1W','SRP3A','SRP3W','SRPMA','SRPMW','SWRPP','SARPP')
						AND ben.class_of_busn_code <> 'O'
						AND ben.product_opt_group_desc IN ('BB','BF','DTH','GFI','TPD','WP') THEN 'CQSN1C'   --AXA LS Policies (Super)

					  WHEN ben.product_code IN ('FP1','FP2','SFP2','RP3','RPM','RPP','ACRP','ARPP','CRP3','CRPM','CRPP','FP1A'
						,'FP1G','FP1W','GRPP','RP3A','RP3G','RP3W','RPMA','RPMG','RPMW','SMF1','WRPP','CARPP','CGRPO'
						,'CGRPP','CRP3A','CRP3G','CRP3W','CRPMA','CRPMG','CRPMW','CWRPP','GRPPO','SMF1W')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc IN ('BB','BF','DTH','GFI','TRAUMA','TPD','WP') THEN 'CQON1C'  --AXA LS Policies (Ordinary)

					  WHEN ben.product_code IN ('PSP','CPRP','PPRP','PRET','FASUP')
						AND ben.class_of_busn_code <> 'O'
						AND ben.product_opt_group_desc IN ('DTH','TPD') THEN 'CQSN2C'                         --AXA LS Super Riders

					  WHEN ben.product_code IN ('SPP','CSAV','FAORD','PSAV','PSPE','SPP')
						AND ben.class_of_busn_code = 'O'
						AND ben.product_opt_group_desc in ('DTH','GFI','TPD','TRAUMA') THEN 'CQON3C'          --AXA LS Ordinary Riders
					  ELSE 'UNKNWN'
					END AS MP
					,NULL As DTH_SUM_ASSD
					,NULL As TPD_SUM_ASSD
					,NULL As CC_SUM_ASSD
					,NULL AS ANN_PHI_BEN
					,NULL As PROPHET_PREM,GetDate() as Created_Date_time,
					@ProcessLogId as Process_Log_Id, system_user as Created_BY

				FROM
					STG.STG_CLAS_BENEFIT As ben
					LEFT JOIN STG.STG_CLAS_OCC as ip_occ on ip_occ.contract_key = ben.contract_key and ben.PRODUCT_OPT_GROUP_DESC in ('IP','BE')
					LEFT JOIN STG.STG_CLAS_BAL as bal on bal.CONTRACT_KEY = ben.CONTRACT_KEY
					LEFT JOIN STG.STG_CLAS_POLFEE as pol_fee on ben.CONTRACT_KEY = pol_fee.CONTRACT_KEY
					LEFT JOIN STG.STG_CLAS_TRANCHE as tranche on tranche.CONTRACT_RISK_KEY = ben.CONTRACT_RISK_KEY
					LEFT JOIN STG.STG_CLAS_DISC as disc on disc.CONTRACT_RISK_KEY = ben.CONTRACT_RISK_KEY
					LEFT JOIN STG.STG_CLAS_STEP as step on step.CONTRACT_KEY=ben.CONTRACT_KEY


			Set @InsertRowCount = @@ROWCOUNT

	--Delete records where the fund balance > sum insured applies (in later version flag as past break out point)
	--???????????????????????????????????????????????????????????????????????????????????????????????????????????
	--Delete FROM STAGE_CLAS
	--Where product_code IN ('FAORD','FASUP') and product_opt_group_desc IN ('DTH','TPD') AND at_risk_amt=0

	--Calculate TPD Overlap Discount 7.5% on the proportion of the qualifying product CC SI that overlaps with qualifying TPD SI
	DECLARE @TPD_OVERLAP Table(CONTRACT_KEY int, TPD float, CC float, overlap_rate float)
	INSERT INTO @TPD_OVERLAP(CONTRACT_KEY, TPD, CC)
	SELECT
		CONTRACT_KEY

		,Sum(CASE WHEN product_option_code IN ('LLDA1','LLDO1','LTDA1','LTDO1','SLDA1','SLDO1','STDA1','STDO1','HKDA1','HKDO1','HLDA1'
            ,'HLDDA1','HLDDO1','HLDO1','HLFC1','HPDO1','HTDA1','HTDO1','LKDA1','LKDO1','LLDDA1','LLDDO1','LLFC1','LPDO1','SKDA1','SKDO1'
            ,'SLDDA1','SLDDO1','SLFC1','SPDO1','HLDA4','HLDDA4','HLFC4','LLDA4','LLDDA4','LLFC4','SLDA4','SLDDA4','SLFC4') THEN sum_insured_amt ELSE 0 END)
			As TPD

        ,Sum (CASE WHEN product_option_code in ('LHEP') THEN 0--'OTHER'
            WHEN product_opt_group_desc = 'TRAUMA' THEN sum_insured_amt
            WHEN product_option_code IN ('TIST','TIST2','TIDT','TIDT2','TILT','TILT2') THEN sum_insured_amt ELSE 0 END)
			As CC
	FROM STG.STG_CLAS
	GROUP BY CONTRACT_KEY

	Delete from @TPD_OVERLAP where TPD=0 or CC=0

	Update @TPD_OVERLAP set 
		overlap_rate = 7.5 * dbo.Least(CC,TPD) / TPD
	
	Update C Set TPD_OVERLAP_DISC = O.overlap_rate
	from 
		STG.STG_CLAS as C 
		Join @TPD_OVERLAP as O on C.CONTRACT_KEY = O.CONTRACT_KEY
	Where
		C.product_option_code IN ('LLDA1','LLDO1','LTDA1','LTDO1','SLDA1','SLDO1','STDA1','STDO1','HKDA1','HKDO1','HLDA1'
            ,'HLDDA1','HLDDO1','HLDO1','HLFC1','HPDO1','HTDA1','HTDO1','LKDA1','LKDO1','LLDDA1','LLDDO1','LLFC1','LPDO1','SKDA1','SKDO1'
            ,'SLDDA1','SLDDO1','SLFC1','SPDO1','HLDA4','HLDDA4','HLFC4','LLDA4','LLDDA4','LLFC4','SLDA4','SLDDA4','SLFC4')

	

	--Update the cover fields
	UPDATE C Set 
		DTH_SUM_ASSD = Case when PRODUCT_OPT_GROUP_DESC in ('DTH','DTH/TPD','DTH/TRAUMA') Then AT_RISK_AMT Else 0 End
		,TPD_SUM_ASSD = Case when PRODUCT_OPT_GROUP_DESC in ('TPD','DTH/TPD') Then AT_RISK_AMT Else 0 End
		,CC_SUM_ASSD = Case when PRODUCT_OPT_GROUP_DESC in ('TRAUMA','DTH/TRAUMA') Then AT_RISK_AMT Else 0 End
		,ANN_PHI_BEN = Case 
			When MP = 'UNKNWN' Then 0                  --Exclude Unmodelled Business
			When PRODUCT_OPT_GROUP_DESC in ('IP','BE') Then round(AT_RISK_AMT,2)
			Else 0 
		End
		,PROPHET_PREM = CASE
			WHEN product_option_code IN ('PAIL','PAIS', 'PIIS','PIIL','AAOP','CBO','OAHH','PIILA','ALS','PIISA','NTPI','PIISX','LUMPL') THEN 0 --Exclude premium on products not assigned to a MP File
			WHEN product_option_code IN ('CAP','ADB','CCO','ALC','CRBS1','CRBL1','LSA1','LSA2','BRPS','EPOL1', 'EPOL2','EPOF1', 'EPOF2', 'EPOS1','EPOS2','EPOT2','IPOS1', 'FC1') THEN 0
			WHEN product_opt_group_desc IN ('AA') THEN 0 --All IP Accident Accelerators Excluded !
			ELSE ANNUAL_PREM
        END
		FROM STG.STG_CLAS As C
		Set @UpdateRowCount=@@ROWCOUNT
		Commit Tran T1
		

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN T1;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;


 END CATCH

END




GO
/****** Object:  StoredProcedure [dbo].[usp_Stg_Incom_ILUL_MPF]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:		<KHNNR2>
-- CREATE DATE: <JUNE, 2019>
-- DESCRIPTION:	<Loading INCOM-ILUL PAS data into IDS-Reinsurance DB from IDS-CORE DB>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Stg_Incom_ILUL_MPF] 
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@EFTV_DATE DATETIME,
	@ProcessLogId int
AS
	BEGIN 

		SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

		--declare @variable int
		--declare @variable2 int
		----DECLARE @EFTV_DATE DATETIME = '2018-10-31' 
		--DECLARE @CLAUSE NVARCHAR (50)= 'Month_Eftv_Date = '''+convert(varchar, @EFTV_DATE, 23)+''''
 
		--exec @variable= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_IONP3U_YTF]' , @CLAUSE 
		--exec @variable2= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_IONP3I_YTF]', @CLAUSE
		--SET @variable+=@variable2 
		--exec @variable2= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_ISNP2I_YTF]', @CLAUSE
		--SET @variable+=@variable2 
		--exec @variable2= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_ISNP2U_YTF]', @CLAUSE
		--SET @variable+=@variable2 
		--IF @variable <> 0
		--RETURN -1

	IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_IONP3U_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE) 
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_IONP3U_YTF'
		RETURN -1 
	END 

	IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_IONP3I_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE) 
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_IONP3I_YTF'
		RETURN -1 
	END 

	IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_ISNP2I_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE) 
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_ISNP2I_YTF'
		RETURN -1 
	END

	IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_ISNP2U_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE) 
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_ISNP2U_YTF'
		RETURN -1 
	END
	
	Begin Try

	Begin Tran Stage_ILUL

	IF OBJECT_ID('TEMPDB.DBO.#TEMP_ILUL', 'U') IS NOT NULL DROP TABLE #TEMP_ILUL



	CREATE TABLE #TEMP_ILUL(
		[CENSUS_DATE] [DATE] NULL,
		[CONTRACT_KEY] [INT] NULL,
		[CONTRACT_ID] [NVARCHAR](11) NULL,
		[RSK_ANN_PREM] [MONEY] NULL,
		[SUM_ASSURED] [MONEY] NULL)

	INSERT INTO #TEMP_ILUL 
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, RSK_ANN_PREM,SUM_ASSURED  
		FROM [IDS_CORE].[DBO].[MPF_IONP3U_YTF] WHERE Month_Eftv_Date = @EFTV_DATE

	INSERT INTO #TEMP_ILUL 
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, RSK_ANN_PREM,SUM_ASSURED  
		FROM [IDS_CORE].[DBO].[MPF_IONP3I_YTF] WHERE Month_Eftv_Date = @EFTV_DATE

	INSERT INTO #TEMP_ILUL 
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, RSK_ANN_PREM,SUM_ASSURED  
		FROM [IDS_CORE].[DBO].[MPF_ISNP2I_YTF] WHERE Month_Eftv_Date = @EFTV_DATE

	INSERT INTO #TEMP_ILUL 
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, RSK_ANN_PREM,SUM_ASSURED  
		FROM [IDS_CORE].[DBO].[MPF_ISNP2U_YTF] WHERE Month_Eftv_Date = @EFTV_DATE

-- DELETE ANY EXISTING DATA IN TARGET TABLE

	DELETE FROM [DBO].[MPF_INCOM_ILUL] WHERE [CENSUS_DATE] = @EFTV_DATE

	Set @DeleteRowCount = @@ROWCOUNT

-- LOAD DATA FROM STAGING TABLE TO TARGET

	INSERT INTO [DBO].[MPF_INCOM_ILUL]([CENSUS_DATE],[CONTRACT_KEY],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],CREATED_DATE,CREATED_BY,PROCESS_LOG_ID)
	    SELECT   @EFTV_DATE
                ,[CONTRACT_KEY]       AS CONTRACT_KEY
	            ,[CONTRACT_ID]       AS CONTRACT_ID
	            ,NULL                  AS CLIENT_ID
	            ,NULL                  AS BENEFIT_CODE
                ,SUM([RSK_ANN_PREM]) AS ANNUAL_PREM
	            ,SUM([SUM_ASSURED])  AS ANNUAL_BEN
				,GetDate() as Created_Date
				,system_user as Created_BY
				,@ProcessLogId as Process_Log_Id
        FROM     #TEMP_ILUL
        WHERE    [CONTRACT_ID] LIKE 'N%1'
        GROUP BY [CONTRACT_KEY] 
	            ,[CONTRACT_ID]


				Set @InsertRowCount = @@ROWCOUNT

Commit Tran Stage_ILUL
		

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Stage_ILUL;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Stg_Incom_TERM_MPF]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- AUTHOR:		<KHNNR2>
-- CREATE DATE: <JUNE, 2019>
-- DESCRIPTION:	<Loading INCOM-TERM PAS data into IDS-Reinsurance DB from IDS-CORE DB>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Stg_Incom_TERM_MPF] 

	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@EFTV_DATE DATETIME,
	@ProcessLogId int
AS
	BEGIN 

	SET NOCOUNT ON;
		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0

		--declare @variable int
		--declare @variable2 int
		----DECLARE @EFTV_DATE DATETIME = '2018-10-31' 
		--DECLARE @CLAUSE NVARCHAR (50)= 'Month_Eftv_Date = '''+convert(varchar, @EFTV_DATE, 23)+''''
 
		--exec @variable= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_CONP1L_YTF] ' , @CLAUSE 
		--exec @variable2= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_CONP1T_YTF]', @CLAUSE
		--SET @variable+=@variable2 
		--exec @variable2= usp_Check_Data_2 '[IDS_CORE].[DBO].[MPF_CSNP1T_YTF]', @CLAUSE
		--SET @variable+=@variable2 


IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_CONP1L_YTF] 
		WHERE Month_Eftv_Date = @EFTV_DATE)
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_CONP1L_YTF'
		RETURN -1 
	END

IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_CONP1T_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE)
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_CONP1T_YTF'
		RETURN -1 
	END

IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_CORE].[DBO].[MPF_CSNP1T_YTF]
		WHERE Month_Eftv_Date = @EFTV_DATE) 
	BEGIN
		PRINT 'NO RECORDS FOUND IN MPF_CSNP1T_YTF'
		RETURN -1 
	END 


	Begin Try

	Begin Tran Stage_TERM

	IF OBJECT_ID('TEMPDB.DBO.#TEMP_TERM', 'U') IS NOT NULL DROP TABLE #TEMP_TERM

	CREATE TABLE #TEMP_TERM(
		[CENSUS_DATE] [DATE] NULL,
		[CONTRACT_KEY] [INT] NULL,
		[CONTRACT_ID] [NVARCHAR](11) NULL,
		[CLIENT_NUM] [NVARCHAR](20) NULL,
		[ANNUAL_PREM] [MONEY] NULL,
		[DTH_SUM_ASSD] [MONEY] NULL,
		[CC_SUM_ASSD] [MONEY] NULL,
		[TPD_SUM_ASSD] [MONEY] NULL)

	INSERT INTO #TEMP_TERM
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM,CLIENT_NUM, ANNUAL_PREM , DTH_SUM_ASSD , CC_SUM_ASSD , TPD_SUM_ASSD
	FROM [IDS_CORE].[DBO].[MPF_CONP1L_YTF]  WHERE Month_Eftv_Date = @EFTV_DATE

	INSERT INTO #TEMP_TERM
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, CLIENT_NUM, ANNUAL_PREM , DTH_SUM_ASSD , CC_SUM_ASSD , TPD_SUM_ASSD
	FROM [IDS_CORE].[DBO].[MPF_CONP1T_YTF]  WHERE Month_Eftv_Date = @EFTV_DATE

	INSERT INTO #TEMP_TERM
		SELECT @EFTV_DATE, EDW_CTRT_KEY, POL_NUM, CLIENT_NUM, ANNUAL_PREM , DTH_SUM_ASSD , CC_SUM_ASSD , TPD_SUM_ASSD
	FROM [IDS_CORE].[DBO].[MPF_CSNP1T_YTF] WHERE Month_Eftv_Date = @EFTV_DATE

-- DELETE ANY EXISTING DATA IN TARGET TABLE

	DELETE FROM [DBO].[MPF_INCOM_TERM] WHERE [CENSUS_DATE] = @EFTV_DATE

	Set @DeleteRowCount = @@ROWCOUNT

-- LOAD DATA FROM STAGING TABLE TO TARGET

	INSERT INTO [DBO].[MPF_INCOM_TERM]([CENSUS_DATE],[CONTRACT_KEY],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],CREATED_DATE,CREATED_BY,PROCESS_LOG_ID)
	    SELECT   @EFTV_DATE
                ,[CONTRACT_KEY]			 AS CONTRACT_KEY
	            ,[CONTRACT_ID]			 AS CONTRACT_ID
	            ,[CLIENT_NUM]            AS CLIENT_ID
	            ,NULL                    AS BENEFIT_CODE
                ,SUM([ANNUAL_PREM])      AS ANNUAL_PREM
	            ,SUM([DTH_SUM_ASSD] + [CC_SUM_ASSD] + [TPD_SUM_ASSD]) AS ANNUAL_BEN
				,GetDate() as Created_Date
				,system_user as Created_BY
				,@ProcessLogId as Process_Log_Id
        FROM     #TEMP_TERM
        WHERE    [CONTRACT_ID] LIKE 'N%1'
        GROUP BY [CONTRACT_KEY] 
	            ,[CONTRACT_ID]
				,[CLIENT_NUM]

				Set @InsertRowCount = @@ROWCOUNT

Commit Tran Stage_TERM
		

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Stage_TERM;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Stg_OPUS_Pas]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:		<KHNNR2>
-- CREATE DATE: <JUNE, 2019>
-- DESCRIPTION:	<Loading OPUS PAS data into IDS-Reinsurance DB from IDS-CORE DB>
-- =============================================
CREATE PROCEDURE [dbo].[usp_Stg_OPUS_Pas]
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@EFTV_DATE DATETIME,
	@ProcessLogId int
AS
	BEGIN 

	SET NOCOUNT ON;
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0

		--declare @variable int
		--declare @variable2 int
		----DECLARE @EFTV_DATE DATETIME = '2018-10-31' 
		--DECLARE @CLAUSE NVARCHAR (50)= 'Eftv_Date = '''+convert(varchar, @EFTV_DATE, 23)+''''
 
		--exec @variable= usp_Check_Data_2 '[IDS_Core].[STG].[Stg_Opus_Policy_Mth]' , 
		--@CLAUSE 
		--exec @variable2= usp_Check_Data_2 '[IDS_Core].[STG].[Stg_Opus_Cover_Mth]' , 
		--@CLAUSE
		--SET @variable+=@variable2 
		--IF @variable <> 0
		--RETURN -1

	SELECT * INTO #REC_COUNT FROM (
	SELECT 'Stg_Opus_Policy_Mth' AS SOURCE, COUNT(1) AS COUNT FROM [IDS_Core].[STG].[Stg_Opus_Policy_Mth]
		 WHERE Eftv_Date = @EFTV_DATE 
	UNION ALL
	SELECT 'Stg_Opus_Cover_Mth' AS SOURCE, COUNT(1) AS COUNT FROM [IDS_Core].[STG].[Stg_Opus_Cover_Mth]
		 WHERE Eftv_Date = @EFTV_DATE
	) A

	SELECT * FROM #REC_COUNT  

	IF EXISTS (SELECT * FROM #REC_COUNT WHERE COUNT = 0)
	BEGIN 
		PRINT 'NO RECORDS FOUND IN EITHER OF SOURCE TBALES'
		RETURN -1 
	END

	--IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_Core].[STG].[Stg_Opus_Policy_Mth]
	--	WHERE Eftv_Date = @EFTV_DATE) 
	--BEGIN
	--	PRINT 'NO RECORDS FOUND IN Stg_Opus_Policy_Mth'
	--	RETURN -1 
	--END 

	--	IF NOT EXISTS (SELECT TOP 1 1 FROM [IDS_Core].[STG].[Stg_Opus_Cover_Mth]
	--	WHERE Eftv_Date = @EFTV_DATE) 
	--BEGIN
	--	PRINT 'NO RECORDS FOUND IN Stg_Opus_Cover_Mth'
	--	RETURN -1 
	--END 


	Begin Try

	Begin Tran Stage_OPUS
	--Truncate Table Stg.Stg_Opus_Cov_Pas
	--Insert into Stg.Stg_Opus_Cov_Pas ([MP]
 --     ,[XTN]
 --     ,[POLNUM]
 --     ,[PRODUCT_OPTION_CODE]
 --     ,[RID_ACT_TABLE]
 --     ,[APROD1]
 --     ,[RID_BEN_SYMBOL]
 --     ,[POL_STATUS]
 --     ,[RIDAP]
 --     ,[RIDEXTRA]
 --     ,[RIDSI]
 --     ,[REC_TYPE]
 --     ,[BENEFIT_TYPE]
 --     ,[THIS_CEASE_DATE]
 --     ,[THIS_PE_DATE]
 --     ,[BAS_COV]
 --     ,[PF_COV]
 --     ,[GCD_DATE]
 --     ,[NCPI_INCREASE]
 --     ,[Created_Date_Time]
 --     ,[Import_Log_ID])

	--  Select   'OPUS'+Substring(convert(varchar,@EFTV_DATE,112),1,6)
	--		  ,'COV'
	--		   ,POLNUM, PRODUCT_OPTION_CODE, RID_ACT_TABLE, APROD1, RID_BEN_SYMBOL, POL_STATUS, RIDAP,RIDEXTRA
	--		  ,[RIDSI]
	--		  ,[REC_TYPE]
	--		  ,[BENEFIT_TYPE]
	--		  ,[THIS_CEASE_DATE]
	--		  ,[THIS_PE_DATE]
	--		  ,[BAS_COV]
	--		  ,[PF_COV]
	--		  ,[GCD_DATE]
	--		  ,[NCPI_INCREASE]
	--		  ,getdate()
	--		  ,[Import_Log_ID]
	--  	from [IDS_Core].[STG].[Stg_Opus_Cover_Mth]

	--		Truncate Table Stg.Stg_Opus_Pol_Pas
	--			Insert into Stg.Stg_Opus_Pol_Pas 
	--		 ( [MP]
	--		  ,[XTN]
	--		  ,[POLNUM]
	--		  ,[PROD_TYPE]
	--		  ,[COUNTRY_IND]
	--		  ,[COB]
	--		  ,[POL_STATUS]
	--		  ,[ACT_TABLE]
	--		  ,[BENEFIT_SYMBOL]
	--		  ,[PRODUCT_LINE]
	--		  ,[COLLECTOR]
	--		  ,[NOCOVERS]
	--		  ,[DOB]
	--		  ,[LINKSAVE]
	--		  ,[POLFEE]
	--		  ,[TOTIP]
	--		  ,[PREM_FREQ]
	--		  ,[ASSESSCODE]
	--		  ,[ASSESSMULT]
	--		  ,[SMOKER_STAT]
	--		  ,[REGISTER]
	--		  ,[SEX]
	--		  ,[BAL_AMT]
	--		  ,[BASIC_TABLE]
	--		  ,[BUSLINEIND]
	--		  ,[HOW_PAID]
	--		  ,[EXTGCU]
	--		  ,[FSP_DTH_PREM]
	--		  ,[DTB]
	--		  ,[Created_Date_Time]
	--		  ,[Import_Log_ID])

	--Select    'OPUS'+Substring(convert(varchar,@EFTV_DATE,112),1,6)
	--		  ,'POL'	
	--          ,[POLNUM]
	--		  ,[PROD_TYPE]
	--		  ,[COUNTRY_IND]
	--		  ,[COB]
	--		  ,[POL_STATUS]
	--		  ,[ACT_TABLE]
	--		  ,[BENEFIT_SYMBOL]
	--		  ,[PRODUCT_LINE]
	--		  ,[COLLECTOR]
	--		  ,[NOCOVERS]
	--		  ,[DOB]
	--		  ,[LINKSAVE]
	--		  ,[POLFEE]
	--		  ,[TOTIP]
	--		  ,[PREM_FREQ]
	--		  ,[ASSESSCODE]
	--		  ,[ASSESSMULT]
	--		  ,[SMOKER_STAT]
	--		  ,[REGISTER]
	--		  ,[SEX]
	--		  ,[BAL_AMT]
	--		  ,[BASIC_TABLE]
	--		  ,[BUSLINEIND]
	--		  ,[HOW_PAID]
	--		  ,[EXTGCU]
	--		  ,[FSP_DTH_PREM]
	--		  ,[DTB]
	--		  ,GETDATE()
	--		  ,[Import_Log_ID]

	--		  From [IDS_Core].[STG].[Stg_Opus_Policy_Mth]

		-- Delete any existing data in target table
	DELETE FROM [dbo].[PAS_OPUS] WHERE [CENSUS_DATE] = @EFTV_DATE




	Set @DeleteRowCount = @@ROWCOUNT

-- LOAD DATA FROM STAGING TABLE TO TARGET

INSERT INTO [dbo].[PAS_OPUS]([CENSUS_DATE],[CONTRACT_ID],[CLIENT_ID],[BENEFIT_CODE],[ANNUAL_PREM],[ANNUAL_BEN],CREATED_DATE,CREATED_BY,PROCESS_LOG_ID)
	SELECT @EFTV_DATE   AS CENSUS_DATE
          ,SUBSTRING(A.[POLNUM], 2,9) + ' ' + RIGHT(A.[POLNUM], 1) AS CONTRACT_ID
          ,NULL AS CLIENT_ID
	      ,NULL AS BENEFIT_CODE
          ,CASE [PROD_TYPE]
		     WHEN 6 THEN (CASE [PREM_FREQ] WHEN 1 THEN 0 WHEN 2 THEN 0.03 ELSE 0.06 END * [RIDAP]) -- Calculate premiums on cover, ingoring the investment premium on Unit Link
			             +[RIDAP]
			 ELSE [TOTIP] * [PREM_FREQ]
		   END AS ANNUAL_PREM
	      ,[RIDSI] AS ANNUAL_BEN
		  ,GetDate() as Created_Date
		  ,system_user as Created_BY
		  ,@ProcessLogId as Process_Log_Id
    FROM  (SELECT P.[POLNUM]
		         ,P.[POLFEE]
		         ,P.[TOTIP]
		         ,P.[PREM_FREQ]
			     ,P.[ASSESSMULT]
				 ,P.[PROD_TYPE]
			     ,P.[PRODUCT_LINE]
			     ,SUM(C.[RIDAP] + C.[RIDEXTRA]) AS RIDAP
			     ,SUM(C.[RIDSI]) AS RIDSI
           FROM   [IDS_Core].[STG].[Stg_Opus_Policy_Mth] P
		   JOIN   [IDS_Core].[STG].[Stg_Opus_Cover_Mth] C ON P.[POLNUM] = C.[POLNUM]
		   WHERE  P.[COUNTRY_IND] = 1                             -- AUS
		   AND    P.[POL_STATUS] = 'I'                            -- Inforce
           AND    P.[PROD_TYPE] IN (4, 6)                         -- Standalone Term & Unit-Link
		   AND    NOT(P.[PROD_TYPE] = 6 AND P.PRODUCT_LINE = 'F') -- Exclude AUINVFSP
		   AND    NOT(P.[PROD_TYPE] = 6 AND C.REC_TYPE = 'BAS')   -- Exclude Investment Record on Unit-Link Cover file
           GROUP
		   BY     P.[POLNUM]
	             ,P.[POLFEE]
		         ,P.[TOTIP]
		         ,P.[PREM_FREQ]
			     ,P.[ASSESSMULT]
     			 ,P.[PROD_TYPE]
 			     ,P.[PRODUCT_LINE]
		  ) A


				Set @InsertRowCount = @@ROWCOUNT

Commit Tran Stage_OPUS
		

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH


		---- In case of error during updating columns roll back the transaction and throw exception 
		IF @@TRANCOUNT > 0 
		ROLLBACK TRAN Stage_OPUS;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

		THROW;
END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Assessment_Able_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Updated date: Jul 2020
-- Description:	RGU-793 - Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure  and [Layer_2_Curr_Residual_Exposure].
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Nov 2020
-- Description:	Claim and premium are aligned based on QS rerun requirement - Look up to premum Inforce table for QS treaty id update in listing table
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Feb 2021
-- Description:	RGU-1244 Remove Claim and premium are aligned based on QS rerun requirement, ILUL Change is still excluded 
-- =============================================



CREATE PROCEDURE [dbo].[usp_Treaty_Assessment_Able_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;
BEGIN TRAN T1;
exec [dbo].[usp_Treaty_Product_Able_Claim_Listing] @ProcessingMonthYear ;

UPDATE [dbo].[Able_Claim_Listing]
SET  [IL_UL_Policy_Val_Exceeds_SI]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_date]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_rule]= NULL
      ,[Is_Layer_0_Covered]= NULL
      ,[Layer_0_Reins_Code]= NULL
      ,[Layer_0_Reins_Percent]= NULL
      ,[Layer_0_Init_Reins_Exposure]= NULL
      ,[Layer_0_Curr_Reins_Exposure]= NULL
      ,[Layer_0_Rule]= NULL
      ,[Is_Layer_1_Covered]= NULL
      ,[Layer_1_Treaty_Id]= NULL
      ,[Layer_1_Treaty_Percent]= NULL
      ,[Layer_1_Reins_Percent]= NULL
      ,[Layer_1_Init_Reins_Exposure]= NULL
      ,[Layer_1_Curr_Reins_Exposure]= NULL
      ,[Layer_1_Init_Residual_Exposure]= NULL
      ,[Layer_1_Curr_Residual_Exposure]= NULL
      ,[Layer_1_Treaty_Rule]= NULL
      ,[Is_Layer_2_Covered]= NULL
      ,[Layer_2_Treaty_Id]= NULL
      ,[Layer_2_Reins_Percent] = NULL
      ,[Layer_2_Init_Reins_Exposure] = NULL
      ,[Layer_2_Curr_Reins_Exposure] = NULL
      ,[Layer_2_Init_Residual_Exposure] = NULL
      ,[Layer_2_Curr_Residual_Exposure] = NULL
      ,[Layer_2_Treaty_Rule] = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --   
--UPDATE [dbo].[Able_Claim_Listing]
--SET IL_UL_Policy_Val_Exceeds_SI = NULL,
--		IL_UL_Policy_Val_Exceeds_SI_date = NULL,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = 'Reins_IL_UL_Not_Applicable', --'Not Applicable for NMLA'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
 --
 -- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- UPDATE [dbo].[Able_Claim_Listing] 
--SET IL_UL_Policy_Val_Exceeds_SI = 'Y',
--		IL_UL_Policy_Val_Exceeds_SI_date = I.Census_date,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = I.COMMENT, --'Applicable for ILUL'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
--from [dbo].[Able_Claim_Listing]  A Join [dbo].[INFORCE] I
--ON A.EDW_Contract_Key = I.Contract_Key
--and A.EDW_Contract_Id = I.CONTRACT_ID
--and A.Product_System_Code = I.Product_System_code 
--where A.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and A.[Are_Details_Inadequate] ='N'
-- and I.AT_RISK_AMT = '0' AND I.COMMENT Like 'EXCLUDED AS UNIT LINKED BAL>SA' 
-- and A.Incurred_Date >=  I.Census_Date

--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--   UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_0_Covered = 'N' ,
--[dbo].[Able_Claim_Listing].Layer_0_Reins_Code = 'N/A',
--	[dbo].[Able_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
--	[dbo].[Able_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
--	[dbo].[Able_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
--	[dbo].[Able_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
--	[dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
--		[Layer_1_Reins_Percent] = 0.00,
--		[Layer_1_Init_Reins_Exposure] = 0.000000,
--		[Layer_1_Curr_Reins_Exposure] = 0.000000,
--		[Layer_1_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END,
--		[Layer_1_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END 
--      ,[Is_Layer_2_Covered] = 'N'
--      ,[Layer_2_Treaty_Id] = -1
--      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
--      ,[Layer_2_Reins_Percent] = 0.00
--      ,[Layer_2_Init_Reins_Exposure] = 0.000000
--	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
--      ,[Layer_2_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END
--	  ,[Layer_2_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- and IL_UL_Policy_Val_Exceeds_SI = 'Y';

--    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_0_Covered = 'N' ,
[dbo].[Able_Claim_Listing].Layer_0_Reins_Code = 'N/A',
	[dbo].[Able_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
	[dbo].[Able_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
	[dbo].[Able_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
	[dbo].[Able_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
	[dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
		[Layer_1_Reins_Percent] = 0.00,
		[Layer_1_Init_Reins_Exposure] = 0.000000,
		[Layer_1_Curr_Reins_Exposure] = 0.000000,
		[Layer_1_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END,
		[Layer_1_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END 
      ,[Is_Layer_2_Covered] = 'N'
      ,[Layer_2_Treaty_Id] = -1
      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
      ,[Layer_2_Reins_Percent] = 0.00
      ,[Layer_2_Init_Reins_Exposure] = 0.000000
	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
      ,[Layer_2_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END
	  ,[Layer_2_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
 and EDW_Sum_Insured_on_ID IS NULL;
  -- 
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

  UPDATE [dbo].[Able_Claim_Listing]
SET Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * 0.000000,
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date >= Treaty.[Treaty_Eftv_Date]

   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Able_Claim_Listing]
SET  Is_Layer_0_Covered = 'Y' ,
Layer_0_Reins_Code = layer.Reinsurer_Code,
Layer_0_Reins_Percent = layer.[Reins_Percent] ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * layer.[Reins_Percent],
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * layer.[Reins_Percent],
Layer_0_Rule =  'Reins_Layer_0_Exists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.[Month_Eftv_Date] = layer.[Month_Eftv_Date]
 and trg.Product_System_Code = layer.Product_System_Code
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.Product_Option_Code
and trg.EDW_contract_risk_key = layer.contract_risk_key
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and trg.Incurred_Date = layer.Incurred_Date
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
;with w_lyer0_duplicates
AS
( 
SELECT DISTINCT contract_key, ISNULL(edw_product_option_code,product_option_code) edw_product_option_code
from 
[dbo].[ODB_Layer_0_Policies]
WHERE exclude_flag = 'Y'
UNION
SELECT DISTINCT contract_key, product_option_code edw_product_option_code
from 
[STG].[Err_ODB_Layer_0_Policies]
  where import_log_id = (SELECT max(import_log_id) from [STG].[Err_ODB_Layer_0_Policies])
  and contract_key is not null
)
UPDATE [dbo].[Able_Claim_Listing]
SET  Is_Layer_0_Covered = NULL ,
Layer_0_Reins_Code = NULL,
Layer_0_Reins_Percent = NULL ,
[Layer_0_Init_Reins_Exposure] = NULL,
[Layer_0_Curr_Reins_Exposure] = NULL,
Layer_0_Rule =  'Reins_Layer_0_Exception_Policy',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg, 
w_lyer0_duplicates layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.EDW_Product_Option_Code
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Able_Claim_Listing]
SET  Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * 0.000000,
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_NotExists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NULL
 and Layer_0_Rule IS NULL
 and [Are_Details_Inadequate] ='N'

    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_0_100_Percent_Reinsured', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Layer_0_Reins_Percent = 1
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN 'Y' ELSE 'N' END,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.Treaty_Id ELSE -1 END,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.[Treaty_Relevant_Percent] ELSE 0.00 END,
[dbo].[Able_Claim_Listing].Layer_0_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Exists' END,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Treaty_1a_Not_Applicable' END, 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date] --

   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

---- 2017-11-30 incurred claims -Boundary condition Treaty id update

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = EOMONTH(trg.Incurred_Date) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Incurred_Date <= '2017-11-30'

-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Incurred_Date > '2017-11-30'
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT


UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1b',--
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS  NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1b'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]



UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date < Treaty.Treaty_Min_Policy_Commence_Date --
------
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2a',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2a'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'


UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2a',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2b',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'


UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2b',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Able_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2b'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date;
--
  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Product_Exclusion',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and Reins_Benefit_Type = 'N/A'
  and [Are_Details_Inadequate] ='N';
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N';

     SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Able_Claim_Listing]
SET [Layer_1_Reins_Percent] = (1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent],
[Layer_1_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) *((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Init_Residual_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Layer_1_Curr_Residual_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NOT NULL
  and [Are_Details_Inadequate] ='N';
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 UPDATE [dbo].[Able_Claim_Listing]
SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_1_Pre_Treaty_5'
	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg, dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and Treaty.[Treaty_Name] = 'Treaty 3'
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  and trg.[Are_Details_Inadequate] = 'N'
  and trg.Incurred_Date < Treaty.Treaty_Eftv_Date
 ;
 --
    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[Able_Claim_Listing]
SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Is_Layer_1_Covered = 'N'
  and trg.[Are_Details_Inadequate] = 'N'
 ;
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[Able_Claim_Listing]
SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Reins_Benefit_Category_Group = 'N/A'
  and trg.[Are_Details_Inadequate] = 'N'
 ;

    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 --Surplus Per Life Change requirement - New Logic 
 -- Changed by - RRNAA2
 -- Change Date - Nov 2019
 -- The new logic is to pick up the surplus percent from Inforce table where it will be calculated and in the traty assessment use the same to identify the residuals.
 

 -- Changed by - RRNAA2
 -- Change Date - July 2020 - RGU-793
 -- Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure  and [Layer_2_Curr_Residual_Exposure].
 

 UPDATE [dbo].[Able_Claim_Listing]
 SET [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'Y',
     [dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = (I.SS_PC/100),
	 [dbo].[Able_Claim_Listing].[Premium_Census_Date] = I.CENSUS_DATE,
     [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] = 5,
     [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = I.SUM_INSURED_AMT * (I.SS_PC/100),
     [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =   trg.Layer_1_Init_Residual_Exposure - (I.SUM_INSURED_AMT * (I.SS_PC/100)),
     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100),
     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.Layer_1_Curr_Residual_Exposure - (trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100)),
     [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh',
     [dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate(),
     [dbo].[Able_Claim_Listing].updated_by  = system_user
 FROM [dbo].[Able_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and trg.Is_Layer_1_Covered IS NOT NULL
 AND trg.Is_Layer_1_Covered = 'Y'
 and trg.[Is_Layer_2_Covered] IS NULL
 and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N',
    [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1,
    [dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
    [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = 0.00,
    [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure],
    [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] =  0.00,
    [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure],
    [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh',
    [dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate(),
    [dbo].[Able_Claim_Listing].updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg
where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.Is_Layer_0_Covered IS NOT NULL
and trg.Is_Layer_1_Covered IS NOT NULL
AND trg.[Is_Layer_2_Covered] IS NULL
AND trg.Is_Layer_1_Covered = 'Y'
and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--; WITH w_surplus as
--(
----Ensure the selected policies don't have other benefits sitting in error due to incomplete data i.e., 
---- claim in Access AMP stage (or) Sum Insured is null (or) Benefit is not created
---- If the claim is already archived , ignore the benefit
---- 
--SELECT trg.edw_contract_key,
--       surplus.Treaty_Id,        
--	   surplus.Benefit_Type Reins_Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Incurred_Date,
--	   SUM(CASE WHEN surplus.Benefit_Type = 'IP' THEN ISNULL([EDW_Monthly_Benefit_on_ID],0) 
--	            WHEN surplus.Benefit_Type = 'LS' THEN ISNULL(EDW_Sum_Insured_on_ID,0)
--		   END) EDW_Sum_Insured_on_ID,
--	   SUM(ISNULL([Layer_1_Init_Residual_Exposure],0)) [Layer_1_Init_Residual_Exposure],
--	   MAX(CASE WHEN surplus.Benefit_Type = 'IP' THEN surplus.Surplus_Threshold_IP_Amount 
--	            WHEN surplus.Benefit_Type = 'LS' THEN surplus.Surplus_Threshold_LS_Amount
--		   END) Surplus_Threshold_Amount
--FROM [dbo].[Able_Claim_Listing] trg
-- INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
-- ON surplus.Benefit_Category_Group = trg.Reins_Benefit_Category_Group
-- AND trg.Reins_Benefit_Type = surplus.Benefit_Type
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
-- and NOT EXISTS                   (SELECT 'X'
--                                   FROM  [dbo].[Able_Claim_Listing] 
--                                  WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
--								    and [Is_Layer_2_Covered] = 'N'
--									AND edw_contract_key = trg.edw_contract_key
--									AND Incurred_Date = trg.Incurred_Date)
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  and trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  AND  surplus.Treaty_Id = 5
--  and trg.[Are_Details_Inadequate] = 'N'
--GROUP BY trg.edw_contract_key, 
--surplus.Treaty_Id,
--	   surplus.Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Incurred_Date
--)
--UPDATE [dbo].[Able_Claim_Listing]
--SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'Y'
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] = surplus.Treaty_Id,
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT),
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--      [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh'
--	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Able_Claim_Listing] trg
-- INNER JOIN w_surplus surplus
-- ON surplus.edw_contract_key = trg.edw_contract_key
-- AND trg.Reins_Benefit_Type = surplus.Reins_Benefit_Type
-- AND trg.Reins_Benefit_Category_Group = surplus.Reins_Benefit_Category_Group
-- AND trg.Incurred_Date = surplus.Incurred_Date
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Is_Layer_2_Covered] IS NULL
--  and trg.[Are_Details_Inadequate] = 'N'
--  and surplus.[Layer_1_Init_Residual_Exposure] > surplus.Surplus_Threshold_Amount;
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N'
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
--	  [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * 0.00,
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * 0.00),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg. [EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * 0.00,
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * 0.00),
--      [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh'
--	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Able_Claim_Listing] trg
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Are_Details_Inadequate] = 'N'
-- ;

--    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
----
--UPDATE [dbo].[Able_Claim_Listing]
--SET [Layer_2_Reins_Percent] = [Layer_2_Init_Reins_Exposure]/(CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END),
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--WHERE 1=1 
--and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--  and Is_Layer_1_Covered IS NOT NULL
--  and [Is_Layer_2_Covered] IS NOT NULL
--  and [Are_Details_Inadequate] ='N'
--  and [Is_Layer_2_Covered] = 'Y';
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[Able_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
--------------------
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON
	
GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Assessment_CMS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		RRNAA2
-- Create date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================



CREATE PROCEDURE [dbo].[usp_Treaty_Assessment_CMS_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;
BEGIN TRAN T1;
exec [dbo].[usp_Treaty_Product_CMS_Claim_Listing] @ProcessingMonthYear ;

UPDATE [dbo].[CMS_Claim_Listing]
SET  [IL_UL_Policy_Val_Exceeds_SI]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_date]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_rule]= NULL
      ,[Is_Layer_0_Covered]= NULL
      ,[Layer_0_Reins_Code]= NULL
      ,[Layer_0_Reins_Percent]= NULL
      ,[Layer_0_Init_Reins_Exposure]= NULL
      ,[Layer_0_Curr_Reins_Exposure]= NULL
      ,[Layer_0_Rule]= NULL
      ,[Is_Layer_1_Covered]= NULL
      ,[Layer_1_Treaty_Id]= NULL
      ,[Layer_1_Treaty_Percent]= NULL
      ,[Layer_1_Reins_Percent]= NULL
      ,[Layer_1_Init_Reins_Exposure]= NULL
      ,[Layer_1_Curr_Reins_Exposure]= NULL
      ,[Layer_1_Init_Residual_Exposure]= NULL
      ,[Layer_1_Curr_Residual_Exposure]= NULL
      ,[Layer_1_Treaty_Rule]= NULL
      ,[Is_Layer_2_Covered]= NULL
      ,[Layer_2_Treaty_Id]= NULL
      ,[Layer_2_Reins_Percent] = NULL
      ,[Layer_2_Init_Reins_Exposure] = NULL
      ,[Layer_2_Curr_Reins_Exposure] = NULL
      ,[Layer_2_Init_Residual_Exposure] = NULL
      ,[Layer_2_Curr_Residual_Exposure] = NULL
      ,[Layer_2_Treaty_Rule] = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);

  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --   
--UPDATE [dbo].[Able_Claim_Listing]
--SET IL_UL_Policy_Val_Exceeds_SI = NULL,
--		IL_UL_Policy_Val_Exceeds_SI_date = NULL,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = 'Reins_IL_UL_Not_Applicable', --'Not Applicable for NMLA'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
 --
 -- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- UPDATE [dbo].[Able_Claim_Listing] 
--SET IL_UL_Policy_Val_Exceeds_SI = 'Y',
--		IL_UL_Policy_Val_Exceeds_SI_date = I.Census_date,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = I.COMMENT, --'Applicable for ILUL'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
--from [dbo].[Able_Claim_Listing]  A Join [dbo].[INFORCE] I
--ON A.EDW_Contract_Key = I.Contract_Key
--and A.EDW_Contract_Id = I.CONTRACT_ID
--and A.Product_System_Code = I.Product_System_code 
--where A.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and A.[Are_Details_Inadequate] ='N'
-- and I.AT_RISK_AMT = '0' AND I.COMMENT Like 'EXCLUDED AS UNIT LINKED BAL>SA' 
-- and A.Incurred_Date >=  I.Census_Date

--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--   UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_0_Covered = 'N' ,
--[dbo].[Able_Claim_Listing].Layer_0_Reins_Code = 'N/A',
--	[dbo].[Able_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
--	[dbo].[Able_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
--	[dbo].[Able_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
--	[dbo].[Able_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
--	[dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'N',
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = -1,
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
--	[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
--		[Layer_1_Reins_Percent] = 0.00,
--		[Layer_1_Init_Reins_Exposure] = 0.000000,
--		[Layer_1_Curr_Reins_Exposure] = 0.000000,
--		[Layer_1_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END,
--		[Layer_1_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END 
--      ,[Is_Layer_2_Covered] = 'N'
--      ,[Layer_2_Treaty_Id] = -1
--      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
--      ,[Layer_2_Reins_Percent] = 0.00
--      ,[Layer_2_Init_Reins_Exposure] = 0.000000
--	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
--      ,[Layer_2_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END
--	  ,[Layer_2_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- and IL_UL_Policy_Val_Exceeds_SI = 'Y';

--    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_0_Covered = 'N' ,
[dbo].[CMS_Claim_Listing].Layer_0_Reins_Code = 'N/A',
	[dbo].[CMS_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
	[dbo].[CMS_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
	[dbo].[CMS_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
	[dbo].[CMS_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
	[dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
	[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
	[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
	[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
		[Layer_1_Reins_Percent] = 0.00,
		[Layer_1_Init_Reins_Exposure] = 0.000000,
		[Layer_1_Curr_Reins_Exposure] = 0.000000,
		[Layer_1_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END,
		[Layer_1_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END 
      ,[Is_Layer_2_Covered] = 'N'
      ,[Layer_2_Treaty_Id] = -1
      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
      ,[Layer_2_Reins_Percent] = 0.00
      ,[Layer_2_Init_Reins_Exposure] = 0.000000
	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
      ,[Layer_2_Init_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END
	  ,[Layer_2_Curr_Residual_Exposure] = CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
 and EDW_Sum_Insured_on_ID IS NULL;
  -- 
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

  UPDATE [dbo].[CMS_Claim_Listing]
SET Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * 0.000000,
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date >= Treaty.[Treaty_Eftv_Date]

   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[CMS_Claim_Listing]
SET  Is_Layer_0_Covered = 'Y' ,
Layer_0_Reins_Code = layer.Reinsurer_Code,
Layer_0_Reins_Percent = layer.[Reins_Percent] ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * layer.[Reins_Percent],
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * layer.[Reins_Percent],
Layer_0_Rule =  'Reins_Layer_0_Exists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.[Month_Eftv_Date] = layer.[Month_Eftv_Date]
 and trg.Product_System_Code = layer.Product_System_Code
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.Product_Option_Code
and trg.EDW_contract_risk_key = layer.contract_risk_key
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and trg.Incurred_Date = layer.Incurred_Date
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
;with w_lyer0_duplicates
AS
( 
SELECT DISTINCT contract_key, ISNULL(edw_product_option_code,product_option_code) edw_product_option_code
from 
[dbo].[ODB_Layer_0_Policies]
WHERE exclude_flag = 'Y'
UNION
SELECT DISTINCT contract_key, product_option_code edw_product_option_code
from 
[STG].[Err_ODB_Layer_0_Policies]
  where import_log_id = (SELECT max(import_log_id) from [STG].[Err_ODB_Layer_0_Policies])
  and contract_key is not null
)
UPDATE [dbo].[CMS_Claim_Listing]
SET  Is_Layer_0_Covered = NULL ,
Layer_0_Reins_Code = NULL,
Layer_0_Reins_Percent = NULL ,
[Layer_0_Init_Reins_Exposure] = NULL,
[Layer_0_Curr_Reins_Exposure] = NULL,
Layer_0_Rule =  'Reins_Layer_0_Exception_Policy',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg, 
w_lyer0_duplicates layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.EDW_Product_Option_Code
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[CMS_Claim_Listing]
SET  Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * 0.000000,
[Layer_0_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_NotExists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NULL
 and Layer_0_Rule IS NULL
 and [Are_Details_Inadequate] ='N'

    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_0_100_Percent_Reinsured', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Layer_0_Reins_Percent = 1
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN 'Y' ELSE 'N' END,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.Treaty_Id ELSE -1 END,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.[Treaty_Relevant_Percent] ELSE 0.00 END,
[dbo].[CMS_Claim_Listing].Layer_0_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Exists' END,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Treaty_1a_Not_Applicable' END, 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date] --

   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

---- 2017-11-30 incurred claims -Boundary condition Treaty id update

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = EOMONTH(trg.Incurred_Date) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Incurred_Date <= '2017-11-30'

-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Incurred_Date > '2017-11-30'
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT


UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1b',--
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS  NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1b'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]



UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date < Treaty.Treaty_Min_Policy_Commence_Date --
------
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2a',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2a'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'


UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2a',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Able_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2b',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Able_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'


UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2b',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[CMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2b'
and trg.Incurred_Date between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date;
--
  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Product_Exclusion',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and Reins_Benefit_Type = 'N/A'
  and [Are_Details_Inadequate] ='N';
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[CMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N';

     SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [Layer_1_Reins_Percent] = (1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent],
[Layer_1_Init_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) *((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Curr_Reins_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Init_Residual_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END) * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Layer_1_Curr_Residual_Exposure] = (CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_FD] ELSE [EDW_Sum_Insured_on_FD] END) * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NOT NULL
  and [Are_Details_Inadequate] ='N';
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 UPDATE [dbo].[CMS_Claim_Listing]
SET   [dbo].[CMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_1_Pre_Treaty_5'
	  ,[dbo].[CMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[CMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg, dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and Treaty.[Treaty_Name] = 'Treaty 3'
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  and trg.[Are_Details_Inadequate] = 'N'
  and trg.Incurred_Date < Treaty.Treaty_Eftv_Date
 ;
 --
    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[CMS_Claim_Listing]
SET   [dbo].[CMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[CMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[CMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Is_Layer_1_Covered = 'N'
  and trg.[Are_Details_Inadequate] = 'N'
 ;
--
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[CMS_Claim_Listing]
SET   [dbo].[CMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[CMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[CMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Reins_Benefit_Category_Group = 'N/A'
  and trg.[Are_Details_Inadequate] = 'N'
 ;

    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 --Surplus Per Life Change requirement - New Logic 
 -- Changed by - RRNAA2
 -- Change Date - Nov 2019
 -- The new logic is to pick up the surplus percent from Inforce table where it will be calculated and in the traty assessment use the same to identify the residuals.
 

 -- Changed by - RRNAA2
 -- Change Date - July 2020 - RGU-793
 -- Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure  and [Layer_2_Curr_Residual_Exposure].
 

 UPDATE [dbo].[CMS_Claim_Listing]
 SET [dbo].[CMS_Claim_Listing].[Is_Layer_2_Covered] = 'Y',
     [dbo].[CMS_Claim_Listing].[Layer_2_Reins_Percent] = (I.SS_PC/100),
	 [dbo].[CMS_Claim_Listing].[Premium_Census_Date] = I.CENSUS_DATE,
     [dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Id] = 5,
     [dbo].[CMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = I.SUM_INSURED_AMT * (I.SS_PC/100),
     [dbo].[CMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =   trg.Layer_1_Init_Residual_Exposure - (I.SUM_INSURED_AMT * (I.SS_PC/100)),
     [dbo].[CMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100),
     [dbo].[CMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.Layer_1_Curr_Residual_Exposure - (trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100)),
     [dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh',
     [dbo].[CMS_Claim_Listing].[Updated_Date_Time] = getdate(),
     [dbo].[CMS_Claim_Listing].updated_by  = system_user
 FROM [dbo].[CMS_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Incurred_Date)-1, -1) 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and trg.Is_Layer_1_Covered IS NOT NULL
 AND trg.Is_Layer_1_Covered = 'Y'
 and trg.[Is_Layer_2_Covered] IS NULL
 and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].[Is_Layer_2_Covered] = 'N',
    [dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Id] =-1,
    [dbo].[CMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
    [dbo].[CMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = 0.00,
    [dbo].[CMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure],
    [dbo].[CMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] =  0.00,
    [dbo].[CMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure],
    [dbo].[CMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh',
    [dbo].[CMS_Claim_Listing].[Updated_Date_Time] = getdate(),
    [dbo].[CMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg
where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.Is_Layer_0_Covered IS NOT NULL
and trg.Is_Layer_1_Covered IS NOT NULL
AND trg.[Is_Layer_2_Covered] IS NULL
AND trg.Is_Layer_1_Covered = 'Y'
and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--; WITH w_surplus as
--(
----Ensure the selected policies don't have other benefits sitting in error due to incomplete data i.e., 
---- claim in Access AMP stage (or) Sum Insured is null (or) Benefit is not created
---- If the claim is already archived , ignore the benefit
---- 
--SELECT trg.edw_contract_key,
--       surplus.Treaty_Id,        
--	   surplus.Benefit_Type Reins_Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Incurred_Date,
--	   SUM(CASE WHEN surplus.Benefit_Type = 'IP' THEN ISNULL([EDW_Monthly_Benefit_on_ID],0) 
--	            WHEN surplus.Benefit_Type = 'LS' THEN ISNULL(EDW_Sum_Insured_on_ID,0)
--		   END) EDW_Sum_Insured_on_ID,
--	   SUM(ISNULL([Layer_1_Init_Residual_Exposure],0)) [Layer_1_Init_Residual_Exposure],
--	   MAX(CASE WHEN surplus.Benefit_Type = 'IP' THEN surplus.Surplus_Threshold_IP_Amount 
--	            WHEN surplus.Benefit_Type = 'LS' THEN surplus.Surplus_Threshold_LS_Amount
--		   END) Surplus_Threshold_Amount
--FROM [dbo].[Able_Claim_Listing] trg
-- INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
-- ON surplus.Benefit_Category_Group = trg.Reins_Benefit_Category_Group
-- AND trg.Reins_Benefit_Type = surplus.Benefit_Type
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
-- and NOT EXISTS                   (SELECT 'X'
--                                   FROM  [dbo].[Able_Claim_Listing] 
--                                  WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
--								    and [Is_Layer_2_Covered] = 'N'
--									AND edw_contract_key = trg.edw_contract_key
--									AND Incurred_Date = trg.Incurred_Date)
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  and trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  AND  surplus.Treaty_Id = 5
--  and trg.[Are_Details_Inadequate] = 'N'
--GROUP BY trg.edw_contract_key, 
--surplus.Treaty_Id,
--	   surplus.Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Incurred_Date
--)
--UPDATE [dbo].[Able_Claim_Listing]
--SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'Y'
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] = surplus.Treaty_Id,
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT),
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * (CAST(surplus.[Layer_1_Init_Residual_Exposure]  - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--      [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh'
--	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Able_Claim_Listing] trg
-- INNER JOIN w_surplus surplus
-- ON surplus.edw_contract_key = trg.edw_contract_key
-- AND trg.Reins_Benefit_Type = surplus.Reins_Benefit_Type
-- AND trg.Reins_Benefit_Category_Group = surplus.Reins_Benefit_Category_Group
-- AND trg.Incurred_Date = surplus.Incurred_Date
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Is_Layer_2_Covered] IS NULL
--  and trg.[Are_Details_Inadequate] = 'N'
--  and surplus.[Layer_1_Init_Residual_Exposure] > surplus.Surplus_Threshold_Amount;
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Able_Claim_Listing]
--SET   [dbo].[Able_Claim_Listing].[Is_Layer_2_Covered] = 'N'
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Treaty_Id] =-1
--      ,[dbo].[Able_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
--	  [dbo].[Able_Claim_Listing].[Layer_2_Init_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * 0.00,
--     [dbo].[Able_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_ID] ELSE trg.EDW_Sum_Insured_on_ID END) * 0.00),
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = (CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg. [EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * 0.00,
--     [dbo].[Able_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - ((CASE trg.Reins_Benefit_Type WHEN 'IP' THEN trg.[EDW_Monthly_Benefit_on_FD] ELSE trg.[EDW_Sum_Insured_on_FD] END) * 0.00),
--      [dbo].[Able_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh'
--	  ,[dbo].[Able_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Able_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Able_Claim_Listing] trg
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Are_Details_Inadequate] = 'N'
-- ;

--    SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
----
--UPDATE [dbo].[Able_Claim_Listing]
--SET [Layer_2_Reins_Percent] = [Layer_2_Init_Reins_Exposure]/(CASE Reins_Benefit_Type WHEN 'IP' THEN [EDW_Monthly_Benefit_on_ID] ELSE EDW_Sum_Insured_on_ID END),
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--WHERE 1=1 
--and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--  and Is_Layer_1_Covered IS NOT NULL
--  and [Is_Layer_2_Covered] IS NOT NULL
--  and [Are_Details_Inadequate] ='N'
--  and [Is_Layer_2_Covered] = 'Y';
----
--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[Able_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
--------------------
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON
	
GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Assessment_FigTree_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Updated date: Jul 2020
-- Description:	RGU-793 - Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure  and [Layer_2_Curr_Residual_Exposure].
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Nov 2020
-- Description:	Claim and premium are aligned based on QS rerun requirement - Look up to premum Inforce table for QS treaty id update in listing table
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Feb 2021
-- Description:	RGU-1244 Remove Claim and premium are aligned based on QS rerun requirement, ILUL Change is still excluded 
-- =============================================


CREATE PROCEDURE [dbo].[usp_Treaty_Assessment_FigTree_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;
BEGIN TRAN T1;

UPDATE [dbo].[Figtree_Claim_Listing]
SET  [Reins_Benefit_Period] = NULL
      ,[Reins_Benefit_Type]= NULL
      ,[Reins_Benefit_Category]= NULL
      ,[Reins_Benefit_Category_Group]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_date]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_rule]= NULL
      ,[Is_Layer_0_Covered]= NULL
      ,[Layer_0_Reins_Code]= NULL
      ,[Layer_0_Reins_Percent]= NULL
      ,[Layer_0_Init_Reins_Exposure]= NULL
      ,[Layer_0_Curr_Reins_Exposure]= NULL
      ,[Layer_0_Rule]= NULL
      ,[Is_Layer_1_Covered]= NULL
      ,[Layer_1_Treaty_Id]= NULL
      ,[Layer_1_Treaty_Percent]= NULL
      ,[Layer_1_Reins_Percent]= NULL
      ,[Layer_1_Init_Reins_Exposure]= NULL
      ,[Layer_1_Curr_Reins_Exposure]= NULL
      ,[Layer_1_Init_Residual_Exposure]= NULL
      ,[Layer_1_Curr_Residual_Exposure]= NULL
      ,[Layer_1_Treaty_Rule]= NULL
      ,[Is_Layer_2_Covered]= NULL
      ,[Layer_2_Treaty_Id]= NULL
      ,[Layer_2_Reins_Percent] = NULL
      ,[Layer_2_Init_Reins_Exposure] = NULL
      ,[Layer_2_Curr_Reins_Exposure] = NULL
      ,[Layer_2_Init_Residual_Exposure] = NULL
      ,[Layer_2_Curr_Residual_Exposure] = NULL
      ,[Layer_2_Treaty_Rule] = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
 --   
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Figtree_Claim_Listing]
--SET IL_UL_Policy_Val_Exceeds_SI = NULL,
--		IL_UL_Policy_Val_Exceeds_SI_date = NULL,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = 'Reins_IL_UL_Not_Applicable', --'Not Applicable for NMLA'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- --
--  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Figtree_Claim_Listing] 
--SET IL_UL_Policy_Val_Exceeds_SI = 'Y',
--		IL_UL_Policy_Val_Exceeds_SI_date = I.Census_date,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = I.COMMENT, --'Applicable for ILUL'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
--from [dbo].[Figtree_Claim_Listing]  F Join [dbo].[INFORCE] I
--ON F.EDW_Contract_Key = I.Contract_Key
--and F.EDW_Contract_Id = I.CONTRACT_ID
--and F.EDW_Product_System_Code = I.Product_System_code 
--where F.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and F.[Are_Details_Inadequate] ='N'
-- and I.AT_RISK_AMT = '0' AND I.COMMENT Like 'EXCLUDED AS UNIT LINKED BAL>SA' 
-- and F.Date_Of_Death >=  I.Census_Date

--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 -- 
UPDATE [dbo].[Figtree_Claim_Listing]
SET  
[dbo].[Figtree_Claim_Listing].Reins_Benefit_Type = p.Reins_Benefit_Type,
[dbo].[Figtree_Claim_Listing].Reins_Benefit_Category = p.Reins_Benefit_Category,
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg, 
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business,
				 Reins_Benefit_Type,
				 Reins_Benefit_Category
		 FROM	 dbo.Reins_Treaty_Product) p
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Reins_Benefit_Type = 'N/A',
[dbo].[Figtree_Claim_Listing].Reins_Benefit_Category = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Reins_Benefit_Type IS NULL
  and [Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Reins_Benefit_Period = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[Figtree_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = trg.Reins_Benefit_Period
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[Figtree_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = 'N/A'
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Reins_Benefit_Category_Group = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[Figtree_Claim_Listing].Reins_Benefit_Category_Group IS NULL
and [Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- UPDATE [dbo].[Figtree_Claim_Listing]
--SET [dbo].[Figtree_Claim_Listing].Is_Layer_0_Covered = 'N' ,
--[dbo].[Figtree_Claim_Listing].Layer_0_Reins_Code = 'N/A',
--	[dbo].[Figtree_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
--	[dbo].[Figtree_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
--	[dbo].[Figtree_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
--	[dbo].[Figtree_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
--	[dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
--	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
--	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
--	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
--		[Layer_1_Reins_Percent] = 0.00,
--		[Layer_1_Init_Reins_Exposure] = 0.000000,
--		[Layer_1_Curr_Reins_Exposure] = 0.000000,
--		[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID,
--		[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
--      ,[Is_Layer_2_Covered] = 'N'
--      ,[Layer_2_Treaty_Id] = -1
--      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
--      ,[Layer_2_Reins_Percent] = 0.00
--      ,[Layer_2_Init_Reins_Exposure] = 0.000000
--	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
--      ,[Layer_2_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID
--	  ,[Layer_2_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- and IL_UL_Policy_Val_Exceeds_SI = 'Y';
  --
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_0_Covered = 'N' ,
[dbo].[Figtree_Claim_Listing].Layer_0_Reins_Code = 'N/A',
	[dbo].[Figtree_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
	[dbo].[Figtree_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
	[dbo].[Figtree_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
	[dbo].[Figtree_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
	[dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
	[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
		[Layer_1_Reins_Percent] = 0.00,
		[Layer_1_Init_Reins_Exposure] = 0.000000,
		[Layer_1_Curr_Reins_Exposure] = 0.000000,
		[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID,
		[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
      ,[Is_Layer_2_Covered] = 'N'
      ,[Layer_2_Treaty_Id] = -1
      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
      ,[Layer_2_Reins_Percent] = 0.00
      ,[Layer_2_Init_Reins_Exposure] = 0.000000
	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
      ,[Layer_2_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID
	  ,[Layer_2_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
 and EDW_Sum_Insured_on_ID IS NULL;
  --
   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
    -- 
  UPDATE [dbo].[Figtree_Claim_Listing]
SET Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * 0.000000,
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Date_of_Death >= Treaty.[Treaty_Eftv_Date]

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
-- 
UPDATE [dbo].[Figtree_Claim_Listing]
SET  Is_Layer_0_Covered = 'Y' ,
Layer_0_Reins_Code = layer.Reinsurer_Code,
Layer_0_Reins_Percent = layer.[Reins_Percent] ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * layer.[Reins_Percent],
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * layer.[Reins_Percent],
Layer_0_Rule =  'Reins_Layer_0_Exists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.[Month_Eftv_Date] = layer.[Month_Eftv_Date]
 and trg.EDW_Product_System_Code = layer.Product_System_Code
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.Product_Option_Code
and trg.EDW_contract_risk_key = layer.contract_risk_key
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and trg.Date_of_Death = layer.Incurred_Date
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Date_of_Death < Treaty.[Treaty_Eftv_Date]
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
;with w_lyer0_duplicates
AS
( 
SELECT DISTINCT contract_key, ISNULL(edw_product_option_code,product_option_code) edw_product_option_code
from 
[dbo].[ODB_Layer_0_Policies]
WHERE exclude_flag = 'Y'
UNION
SELECT DISTINCT contract_key, product_option_code edw_product_option_code
from 
[STG].[Err_ODB_Layer_0_Policies]
  where import_log_id = (SELECT max(import_log_id) from [STG].[Err_ODB_Layer_0_Policies])
  and contract_key is not null
)
UPDATE [dbo].[Figtree_Claim_Listing]
SET  Is_Layer_0_Covered = NULL ,
Layer_0_Reins_Code = NULL,
Layer_0_Reins_Percent = NULL ,
[Layer_0_Init_Reins_Exposure] = NULL,
[Layer_0_Curr_Reins_Exposure] = NULL,
Layer_0_Rule =  'Reins_Layer_0_Exception_Policy',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg, 
w_lyer0_duplicates layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.edw_product_option_code
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.Date_of_Death < Treaty.[Treaty_Eftv_Date]
--

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET  Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * 0.000000,
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_NotExists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NULL
  and Layer_0_Rule IS NULL
 and [Are_Details_Inadequate] ='N'
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Date_of_Death < Treaty.[Treaty_Eftv_Date]
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_0_100_Percent_Reinsured', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Layer_0_Reins_Percent = 1
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN 'Y' ELSE 'N' END,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.Treaty_Id ELSE -1 END,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.[Treaty_Relevant_Percent] ELSE 0.00 END,
[dbo].[Figtree_Claim_Listing].Layer_0_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Exists' END,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Treaty_1a_Not_Applicable' END, 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date] --
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- -- 2017-11-30 incurred claims -Boundary condition Treaty id update

-- UPDATE [dbo].[Figtree_Claim_Listing]
--SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Figtree_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = EOMONTH(trg.Date_of_Death) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Date_of_Death <= '2017-11-30'

-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- UPDATE [dbo].[Figtree_Claim_Listing]
--SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Figtree_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Date_of_Death)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.Date_of_Death < '2017-11-30'

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1b',--
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS  NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1b'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Date_of_Death < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date < Treaty.Treaty_Min_Policy_Commence_Date --
------
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Date_of_Death < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 
--UPDATE [dbo].[Figtree_Claim_Listing]
--SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2a',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Figtree_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Date_of_Death)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2a'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'


UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2a',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

-- UPDATE [dbo].[Figtree_Claim_Listing]
--SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2b',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[Figtree_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Date_of_Death)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2b',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[Figtree_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2b'
and trg.Date_of_Death between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date;

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Product_Exclusion',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and Reins_Benefit_Type = 'N/A'
  and [Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[Figtree_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N';
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[Figtree_Claim_Listing]
SET [Layer_1_Reins_Percent] = (1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent],
[Layer_1_Init_Reins_Exposure] = [EDW_Sum_Insured_on_ID] *((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NOT NULL
  and [Are_Details_Inadequate] ='N';
----
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 UPDATE [dbo].[Figtree_Claim_Listing]
SET   [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_1_Pre_Treaty_5'
	  ,[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Figtree_Claim_Listing].updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg, dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and Treaty.[Treaty_Name] = 'Treaty 3'
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  and trg.[Are_Details_Inadequate] = 'N'
  and trg.Date_of_Death < Treaty.Treaty_Eftv_Date
 ;
  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[Figtree_Claim_Listing]
SET   [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Figtree_Claim_Listing].updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Is_Layer_1_Covered = 'N'
  and trg.[Are_Details_Inadequate] = 'N'
 ;
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[Figtree_Claim_Listing]
SET   [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[Figtree_Claim_Listing].updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Reins_Benefit_Category_Group = 'N/A'
  and trg.[Are_Details_Inadequate] = 'N'
 ;

  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
--Surplus Per Life Change requirement - New Logic 
 -- Changed by - RRNAA2
 -- Change Date - Nov 2019
 -- The new logic is to pick up the surplus percent from Inforce table where it will be calculated and in the traty assessment use the same to identify the residuals.
 
  -- Changed by - RRNAA2
 -- Change Date - July 2020 - RGU-793
 -- Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure and [Layer_2_Curr_Residual_Exposure].
 
UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'Y',
    [dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = (I.SS_PC/100),
    [dbo].[Figtree_Claim_Listing].[Premium_Census_Date] = I.CENSUS_DATE,
    [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] = 5,
    [dbo].[Figtree_Claim_Listing].[Layer_2_Init_Reins_Exposure] = I.SUM_INSURED_AMT * (I.SS_PC/100),
	[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.Layer_1_Init_Residual_Exposure - (I.SUM_INSURED_AMT * (I.SS_PC/100)),
	[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100),
	[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Residual_Exposure] = trg.Layer_1_Curr_Residual_Exposure - (trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100)),
    [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh',
	[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate(),
    [dbo].[Figtree_Claim_Listing].updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.Date_of_Death)-1, -1) 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.Is_Layer_1_Covered = 'Y'
  and trg.[Is_Layer_2_Covered] IS NULL
  and trg.[Are_Details_Inadequate] = 'N' 
--
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
  
UPDATE [dbo].[Figtree_Claim_Listing]
SET [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'N',
    [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] =-1,
    [dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
	[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Reins_Exposure] = 0.00,
	[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure],
	[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = 0.00,
	[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure],
    [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh',
	[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate(),
    [dbo].[Figtree_Claim_Listing].updated_by  = system_user
FROM [dbo].[Figtree_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Is_Layer_1_Covered = 'Y'
  and trg.[Are_Details_Inadequate] = 'N'

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--; WITH w_lumpsum as
--(
----Ensure the selected policies don't have other benefits sitting in error due to incomplete data i.e., 
---- claim in Access AMP stage (or) Sum Insured is null (or) Benefit is not created
---- If the claim is already archived , ignore the benefit
---- 
--SELECT trg.edw_contract_key,
--       surplus.Treaty_Id,        
--	   surplus.Benefit_Type Reins_Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Date_of_Death,
--	   SUM(ISNULL(EDW_Sum_Insured_on_ID,0)) EDW_Sum_Insured_on_ID,
--	   SUM(ISNULL([Layer_1_Init_Residual_Exposure],0)) [Layer_1_Init_Residual_Exposure],
--	   MAX(CASE WHEN surplus.Benefit_Type = 'IP' THEN surplus.Surplus_Threshold_IP_Amount 
--	            WHEN surplus.Benefit_Type = 'LS' THEN surplus.Surplus_Threshold_LS_Amount
--		   END) Surplus_Threshold_Amount
--FROM [dbo].[Figtree_Claim_Listing] trg
-- INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
-- ON surplus.Benefit_Category_Group = trg.Reins_Benefit_Category_Group
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
-- and NOT EXISTS                   (SELECT 'X'
--                                   FROM  [dbo].[Figtree_Claim_Listing] 
--                                  WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
--								    and [Is_Layer_2_Covered] = 'N'
--									AND edw_contract_key = trg.edw_contract_key
--									AND Date_of_Death = trg.Date_of_Death)
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  and trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  AND  surplus.Treaty_Id = 5
--  and trg.[Are_Details_Inadequate] = 'N'
--GROUP BY trg.edw_contract_key, 
--surplus.Treaty_Id,
--	   surplus.Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.Date_of_Death
--)
--UPDATE [dbo].[Figtree_Claim_Listing]
--SET   [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'Y'
--      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] = surplus.Treaty_Id
--     ,[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Reins_Exposure] = trg.EDW_Sum_Insured_on_ID * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - (trg.EDW_Sum_Insured_on_ID * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Residual_Exposure] = trg. [Layer_1_Curr_Residual_Exposure] - (trg.EDW_Sum_Insured_on_FD * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--      [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh'
--	  ,[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Figtree_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Figtree_Claim_Listing] trg
-- INNER JOIN w_lumpsum surplus
-- ON surplus.edw_contract_key = trg.edw_contract_key
-- AND trg.Reins_Benefit_Type = surplus.Reins_Benefit_Type
-- AND trg.Reins_Benefit_Category_Group = surplus.Reins_Benefit_Category_Group
-- AND trg.Date_of_Death = surplus.Date_of_Death
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Is_Layer_2_Covered] IS NULL
--  and trg.[Are_Details_Inadequate] = 'N'
--  and surplus.[Layer_1_Init_Residual_Exposure] > surplus.Surplus_Threshold_Amount;
----
-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Figtree_Claim_Listing]
--SET   [dbo].[Figtree_Claim_Listing].[Is_Layer_2_Covered] = 'N'
--      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Id] =-1
--      ,[dbo].[Figtree_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
--	   ,[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Reins_Exposure] = trg.EDW_Sum_Insured_on_ID * (0.00),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - (EDW_Sum_Insured_on_ID * 0.00),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (0.00),
--		[dbo].[Figtree_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - (trg.EDW_Sum_Insured_on_FD * 0.00),
--     [dbo].[Figtree_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh'
--	  ,[dbo].[Figtree_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[Figtree_Claim_Listing].updated_by  = system_user
--FROM [dbo].[Figtree_Claim_Listing] trg
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Are_Details_Inadequate] = 'N'
-- ;
----
-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[Figtree_Claim_Listing]
--SET [Layer_2_Reins_Percent] = [Layer_2_Init_Reins_Exposure]/EDW_Sum_Insured_on_ID,
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--WHERE 1=1 
--and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--  and Is_Layer_1_Covered IS NOT NULL
--  and [Is_Layer_2_Covered] IS NOT NULL
--  and [Are_Details_Inadequate] ='N'
--  and [Is_Layer_2_Covered] = 'Y';

--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[Figtree_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
--------------------
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON
	
GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Assessment_WMS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Updated date: Jul 2020
-- Description:	RGU-793 - Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure  and [Layer_2_Curr_Residual_Exposure].
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Nov 2020
-- Description:	Claim and premium are aligned based on QS rerun requirement - Look up to premum Inforce table for QS treaty id update in listing table
-- =============================================
-- =============================================
-- Author:		RRNAA2
-- Updated date: Feb 2021
-- Description:	RGU-1244 Remove Claim and premium are aligned based on QS rerun requirement, ILUL Change is still excluded 
-- =============================================


CREATE PROCEDURE [dbo].[usp_Treaty_Assessment_WMS_Claim_Listing]
  @ProcessLogID Int,
  @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;

BEGIN TRAN T1;
UPDATE [dbo].[WMS_Claim_Listing]
SET  [Reins_Benefit_Period] = NULL
      ,[Reins_Benefit_Type]= NULL
      ,[Reins_Benefit_Category]= NULL
      ,[Reins_Benefit_Category_Group]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_date]= NULL
      ,[IL_UL_Policy_Val_Exceeds_SI_rule]= NULL
      ,[Is_Layer_0_Covered]= NULL
      ,[Layer_0_Reins_Code]= NULL
      ,[Layer_0_Reins_Percent]= NULL
      ,[Layer_0_Init_Reins_Exposure]= NULL
      ,[Layer_0_Curr_Reins_Exposure]= NULL
      ,[Layer_0_Rule]= NULL
      ,[Is_Layer_1_Covered]= NULL
      ,[Layer_1_Treaty_Id]= NULL
      ,[Layer_1_Treaty_Percent]= NULL
      ,[Layer_1_Reins_Percent]= NULL
      ,[Layer_1_Init_Reins_Exposure]= NULL
      ,[Layer_1_Curr_Reins_Exposure]= NULL
      ,[Layer_1_Init_Residual_Exposure]= NULL
      ,[Layer_1_Curr_Residual_Exposure]= NULL
      ,[Layer_1_Treaty_Rule]= NULL
      ,[Is_Layer_2_Covered]= NULL
      ,[Layer_2_Treaty_Id]= NULL
      ,[Layer_2_Reins_Percent] = NULL
      ,[Layer_2_Init_Reins_Exposure] = NULL
      ,[Layer_2_Curr_Reins_Exposure] = NULL
      ,[Layer_2_Init_Residual_Exposure] = NULL
      ,[Layer_2_Curr_Residual_Exposure] = NULL
      ,[Layer_2_Treaty_Rule] = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
 --   
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET IL_UL_Policy_Val_Exceeds_SI = NULL,
--		IL_UL_Policy_Val_Exceeds_SI_date = NULL,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = 'Reins_IL_UL_Not_Applicable', --'Not Applicable for NMLA'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- --
-- SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 -- 

--  UPDATE [dbo].[WMS_Claim_Listing] 
--SET IL_UL_Policy_Val_Exceeds_SI = 'Y',
--		IL_UL_Policy_Val_Exceeds_SI_date = I.Census_date,
--		 IL_UL_Policy_Val_Exceeds_SI_rule = I.COMMENT, --'Applicable for ILUL'
--		 [Updated_Date_Time] = getdate(),
--updated_by  = system_user
--from [dbo].[WMS_Claim_Listing]  W Join [dbo].[INFORCE] I
--ON W.EDW_Contract_Key = I.Contract_Key
--and W.EDW_Contract_Id = I.CONTRACT_ID
--and W.EDW_Product_System_Code = I.Product_System_code 
--where W.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and W.[Are_Details_Inadequate] ='N'
-- and I.AT_RISK_AMT = '0' AND I.COMMENT Like 'EXCLUDED AS UNIT LINKED BAL>SA' 
-- and W.DOD_Incident >=  I.Census_Date

--   SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET  
[dbo].[WMS_Claim_Listing].Reins_Benefit_Type = p.Reins_Benefit_Type,
[dbo].[WMS_Claim_Listing].Reins_Benefit_Category = p.Reins_Benefit_Category,
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg, 
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business,
				 Reins_Benefit_Type,
				 Reins_Benefit_Category
		 FROM	 dbo.Reins_Treaty_Product) p
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
--
UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Reins_Benefit_Type = 'N/A',
[dbo].[WMS_Claim_Listing].Reins_Benefit_Category = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Reins_Benefit_Type IS NULL
  and [Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Reins_Benefit_Period = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[WMS_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = trg.Reins_Benefit_Period
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[WMS_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = 'N/A'
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Reins_Benefit_Category_Group = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[WMS_Claim_Listing].Reins_Benefit_Category_Group IS NULL
and [Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT


--UPDATE [dbo].[WMS_Claim_Listing]
--SET [dbo].[WMS_Claim_Listing].Is_Layer_0_Covered = 'N' ,
--[dbo].[WMS_Claim_Listing].Layer_0_Reins_Code = 'N/A',
--	[dbo].[WMS_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
--	[dbo].[WMS_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
--	[dbo].[WMS_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
--	[dbo].[WMS_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
--	[dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
--	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
--	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
--	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
--		[Layer_1_Reins_Percent] = 0.00,
--		[Layer_1_Init_Reins_Exposure] = 0.000000,
--		[Layer_1_Curr_Reins_Exposure] = 0.000000,
--		[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID,
--		[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
--      ,[Is_Layer_2_Covered] = 'N'
--      ,[Layer_2_Treaty_Id] = -1
--      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
--      ,[Layer_2_Reins_Percent] = 0.00
--      ,[Layer_2_Init_Reins_Exposure] = 0.000000
--	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
--      ,[Layer_2_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID
--	  ,[Layer_2_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
-- where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and [Are_Details_Inadequate] ='N'
-- and IL_UL_Policy_Val_Exceeds_SI = 'Y';
--  -- 

  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_0_Covered = 'N' ,
[dbo].[WMS_Claim_Listing].Layer_0_Reins_Code = 'N/A',
	[dbo].[WMS_Claim_Listing].Layer_0_Reins_Percent = 0.000000,
	[dbo].[WMS_Claim_Listing].[Layer_0_Init_Reins_Exposure] = 0.000000,
	[dbo].[WMS_Claim_Listing].[Layer_0_Curr_Reins_Exposure] = 0.000000,
	[dbo].[WMS_Claim_Listing].Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
	[dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
	[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
		[Layer_1_Reins_Percent] = 0.00,
		[Layer_1_Init_Reins_Exposure] = 0.000000,
		[Layer_1_Curr_Reins_Exposure] = 0.000000,
		[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID,
		[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
      ,[Is_Layer_2_Covered] = 'N'
      ,[Layer_2_Treaty_Id] = -1
      ,[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Not_Applicable'
      ,[Layer_2_Reins_Percent] = 0.00
      ,[Layer_2_Init_Reins_Exposure] = 0.000000
	  ,[Layer_2_Curr_Reins_Exposure] = 0.000000
      ,[Layer_2_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID
	  ,[Layer_2_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] 
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
 and EDW_Sum_Insured_on_ID IS NULL;
  -- 

  SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

    UPDATE [dbo].[WMS_Claim_Listing]
SET Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * 0.000000,
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.DOD_Incident >= Treaty.[Treaty_Eftv_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET  Is_Layer_0_Covered = 'Y' ,
Layer_0_Reins_Code = layer.Reinsurer_Code,
Layer_0_Reins_Percent = layer.[Reins_Percent] ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * layer.[Reins_Percent],
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * layer.[Reins_Percent],
Layer_0_Rule =  'Reins_Layer_0_Exists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg, 
dbo.reins_layer_0_Policies layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.[Month_Eftv_Date] = layer.[Month_Eftv_Date]
 and trg.EDW_Product_System_Code = layer.Product_System_Code
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.Product_Option_Code
and trg.EDW_contract_risk_key = layer.contract_risk_key
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and trg.DOD_Incident = layer.Incurred_Date
and Treaty.Treaty_Name = 'Treaty 3'
and trg.DOD_Incident < Treaty.[Treaty_Eftv_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

;with w_lyer0_duplicates
AS
( 
SELECT DISTINCT contract_key, ISNULL(edw_product_option_code,product_option_code) edw_product_option_code
from 
[dbo].[ODB_Layer_0_Policies]
WHERE exclude_flag = 'Y'
UNION
SELECT DISTINCT contract_key, product_option_code edw_product_option_code
from 
[STG].[Err_ODB_Layer_0_Policies]
  where import_log_id = (SELECT max(import_log_id) from [STG].[Err_ODB_Layer_0_Policies])
  and contract_key is not null
)
UPDATE [dbo].[WMS_Claim_Listing]
SET  Is_Layer_0_Covered = NULL ,
Layer_0_Reins_Code = NULL,
Layer_0_Reins_Percent = NULL ,
[Layer_0_Init_Reins_Exposure] = NULL,
[Layer_0_Curr_Reins_Exposure] = NULL,
Layer_0_Rule =  'Reins_Layer_0_Exception_Policy',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg, 
w_lyer0_duplicates layer, 
dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.EDW_Contract_Key = layer.Contract_Key
and trg.EDW_Product_Option_Code = layer.edw_product_option_code
and [Are_Details_Inadequate] ='N'
and Is_Layer_0_Covered IS NULL
and Treaty.Treaty_Name = 'Treaty 3'
and trg.DOD_Incident < Treaty.[Treaty_Eftv_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET  Is_Layer_0_Covered = 'N' ,
Layer_0_Reins_Code = 'N/A',
Layer_0_Reins_Percent = 0.000000 ,
[Layer_0_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID * 0.000000,
[Layer_0_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * 0.000000,
Layer_0_Rule = 'Reins_Layer_0_NotExists',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.DOD_Incident < Treaty.[Treaty_Eftv_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_0_100_Percent_Reinsured', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Layer_0_Reins_Percent = 1
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN 'Y' ELSE 'N' END,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.Treaty_Id ELSE -1 END,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN Treaty.[Treaty_Relevant_Percent] ELSE 0.00 END,
[dbo].[WMS_Claim_Listing].Layer_0_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Exists' END,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = CASE WHEN ( 
																	trg.Layer_0_Reins_Code IN ('A','M','G')
																	or 
																	( trg.Layer_0_Reins_Code IN ('R')
																	and trg.EDW_Product_Code = 'MTG'
																	)
																)
														 THEN'Reins_Layer_0_Treaty_1a_Exists' ELSE 'Reins_Layer_0_Treaty_1a_Not_Applicable' END, 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered ='Y'
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
 and Is_Layer_1_Covered IS NULL
 and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1a'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date] --
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 
-- -- 2017-11-30 incurred claims -Boundary condition Treaty id update

--UPDATE [dbo].[WMS_Claim_Listing]
--SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[WMS_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE =EOMONTH(trg.DOD_Incident) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.DOD_Incident <= '2017-11-30'

--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_1b',--
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[WMS_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.DOD_Incident)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 1b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'
--and trg.DOD_Incident > '2017-11-30'

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_1b',--
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS  NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 1b'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.DOD_Incident < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date < Treaty.Treaty_Min_Policy_Commence_Date --
------
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Pre_Treaty_2a', 
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.DOD_Incident < Treaty.[Treaty_Eftv_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2a',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[WMS_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.DOD_Incident)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2a'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2a',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
and Is_Layer_1_Covered IS NULL
and Treaty.Treaty_id = p.treaty_id
and [Are_Details_Inadequate] ='N'
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2a'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = I.QS_Treaty_id,
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
--[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Inforce_QS_Treaty_Lookup_2b',
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--FROM  [dbo].[WMS_Claim_Listing] trg 
--join
--Inforce I
--On trg.EDW_Contract_Id = I.CONTRACT_ID
--and trg.EDW_Contract_Risk_Key = I.CONTRACT_RISK_KEY
--and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.DOD_Incident)-1, -1) 
--join Reins_Treaty Treaty
--on Treaty.[Treaty_Name] = 'Treaty 2b'
--and Treaty.Treaty_Id = I.QS_Treaty_id
--and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
--and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date 
--where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--and Is_Layer_1_Covered IS NULL
--and [Are_Details_Inadequate] ='N'

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'Y',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = Treaty.Treaty_Id,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = Treaty.[Treaty_Relevant_Percent],
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Treaty_2b',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM  [dbo].[WMS_Claim_Listing] trg, 
dbo.Reins_Treaty Treaty, 
dbo.Reins_Treaty_Product p
WHERE 1=1 
and trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N'
and Treaty.Treaty_id = p.treaty_id
and trg.EDW_Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
and Treaty.[Treaty_Name] = 'Treaty 2b'
and trg.DOD_Incident between Treaty.[Treaty_Eftv_Date] and Treaty.[Treaty_End_Date]
and trg.EDW_Risk_Commenced_Date between Treaty.Treaty_Min_Policy_Commence_Date and Treaty.Treaty_Max_Policy_Commence_Date;

SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Product_Exclusion',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and Reins_Benefit_Type = 'N/A'
  and [Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].Is_Layer_1_Covered = 'N',
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Id = -1,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Percent = 0.00,
[dbo].[WMS_Claim_Listing].Layer_1_Treaty_Rule = 'Reins_Layer_1_Not_Applicable',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NULL
  and [Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [Layer_1_Reins_Percent] = (1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent],
[Layer_1_Init_Reins_Exposure] = EDW_Sum_Insured_on_ID *((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Curr_Reins_Exposure] = [EDW_Sum_Insured_on_FD] * ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent]),
[Layer_1_Init_Residual_Exposure] = EDW_Sum_Insured_on_ID * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Layer_1_Curr_Residual_Exposure] = [EDW_Sum_Insured_on_FD] * (1 - [Layer_0_Reins_Percent] - ((1 - [Layer_0_Reins_Percent])*[Layer_1_Treaty_Percent])),
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Is_Layer_0_Covered IS NOT NULL
  and Is_Layer_1_Covered IS NOT NULL
  and [Are_Details_Inadequate] ='N';
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
 UPDATE [dbo].[WMS_Claim_Listing]
SET   [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_1_Pre_Treaty_5'
	  ,[dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[WMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg, dbo.Reins_Treaty Treaty
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and Treaty.[Treaty_Name] = 'Treaty 3'
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  and trg.[Are_Details_Inadequate] = 'N'
  and trg.DOD_Incident < Treaty.Treaty_Eftv_Date
 ;
 
 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[WMS_Claim_Listing]
SET   [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[WMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Is_Layer_1_Covered = 'N'
  and trg.[Are_Details_Inadequate] = 'N'
 ;
--
SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

 UPDATE [dbo].[WMS_Claim_Listing]
SET   [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00
      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_Not_Applicable'
	  ,[dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate()
      ,[dbo].[WMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
  and trg.Is_Layer_1_Covered IS NOT NULL
  AND trg.[Is_Layer_2_Covered] IS NULL
  AND trg.Reins_Benefit_Category_Group = 'N/A'
  and trg.[Are_Details_Inadequate] = 'N'
 ;

 SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT
 --
--Surplus Per Life Change requirement - New Logic 
 -- Changed by - RRNAA2
 -- Change Date - Nov 2019
 -- The new logic is to pick up the surplus percent from Inforce table where it will be calculated and in the traty assessment use the same to identify the residuals.
 
   -- Changed by - RRNAA2
 -- Change Date - July 2020 - RGU-793
 -- Changed the sum_insured column to EDW_Sum_insured_On_FD for Layer_2_Curr_Reins_Exposure and [Layer_2_Curr_Residual_Exposure].
 

 UPDATE [dbo].[WMS_Claim_Listing]
 SET [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'Y',
     [dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = (I.SS_PC/100),
	 [dbo].[WMS_Claim_Listing].[Premium_Census_Date] = I.CENSUS_DATE,
     [dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] = 5,
     [dbo].[WMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = I.SUM_INSURED_AMT * (I.SS_PC/100),
     [dbo].[WMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =   trg.Layer_1_Init_Residual_Exposure - (I.SUM_INSURED_AMT * (I.SS_PC/100)),
     [dbo].[WMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100),
     [dbo].[WMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.Layer_1_Curr_Residual_Exposure - (trg.EDW_Sum_Insured_on_FD * (I.SS_PC/100)),
     [dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh',
     [dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate(),
     [dbo].[WMS_Claim_Listing].updated_by  = system_user
 FROM [dbo].[WMS_Claim_Listing] trg
 INNER JOIN INFORCE I
 ON I.contract_key = trg.edw_contract_key
 and I.CONTRACT_RISK_KEY = trg.EDW_Contract_Risk_Key
 and I.CENSUS_DATE = DATEADD(MONTH, DATEDIFF(MONTH, -1, trg.DOD_Incident)-1, -1)
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and trg.Is_Layer_0_Covered IS NOT NULL
 and trg.Is_Layer_1_Covered IS NOT NULL
 AND trg.Is_Layer_1_Covered = 'Y'
 and trg.[Is_Layer_2_Covered] IS NULL
 and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

UPDATE [dbo].[WMS_Claim_Listing]
SET [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'N',
    [dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] =-1,
    [dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
    [dbo].[WMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = 0.00,
    [dbo].[WMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure],
    [dbo].[WMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] =  0.00,
    [dbo].[WMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure],
    [dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh',
    [dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate(),
    [dbo].[WMS_Claim_Listing].updated_by  = system_user
FROM [dbo].[WMS_Claim_Listing] trg
where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and trg.Is_Layer_0_Covered IS NOT NULL
and trg.Is_Layer_1_Covered IS NOT NULL
AND trg.[Is_Layer_2_Covered] IS NULL
AND trg.Is_Layer_1_Covered = 'Y'
and trg.[Are_Details_Inadequate] = 'N'

      SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--; WITH w_lumpsum as
--(
----Ensure the selected policies don't have other benefits sitting in error due to incomplete data i.e., 
---- claim in Access AMP stage (or) Sum Insured is null (or) Benefit is not created
---- If the claim is already archived , ignore the benefit
---- 
--SELECT trg.edw_contract_key,
--       surplus.Treaty_Id,        
--	   surplus.Benefit_Type Reins_Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.DOD_Incident,
--	   SUM(ISNULL(EDW_Sum_Insured_on_ID,0)) EDW_Sum_Insured_on_ID,
--	   SUM(ISNULL([Layer_1_Init_Residual_Exposure],0)) [Layer_1_Init_Residual_Exposure],
--	   MAX(CASE WHEN surplus.Benefit_Type = 'IP' THEN surplus.Surplus_Threshold_IP_Amount 
--	            WHEN surplus.Benefit_Type = 'LS' THEN surplus.Surplus_Threshold_LS_Amount
--		   END) Surplus_Threshold_Amount
--FROM [dbo].[WMS_Claim_Listing] trg
-- INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
-- ON surplus.Benefit_Category_Group = trg.Reins_Benefit_Category_Group
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
-- and NOT EXISTS                   (SELECT 'X'
--                                   FROM  [dbo].[WMS_Claim_Listing] 
--                                  WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear) 
--								    and [Is_Layer_2_Covered] = 'N'
--									AND edw_contract_key = trg.edw_contract_key
--									AND DOD_Incident = trg.DOD_Incident)
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  and trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  AND  surplus.Treaty_Id = 5
--  and trg.[Are_Details_Inadequate] = 'N'
--GROUP BY trg.edw_contract_key, 
--surplus.Treaty_Id,
--	   surplus.Benefit_Type,
--	   trg.Reins_Benefit_Category_Group,
--	   trg.DOD_Incident
--)
--UPDATE [dbo].[WMS_Claim_Listing]
--SET   [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'Y'
--      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] = surplus.Treaty_Id,
--      [dbo].[WMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = trg.EDW_Sum_Insured_on_ID * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - (trg.EDW_Sum_Insured_on_ID * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT))),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - (trg.EDW_Sum_Insured_on_FD * (CAST(surplus.[Layer_1_Init_Residual_Exposure] - surplus.Surplus_Threshold_Amount AS FLOAT)/CAST(surplus.EDW_Sum_Insured_on_ID AS FLOAT)))
--      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_AboveThresh'
--	  ,[dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[WMS_Claim_Listing].updated_by  = system_user
--FROM [dbo].[WMS_Claim_Listing] trg
-- INNER JOIN w_lumpsum surplus
-- ON surplus.edw_contract_key = trg.edw_contract_key
-- AND trg.Reins_Benefit_Type = surplus.Reins_Benefit_Type
-- AND trg.Reins_Benefit_Category_Group = surplus.Reins_Benefit_Category_Group
-- AND trg.DOD_Incident = surplus.DOD_Incident
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Is_Layer_2_Covered] IS NULL
--  and trg.[Are_Details_Inadequate] = 'N'
--  and surplus.[Layer_1_Init_Residual_Exposure] > surplus.Surplus_Threshold_Amount;
----
--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET   [dbo].[WMS_Claim_Listing].[Is_Layer_2_Covered] = 'N'
--      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Id] =-1
--      ,[dbo].[WMS_Claim_Listing].[Layer_2_Reins_Percent] = 0.00,
--	   [dbo].[WMS_Claim_Listing].[Layer_2_Init_Reins_Exposure] = trg.EDW_Sum_Insured_on_ID * (0.00),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Init_Residual_Exposure] =  trg.[Layer_1_Init_Residual_Exposure] - (trg.EDW_Sum_Insured_on_ID * (0.00)),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Curr_Reins_Exposure] = trg.EDW_Sum_Insured_on_FD * (0.00),
--	[dbo].[WMS_Claim_Listing].[Layer_2_Curr_Residual_Exposure] =  trg.[Layer_1_Curr_Residual_Exposure] - (trg.EDW_Sum_Insured_on_FD * (0.00))
--      ,[dbo].[WMS_Claim_Listing].[Layer_2_Treaty_Rule] = 'Reins_Layer_2_Treaty_5_'+trg.Reins_Benefit_Type+'_BelowThresh'
--	  ,[dbo].[WMS_Claim_Listing].[Updated_Date_Time] = getdate()
--      ,[dbo].[WMS_Claim_Listing].updated_by  = system_user
--FROM [dbo].[WMS_Claim_Listing] trg
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and trg.Is_Layer_0_Covered IS NOT NULL
--  and trg.Is_Layer_1_Covered IS NOT NULL
--  AND trg.[Is_Layer_2_Covered] IS NULL
--  AND trg.Is_Layer_1_Covered = 'Y'
--  and trg.[Are_Details_Inadequate] = 'N'
-- ;
----
--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

--UPDATE [dbo].[WMS_Claim_Listing]
--SET [Layer_2_Reins_Percent] = [Layer_2_Init_Reins_Exposure]/EDW_Sum_Insured_on_ID,
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
--WHERE 1=1 
--and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
-- and Is_Layer_0_Covered IS NOT NULL
--  and Is_Layer_1_Covered IS NOT NULL
--  and [Is_Layer_2_Covered] IS NOT NULL
--  and [Are_Details_Inadequate] ='N'
--  and [Is_Layer_2_Covered] = 'Y';
----
--SET @UpdateRowCount = @UpdateRowCount + @@ROWCOUNT

COMMIT TRAN T1;
	--SELECT @UpdateRowCount = count(*)
	--FROM [dbo].[WMS_Claim_Listing]
	--	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	--	AND updated_date_time > ( SELECT StartTime from CTL.ProcessLog where ProcessLogID = @ProcessLogID)
	--
--------------------
SELECT @InsertRowCount AS InsertRowCount, @UpdateRowCount as UpdateRowCount, @DeleteRowCount as DeleteRowCount

END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	SELECT 0 AS InsertRowCount, 0 as UpdateRowCount, 0 as DeleteRowCount;
	THROW;
END CATCH
SET ANSI_NULLS ON
	
GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Product_Able_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_Treaty_Product_Able_Claim_Listing]
 @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[Able_Claim_Listing]
SET  [Reins_Benefit_Period] = NULL
      ,[Reins_Benefit_Type]= NULL
      ,[Reins_Benefit_Category]= NULL
      ,[Reins_Benefit_Category_Group]= NULL
	  ,EDW_Monthly_Benefit_on_ID = NULL
	  ,EDW_Monthly_Benefit_on_FD = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
 --   
UPDATE [dbo].[Able_Claim_Listing]
SET  
[dbo].[Able_Claim_Listing].Reins_Benefit_Type = p.Reins_Benefit_Type,
[dbo].[Able_Claim_Listing].Reins_Benefit_Category = p.Reins_Benefit_Category,
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[Able_Claim_Listing] trg, 
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business,
				 Reins_Benefit_Type,
				 Reins_Benefit_Category
		 FROM	 dbo.Reins_Treaty_Product) p
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
--
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Type = 'N/A',
[dbo].[Able_Claim_Listing].Reins_Benefit_Category = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Reins_Benefit_Type IS NULL
  and [Are_Details_Inadequate] ='N';
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Period = ben_period.Reins_Benefit_Period,
[Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[Able_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Benefit_Period] ben_period
 ON trg.benefit_period = ben_period.benefit_period 
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N'
  AND ben_period.source ='Able'
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Period = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[Able_Claim_Listing].Reins_Benefit_Period IS NULL
and [Are_Details_Inadequate] ='N'
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[Able_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = trg.Reins_Benefit_Period
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[Able_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = 'N/A'
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
UPDATE [dbo].[Able_Claim_Listing]
SET [dbo].[Able_Claim_Listing].Reins_Benefit_Category_Group = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[Able_Claim_Listing].Reins_Benefit_Category_Group IS NULL
and [Are_Details_Inadequate] ='N';
--

UPDATE [dbo].[Able_Claim_Listing]
SET [EDW_Sum_Insured_Freq_Code] = 'MNTH',
				[Updated_Date_Time] = getdate(),
				updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [Are_Details_Inadequate] ='N'
	and reins_benefit_type = 'IP'
	and product_system_code IN ('CP','DS','OR','U2')
	;
UPDATE [dbo].[Able_Claim_Listing]
	SET [EDW_Monthly_Benefit_on_ID] = CASE WHEN reins_benefit_type <> 'IP' THEN NULL
	                                       WHEN product_system_code NOT IN ('FDA') THEN EDW_Sum_Insured_on_ID
			                                WHEN product_system_code = 'FDA' THEN 
												CASE [EDW_Sum_Insured_Freq_Code] WHEN 'YEAR' THEN EDW_Sum_Insured_on_ID * 1/12
													                                WHEN 'ADHOC' THEN EDW_Sum_Insured_on_ID * 1/12
																					WHEN 'MNTH' THEN EDW_Sum_Insured_on_ID * 12/12
																					WHEN 'WKL' THEN EDW_Sum_Insured_on_ID * 52.18/12
																					WHEN 'FTNLY' THEN EDW_Sum_Insured_on_ID * 26/12
																					WHEN 'QUAR' THEN EDW_Sum_Insured_on_ID * 4/12
																					WHEN 'HALF' THEN EDW_Sum_Insured_on_ID * 2/12
													ELSE EDW_Sum_Insured_on_ID END
										ELSE EDW_Sum_Insured_on_ID END ,
		[EDW_Monthly_Benefit_on_FD] = CASE WHEN reins_benefit_type <> 'IP' THEN NULL
	                                       WHEN product_system_code NOT IN ('FDA') THEN EDW_Sum_Insured_on_FD
			                               WHEN product_system_code = 'FDA' THEN 
												CASE [EDW_Sum_Insured_Freq_Code] WHEN 'YEAR' THEN EDW_Sum_Insured_on_FD* 1/12
													                                WHEN 'ADHOC' THEN EDW_Sum_Insured_on_FD*1/12
																					WHEN 'MNTH' THEN EDW_Sum_Insured_on_FD*12/12
																					WHEN 'WKL' THEN EDW_Sum_Insured_on_FD* 52.18/12
																					WHEN 'FTNLY' THEN EDW_Sum_Insured_on_FD*26/12
																					WHEN 'QUAR' THEN EDW_Sum_Insured_on_FD*4/12
																					WHEN 'HALF' THEN EDW_Sum_Insured_on_FD*2/12
													ELSE EDW_Sum_Insured_on_FD END
										ELSE EDW_Sum_Insured_on_FD END,
				[Updated_Date_Time] = getdate(),
				updated_by  = system_user
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [Are_Details_Inadequate] ='N'
	;
--
COMMIT TRAN T1;
	--
---
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	THROW;
END CATCH
SET ANSI_NULLS ON
	



GO
/****** Object:  StoredProcedure [dbo].[usp_Treaty_Product_CMS_Claim_Listing]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		RRNAA2
-- Create date: Sep 2021
-- Description:	CMS Claims Listing Change for Reinsurance
-- =============================================

CREATE PROCEDURE [dbo].[usp_Treaty_Product_CMS_Claim_Listing]
 @ProcessingMonthYear NVARCHAR(100)
AS
	DECLARE @DeleteRowCount Int = 0
	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
--
BEGIN TRY;
BEGIN TRAN T1;
UPDATE [dbo].[CMS_Claim_Listing]
SET  [Reins_Benefit_Period] = NULL
      ,[Reins_Benefit_Type]= NULL
      ,[Reins_Benefit_Category]= NULL
      ,[Reins_Benefit_Category_Group]= NULL
	  ,EDW_Monthly_Benefit_on_ID = NULL
	  ,EDW_Monthly_Benefit_on_FD = NULL
 where [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear);
 --   
UPDATE [dbo].[CMS_Claim_Listing]
SET  
[dbo].[CMS_Claim_Listing].Reins_Benefit_Type = p.Reins_Benefit_Type,
[dbo].[CMS_Claim_Listing].Reins_Benefit_Category = p.Reins_Benefit_Category,
[Updated_Date_Time] = getdate(),
updated_by  = system_user
FROM [dbo].[CMS_Claim_Listing] trg, 
(SELECT DISTINCT Product_System_Code,
                 product_code,
				 Product_Option_Code,
				 Class_Of_Business,
				 Reins_Benefit_Type,
				 Reins_Benefit_Category
		 FROM	 dbo.Reins_Treaty_Product) p
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [Are_Details_Inadequate] ='N'
and trg.Product_System_Code = p.Product_System_Code
and trg.EDW_product_code = p.product_code
and trg.EDW_Product_Option_Code = p.Product_Option_Code
and trg.EDW_Class_Of_Business = p.Class_Of_Business
--
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Reins_Benefit_Type = 'N/A',
[dbo].[CMS_Claim_Listing].Reins_Benefit_Category = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1 
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
 and Reins_Benefit_Type IS NULL
  and [Are_Details_Inadequate] ='N';
--
--UPDATE [dbo].[Able_Claim_Listing]
--SET [dbo].[Able_Claim_Listing].Reins_Benefit_Period = ben_period.Reins_Benefit_Period,
--[Updated_Date_Time] = getdate(),
--updated_by  = system_user
-- FROM [dbo].[Able_Claim_Listing] trg
-- INNER JOIN [dbo].[Reins_Benefit_Period] ben_period
-- ON trg.benefit_period = ben_period.benefit_period 
-- where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
--  and trg.[Are_Details_Inadequate] ='N'
--  AND ben_period.source ='Able'
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Reins_Benefit_Period = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[CMS_Claim_Listing].Reins_Benefit_Period IS NULL
and [Are_Details_Inadequate] ='N'
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[CMS_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = trg.Reins_Benefit_Period
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Reins_Benefit_Category_Group = surplus.Benefit_Category_Group,
	  [Updated_Date_Time] = getdate(),
updated_by  = system_user
 FROM [dbo].[CMS_Claim_Listing] trg
 INNER JOIN [dbo].[Reins_Treaty_Surplus] surplus
 ON surplus.Reins_Benefit_Period = 'N/A'
 AND surplus.Benefit_Type = trg.Reins_Benefit_Type
 AND surplus.Benefit_Category = trg.Reins_Benefit_Category
 where trg.[Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
  and trg.[Are_Details_Inadequate] ='N';
--
UPDATE [dbo].[CMS_Claim_Listing]
SET [dbo].[CMS_Claim_Listing].Reins_Benefit_Category_Group = 'N/A',
[Updated_Date_Time] = getdate(),
updated_by  = system_user
WHERE 1=1
and [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
and [dbo].[CMS_Claim_Listing].Reins_Benefit_Category_Group IS NULL
and [Are_Details_Inadequate] ='N';
--

UPDATE [dbo].[CMS_Claim_Listing]
SET [EDW_Sum_Insured_Freq_Code] = 'MNTH',
				[Updated_Date_Time] = getdate(),
				updated_by  = system_user
WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [Are_Details_Inadequate] ='N'
	and reins_benefit_type = 'IP'
	and product_system_code IN ('CP','DS','OR','U2')
	;
UPDATE [dbo].[CMS_Claim_Listing]
	SET [EDW_Monthly_Benefit_on_ID] = CASE WHEN reins_benefit_type <> 'IP' THEN NULL
	                                       WHEN product_system_code NOT IN ('FDA') THEN EDW_Sum_Insured_on_ID
			                                WHEN product_system_code = 'FDA' THEN 
												CASE [EDW_Sum_Insured_Freq_Code] WHEN 'YEAR' THEN EDW_Sum_Insured_on_ID * 1/12
													                                WHEN 'ADHOC' THEN EDW_Sum_Insured_on_ID * 1/12
																					WHEN 'MNTH' THEN EDW_Sum_Insured_on_ID * 12/12
																					WHEN 'WKL' THEN EDW_Sum_Insured_on_ID * 52.18/12
																					WHEN 'FTNLY' THEN EDW_Sum_Insured_on_ID * 26/12
																					WHEN 'QUAR' THEN EDW_Sum_Insured_on_ID * 4/12
																					WHEN 'HALF' THEN EDW_Sum_Insured_on_ID * 2/12
													ELSE EDW_Sum_Insured_on_ID END
										ELSE EDW_Sum_Insured_on_ID END ,
		[EDW_Monthly_Benefit_on_FD] = CASE WHEN reins_benefit_type <> 'IP' THEN NULL
	                                       WHEN product_system_code NOT IN ('FDA') THEN EDW_Sum_Insured_on_FD
			                               WHEN product_system_code = 'FDA' THEN 
												CASE [EDW_Sum_Insured_Freq_Code] WHEN 'YEAR' THEN EDW_Sum_Insured_on_FD* 1/12
													                                WHEN 'ADHOC' THEN EDW_Sum_Insured_on_FD*1/12
																					WHEN 'MNTH' THEN EDW_Sum_Insured_on_FD*12/12
																					WHEN 'WKL' THEN EDW_Sum_Insured_on_FD* 52.18/12
																					WHEN 'FTNLY' THEN EDW_Sum_Insured_on_FD*26/12
																					WHEN 'QUAR' THEN EDW_Sum_Insured_on_FD*4/12
																					WHEN 'HALF' THEN EDW_Sum_Insured_on_FD*2/12
													ELSE EDW_Sum_Insured_on_FD END
										ELSE EDW_Sum_Insured_on_FD END,
				[Updated_Date_Time] = getdate(),
				updated_by  = system_user
	WHERE [Month_Eftv_Date] = convert(datetime,@ProcessingMonthYear)
	and [Are_Details_Inadequate] ='N'
	;
--
COMMIT TRAN T1;
	--
---
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK TRAN T1;
	THROW;
END CATCH
SET ANSI_NULLS ON
	



GO
/****** Object:  StoredProcedure [dbo].[usp_U2_CPI_temp]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================================
-- Author:		AWJ
-- Create date: Sep 2017
-- Description:	Gets the U2 CPI Increases once we are after June
-- =============================================================
--EXEC usp_U2_CPI '31-Dec-2016', 'JUNE'
--EXEC usp_U2_CPI '31-Dec-2016', 'JULY'
--EXEC usp_U2_CPI '31-Dec-2016', 'MERGE'
CREATE PROCEDURE [dbo].[usp_U2_CPI_temp]
	-- Add the parameters for the stored procedure here
	@EFTV_DATE date
	,@RUN_ONLY nvarchar(20) = NULL
WITH EXECUTE AS OWNER
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE @EFTV_DATE date = '31-Dec-2016'

	--Get the date of the last CPI Increase
	Declare @LAST_CPI date
	if month(@EFTV_DATE) < 7 
		SET @LAST_CPI = dbo.DateSerial(year(@EFTV_DATE)-1,6,30)
	Else
		SET @LAST_CPI = dbo.DateSerial(year(@EFTV_DATE),6,30)
	
	DECLARE @JUNE nvarchar(50) = convert(nvarchar, @LAST_CPI, 112)
	DECLARE @JULY nvarchar(50) = convert(nvarchar, dateadd(day,1,@LAST_CPI), 112)
	If @RUN_ONLY is not null Print @JUNE + ', ' + @JULY

	If sysdatetime() < @EFTV_DATE
		BEGIN
		if @RUN_ONLY is not NULL Print 'Not Ready Yet'
		RETURN -1
		END
	
	--Check not done already and exit
	DECLARE @CR int
	If object_id('STAGE_U2_CPI') is not NULL 
		Select top 1 @CR = CONTRACT_RISK_KEY from STAGE_U2_CPI where CPI_DATE = @LAST_CPI
	If @CR is not NULL
		BEGIN
		if @RUN_ONLY is not NULL Print 'Already run for ' + @JUNE
		RETURN -1
		END

	--Run CPI calculation for the year
	DECLARE @RECS int
	DECLARE @ORACLE nvarchar(max)
	--If coalesce(@RUN_ONLY, 'JUNE') = 'JUNE'
	--	BEGIN
	--	SET @ORACLE = '
	--		SELECT 
	--			To_date(''@JUNE'',''YYYYMMDD'') As CPI_DATE
	--			,jun.contract_key
	--			,jun.contract_risk_key
	--			,jun.sum_insured_amt AS jun_sa
	--			,jun.row_start_date
	--			,jun.eftv_date
	--	   FROM 
	--			DW_CONTRACT c JOIN DW_PRODUCT p ON c.product_key = p.product_key  
	--			JOIN DW_CONTRACT_RISK jun ON c.contract_key = jun.contract_key
	--		WHERE p.product_code in (''FL'',''FLL'')
	--			AND to_date(''@JUNE'',''YYYYMMDD'') between jun.row_start_date and jun.row_end_date
	--	'
	--	SET @ORACLE = replace(@ORACLE, '@JUNE', @JUNE)
	--	If @RUN_ONLY is not NULL Print @ORACLE
	--	EXEC usp_QueryEDWInto @TABLE_NAME='STAGE_U2_CPI_JUNE', @SQL=@ORACLE
	--	SET @RECS = @@ROWCOUNT
	--	EXEC usp_LOG @STORED_PROC='usp_Stage_U2', @CENSUS_DATE=@JUNE, @STEP='Import from EDW', @RECS=@RECS
	--	EXEC usp_RunCtl @CENSUS_DATE=@JUNE, @SOURCE='EDW U2 JUNE CPI Table', @RECS=@RECS
	--	END

	If coalesce(@RUN_ONLY, 'JULY') = 'JULY'
		BEGIN
		SET @ORACLE = '
			SELECT 
				--To_date(''@JULY'',''YYYYMMDD'') As CPI_DATE
				--,jul.contract_key
				--,jul.contract_risk_key
				--,jul.sum_insured_amt AS jul_sa
				--,jul.row_start_date
				--,jul.eftv_date
				*
		   FROM 
				DW_CONTRACT c JOIN DW_PRODUCT p ON c.product_key = p.product_key  
				JOIN DW_CONTRACT_RISK jul ON c.contract_key = jul.contract_key
			WHERE p.product_code in (''FL'',''FLL'')
				AND jul.eftv_date = To_Date(''@JULY'',''YYYYMMDD'')
		'
		--SET @ORACLE = replace(@ORACLE, '@JULY', @JULY)
		--If @RUN_ONLY is not NULL Print @ORACLE
		--EXEC usp_QueryEDWInto @TABLE_NAME='STAGE_U2_CPI_JULY', @SQL=@ORACLE
		--SET @RECS = @@ROWCOUNT
		--EXEC usp_LOG @STORED_PROC='usp_Stage_U2', @CENSUS_DATE=@JULY, @STEP='Import from EDW', @RECS=@RECS
		--EXEC usp_RunCtl @CENSUS_DATE=@JUNE, @SOURCE='EDW U2 JULY CPI Table', @RECS=@RECS
		END
	
	--If coalesce(@RUN_ONLY, 'MERGE') = 'MERGE'
	--	BEGIN

	--	--Get the maximum CPI Rate
	--	DECLARE @MAX_CPI real
	--	SELECT @MAX_CPI = convert(real,VALUE) FROM INI where PARAMETER = 'U2 MAX CPI RATE PC' and @EFTV_DATE between FROM_DATE and coalesce(TO_DATE,@EFTV_DATE)
	--	IF @MAX_CPI is NULL RETURN -1

	--	--Calculate the CPI Increases
	--	IF object_ID('STAGE_U2_CPI') is NULL 
	--		CREATE TABLE dbo.STAGE_U2_CPI(CPI_DATE date not null, CONTRACT_RISK_KEY int not null, CPI_INCR money not NULL)

	--	--Clear Existing Records
	--	Delete FROM STAGE_U2_CPI where CPI_DATE = @EFTV_DATE 
		
	--	--Insert new calcs
	--	INSERT INTO STAGE_U2_CPI
	--	Select CPI_DATE, CONTRACT_RISK_KEY, CPI_INCR
	--	From (
	--		Select 
	--			convert(date,JUN.CPI_DATE) As CPI_DATE
	--			,JUN.CONTRACT_RISK_KEY
	--			,CPI_INCR = round(jul_sa - jun_sa,2)
	--			,row_number() over (Partition by jun.contract_risk_key order by jul.row_start_date) As Ranking
	--		From STAGE_U2_CPI_JUNE as JUN 
	--			JOIN STAGE_U2_CPI_JULY As JUL ON JUN.contract_risk_key = JUL.contract_risk_key and JUL.jul_sa > jun.JUN_SA
	--				and jul.jul_sa < (1 + @MAX_CPI) * jun.jun_sa
	--		Where jun.jun_sa > 0) As UPD
	--	Where Ranking = 1
		


END
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_Commission]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================================================
-- Author:  KHNNR2
-- Create date: APR 2020
-- Description: Merge records into Commission table from Temp_Commission table 
-- =============================================================================

-- Merge Script
CREATE Procedure [dbo].[usp_Update_Commission]

As

Begin 

	SET NOCOUNT ON;

	Begin Try

	Begin Tran Update_Commission_Tbl

	-- Update the present records

	MERGE [dbo].[COMMISSION] as target
	USING dbo.Temp_Commission as source
	ON (target.Projection_Group = source.Projection_Group
	AND target.BASE_INCR = source.BASE_INCR
	--AND target.Effective_Start_Date = CONVERT(DATE,source.Effective_Start_Date,103)
	)
	WHEN MATCHED THEN 
	UPDATE
	SET target.[Effective_End_Date] = DateAdd(day,-1,CONVERT(DATE,source.[Effective_Start_Date],103)),
		target.[Row_End_Date]	    = DateAdd(second,-5,CONVERT(DATETIME,source.[Effective_Start_Date],103)),
		target.[Current_Record_Indicator] = 0,
		target.[Updated_by] = System_User,
		target.[Updated_Date_time] = getdate(),  
		target.[Comm_PC_Change_Reason] = 'Repricing'

	WHEN NOT MATCHED BY TARGET THEN
	INSERT ([Projection_Group],[Effective_Start_Date],[Effective_End_Date],[BASE_INCR],
		[IC_PC],[OC_PC],[OCX_PC],[Row_Start_Date],[Row_End_Date],
		[Current_Record_Indicator],[Comm_PC_Change_Reason])
	VALUES (source.[Projection_Group],CONVERT(DATE,source.[Effective_Start_Date],103),CONVERT(DATE,source.[Effective_End_Date],103),source.[BASE_INCR],
		source.[IC_PC],source.[OC_PC],source.[OCX_PC],CONVERT(DATETIME,source.[Row_Start_Date],103),CONVERT(DATETIME,source.[Row_End_Date],103),
		source.[Current_Record_Indicator],source.[Comm_PC_Change_Reason])
	;

	-- Insert New records

	MERGE [dbo].[COMMISSION] as target
	USING dbo.Temp_Commission as source
	ON (target.Projection_Group = source.Projection_Group
	AND target.BASE_INCR = source.BASE_INCR
	AND target.OC_PC = Source.OC_PC
	AND target.OCX_PC = Source.OCX_PC
	AND target.IC_PC = Source.IC_PC

	--AND target.Effective_Start_Date = CONVERT(DATE,source.Effective_Start_Date,103)
	)
	WHEN Not MATCHED by target THEN 
	
	INSERT ([Projection_Group],[Effective_Start_Date],[Effective_End_Date],[BASE_INCR],
		[IC_PC],[OC_PC],[OCX_PC],[Row_Start_Date],[Row_End_Date],
		[Current_Record_Indicator],[Comm_PC_Change_Reason])
	VALUES (source.[Projection_Group],CONVERT(DATE,source.[Effective_Start_Date],103),CONVERT(DATE,source.[Effective_End_Date],103),source.[BASE_INCR],
		source.[IC_PC],source.[OC_PC],source.[OCX_PC],CONVERT(DATETIME,source.[Row_Start_Date],103),CONVERT(DATETIME,source.[Row_End_Date],103),
		source.[Current_Record_Indicator],source.[Comm_PC_Change_Reason]);

	Commit Tran Update_Commission_Tbl

	End Try
	BEGIN CATCH
	IF @@TRANCOUNT > 0 
	ROLLBACK TRAN Load_Check_Movements;


	THROW;
END CATCH


End



--select * into dbo.COMMISSION_New
--from COMMISSION 
GO
/****** Object:  StoredProcedure [dbo].[usp_Update_MDM_Data]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ==============================================
-- Author:	    KHNNR2
-- Create date: Dec-ii 2019
-- Description:	Procedure is updated, make reins_life_grouping_change to 'N', 
-- for records present into converted table with present/current census_date
-- ==============================================
-- Author:	    KHNNR2
-- Create date: Dec-i 2019
-- Description:	Procedure is updated to insert “PREV_ Reins_Life_Identifier” values for lapsed records
-- =============================================
-- Author:          KHNNR2
-- Create date:     03/12/2019,
-- Description:     Procedure to populate data into Inforce Temp from EDW Cust Party table
-- =============================================
-- Author:          KHNNR2
-- Create date:     15/11/2019,
-- Description:     Procedure to populate data into Inforce Temp from EDW Cust Party table
-- =============================================

CREATE PROCEDURE [dbo].[usp_Update_MDM_Data] @Census_Date date,@PAS nvarchar(3)
AS
BEGIN

	DECLARE @InsertRowCount Int = 0
	DECLARE @UpdateRowCount Int = 0
	DECLARE @DeleteRowCount int = 0



Begin Try

Declare @updtinforce nvarchar(max) =

--Following code mainly populate the data from EDW_CUSY_PARTY (IDS_CORE) to INFORCE_TEMP_PAS table
--Last_Reins_ID used for DateAdd to -31 results in last month data used to populate Prev_Reins_Life_Identifie
--Prev_Party_Key from InforceTable for the same Contract_Risk_Key
--Matching Contract Risk Keys from Inforce table and Inforce_Temp table
	
'
with Last_Reins_ID as (
		select contract_risk_key,Reins_Life_Identifier from INFORCE 
		where census_date = eomonth(dateadd(day,-31,'''+cast(@census_date as varchar(10))+'''))) 
Update T
	Set 
		T.MDM_PARTY_KEY = E.PARTY_KEY, 
		Reins_Life_Identifier = ISNULL(E.PARTY_KEY, T.PARTY_KEY), 
		PARTY_KEY_TYPE = case when E.PARTY_KEY is not null then ''MDM''
		    when E.Party_Key is null then ''PAS'' end,
		PREV_Reins_Life_Identifier = Last_Reins_ID.Reins_Life_Identifier    
		
FROM Inforce_temp_'+@PAS+ ' T Left Join 
		(Select * from Ids_Core.dbo.EDW_CUST_PARTY where ASSOC_STATUS_CODE = ''A'' and Row_End_Date = ''3000-12-31'' and Row_Status_Code = ''1'') E
		on T.PARTY_KEY = E.ASSOC_PARTY_KEY
		Left join Last_Reins_ID on Last_Reins_ID.Contract_Risk_Key = T.Contract_Risk_Key
'
Begin Tran Update_MDM_Data
EXECUTE sp_executesql @updtinforce
Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount


Commit Tran

-- Following code populate the data from LAPSED to INFORCE_TEMP_PAS table
-- for “PREV_Reins_Life_Identifier” where Reins_Life_Identifier is Null and 
-- Reinstatement_Date is Null. Matching on Contract Risk Keys

Declare @updtinforce_Lapsed nvarchar(max) =
'
 With Lapsed_Temp as (
		select census_date as Census_DATE, Contract_Risk_Key,Reins_Life_Identifier
		,Row_Number() Over(Partition by Contract_Risk_Key order by Census_Date desc) rn
		from Lapsed
		--where Reins_Life_Identifier is not null AND REINSTATEMENT_DATE IS NULL
		--where REINSTATEMENT_DATE IS NULL
	 ) 

Update T
	Set 
		PREV_Reins_Life_Identifier = Lapsed_Temp.Reins_Life_Identifier
		
FROM Inforce_temp_'+@PAS+ ' T
		inner Join Lapsed_Temp on Lapsed_Temp.Contract_Risk_Key = T.Contract_Risk_Key
		where Lapsed_Temp.rn=1 and T.PREV_Reins_Life_Identifier is Null
'
Begin Tran Update_MDM_Data_2
EXECUTE sp_executesql @updtinforce_Lapsed
Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit Tran

-- Update Reins_Life_Grouping_Change status - Converted. Restructure with conversion
-- Update reins_life_grouping_change to 'N', for all the records present into converted table with present/current census_date.

Declare @updtinforce_Temp_Converted nvarchar(max) =
'
Update T
		Set  
		Reins_Life_Grouping_Change =''N''	
FROM Inforce_temp_'+@PAS+' As T
		where contract_risk_key in (Select NEW_CONTRACT_RISK_KEY from CONVERTED C where C.CENSUS_DATE = T.Census_Date)
'
Begin Tran Update_MDM_Data_3
EXECUTE sp_executesql @updtinforce_Temp_Converted
Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit Tran

-- Update Reins_Life_Grouping_Change status

Declare @updtinforce_Temp nvarchar(max) =
'
Update T
		Set 
		Reins_Life_Grouping_Change = Case 
		when Reins_Life_Identifier = PREV_Reins_Life_Identifier then ''N''
		else ''Y'' end 
FROM Inforce_temp_'+@PAS+' As T
where Reins_Life_Grouping_Change is NULL
'

Begin Tran Update_MDM_Data_4
EXECUTE sp_executesql @updtinforce_Temp
Set @UpdateRowCount = @@ROWCOUNT + @UpdateRowCount

Commit Tran

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;

	End Try
	BEGIN CATCH
	-- In case of error during updating columns roll back the transaction and throw exception 
	
		   IF @@TRANCOUNT > 0 
		   ROLLBACK TRAN Update_MDM_Data;

	Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
		   @DeleteRowCount DeleteRowCount;

	THROW;
END CATCH

--print @updtinforce
END

GO
/****** Object:  StoredProcedure [dbo].[usp_Update_Product_List]    Script Date: 1/05/2022 3:55:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		AU\MHTSIQ
-- Create date: 07/07/2020
-- Description:This Procedure is to load the new product and product options available in EDW
--             to Reins_Treaty_Product Table. 
-- =============================================

CREATE PROCEDURE [dbo].[usp_Update_Product_List]
	-- Add the parameters for the stored procedure here
@Product_Option_code varchar(50) = null	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
		DECLARE @InsertRowCount Int = 0
		DECLARE @UpdateRowCount Int = 0
		DECLARE @DeleteRowCount int = 0


    -- Insert statements for procedure here
BEGIN TRY

		Begin Tran Load_Product_List

		--Load all the products and product options available in EDW 
		CREATE TABLE #temp_product_table(Product_System_Code varchar(50) NOT NULL , 
		Product_Code varchar(50) NOT NULL ,
		Product_Desc varchar(100)  NULL ,
		product_option_code varchar(50) NOT NULL ,
		product_option_desc varchar(100)  NULL ,
		product_opt_group_desc varchar(100) NULL ,
		Class_Of_Busn_Code varchar(50) NOT NULL ,
		class_of_busn_desc varchar(50)NOT NULL ,
		rankDup int NOT NULL)

		INSERT INTO #temp_product_table 
		select   p.Product_System_Code , 
		p.Product_Code,
		p.Product_Desc,
		po.product_option_code,
		po.product_option_desc,
		po.product_opt_group_desc,
		cb.Class_Of_Busn_Code,
		cb.class_of_busn_desc,
		rank() over (partition by p.product_code,po.product_option_code, cb.class_of_busn_code order by p.Premium_Type_Code) as 'RankDup'
		from [IDS_Core].[dbo].[EDW_Product] p
		join [IDS_Core].[dbo].[EDW_Product_Option] po on p.product_key = po.product_key
		join [IDS_Core].[dbo].[IDS_Class_Of_Busn] cb on  p.class_of_Busn_code = cb.class_of_busn_code
	join [IDS_Core].[dbo].[EDW_Risk_Opt] ro on  po.product_option_code = ro.risk_opt_code  and p.Product_System_Code = ro.Product_System_Code
		where p.product_system_code in ('CP' , 'FDA' , 'DS' ,'OR' , 'U2' , 'LS')

-- deduplicate and insert the new product and product options which are not available in Reins_Treaty_Product table
--- and mark them with unknown treaty i.e. treaty_id = -999

		MERGE [dbo].[Reins_Treaty_Product] AS t 
		USING (SELECT  Product_System_Code , 
		Product_Code,
		Product_Desc,
		product_option_code,
		product_option_desc,
		product_opt_group_desc,
		Class_Of_Busn_Code,
		class_of_busn_desc,
		rankDup  
		FROM #temp_product_table  WHERE rankDup = 1 ) AS s
ON s.product_code COLLATE SQL_Latin1_General_CP1_CI_AS = t.product_code COLLATE SQL_Latin1_General_CP1_CI_AS
AND s.product_system_code COLLATE SQL_Latin1_General_CP1_CI_AS = t.product_system_code COLLATE SQL_Latin1_General_CP1_CI_AS
AND s.product_option_code COLLATE SQL_Latin1_General_CP1_CI_AS = t.product_option_code COLLATE SQL_Latin1_General_CP1_CI_AS
AND s. Class_of_busn_desc COLLATE SQL_Latin1_General_CP1_CI_AS= t.Class_of_Business COLLATE SQL_Latin1_General_CP1_CI_AS

WHEN NOT MATCHED BY TARGET 
    THEN INSERT([Treaty_Id],[Product_System_Code],[Product_Code],[Product_Desc],[Class_Of_Business],
	[Product_Option_Code],[Product_Option_Desc],[Product_Option_Group_Desc],[Reins_Benefit_Type],[Reins_Benefit_Category],
[Created_Date_Time],[Created_By])
         VALUES (-999, s.Product_System_Code, s.Product_code, COALESCE (s.Product_desc , 'N/A'), s.class_of_busn_desc, 
		 s.product_option_code,COALESCE (s.product_option_desc , 'N/A'), COALESCE(s.product_opt_group_desc, 'N/A'), 'N/A' , 'N/A' , GETDATE(),ORIGINAL_LOGIN());	

		COMMIT TRAN Load_Product_List;
		SET @InsertRowCount  = @InsertRowCount + @@ROWCOUNT
		Print 'New records inserted into the Treaty Product Table ' + convert(varchar(50), @InsertRowCount)

			

		Select @InsertRowCount InsertRowCount, 
		   @UpdateRowCount UpdateRowCount, 
           @DeleteRowCount DeleteRowCount;
		END TRY


BEGIN CATCH
	
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN Load_Product_List;

			select @InsertRowCount InsertRowCount,@UpdateRowCount UpdateRowCount,@DeleteRowCount DeleteRowCount;

		THROW;

END CATCH

END
GO
